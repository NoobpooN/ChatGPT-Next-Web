{"version":3,"file":"edge-chunks/344.js","mappings":"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","sources":["webpack://_N_E/./app/api/auth.ts","webpack://_N_E/./app/api/common.ts","webpack://_N_E/./app/config/server.ts","webpack://_N_E/./app/constant.ts","webpack://_N_E/./app/utils/format.ts","webpack://_N_E/./app/utils/model.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport { getServerSideConfig } from \"../config/server\";\nimport md5 from \"spark-md5\";\nimport { ACCESS_CODE_PREFIX, ModelProvider } from \"../constant\";\n\nfunction getIP(req: NextRequest) {\n  let ip = req.ip ?? req.headers.get(\"x-real-ip\");\n  const forwardedFor = req.headers.get(\"x-forwarded-for\");\n\n  if (!ip && forwardedFor) {\n    ip = forwardedFor.split(\",\").at(0) ?? \"\";\n  }\n\n  return ip;\n}\n\nfunction parseApiKey(bearToken: string) {\n  const token = bearToken.trim().replaceAll(\"Bearer \", \"\").trim();\n  const isApiKey = !token.startsWith(ACCESS_CODE_PREFIX);\n\n  return {\n    accessCode: isApiKey ? \"\" : token.slice(ACCESS_CODE_PREFIX.length),\n    apiKey: isApiKey ? token : \"\",\n  };\n}\n\nexport function auth(req: NextRequest, modelProvider: ModelProvider) {\n  const authToken = req.headers.get(\"Authorization\") ?? \"\";\n\n  // check if it is openai api key or user token\n  const { accessCode, apiKey } = parseApiKey(authToken);\n\n  const hashedCode = md5.hash(accessCode ?? \"\").trim();\n\n  const serverConfig = getServerSideConfig();\n  console.log(\"[Auth] allowed hashed codes: \", [...serverConfig.codes]);\n  console.log(\"[Auth] got access code:\", accessCode);\n  console.log(\"[Auth] hashed access code:\", hashedCode);\n  console.log(\"[User IP] \", getIP(req));\n  console.log(\"[Time] \", new Date().toLocaleString());\n\n  if (serverConfig.needCode && !serverConfig.codes.has(hashedCode) && !apiKey) {\n    return {\n      error: true,\n      msg: !accessCode ? \"empty access code\" : \"wrong access code\",\n    };\n  }\n\n  if (serverConfig.hideUserApiKey && !!apiKey) {\n    return {\n      error: true,\n      msg: \"you are not allowed to access with your own api key\",\n    };\n  }\n\n  // if user does not provide an api key, inject system api key\n  if (!apiKey) {\n    const serverConfig = getServerSideConfig();\n\n    // const systemApiKey =\n    //   modelProvider === ModelProvider.GeminiPro\n    //     ? serverConfig.googleApiKey\n    //     : serverConfig.isAzure\n    //     ? serverConfig.azureApiKey\n    //     : serverConfig.apiKey;\n\n    let systemApiKey: string | undefined;\n\n    switch (modelProvider) {\n      case ModelProvider.GeminiPro:\n        systemApiKey = serverConfig.googleApiKey;\n        break;\n      case ModelProvider.Claude:\n        systemApiKey = serverConfig.anthropicApiKey;\n        break;\n      case ModelProvider.GPT:\n      default:\n        if (req.nextUrl.pathname.includes(\"azure/deployments\")) {\n          systemApiKey = serverConfig.azureApiKey;\n        } else {\n          systemApiKey = serverConfig.apiKey;\n        }\n    }\n\n    if (systemApiKey) {\n      console.log(\"[Auth] use system api key\");\n      req.headers.set(\"Authorization\", `Bearer ${systemApiKey}`);\n    } else {\n      console.log(\"[Auth] admin did not provide an api key\");\n    }\n  } else {\n    console.log(\"[Auth] use user api key\");\n  }\n\n  return {\n    error: false,\n  };\n}\n","import { NextRequest, NextResponse } from \"next/server\";\nimport { getServerSideConfig } from \"../config/server\";\nimport {\n  DEFAULT_MODELS,\n  OPENAI_BASE_URL,\n  GEMINI_BASE_URL,\n  ServiceProvider,\n} from \"../constant\";\nimport { isModelAvailableInServer } from \"../utils/model\";\n\nconst serverConfig = getServerSideConfig();\n\nexport async function requestOpenai(req: NextRequest) {\n  const controller = new AbortController();\n\n  const isAzure = req.nextUrl.pathname.includes(\"azure/deployments\");\n\n  var authValue,\n    authHeaderName = \"\";\n  if (isAzure) {\n    authValue =\n      req.headers\n        .get(\"Authorization\")\n        ?.trim()\n        .replaceAll(\"Bearer \", \"\")\n        .trim() ?? \"\";\n\n    authHeaderName = \"api-key\";\n  } else {\n    authValue = req.headers.get(\"Authorization\") ?? \"\";\n    authHeaderName = \"Authorization\";\n  }\n\n  let path = `${req.nextUrl.pathname}${req.nextUrl.search}`.replaceAll(\n    \"/api/openai/\",\n    \"\",\n  );\n\n  let baseUrl =\n    serverConfig.azureUrl || serverConfig.baseUrl || OPENAI_BASE_URL;\n\n  if (!baseUrl.startsWith(\"http\")) {\n    baseUrl = `https://${baseUrl}`;\n  }\n\n  if (baseUrl.endsWith(\"/\")) {\n    baseUrl = baseUrl.slice(0, -1);\n  }\n\n  console.log(\"[Proxy] \", path);\n  console.log(\"[Base Url]\", baseUrl);\n\n  const timeoutId = setTimeout(\n    () => {\n      controller.abort();\n    },\n    10 * 60 * 1000,\n  );\n\n  if (isAzure) {\n    const azureApiVersion =\n      req?.nextUrl?.searchParams?.get(\"api-version\") ||\n      serverConfig.azureApiVersion;\n    baseUrl = baseUrl.split(\"/deployments\").shift() as string;\n    path = `${req.nextUrl.pathname.replaceAll(\n      \"/api/azure/\",\n      \"\",\n    )}?api-version=${azureApiVersion}`;\n  }\n\n  const fetchUrl = `${baseUrl}/${path}`;\n  const fetchOptions: RequestInit = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Cache-Control\": \"no-store\",\n      [authHeaderName]: authValue,\n      ...(serverConfig.openaiOrgId && {\n        \"OpenAI-Organization\": serverConfig.openaiOrgId,\n      }),\n    },\n    method: req.method,\n    body: req.body,\n    // to fix #2485: https://stackoverflow.com/questions/55920957/cloudflare-worker-typeerror-one-time-use-body\n    redirect: \"manual\",\n    // @ts-ignore\n    duplex: \"half\",\n    signal: controller.signal,\n  };\n\n  // #1815 try to refuse gpt4 request\n  if (serverConfig.customModels && req.body) {\n    try {\n      const clonedBody = await req.text();\n      fetchOptions.body = clonedBody;\n\n      const jsonBody = JSON.parse(clonedBody) as { model?: string };\n\n      // not undefined and is false\n      if (\n        isModelAvailableInServer(\n          serverConfig.customModels,\n          jsonBody?.model as string,\n          ServiceProvider.OpenAI as string,\n        ) ||\n        isModelAvailableInServer(\n          serverConfig.customModels,\n          jsonBody?.model as string,\n          ServiceProvider.Azure as string,\n        )\n      ) {\n        return NextResponse.json(\n          {\n            error: true,\n            message: `you are not allowed to use ${jsonBody?.model} model`,\n          },\n          {\n            status: 403,\n          },\n        );\n      }\n    } catch (e) {\n      console.error(\"[OpenAI] gpt4 filter\", e);\n    }\n  }\n\n  try {\n    const res = await fetch(fetchUrl, fetchOptions);\n\n    // Extract the OpenAI-Organization header from the response\n    const openaiOrganizationHeader = res.headers.get(\"OpenAI-Organization\");\n\n    // Check if serverConfig.openaiOrgId is defined and not an empty string\n    if (serverConfig.openaiOrgId && serverConfig.openaiOrgId.trim() !== \"\") {\n      // If openaiOrganizationHeader is present, log it; otherwise, log that the header is not present\n      console.log(\"[Org ID]\", openaiOrganizationHeader);\n    } else {\n      console.log(\"[Org ID] is not set up.\");\n    }\n\n    // to prevent browser prompt for credentials\n    const newHeaders = new Headers(res.headers);\n    newHeaders.delete(\"www-authenticate\");\n    // to disable nginx buffering\n    newHeaders.set(\"X-Accel-Buffering\", \"no\");\n\n    // Conditionally delete the OpenAI-Organization header from the response if [Org ID] is undefined or empty (not setup in ENV)\n    // Also, this is to prevent the header from being sent to the client\n    if (!serverConfig.openaiOrgId || serverConfig.openaiOrgId.trim() === \"\") {\n      newHeaders.delete(\"OpenAI-Organization\");\n    }\n\n    // The latest version of the OpenAI API forced the content-encoding to be \"br\" in json response\n    // So if the streaming is disabled, we need to remove the content-encoding header\n    // Because Vercel uses gzip to compress the response, if we don't remove the content-encoding header\n    // The browser will try to decode the response with brotli and fail\n    newHeaders.delete(\"content-encoding\");\n\n    return new Response(res.body, {\n      status: res.status,\n      statusText: res.statusText,\n      headers: newHeaders,\n    });\n  } finally {\n    clearTimeout(timeoutId);\n  }\n}\n","import md5 from \"spark-md5\";\nimport { DEFAULT_MODELS } from \"../constant\";\n\ndeclare global {\n  namespace NodeJS {\n    interface ProcessEnv {\n      PROXY_URL?: string; // docker only\n\n      OPENAI_API_KEY?: string;\n      CODE?: string;\n\n      BASE_URL?: string;\n      OPENAI_ORG_ID?: string; // openai only\n\n      VERCEL?: string;\n      BUILD_MODE?: \"standalone\" | \"export\";\n      BUILD_APP?: string; // is building desktop app\n\n      HIDE_USER_API_KEY?: string; // disable user's api key input\n      DISABLE_GPT4?: string; // allow user to use gpt-4 or not\n      ENABLE_BALANCE_QUERY?: string; // allow user to query balance or not\n      DISABLE_FAST_LINK?: string; // disallow parse settings from url or not\n      CUSTOM_MODELS?: string; // to control custom models\n      DEFAULT_MODEL?: string; // to cnntrol default model in every new chat window\n\n      // azure only\n      AZURE_URL?: string; // https://{azure-url}/openai/deployments/{deploy-name}\n      AZURE_API_KEY?: string;\n      AZURE_API_VERSION?: string;\n\n      // google only\n      GOOGLE_API_KEY?: string;\n      GOOGLE_URL?: string;\n\n      // google tag manager\n      GTM_ID?: string;\n\n      // custom template for preprocessing user input\n      DEFAULT_INPUT_TEMPLATE?: string;\n    }\n  }\n}\n\nconst ACCESS_CODES = (function getAccessCodes(): Set<string> {\n  const code = process.env.CODE;\n\n  try {\n    const codes = (code?.split(\",\") ?? [])\n      .filter((v) => !!v)\n      .map((v) => md5.hash(v.trim()));\n    return new Set(codes);\n  } catch (e) {\n    return new Set();\n  }\n})();\n\nfunction getApiKey(keys?: string) {\n  const apiKeyEnvVar = keys ?? \"\";\n  const apiKeys = apiKeyEnvVar.split(\",\").map((v) => v.trim());\n  const randomIndex = Math.floor(Math.random() * apiKeys.length);\n  const apiKey = apiKeys[randomIndex];\n  if (apiKey) {\n    console.log(\n      `[Server Config] using ${randomIndex + 1} of ${\n        apiKeys.length\n      } api key - ${apiKey}`,\n    );\n  }\n\n  return apiKey;\n}\n\nexport const getServerSideConfig = () => {\n  if (typeof process === \"undefined\") {\n    throw Error(\n      \"[Server Config] you are importing a nodejs-only module outside of nodejs\",\n    );\n  }\n\n  const disableGPT4 = !!process.env.DISABLE_GPT4;\n  let customModels = process.env.CUSTOM_MODELS ?? \"\";\n  let defaultModel = process.env.DEFAULT_MODEL ?? \"\";\n\n  if (disableGPT4) {\n    if (customModels) customModels += \",\";\n    customModels += DEFAULT_MODELS.filter((m) => m.name.startsWith(\"gpt-4\"))\n      .map((m) => \"-\" + m.name)\n      .join(\",\");\n    if (defaultModel.startsWith(\"gpt-4\")) defaultModel = \"\";\n  }\n\n  const isAzure = !!process.env.AZURE_URL;\n  const isGoogle = !!process.env.GOOGLE_API_KEY;\n  const isAnthropic = !!process.env.ANTHROPIC_API_KEY;\n\n  // const apiKeyEnvVar = process.env.OPENAI_API_KEY ?? \"\";\n  // const apiKeys = apiKeyEnvVar.split(\",\").map((v) => v.trim());\n  // const randomIndex = Math.floor(Math.random() * apiKeys.length);\n  // const apiKey = apiKeys[randomIndex];\n  // console.log(\n  //   `[Server Config] using ${randomIndex + 1} of ${apiKeys.length} api key`,\n  // );\n\n  const allowedWebDevEndpoints = (\n    process.env.WHITE_WEBDEV_ENDPOINTS ?? \"\"\n  ).split(\",\");\n\n  return {\n    baseUrl: process.env.BASE_URL,\n    apiKey: getApiKey(process.env.OPENAI_API_KEY),\n    openaiOrgId: process.env.OPENAI_ORG_ID,\n\n    isAzure,\n    azureUrl: process.env.AZURE_URL,\n    azureApiKey: getApiKey(process.env.AZURE_API_KEY),\n    azureApiVersion: process.env.AZURE_API_VERSION,\n\n    isGoogle,\n    googleApiKey: getApiKey(process.env.GOOGLE_API_KEY),\n    googleUrl: process.env.GOOGLE_URL,\n\n    isAnthropic,\n    anthropicApiKey: getApiKey(process.env.ANTHROPIC_API_KEY),\n    anthropicApiVersion: process.env.ANTHROPIC_API_VERSION,\n    anthropicUrl: process.env.ANTHROPIC_URL,\n\n    gtmId: process.env.GTM_ID,\n\n    needCode: ACCESS_CODES.size > 0,\n    code: process.env.CODE,\n    codes: ACCESS_CODES,\n\n    proxyUrl: process.env.PROXY_URL,\n    isVercel: !!process.env.VERCEL,\n\n    hideUserApiKey: !!process.env.HIDE_USER_API_KEY,\n    disableGPT4,\n    hideBalanceQuery: !process.env.ENABLE_BALANCE_QUERY,\n    disableFastLink: !!process.env.DISABLE_FAST_LINK,\n    customModels,\n    defaultModel,\n    allowedWebDevEndpoints,\n  };\n};\n","export const OWNER = \"Yidadaa\";\nexport const REPO = \"ChatGPT-Next-Web\";\nexport const REPO_URL = `https://github.com/${OWNER}/${REPO}`;\nexport const ISSUE_URL = `https://github.com/${OWNER}/${REPO}/issues`;\nexport const UPDATE_URL = `${REPO_URL}#keep-updated`;\nexport const RELEASE_URL = `${REPO_URL}/releases`;\nexport const FETCH_COMMIT_URL = `https://api.github.com/repos/${OWNER}/${REPO}/commits?per_page=1`;\nexport const FETCH_TAG_URL = `https://api.github.com/repos/${OWNER}/${REPO}/tags?per_page=1`;\nexport const RUNTIME_CONFIG_DOM = \"danger-runtime-config\";\n\nexport const DEFAULT_API_HOST = \"https://api.nextchat.dev\";\nexport const OPENAI_BASE_URL = \"https://api.openai.com\";\nexport const ANTHROPIC_BASE_URL = \"https://api.anthropic.com\";\n\nexport const GEMINI_BASE_URL = \"https://generativelanguage.googleapis.com/\";\n\nexport enum Path {\n  Home = \"/\",\n  Chat = \"/chat\",\n  Settings = \"/settings\",\n  NewChat = \"/new-chat\",\n  Masks = \"/masks\",\n  Auth = \"/auth\",\n}\n\nexport enum ApiPath {\n  Cors = \"\",\n  Azure = \"/api/azure\",\n  OpenAI = \"/api/openai\",\n  Anthropic = \"/api/anthropic\",\n}\n\nexport enum SlotID {\n  AppBody = \"app-body\",\n  CustomModel = \"custom-model\",\n}\n\nexport enum FileName {\n  Masks = \"masks.json\",\n  Prompts = \"prompts.json\",\n}\n\nexport enum StoreKey {\n  Chat = \"chat-next-web-store\",\n  Access = \"access-control\",\n  Config = \"app-config\",\n  Mask = \"mask-store\",\n  Prompt = \"prompt-store\",\n  Update = \"chat-update\",\n  Sync = \"sync\",\n}\n\nexport const DEFAULT_SIDEBAR_WIDTH = 300;\nexport const MAX_SIDEBAR_WIDTH = 500;\nexport const MIN_SIDEBAR_WIDTH = 230;\nexport const NARROW_SIDEBAR_WIDTH = 100;\n\nexport const ACCESS_CODE_PREFIX = \"nk-\";\n\nexport const LAST_INPUT_KEY = \"last-input\";\nexport const UNFINISHED_INPUT = (id: string) => \"unfinished-input-\" + id;\n\nexport const STORAGE_KEY = \"chatgpt-next-web\";\n\nexport const REQUEST_TIMEOUT_MS = 60000;\n\nexport const EXPORT_MESSAGE_CLASS_NAME = \"export-markdown\";\n\nexport enum ServiceProvider {\n  OpenAI = \"OpenAI\",\n  Azure = \"Azure\",\n  Google = \"Google\",\n  Anthropic = \"Anthropic\",\n}\n\nexport enum ModelProvider {\n  GPT = \"GPT\",\n  GeminiPro = \"GeminiPro\",\n  Claude = \"Claude\",\n}\n\nexport const Anthropic = {\n  ChatPath: \"v1/messages\",\n  ChatPath1: \"v1/complete\",\n  ExampleEndpoint: \"https://api.anthropic.com\",\n  Vision: \"2023-06-01\",\n};\n\nexport const OpenaiPath = {\n  ChatPath: \"v1/chat/completions\",\n  UsagePath: \"dashboard/billing/usage\",\n  SubsPath: \"dashboard/billing/subscription\",\n  ListModelPath: \"v1/models\",\n};\n\nexport const Azure = {\n  ChatPath: (deployName: string, apiVersion: string) =>\n    `deployments/${deployName}/chat/completions?api-version=${apiVersion}`,\n  ExampleEndpoint: \"https://{resource-url}/openai/deployments/{deploy-id}\",\n};\n\nexport const Google = {\n  ExampleEndpoint: \"https://generativelanguage.googleapis.com/\",\n  ChatPath: (modelName: string) => `v1beta/models/${modelName}:generateContent`,\n};\n\nexport const DEFAULT_INPUT_TEMPLATE = `{{input}}`; // input / time / model / lang\n// export const DEFAULT_SYSTEM_TEMPLATE = `\n// You are ChatGPT, a large language model trained by {{ServiceProvider}}.\n// Knowledge cutoff: {{cutoff}}\n// Current model: {{model}}\n// Current time: {{time}}\n// Latex inline: $x^2$\n// Latex block: $$e=mc^2$$\n// `;\nexport const DEFAULT_SYSTEM_TEMPLATE = `\nYou are ChatGPT, a large language model trained by {{ServiceProvider}}.\nKnowledge cutoff: {{cutoff}}\nCurrent model: {{model}}\nCurrent time: {{time}}\nLatex inline: \\\\(x^2\\\\) \nLatex block: $$e=mc^2$$\n`;\n\nexport const SUMMARIZE_MODEL = \"gpt-3.5-turbo\";\nexport const GEMINI_SUMMARIZE_MODEL = \"gemini-pro\";\n\nexport const KnowledgeCutOffDate: Record<string, string> = {\n  default: \"2021-09\",\n  \"gpt-4-turbo\": \"2023-12\",\n  \"gpt-4-turbo-2024-04-09\": \"2023-12\",\n  \"gpt-4-turbo-preview\": \"2023-12\",\n  \"gpt-4o\": \"2023-10\",\n  \"gpt-4o-2024-05-13\": \"2023-10\",\n  \"gpt-4-vision-preview\": \"2023-04\",\n  // After improvements,\n  // it's now easier to add \"KnowledgeCutOffDate\" instead of stupid hardcoding it, as was done previously.\n  \"gemini-pro\": \"2023-12\",\n  \"gemini-pro-vision\": \"2023-12\",\n};\n\nconst openaiModels = [\n  \"gpt-3.5-turbo\",\n  \"gpt-3.5-turbo-1106\",\n  \"gpt-3.5-turbo-0125\",\n  \"gpt-4\",\n  \"gpt-4-0613\",\n  \"gpt-4-32k\",\n  \"gpt-4-32k-0613\",\n  \"gpt-4-turbo\",\n  \"gpt-4-turbo-preview\",\n  \"gpt-4o\",\n  \"gpt-4o-2024-05-13\",\n  \"gpt-4-vision-preview\",\n  \"gpt-4-turbo-2024-04-09\",\n  \"gpt-4-1106-preview\",\n];\n\nconst googleModels = [\n  \"gemini-1.0-pro\",\n  \"gemini-1.5-pro-latest\",\n  \"gemini-1.5-flash-latest\",\n  \"gemini-pro-vision\",\n];\n\nconst anthropicModels = [\n  \"claude-instant-1.2\",\n  \"claude-2.0\",\n  \"claude-2.1\",\n  \"claude-3-sonnet-20240229\",\n  \"claude-3-opus-20240229\",\n  \"claude-3-haiku-20240307\",\n  \"claude-3-5-sonnet-20240620\",\n];\n\nexport const DEFAULT_MODELS = [\n  ...openaiModels.map((name) => ({\n    name,\n    available: true,\n    provider: {\n      id: \"openai\",\n      providerName: \"OpenAI\",\n      providerType: \"openai\",\n    },\n  })),\n  ...openaiModels.map((name) => ({\n    name,\n    available: true,\n    provider: {\n      id: \"azure\",\n      providerName: \"Azure\",\n      providerType: \"azure\",\n    },\n  })),\n  ...googleModels.map((name) => ({\n    name,\n    available: true,\n    provider: {\n      id: \"google\",\n      providerName: \"Google\",\n      providerType: \"google\",\n    },\n  })),\n  ...anthropicModels.map((name) => ({\n    name,\n    available: true,\n    provider: {\n      id: \"anthropic\",\n      providerName: \"Anthropic\",\n      providerType: \"anthropic\",\n    },\n  })),\n] as const;\n\nexport const CHAT_PAGE_SIZE = 15;\nexport const MAX_RENDER_MSG_COUNT = 45;\n\n// some famous webdav endpoints\nexport const internalAllowedWebDavEndpoints = [\n  \"https://dav.jianguoyun.com/dav/\",\n  \"https://dav.dropdav.com/\",\n  \"https://dav.box.com/dav\",\n  \"https://nanao.teracloud.jp/dav/\",\n  \"https://bora.teracloud.jp/dav/\",\n  \"https://webdav.4shared.com/\",\n  \"https://dav.idrivesync.com\",\n  \"https://webdav.yandex.com\",\n  \"https://app.koofr.net/dav/Koofr\",\n];\n","export function prettyObject(msg: any) {\n  const obj = msg;\n  if (typeof msg !== \"string\") {\n    msg = JSON.stringify(msg, null, \"  \");\n  }\n  if (msg === \"{}\") {\n    return obj.toString();\n  }\n  if (msg.startsWith(\"```json\")) {\n    return msg;\n  }\n  return [\"```json\", msg, \"```\"].join(\"\\n\");\n}\n\nexport function* chunks(s: string, maxBytes = 1000 * 1000) {\n  const decoder = new TextDecoder(\"utf-8\");\n  let buf = new TextEncoder().encode(s);\n  while (buf.length) {\n    let i = buf.lastIndexOf(32, maxBytes + 1);\n    // If no space found, try forward search\n    if (i < 0) i = buf.indexOf(32, maxBytes);\n    // If there's no space at all, take all\n    if (i < 0) i = buf.length;\n    // This is a safe cut-off point; never half-way a multi-byte\n    yield decoder.decode(buf.slice(0, i));\n    buf = buf.slice(i + 1); // Skip space (if any)\n  }\n}\n","import { DEFAULT_MODELS } from \"../constant\";\nimport { LLMModel } from \"../client/api\";\n\nconst customProvider = (modelName: string) => ({\n  id: modelName,\n  providerName: \"Custom\",\n  providerType: \"custom\",\n});\n\nexport function collectModelTable(\n  models: readonly LLMModel[],\n  customModels: string,\n) {\n  const modelTable: Record<\n    string,\n    {\n      available: boolean;\n      name: string;\n      displayName: string;\n      provider?: LLMModel[\"provider\"]; // Marked as optional\n      isDefault?: boolean;\n    }\n  > = {};\n\n  // default models\n  models.forEach((m) => {\n    // using <modelName>@<providerId> as fullName\n    modelTable[`${m.name}@${m?.provider?.id}`] = {\n      ...m,\n      displayName: m.name, // 'provider' is copied over if it exists\n    };\n  });\n\n  // server custom models\n  customModels\n    .split(\",\")\n    .filter((v) => !!v && v.length > 0)\n    .forEach((m) => {\n      const available = !m.startsWith(\"-\");\n      const nameConfig =\n        m.startsWith(\"+\") || m.startsWith(\"-\") ? m.slice(1) : m;\n      const [name, displayName] = nameConfig.split(\"=\");\n\n      // enable or disable all models\n      if (name === \"all\") {\n        Object.values(modelTable).forEach(\n          (model) => (model.available = available),\n        );\n      } else {\n        // 1. find model by name(), and set available value\n        let count = 0;\n        for (const fullName in modelTable) {\n          if (fullName.split(\"@\").shift() == name) {\n            count += 1;\n            modelTable[fullName][\"available\"] = available;\n            if (displayName) {\n              modelTable[fullName][\"displayName\"] = displayName;\n            }\n          }\n        }\n        // 2. if model not exists, create new model with available value\n        if (count === 0) {\n          const provider = customProvider(name);\n          modelTable[`${name}@${provider?.id}`] = {\n            name,\n            displayName: displayName || name,\n            available,\n            provider, // Use optional chaining\n          };\n        }\n      }\n    });\n\n  return modelTable;\n}\n\nexport function collectModelTableWithDefaultModel(\n  models: readonly LLMModel[],\n  customModels: string,\n  defaultModel: string,\n) {\n  let modelTable = collectModelTable(models, customModels);\n  if (defaultModel && defaultModel !== \"\") {\n    modelTable[defaultModel] = {\n      ...modelTable[defaultModel],\n      name: defaultModel,\n      available: true,\n      isDefault: true,\n    };\n  }\n  return modelTable;\n}\n\n/**\n * Generate full model table.\n */\nexport function collectModels(\n  models: readonly LLMModel[],\n  customModels: string,\n) {\n  const modelTable = collectModelTable(models, customModels);\n  const allModels = Object.values(modelTable);\n\n  return allModels;\n}\n\nexport function collectModelsWithDefaultModel(\n  models: readonly LLMModel[],\n  customModels: string,\n  defaultModel: string,\n) {\n  const modelTable = collectModelTableWithDefaultModel(\n    models,\n    customModels,\n    defaultModel,\n  );\n  const allModels = Object.values(modelTable);\n  return allModels;\n}\n\nexport function isModelAvailableInServer(\n  customModels: string,\n  modelName: string,\n  providerName: string,\n) {\n  const fullName = `${modelName}@${providerName}`;\n  const modelTable = collectModelTable(DEFAULT_MODELS, customModels);\n  return modelTable[fullName]?.available === false;\n}\n"],"names":["getServerSideConfig","md5","ACCESS_CODE_PREFIX","ModelProvider","getIP","req","ip","headers","get","forwardedFor","split","at","parseApiKey","bearToken","token","trim","replaceAll","isApiKey","startsWith","accessCode","slice","length","apiKey","auth","modelProvider","authToken","hashedCode","hash","serverConfig","console","log","codes","Date","toLocaleString","needCode","has","error","msg","hideUserApiKey","systemApiKey","GeminiPro","googleApiKey","Claude","anthropicApiKey","GPT","nextUrl","pathname","includes","azureApiKey","set","NextResponse","OPENAI_BASE_URL","ServiceProvider","isModelAvailableInServer","requestOpenai","controller","AbortController","isAzure","authValue","authHeaderName","path","search","baseUrl","azureUrl","endsWith","timeoutId","setTimeout","abort","azureApiVersion","searchParams","shift","fetchUrl","fetchOptions","openaiOrgId","method","body","redirect","duplex","signal","customModels","clonedBody","text","jsonBody","JSON","parse","model","OpenAI","Azure","json","message","status","e","res","fetch","openaiOrganizationHeader","newHeaders","Headers","delete","Response","statusText","clearTimeout","DEFAULT_MODELS","ACCESS_CODES","getAccessCodes","code","process","env","CODE","filter","v","map","Set","getApiKey","keys","apiKeyEnvVar","apiKeys","randomIndex","Math","floor","random","Error","disableGPT4","DISABLE_GPT4","CUSTOM_MODELS","defaultModel","DEFAULT_MODEL","m","name","join","AZURE_URL","isGoogle","GOOGLE_API_KEY","isAnthropic","ANTHROPIC_API_KEY","allowedWebDevEndpoints","WHITE_WEBDEV_ENDPOINTS","BASE_URL","OPENAI_API_KEY","OPENAI_ORG_ID","AZURE_API_KEY","AZURE_API_VERSION","googleUrl","GOOGLE_URL","anthropicApiVersion","ANTHROPIC_API_VERSION","anthropicUrl","ANTHROPIC_URL","gtmId","GTM_ID","size","proxyUrl","PROXY_URL","isVercel","VERCEL","HIDE_USER_API_KEY","hideBalanceQuery","ENABLE_BALANCE_QUERY","disableFastLink","DISABLE_FAST_LINK","OWNER","REPO","REPO_URL","ISSUE_URL","UPDATE_URL","RELEASE_URL","FETCH_COMMIT_URL","FETCH_TAG_URL","RUNTIME_CONFIG_DOM","DEFAULT_API_HOST","ANTHROPIC_BASE_URL","GEMINI_BASE_URL","Path","ApiPath","SlotID","FileName","StoreKey","DEFAULT_SIDEBAR_WIDTH","MAX_SIDEBAR_WIDTH","MIN_SIDEBAR_WIDTH","NARROW_SIDEBAR_WIDTH","LAST_INPUT_KEY","UNFINISHED_INPUT","id","STORAGE_KEY","REQUEST_TIMEOUT_MS","EXPORT_MESSAGE_CLASS_NAME","Anthropic","ChatPath","ChatPath1","ExampleEndpoint","Vision","OpenaiPath","UsagePath","SubsPath","ListModelPath","deployName","apiVersion","Google","modelName","DEFAULT_INPUT_TEMPLATE","DEFAULT_SYSTEM_TEMPLATE","SUMMARIZE_MODEL","GEMINI_SUMMARIZE_MODEL","KnowledgeCutOffDate","default","openaiModels","googleModels","anthropicModels","available","provider","providerName","providerType","CHAT_PAGE_SIZE","MAX_RENDER_MSG_COUNT","internalAllowedWebDavEndpoints","prettyObject","obj","stringify","toString","chunks","s","maxBytes","decoder","TextDecoder","buf","TextEncoder","encode","i","lastIndexOf","indexOf","decode","customProvider","collectModelTable","models","modelTable","forEach","displayName","nameConfig","Object","values","count","fullName","collectModelTableWithDefaultModel","isDefault","collectModels","allModels","collectModelsWithDefaultModel"],"sourceRoot":""}