{"version":3,"file":"app/api/anthropic/[...path]/route.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./app/api/anthropic/[...path]/route.ts","webpack://_N_E/./app/api/anthropic/[...path]/route.ts?3da4","webpack://_N_E/?1ede","webpack://_N_E/./app/api/auth.ts","webpack://_N_E/./app/config/server.ts","webpack://_N_E/./app/constant.ts","webpack://_N_E/./app/utils/format.ts","webpack://_N_E/./app/utils/model.ts","webpack://_N_E/<anon>"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { getServerSideConfig } from \"@/app/config/server\";\nimport {\n  ANTHROPIC_BASE_URL,\n  Anthropic,\n  ApiPath,\n  DEFAULT_MODELS,\n  ModelProvider,\n} from \"@/app/constant\";\nimport { prettyObject } from \"@/app/utils/format\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { auth } from \"../../auth\";\nimport { collectModelTable } from \"@/app/utils/model\";\n\nconst ALLOWD_PATH = new Set([Anthropic.ChatPath, Anthropic.ChatPath1]);\n\nasync function handle(\n  req: NextRequest,\n  { params }: { params: { path: string[] } },\n) {\n  console.log(\"[Anthropic Route] params \", params);\n\n  if (req.method === \"OPTIONS\") {\n    return NextResponse.json({ body: \"OK\" }, { status: 200 });\n  }\n\n  const subpath = params.path.join(\"/\");\n\n  if (!ALLOWD_PATH.has(subpath)) {\n    console.log(\"[Anthropic Route] forbidden path \", subpath);\n    return NextResponse.json(\n      {\n        error: true,\n        msg: \"you are not allowed to request \" + subpath,\n      },\n      {\n        status: 403,\n      },\n    );\n  }\n\n  const authResult = auth(req, ModelProvider.Claude);\n  if (authResult.error) {\n    return NextResponse.json(authResult, {\n      status: 401,\n    });\n  }\n\n  try {\n    const response = await request(req);\n    return response;\n  } catch (e) {\n    console.error(\"[Anthropic] \", e);\n    return NextResponse.json(prettyObject(e));\n  }\n}\n\nexport const GET = handle;\nexport const POST = handle;\n\nexport const runtime = \"edge\";\nexport const preferredRegion = [\n  \"arn1\",\n  \"bom1\",\n  \"cdg1\",\n  \"cle1\",\n  \"cpt1\",\n  \"dub1\",\n  \"fra1\",\n  \"gru1\",\n  \"hnd1\",\n  \"iad1\",\n  \"icn1\",\n  \"kix1\",\n  \"lhr1\",\n  \"pdx1\",\n  \"sfo1\",\n  \"sin1\",\n  \"syd1\",\n];\n\nconst serverConfig = getServerSideConfig();\n\nasync function request(req: NextRequest) {\n  const controller = new AbortController();\n\n  let authHeaderName = \"x-api-key\";\n  let authValue =\n    req.headers.get(authHeaderName) ||\n    req.headers.get(\"Authorization\")?.replaceAll(\"Bearer \", \"\").trim() ||\n    serverConfig.anthropicApiKey ||\n    \"\";\n\n  let path = `${req.nextUrl.pathname}`.replaceAll(ApiPath.Anthropic, \"\");\n\n  let baseUrl =\n    serverConfig.anthropicUrl || serverConfig.baseUrl || ANTHROPIC_BASE_URL;\n\n  if (!baseUrl.startsWith(\"http\")) {\n    baseUrl = `https://${baseUrl}`;\n  }\n\n  if (baseUrl.endsWith(\"/\")) {\n    baseUrl = baseUrl.slice(0, -1);\n  }\n\n  console.log(\"[Proxy] \", path);\n  console.log(\"[Base Url]\", baseUrl);\n\n  const timeoutId = setTimeout(\n    () => {\n      controller.abort();\n    },\n    10 * 60 * 1000,\n  );\n\n  const fetchUrl = `${baseUrl}${path}`;\n\n  const fetchOptions: RequestInit = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Cache-Control\": \"no-store\",\n      [authHeaderName]: authValue,\n      \"anthropic-version\":\n        req.headers.get(\"anthropic-version\") ||\n        serverConfig.anthropicApiVersion ||\n        Anthropic.Vision,\n    },\n    method: req.method,\n    body: req.body,\n    redirect: \"manual\",\n    // @ts-ignore\n    duplex: \"half\",\n    signal: controller.signal,\n  };\n\n  // #1815 try to refuse some request to some models\n  if (serverConfig.customModels && req.body) {\n    try {\n      const modelTable = collectModelTable(\n        DEFAULT_MODELS,\n        serverConfig.customModels,\n      );\n      const clonedBody = await req.text();\n      fetchOptions.body = clonedBody;\n\n      const jsonBody = JSON.parse(clonedBody) as { model?: string };\n\n      // not undefined and is false\n      if (modelTable[jsonBody?.model ?? \"\"].available === false) {\n        return NextResponse.json(\n          {\n            error: true,\n            message: `you are not allowed to use ${jsonBody?.model} model`,\n          },\n          {\n            status: 403,\n          },\n        );\n      }\n    } catch (e) {\n      console.error(`[Anthropic] filter`, e);\n    }\n  }\n  console.log(\"[Anthropic request]\", fetchOptions.headers, req.method);\n  try {\n    const res = await fetch(fetchUrl, fetchOptions);\n\n    console.log(\n      \"[Anthropic response]\",\n      res.status,\n      \"   \",\n      res.headers,\n      res.url,\n    );\n    // to prevent browser prompt for credentials\n    const newHeaders = new Headers(res.headers);\n    newHeaders.delete(\"www-authenticate\");\n    // to disable nginx buffering\n    newHeaders.set(\"X-Accel-Buffering\", \"no\");\n\n    return new Response(res.body, {\n      status: res.status,\n      statusText: res.statusText,\n      headers: newHeaders,\n    });\n  } finally {\n    clearTimeout(timeoutId);\n  }\n}\n","import { AppRouteRouteModule } from \"next/dist/server/future/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/Volumes/D/github/ChatGPT-Next-Web/app/api/anthropic/[...path]/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/anthropic/[...path]/route\",\n        pathname: \"/api/anthropic/[...path]\",\n        filename: \"route\",\n        bundlePath: \"app/api/anthropic/[...path]/route\"\n    },\n    resolvedPagePath: \"/Volumes/D/github/ChatGPT-Next-Web/app/api/anthropic/[...path]/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/anthropic/[...path]/route\";\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\nexport { routeModule, requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout, originalPathname, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","import { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Fanthropic%2F%5B...path%5D%2Froute&page=%2Fapi%2Fanthropic%2F%5B...path%5D%2Froute&pagePath=private-next-app-dir%2Fapi%2Fanthropic%2F%5B...path%5D%2Froute.ts&appDir=%2FVolumes%2FD%2Fgithub%2FChatGPT-Next-Web%2Fapp&appPaths=%2Fapi%2Fanthropic%2F%5B...path%5D%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=arn1&preferredRegion=bom1&preferredRegion=cdg1&preferredRegion=cle1&preferredRegion=cpt1&preferredRegion=dub1&preferredRegion=fra1&preferredRegion=gru1&preferredRegion=hnd1&preferredRegion=iad1&preferredRegion=icn1&preferredRegion=kix1&preferredRegion=lhr1&preferredRegion=pdx1&preferredRegion=sfo1&preferredRegion=sin1&preferredRegion=syd1&middlewareConfig=e30%3D!private-next-app-dir/api/anthropic/[...path]/route.ts?__next_edge_ssr_entry__\";\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule);\n\n//# sourceMappingURL=edge-app-route.js.map","import { NextRequest } from \"next/server\";\nimport { getServerSideConfig } from \"../config/server\";\nimport md5 from \"spark-md5\";\nimport { ACCESS_CODE_PREFIX, ModelProvider } from \"../constant\";\n\nfunction getIP(req: NextRequest) {\n  let ip = req.ip ?? req.headers.get(\"x-real-ip\");\n  const forwardedFor = req.headers.get(\"x-forwarded-for\");\n\n  if (!ip && forwardedFor) {\n    ip = forwardedFor.split(\",\").at(0) ?? \"\";\n  }\n\n  return ip;\n}\n\nfunction parseApiKey(bearToken: string) {\n  const token = bearToken.trim().replaceAll(\"Bearer \", \"\").trim();\n  const isApiKey = !token.startsWith(ACCESS_CODE_PREFIX);\n\n  return {\n    accessCode: isApiKey ? \"\" : token.slice(ACCESS_CODE_PREFIX.length),\n    apiKey: isApiKey ? token : \"\",\n  };\n}\n\nexport function auth(req: NextRequest, modelProvider: ModelProvider) {\n  const authToken = req.headers.get(\"Authorization\") ?? \"\";\n\n  // check if it is openai api key or user token\n  const { accessCode, apiKey } = parseApiKey(authToken);\n\n  const hashedCode = md5.hash(accessCode ?? \"\").trim();\n\n  const serverConfig = getServerSideConfig();\n  console.log(\"[Auth] allowed hashed codes: \", [...serverConfig.codes]);\n  console.log(\"[Auth] got access code:\", accessCode);\n  console.log(\"[Auth] hashed access code:\", hashedCode);\n  console.log(\"[User IP] \", getIP(req));\n  console.log(\"[Time] \", new Date().toLocaleString());\n\n  if (serverConfig.needCode && !serverConfig.codes.has(hashedCode) && !apiKey) {\n    return {\n      error: true,\n      msg: !accessCode ? \"empty access code\" : \"wrong access code\",\n    };\n  }\n\n  if (serverConfig.hideUserApiKey && !!apiKey) {\n    return {\n      error: true,\n      msg: \"you are not allowed to access with your own api key\",\n    };\n  }\n\n  // if user does not provide an api key, inject system api key\n  if (!apiKey) {\n    const serverConfig = getServerSideConfig();\n\n    // const systemApiKey =\n    //   modelProvider === ModelProvider.GeminiPro\n    //     ? serverConfig.googleApiKey\n    //     : serverConfig.isAzure\n    //     ? serverConfig.azureApiKey\n    //     : serverConfig.apiKey;\n\n    let systemApiKey: string | undefined;\n\n    switch (modelProvider) {\n      case ModelProvider.GeminiPro:\n        systemApiKey = serverConfig.googleApiKey;\n        break;\n      case ModelProvider.Claude:\n        systemApiKey = serverConfig.anthropicApiKey;\n        break;\n      case ModelProvider.GPT:\n      default:\n        if (serverConfig.isAzure) {\n          systemApiKey = serverConfig.azureApiKey;\n        } else {\n          systemApiKey = serverConfig.apiKey;\n        }\n    }\n\n    if (systemApiKey) {\n      console.log(\"[Auth] use system api key\");\n      req.headers.set(\"Authorization\", `Bearer ${systemApiKey}`);\n    } else {\n      console.log(\"[Auth] admin did not provide an api key\");\n    }\n  } else {\n    console.log(\"[Auth] use user api key\");\n  }\n\n  return {\n    error: false,\n  };\n}\n","import md5 from \"spark-md5\";\nimport { DEFAULT_MODELS } from \"../constant\";\n\ndeclare global {\n  namespace NodeJS {\n    interface ProcessEnv {\n      PROXY_URL?: string; // docker only\n\n      OPENAI_API_KEY?: string;\n      CODE?: string;\n\n      BASE_URL?: string;\n      OPENAI_ORG_ID?: string; // openai only\n\n      VERCEL?: string;\n      BUILD_MODE?: \"standalone\" | \"export\";\n      BUILD_APP?: string; // is building desktop app\n\n      HIDE_USER_API_KEY?: string; // disable user's api key input\n      DISABLE_GPT4?: string; // allow user to use gpt-4 or not\n      ENABLE_BALANCE_QUERY?: string; // allow user to query balance or not\n      DISABLE_FAST_LINK?: string; // disallow parse settings from url or not\n      CUSTOM_MODELS?: string; // to control custom models\n      DEFAULT_MODEL?: string; // to cnntrol default model in every new chat window\n\n      // azure only\n      AZURE_URL?: string; // https://{azure-url}/openai/deployments/{deploy-name}\n      AZURE_API_KEY?: string;\n      AZURE_API_VERSION?: string;\n\n      // google only\n      GOOGLE_API_KEY?: string;\n      GOOGLE_URL?: string;\n\n      // google tag manager\n      GTM_ID?: string;\n\n      // custom template for preprocessing user input\n      DEFAULT_INPUT_TEMPLATE?: string;\n    }\n  }\n}\n\nconst ACCESS_CODES = (function getAccessCodes(): Set<string> {\n  const code = process.env.CODE;\n\n  try {\n    const codes = (code?.split(\",\") ?? [])\n      .filter((v) => !!v)\n      .map((v) => md5.hash(v.trim()));\n    return new Set(codes);\n  } catch (e) {\n    return new Set();\n  }\n})();\n\nfunction getApiKey(keys?: string) {\n  const apiKeyEnvVar = keys ?? \"\";\n  const apiKeys = apiKeyEnvVar.split(\",\").map((v) => v.trim());\n  const randomIndex = Math.floor(Math.random() * apiKeys.length);\n  const apiKey = apiKeys[randomIndex];\n  if (apiKey) {\n    console.log(\n      `[Server Config] using ${randomIndex + 1} of ${\n        apiKeys.length\n      } api key - ${apiKey}`,\n    );\n  }\n\n  return apiKey;\n}\n\nexport const getServerSideConfig = () => {\n  if (typeof process === \"undefined\") {\n    throw Error(\n      \"[Server Config] you are importing a nodejs-only module outside of nodejs\",\n    );\n  }\n\n  const disableGPT4 = !!process.env.DISABLE_GPT4;\n  let customModels = process.env.CUSTOM_MODELS ?? \"\";\n  let defaultModel = process.env.DEFAULT_MODEL ?? \"\";\n\n  if (disableGPT4) {\n    if (customModels) customModels += \",\";\n    customModels += DEFAULT_MODELS.filter((m) => m.name.startsWith(\"gpt-4\"))\n      .map((m) => \"-\" + m.name)\n      .join(\",\");\n    if (defaultModel.startsWith(\"gpt-4\")) defaultModel = \"\";\n  }\n\n  const isAzure = !!process.env.AZURE_URL;\n  const isGoogle = !!process.env.GOOGLE_API_KEY;\n  const isAnthropic = !!process.env.ANTHROPIC_API_KEY;\n\n  // const apiKeyEnvVar = process.env.OPENAI_API_KEY ?? \"\";\n  // const apiKeys = apiKeyEnvVar.split(\",\").map((v) => v.trim());\n  // const randomIndex = Math.floor(Math.random() * apiKeys.length);\n  // const apiKey = apiKeys[randomIndex];\n  // console.log(\n  //   `[Server Config] using ${randomIndex + 1} of ${apiKeys.length} api key`,\n  // );\n\n  const allowedWebDevEndpoints = (\n    process.env.WHITE_WEBDEV_ENDPOINTS ?? \"\"\n  ).split(\",\");\n\n  return {\n    baseUrl: process.env.BASE_URL,\n    apiKey: getApiKey(process.env.OPENAI_API_KEY),\n    openaiOrgId: process.env.OPENAI_ORG_ID,\n\n    isAzure,\n    azureUrl: process.env.AZURE_URL,\n    azureApiKey: getApiKey(process.env.AZURE_API_KEY),\n    azureApiVersion: process.env.AZURE_API_VERSION,\n\n    isGoogle,\n    googleApiKey: getApiKey(process.env.GOOGLE_API_KEY),\n    googleUrl: process.env.GOOGLE_URL,\n\n    isAnthropic,\n    anthropicApiKey: getApiKey(process.env.ANTHROPIC_API_KEY),\n    anthropicApiVersion: process.env.ANTHROPIC_API_VERSION,\n    anthropicUrl: process.env.ANTHROPIC_URL,\n\n    gtmId: process.env.GTM_ID,\n\n    needCode: ACCESS_CODES.size > 0,\n    code: process.env.CODE,\n    codes: ACCESS_CODES,\n\n    proxyUrl: process.env.PROXY_URL,\n    isVercel: !!process.env.VERCEL,\n\n    hideUserApiKey: !!process.env.HIDE_USER_API_KEY,\n    disableGPT4,\n    hideBalanceQuery: !process.env.ENABLE_BALANCE_QUERY,\n    disableFastLink: !!process.env.DISABLE_FAST_LINK,\n    customModels,\n    defaultModel,\n    allowedWebDevEndpoints,\n  };\n};\n","export const OWNER = \"Yidadaa\";\nexport const REPO = \"ChatGPT-Next-Web\";\nexport const REPO_URL = `https://github.com/${OWNER}/${REPO}`;\nexport const ISSUE_URL = `https://github.com/${OWNER}/${REPO}/issues`;\nexport const UPDATE_URL = `${REPO_URL}#keep-updated`;\nexport const RELEASE_URL = `${REPO_URL}/releases`;\nexport const FETCH_COMMIT_URL = `https://api.github.com/repos/${OWNER}/${REPO}/commits?per_page=1`;\nexport const FETCH_TAG_URL = `https://api.github.com/repos/${OWNER}/${REPO}/tags?per_page=1`;\nexport const RUNTIME_CONFIG_DOM = \"danger-runtime-config\";\n\nexport const DEFAULT_API_HOST = \"https://api.nextchat.dev\";\nexport const OPENAI_BASE_URL = \"https://api.openai.com\";\nexport const ANTHROPIC_BASE_URL = \"https://api.anthropic.com\";\n\nexport const GEMINI_BASE_URL = \"https://generativelanguage.googleapis.com/\";\n\nexport enum Path {\n  Home = \"/\",\n  Chat = \"/chat\",\n  Settings = \"/settings\",\n  NewChat = \"/new-chat\",\n  Masks = \"/masks\",\n  Auth = \"/auth\",\n}\n\nexport enum ApiPath {\n  Cors = \"\",\n  OpenAI = \"/api/openai\",\n  Anthropic = \"/api/anthropic\",\n}\n\nexport enum SlotID {\n  AppBody = \"app-body\",\n  CustomModel = \"custom-model\",\n}\n\nexport enum FileName {\n  Masks = \"masks.json\",\n  Prompts = \"prompts.json\",\n}\n\nexport enum StoreKey {\n  Chat = \"chat-next-web-store\",\n  Access = \"access-control\",\n  Config = \"app-config\",\n  Mask = \"mask-store\",\n  Prompt = \"prompt-store\",\n  Update = \"chat-update\",\n  Sync = \"sync\",\n}\n\nexport const DEFAULT_SIDEBAR_WIDTH = 300;\nexport const MAX_SIDEBAR_WIDTH = 500;\nexport const MIN_SIDEBAR_WIDTH = 230;\nexport const NARROW_SIDEBAR_WIDTH = 100;\n\nexport const ACCESS_CODE_PREFIX = \"nk-\";\n\nexport const LAST_INPUT_KEY = \"last-input\";\nexport const UNFINISHED_INPUT = (id: string) => \"unfinished-input-\" + id;\n\nexport const STORAGE_KEY = \"chatgpt-next-web\";\n\nexport const REQUEST_TIMEOUT_MS = 60000;\n\nexport const EXPORT_MESSAGE_CLASS_NAME = \"export-markdown\";\n\nexport enum ServiceProvider {\n  OpenAI = \"OpenAI\",\n  Azure = \"Azure\",\n  Google = \"Google\",\n  Anthropic = \"Anthropic\",\n}\n\nexport enum ModelProvider {\n  GPT = \"GPT\",\n  GeminiPro = \"GeminiPro\",\n  Claude = \"Claude\",\n}\n\nexport const Anthropic = {\n  ChatPath: \"v1/messages\",\n  ChatPath1: \"v1/complete\",\n  ExampleEndpoint: \"https://api.anthropic.com\",\n  Vision: \"2023-06-01\",\n};\n\nexport const OpenaiPath = {\n  ChatPath: \"v1/chat/completions\",\n  UsagePath: \"dashboard/billing/usage\",\n  SubsPath: \"dashboard/billing/subscription\",\n  ListModelPath: \"v1/models\",\n};\n\nexport const Azure = {\n  ExampleEndpoint: \"https://{resource-url}/openai/deployments/{deploy-id}\",\n};\n\nexport const Google = {\n  ExampleEndpoint: \"https://generativelanguage.googleapis.com/\",\n  ChatPath: (modelName: string) => `v1beta/models/${modelName}:generateContent`,\n};\n\nexport const DEFAULT_INPUT_TEMPLATE = `{{input}}`; // input / time / model / lang\n// export const DEFAULT_SYSTEM_TEMPLATE = `\n// You are ChatGPT, a large language model trained by {{ServiceProvider}}.\n// Knowledge cutoff: {{cutoff}}\n// Current model: {{model}}\n// Current time: {{time}}\n// Latex inline: $x^2$\n// Latex block: $$e=mc^2$$\n// `;\nexport const DEFAULT_SYSTEM_TEMPLATE = `\nYou are ChatGPT, a large language model trained by {{ServiceProvider}}.\nKnowledge cutoff: {{cutoff}}\nCurrent model: {{model}}\nCurrent time: {{time}}\nLatex inline: \\\\(x^2\\\\) \nLatex block: $$e=mc^2$$\n`;\n\nexport const SUMMARIZE_MODEL = \"gpt-3.5-turbo\";\nexport const GEMINI_SUMMARIZE_MODEL = \"gemini-pro\";\n\nexport const KnowledgeCutOffDate: Record<string, string> = {\n  default: \"2021-09\",\n  \"gpt-4-turbo\": \"2023-12\",\n  \"gpt-4-turbo-2024-04-09\": \"2023-12\",\n  \"gpt-4-turbo-preview\": \"2023-12\",\n  \"gpt-4o\": \"2023-10\",\n  \"gpt-4o-2024-05-13\": \"2023-10\",\n  \"gpt-4-vision-preview\": \"2023-04\",\n  // After improvements,\n  // it's now easier to add \"KnowledgeCutOffDate\" instead of stupid hardcoding it, as was done previously.\n  \"gemini-pro\": \"2023-12\",\n  \"gemini-pro-vision\": \"2023-12\",\n};\n\nconst openaiModels = [\n  \"gpt-3.5-turbo\",\n  \"gpt-3.5-turbo-1106\",\n  \"gpt-3.5-turbo-0125\",\n  \"gpt-4\",\n  \"gpt-4-0613\",\n  \"gpt-4-32k\",\n  \"gpt-4-32k-0613\",\n  \"gpt-4-turbo\",\n  \"gpt-4-turbo-preview\",\n  \"gpt-4o\",\n  \"gpt-4o-2024-05-13\",\n  \"gpt-4-vision-preview\",\n  \"gpt-4-turbo-2024-04-09\",\n];\n\nconst googleModels = [\n  \"gemini-1.0-pro\",\n  \"gemini-1.5-pro-latest\",\n  \"gemini-1.5-flash-latest\",\n  \"gemini-pro-vision\",\n];\n\nconst anthropicModels = [\n  \"claude-instant-1.2\",\n  \"claude-2.0\",\n  \"claude-2.1\",\n  \"claude-3-sonnet-20240229\",\n  \"claude-3-opus-20240229\",\n  \"claude-3-haiku-20240307\",\n];\n\nexport const DEFAULT_MODELS = [\n  ...openaiModels.map((name) => ({\n    name,\n    available: true,\n    provider: {\n      id: \"openai\",\n      providerName: \"OpenAI\",\n      providerType: \"openai\",\n    },\n  })),\n  ...googleModels.map((name) => ({\n    name,\n    available: true,\n    provider: {\n      id: \"google\",\n      providerName: \"Google\",\n      providerType: \"google\",\n    },\n  })),\n  ...anthropicModels.map((name) => ({\n    name,\n    available: true,\n    provider: {\n      id: \"anthropic\",\n      providerName: \"Anthropic\",\n      providerType: \"anthropic\",\n    },\n  })),\n] as const;\n\nexport const CHAT_PAGE_SIZE = 15;\nexport const MAX_RENDER_MSG_COUNT = 45;\n\n// some famous webdav endpoints\nexport const internalAllowedWebDavEndpoints = [\n  \"https://dav.jianguoyun.com/dav/\",\n  \"https://dav.dropdav.com/\",\n  \"https://dav.box.com/dav\",\n  \"https://nanao.teracloud.jp/dav/\",\n  \"https://bora.teracloud.jp/dav/\",\n  \"https://webdav.4shared.com/\",\n  \"https://dav.idrivesync.com\",\n  \"https://webdav.yandex.com\",\n  \"https://app.koofr.net/dav/Koofr\",\n];\n","export function prettyObject(msg: any) {\n  const obj = msg;\n  if (typeof msg !== \"string\") {\n    msg = JSON.stringify(msg, null, \"  \");\n  }\n  if (msg === \"{}\") {\n    return obj.toString();\n  }\n  if (msg.startsWith(\"```json\")) {\n    return msg;\n  }\n  return [\"```json\", msg, \"```\"].join(\"\\n\");\n}\n\nexport function* chunks(s: string, maxBytes = 1000 * 1000) {\n  const decoder = new TextDecoder(\"utf-8\");\n  let buf = new TextEncoder().encode(s);\n  while (buf.length) {\n    let i = buf.lastIndexOf(32, maxBytes + 1);\n    // If no space found, try forward search\n    if (i < 0) i = buf.indexOf(32, maxBytes);\n    // If there's no space at all, take all\n    if (i < 0) i = buf.length;\n    // This is a safe cut-off point; never half-way a multi-byte\n    yield decoder.decode(buf.slice(0, i));\n    buf = buf.slice(i + 1); // Skip space (if any)\n  }\n}\n","import { LLMModel } from \"../client/api\";\n\nconst customProvider = (modelName: string) => ({\n  id: modelName,\n  providerName: \"\",\n  providerType: \"custom\",\n});\n\nexport function collectModelTable(\n  models: readonly LLMModel[],\n  customModels: string,\n) {\n  const modelTable: Record<\n    string,\n    {\n      available: boolean;\n      name: string;\n      displayName: string;\n      provider?: LLMModel[\"provider\"]; // Marked as optional\n      isDefault?: boolean;\n    }\n  > = {};\n\n  // default models\n  models.forEach((m) => {\n    modelTable[m.name] = {\n      ...m,\n      displayName: m.name, // 'provider' is copied over if it exists\n    };\n  });\n\n  // server custom models\n  customModels\n    .split(\",\")\n    .filter((v) => !!v && v.length > 0)\n    .forEach((m) => {\n      const available = !m.startsWith(\"-\");\n      const nameConfig =\n        m.startsWith(\"+\") || m.startsWith(\"-\") ? m.slice(1) : m;\n      const [name, displayName] = nameConfig.split(\"=\");\n\n      // enable or disable all models\n      if (name === \"all\") {\n        Object.values(modelTable).forEach(\n          (model) => (model.available = available),\n        );\n      } else {\n        modelTable[name] = {\n          name,\n          displayName: displayName || name,\n          available,\n          provider: modelTable[name]?.provider ?? customProvider(name), // Use optional chaining\n        };\n      }\n    });\n\n  return modelTable;\n}\n\nexport function collectModelTableWithDefaultModel(\n  models: readonly LLMModel[],\n  customModels: string,\n  defaultModel: string,\n) {\n  let modelTable = collectModelTable(models, customModels);\n  if (defaultModel && defaultModel !== \"\") {\n    modelTable[defaultModel] = {\n      ...modelTable[defaultModel],\n      name: defaultModel,\n      available: true,\n      isDefault: true,\n    };\n  }\n  return modelTable;\n}\n\n/**\n * Generate full model table.\n */\nexport function collectModels(\n  models: readonly LLMModel[],\n  customModels: string,\n) {\n  const modelTable = collectModelTable(models, customModels);\n  const allModels = Object.values(modelTable);\n\n  return allModels;\n}\n\nexport function collectModelsWithDefaultModel(\n  models: readonly LLMModel[],\n  customModels: string,\n  defaultModel: string,\n) {\n  const modelTable = collectModelTableWithDefaultModel(\n    models,\n    customModels,\n    defaultModel,\n  );\n  const allModels = Object.values(modelTable);\n  return allModels;\n}\n"],"names":["module","exports","require","ALLOWD_PATH","Set","Anthropic","ChatPath","ChatPath1","handle","req","params","console","log","method","NextResponse","json","body","status","subpath","path","join","has","error","msg","authResult","auth","ModelProvider","Claude","request","e","prettyObject","GET","POST","runtime","preferredRegion","serverConfig","getServerSideConfig","controller","AbortController","authHeaderName","authValue","headers","get","replaceAll","trim","anthropicApiKey","nextUrl","pathname","ApiPath","baseUrl","anthropicUrl","ANTHROPIC_BASE_URL","startsWith","endsWith","slice","timeoutId","setTimeout","abort","fetchUrl","fetchOptions","anthropicApiVersion","Vision","redirect","duplex","signal","customModels","modelTable","collectModelTable","DEFAULT_MODELS","clonedBody","text","jsonBody","JSON","parse","model","available","message","res","fetch","url","newHeaders","Headers","delete","set","Response","statusText","clearTimeout","routeModule","module_compiled","AppRouteRouteModule","definition","kind","route_kind","x","APP_ROUTE","page","filename","bundlePath","resolvedPagePath","nextConfigOutput","userland","route_namespaceObject","requestAsyncStorage","staticGenerationAsyncStorage","serverHooks","headerHooks","staticGenerationBailout","originalPathname","patchFetch","patch_fetch","XH","ComponentMod","route_next_edge_ssr_entry_namespaceObject","next_edge_app_route_loaderabsolutePagePath_private_next_app_dir_2Fapi_2Fanthropic_2F_5B_path_5D_2Froute_ts_page_2Fapi_2Fanthropic_2F_5B_path_5D_2Froute_appDirLoader_bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGYW50aHJvcGljJTJGJTVCLi4ucGF0aCU1RCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGYW50aHJvcGljJTJGJTVCLi4ucGF0aCU1RCUyRnJvdXRlJnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYW50aHJvcGljJTJGJTVCLi4ucGF0aCU1RCUyRnJvdXRlLnRzJmFwcERpcj0lMkZWb2x1bWVzJTJGRCUyRmdpdGh1YiUyRkNoYXRHUFQtTmV4dC1XZWIlMkZhcHAmYXBwUGF0aHM9JTJGYXBpJTJGYW50aHJvcGljJTJGJTVCLi4ucGF0aCU1RCUyRnJvdXRlJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PXN0YW5kYWxvbmUmcHJlZmVycmVkUmVnaW9uPWFybjEmcHJlZmVycmVkUmVnaW9uPWJvbTEmcHJlZmVycmVkUmVnaW9uPWNkZzEmcHJlZmVycmVkUmVnaW9uPWNsZTEmcHJlZmVycmVkUmVnaW9uPWNwdDEmcHJlZmVycmVkUmVnaW9uPWR1YjEmcHJlZmVycmVkUmVnaW9uPWZyYTEmcHJlZmVycmVkUmVnaW9uPWdydTEmcHJlZmVycmVkUmVnaW9uPWhuZDEmcHJlZmVycmVkUmVnaW9uPWlhZDEmcHJlZmVycmVkUmVnaW9uPWljbjEmcHJlZmVycmVkUmVnaW9uPWtpeDEmcHJlZmVycmVkUmVnaW9uPWxocjEmcHJlZmVycmVkUmVnaW9uPXBkeDEmcHJlZmVycmVkUmVnaW9uPXNmbzEmcHJlZmVycmVkUmVnaW9uPXNpbjEmcHJlZmVycmVkUmVnaW9uPXN5ZDEmbWlkZGxld2FyZUNvbmZpZz1lMzAlM0Qh_nextConfigOutput_standalone_preferredRegion_arn1_preferredRegion_bom1_preferredRegion_cdg1_preferredRegion_cle1_preferredRegion_cpt1_preferredRegion_dub1_preferredRegion_fra1_preferredRegion_gru1_preferredRegion_hnd1_preferredRegion_iad1_preferredRegion_icn1_preferredRegion_kix1_preferredRegion_lhr1_preferredRegion_pdx1_preferredRegion_sfo1_preferredRegion_sin1_preferredRegion_syd1_middlewareConfig_e30_3D_","edge_route_module_wrapper","a","wrap","modelProvider","accessCode","apiKey","parseApiKey","bearToken","token","isApiKey","ACCESS_CODE_PREFIX","length","hashedCode","md5","codes","getIP","ip","forwardedFor","split","at","Date","toLocaleString","needCode","hideUserApiKey","systemApiKey","GeminiPro","googleApiKey","GPT","isAzure","azureApiKey","ACCESS_CODES","code","process","env","CODE","filter","v","map","getApiKey","keys","apiKeys","apiKeyEnvVar","randomIndex","Math","floor","random","Error","disableGPT4","DISABLE_GPT4","CUSTOM_MODELS","defaultModel","DEFAULT_MODEL","m","name","AZURE_URL","isGoogle","GOOGLE_API_KEY","isAnthropic","ANTHROPIC_API_KEY","allowedWebDevEndpoints","WHITE_WEBDEV_ENDPOINTS","BASE_URL","OPENAI_API_KEY","openaiOrgId","OPENAI_ORG_ID","azureUrl","AZURE_API_KEY","azureApiVersion","AZURE_API_VERSION","googleUrl","GOOGLE_URL","ANTHROPIC_API_VERSION","ANTHROPIC_URL","gtmId","GTM_ID","size","proxyUrl","PROXY_URL","isVercel","VERCEL","HIDE_USER_API_KEY","hideBalanceQuery","ENABLE_BALANCE_QUERY","disableFastLink","DISABLE_FAST_LINK","OPENAI_BASE_URL","GEMINI_BASE_URL","Path","SlotID","FileName","StoreKey","STORAGE_KEY","ServiceProvider","ExampleEndpoint","OpenaiPath","UsagePath","SubsPath","ListModelPath","openaiModels","provider","id","providerName","providerType","googleModels","anthropicModels","internalAllowedWebDavEndpoints","obj","stringify","toString","customProvider","modelName","models","forEach","displayName","nameConfig","Object","values"],"sourceRoot":""}