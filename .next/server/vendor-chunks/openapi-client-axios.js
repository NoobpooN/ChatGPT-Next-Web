"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/openapi-client-axios";
exports.ids = ["vendor-chunks/openapi-client-axios"];
exports.modules = {

/***/ "(ssr)/./node_modules/openapi-client-axios/client.js":
/*!*****************************************************!*\
  !*** ./node_modules/openapi-client-axios/client.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (void 0) && (void 0).__generator || function(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(g && (g = 0, op[0] && (_ = 0)), _)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n};\nvar __values = (void 0) && (void 0).__values || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (void 0) && (void 0).__read || function(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n};\nvar __spreadArray = (void 0) && (void 0).__spreadArray || function(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OpenAPIClientAxios = void 0;\nvar axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/dist/node/axios.cjs\"));\nvar bath_es5_1 = __importDefault(__webpack_require__(/*! bath-es5 */ \"(ssr)/./node_modules/bath-es5/index.js\"));\nvar dereference_json_schema_1 = __webpack_require__(/*! dereference-json-schema */ \"(ssr)/./node_modules/dereference-json-schema/index.js\");\nvar client_1 = __webpack_require__(/*! ./types/client */ \"(ssr)/./node_modules/openapi-client-axios/types/client.js\");\nvar DefaultRunnerKey = \"default\";\n/**\n * Main class and the default export of the 'openapi-client-axios' module\n *\n * @export\n * @class OpenAPIClientAxios\n */ var OpenAPIClientAxios = /** @class */ function() {\n    /**\n     * Creates an instance of OpenAPIClientAxios.\n     *\n     * @param opts - constructor options\n     * @param {Document | string} opts.definition - the OpenAPI definition, file path or Document object\n     * @param {boolean} opts.quick - quick mode, skips validation and doesn't guarantee document is unchanged\n     * @param {boolean} opts.applyMethodCommonHeaders Should method (patch / post / put / etc.) specific default headers (from axios.defaults.headers.{method}) be applied to operation methods?\n     * @param {boolean} opts.axiosConfigDefaults - default axios config for the instance\n     * @memberof OpenAPIClientAxios\n     */ function OpenAPIClientAxios(opts) {\n        var _a;\n        var _this = this;\n        /**\n         * Returns the instance of OpenAPIClient\n         *\n         * @returns\n         * @memberof OpenAPIClientAxios\n         */ this.getClient = function() {\n            return __awaiter(_this, void 0, void 0, function() {\n                return __generator(this, function(_a) {\n                    if (!this.initialized) {\n                        return [\n                            2 /*return*/ ,\n                            this.init()\n                        ];\n                    }\n                    return [\n                        2 /*return*/ ,\n                        this.instance\n                    ];\n                });\n            });\n        };\n        /**\n         * Initializes OpenAPIClientAxios and creates a member axios client instance\n         *\n         * The init() method should be called right after creating a new instance of OpenAPIClientAxios\n         *\n         * @returns AxiosInstance\n         * @memberof OpenAPIClientAxios\n         */ this.init = function() {\n            return __awaiter(_this, void 0, void 0, function() {\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            return [\n                                4 /*yield*/ ,\n                                this.loadDocument()\n                            ];\n                        case 1:\n                            _a.sent();\n                            // dereference the document into definition\n                            this.definition = (0, dereference_json_schema_1.dereferenceSync)(this.document);\n                            // create axios instance\n                            this.instance = this.createAxiosInstance();\n                            // we are now initialized\n                            this.initialized = true;\n                            return [\n                                2 /*return*/ ,\n                                this.instance\n                            ];\n                    }\n                });\n            });\n        };\n        /**\n         * Synchronous version of .init()\n         *\n         * Note: Only works when the input definition is a valid OpenAPI v3 object (URLs are not supported)\n         *\n         * @memberof OpenAPIClientAxios\n         */ this.initSync = function() {\n            if (typeof _this.inputDocument !== \"object\") {\n                throw new Error(\".initSync() can't be called with a non-object definition. Please use .init()\");\n            }\n            // set document\n            _this.document = _this.inputDocument;\n            // dereference the document into definition\n            _this.definition = (0, dereference_json_schema_1.dereferenceSync)(_this.document);\n            // create axios instance\n            _this.instance = _this.createAxiosInstance();\n            // we are now initialized\n            _this.initialized = true;\n            return _this.instance;\n        };\n        /**\n         * Creates a new axios instance with defaults and returns it\n         */ this.getAxiosInstance = function() {\n            var instance = axios_1.default.create(_this.axiosConfigDefaults);\n            return instance;\n        };\n        /**\n         * Creates a new axios instance, extends it and returns it\n         *\n         * @memberof OpenAPIClientAxios\n         */ this.createAxiosInstance = function() {\n            var e_1, _a;\n            // create axios instance\n            var instance = _this.getAxiosInstance();\n            // set baseURL to the one found in the definition servers (if not set in axios defaults)\n            var baseURL = _this.getBaseURL();\n            if (baseURL && !_this.axiosConfigDefaults.baseURL) {\n                instance.defaults.baseURL = baseURL;\n            }\n            // create methods for operationIds\n            var operations = _this.getOperations();\n            try {\n                for(var operations_1 = __values(operations), operations_1_1 = operations_1.next(); !operations_1_1.done; operations_1_1 = operations_1.next()){\n                    var operation = operations_1_1.value;\n                    var operationId = operation.operationId;\n                    if (operationId) {\n                        instance[_this.transformOperationName(operationId)] = _this.createOperationMethod(operation);\n                    }\n                }\n            } catch (e_1_1) {\n                e_1 = {\n                    error: e_1_1\n                };\n            } finally{\n                try {\n                    if (operations_1_1 && !operations_1_1.done && (_a = operations_1.return)) _a.call(operations_1);\n                } finally{\n                    if (e_1) throw e_1.error;\n                }\n            }\n            // create paths dictionary\n            // Example: api.paths['/pets/{id}'].get({ id: 1 });\n            instance.paths = {};\n            var _loop_1 = function(path) {\n                if (_this.definition.paths[path]) {\n                    if (!instance.paths[path]) {\n                        instance.paths[path] = {};\n                    }\n                    var methods = _this.definition.paths[path];\n                    var _loop_2 = function(m) {\n                        if (methods[m] && Object.values(client_1.HttpMethod).includes(m)) {\n                            var method_1 = m;\n                            var operation = _this.getOperations().find(function(op) {\n                                return op.method === method_1 && op.path === path;\n                            });\n                            instance.paths[path][method_1] = _this.createOperationMethod(operation);\n                        }\n                    };\n                    for(var m in methods){\n                        _loop_2(m);\n                    }\n                }\n            };\n            for(var path in _this.definition.paths){\n                _loop_1(path);\n            }\n            // add reference to parent class instance\n            instance.api = _this;\n            return instance;\n        };\n        /**\n         * Gets the API baseurl defined in the first OpenAPI specification servers property\n         *\n         * @returns string\n         * @memberof OpenAPIClientAxios\n         */ this.getBaseURL = function(operation) {\n            var e_2, _a, e_3, _b;\n            if (!_this.definition) {\n                return undefined;\n            }\n            if (operation) {\n                if (typeof operation === \"string\") {\n                    operation = _this.getOperation(operation);\n                }\n                if (operation.servers && operation.servers[0]) {\n                    return operation.servers[0].url;\n                }\n            }\n            // get the target server from this.defaultServer\n            var targetServer;\n            if (typeof _this.defaultServer === \"number\") {\n                if (_this.definition.servers && _this.definition.servers[_this.defaultServer]) {\n                    targetServer = _this.definition.servers[_this.defaultServer];\n                }\n            } else if (typeof _this.defaultServer === \"string\") {\n                try {\n                    for(var _c = __values(_this.definition.servers), _d = _c.next(); !_d.done; _d = _c.next()){\n                        var server = _d.value;\n                        if (server.description === _this.defaultServer) {\n                            targetServer = server;\n                            break;\n                        }\n                    }\n                } catch (e_2_1) {\n                    e_2 = {\n                        error: e_2_1\n                    };\n                } finally{\n                    try {\n                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                    } finally{\n                        if (e_2) throw e_2.error;\n                    }\n                }\n            } else if (_this.defaultServer.url) {\n                targetServer = _this.defaultServer;\n            }\n            // if no targetServer is found, return undefined\n            if (!targetServer) {\n                return undefined;\n            }\n            var baseURL = targetServer.url;\n            var baseURLVariableSet = targetServer.variables;\n            // get baseURL var names\n            var baseURLBuilder = (0, bath_es5_1.default)(baseURL);\n            // if there are no variables to resolve: return baseURL as is\n            if (!baseURLBuilder.names.length) {\n                return baseURL;\n            }\n            // object to place variables resolved from this.baseURLVariables\n            var baseURLVariablesResolved = {};\n            try {\n                // step through names and assign value from this.baseURLVariables or the default value\n                // note: any variables defined in baseURLVariables but not actually variables in baseURL are ignored\n                for(var _e = __values(baseURLBuilder.names), _f = _e.next(); !_f.done; _f = _e.next()){\n                    var name_1 = _f.value;\n                    var varValue = _this.baseURLVariables[name_1];\n                    if (varValue !== undefined && baseURLVariableSet[name_1].enum) {\n                        // if varValue exists assign to baseURLVariablesResolved object\n                        if (typeof varValue === \"number\") {\n                            // if number, get value from enum array\n                            var enumVal = baseURLVariableSet[name_1].enum[varValue];\n                            if (enumVal) {\n                                baseURLVariablesResolved[name_1] = enumVal;\n                            } else {\n                                // if supplied value out of range: throw error\n                                throw new Error(\"index \".concat(varValue, \" out of range for enum of baseURL variable: \").concat(name_1, \";               enum max index is \").concat(baseURLVariableSet[name_1].enum.length - 1));\n                            }\n                        } else if (typeof varValue === \"string\") {\n                            // if string, validate against enum array\n                            if (baseURLVariableSet[name_1].enum.includes(varValue)) {\n                                baseURLVariablesResolved[name_1] = varValue;\n                            } else {\n                                // if supplied value doesn't exist on enum: throw error\n                                throw new Error(\"\".concat(varValue, \" is not a valid entry for baseURL variable \").concat(name_1, \";                 variable must be of the following: \").concat(baseURLVariableSet[name_1].enum.join(\", \")));\n                            }\n                        }\n                    } else {\n                        // if varValue doesn't exist: get default\n                        baseURLVariablesResolved[name_1] = baseURLVariableSet[name_1].default;\n                    }\n                }\n            } catch (e_3_1) {\n                e_3 = {\n                    error: e_3_1\n                };\n            } finally{\n                try {\n                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                } finally{\n                    if (e_3) throw e_3.error;\n                }\n            }\n            // return resolved baseURL\n            return baseURLBuilder.path(baseURLVariablesResolved);\n        };\n        /**\n         * Creates an axios config object for operation + arguments\n         * @memberof OpenAPIClientAxios\n         */ this.getAxiosConfigForOperation = function(operation, args) {\n            if (typeof operation === \"string\") {\n                operation = _this.getOperation(operation);\n            }\n            var request = _this.getRequestConfigForOperation(operation, args);\n            // construct axios request config\n            var axiosConfig = {\n                method: request.method,\n                url: request.path,\n                data: request.payload,\n                params: request.query,\n                headers: request.headers\n            };\n            // allow overriding baseURL with operation / path specific servers\n            var servers = operation.servers;\n            if (servers && servers[0]) {\n                axiosConfig.baseURL = servers[0].url;\n            }\n            // allow overriding any parameters in AxiosRequestConfig\n            var _a = __read(args, 3), config = _a[2];\n            return __assign(__assign(__assign({}, axiosConfig), config), {\n                params: __assign(__assign({}, axiosConfig === null || axiosConfig === void 0 ? void 0 : axiosConfig.params), config === null || config === void 0 ? void 0 : config.params),\n                headers: __assign(__assign({}, axiosConfig === null || axiosConfig === void 0 ? void 0 : axiosConfig.headers), config === null || config === void 0 ? void 0 : config.headers)\n            });\n        };\n        /**\n         * Creates a generic request config object for operation + arguments.\n         *\n         * This function contains the logic that handles operation method parameters.\n         *\n         * @memberof OpenAPIClientAxios\n         */ this.getRequestConfigForOperation = function(operation, args) {\n            var e_4, _a, e_5, _b, e_6, _c, e_7, _d;\n            var _e, _f;\n            if (typeof operation === \"string\") {\n                operation = _this.getOperation(operation);\n            }\n            var pathParams = {};\n            var searchParams = new URLSearchParams();\n            var query = {};\n            var headers = {};\n            var cookies = {};\n            var parameters = operation.parameters || [];\n            var setRequestParam = function(name, value, type) {\n                var e_8, _a;\n                switch(type){\n                    case client_1.ParamType.Path:\n                        pathParams[name] = value;\n                        break;\n                    case client_1.ParamType.Query:\n                        if (Array.isArray(value)) {\n                            try {\n                                for(var value_1 = __values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()){\n                                    var valueItem = value_1_1.value;\n                                    searchParams.append(name, valueItem);\n                                }\n                            } catch (e_8_1) {\n                                e_8 = {\n                                    error: e_8_1\n                                };\n                            } finally{\n                                try {\n                                    if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);\n                                } finally{\n                                    if (e_8) throw e_8.error;\n                                }\n                            }\n                        } else {\n                            searchParams.append(name, value);\n                        }\n                        query[name] = value;\n                        break;\n                    case client_1.ParamType.Header:\n                        headers[name] = value;\n                        break;\n                    case client_1.ParamType.Cookie:\n                        cookies[name] = value;\n                        break;\n                }\n            };\n            var getParamType = function(paramName) {\n                var param = parameters.find(function(_a) {\n                    var name = _a.name;\n                    return name === paramName;\n                });\n                if (param) {\n                    return param.in;\n                }\n                // default all params to query if operation doesn't specify param\n                return client_1.ParamType.Query;\n            };\n            var getFirstOperationParam = function() {\n                var firstRequiredParam = parameters.find(function(_a) {\n                    var required = _a.required;\n                    return required === true;\n                });\n                if (firstRequiredParam) {\n                    return firstRequiredParam;\n                }\n                var firstParam = parameters[0];\n                if (firstParam) {\n                    return firstParam;\n                }\n            };\n            var _g = __read(args, 2), paramsArg = _g[0], payload = _g[1];\n            if (Array.isArray(paramsArg)) {\n                try {\n                    // ParamsArray\n                    for(var paramsArg_1 = __values(paramsArg), paramsArg_1_1 = paramsArg_1.next(); !paramsArg_1_1.done; paramsArg_1_1 = paramsArg_1.next()){\n                        var param = paramsArg_1_1.value;\n                        setRequestParam(param.name, param.value, param.in || getParamType(param.name));\n                    }\n                } catch (e_4_1) {\n                    e_4 = {\n                        error: e_4_1\n                    };\n                } finally{\n                    try {\n                        if (paramsArg_1_1 && !paramsArg_1_1.done && (_a = paramsArg_1.return)) _a.call(paramsArg_1);\n                    } finally{\n                        if (e_4) throw e_4.error;\n                    }\n                }\n            } else if (typeof paramsArg === \"object\") {\n                // ParamsObject\n                for(var name_2 in paramsArg){\n                    if (paramsArg[name_2] !== undefined) {\n                        setRequestParam(name_2, paramsArg[name_2], getParamType(name_2));\n                    }\n                }\n            } else if (paramsArg) {\n                var firstParam = getFirstOperationParam();\n                if (!firstParam) {\n                    throw new Error(\"No parameters found for operation \".concat(operation.operationId));\n                }\n                setRequestParam(firstParam.name, paramsArg, firstParam.in);\n            }\n            // path parameters\n            var pathBuilder = (0, bath_es5_1.default)(operation.path);\n            try {\n                // make sure all path parameters are set\n                for(var _h = __values(pathBuilder.names), _j = _h.next(); !_j.done; _j = _h.next()){\n                    var name_3 = _j.value;\n                    var value = pathParams[name_3];\n                    pathParams[name_3] = \"\".concat(value);\n                }\n            } catch (e_5_1) {\n                e_5 = {\n                    error: e_5_1\n                };\n            } finally{\n                try {\n                    if (_j && !_j.done && (_b = _h.return)) _b.call(_h);\n                } finally{\n                    if (e_5) throw e_5.error;\n                }\n            }\n            var path = pathBuilder.path(pathParams);\n            // queryString parameter\n            var queryString = searchParams.toString();\n            // full url with query string\n            var url = \"\".concat(_this.getBaseURL(operation)).concat(path).concat(queryString ? \"?\".concat(queryString) : \"\");\n            // add default common headers\n            var defaultHeaders = _this.client.defaults.headers;\n            try {\n                for(var _k = __values(Object.entries((_e = defaultHeaders.common) !== null && _e !== void 0 ? _e : {})), _l = _k.next(); !_l.done; _l = _k.next()){\n                    var _m = __read(_l.value, 2), key = _m[0], val = _m[1];\n                    headers[key] = val;\n                }\n            } catch (e_6_1) {\n                e_6 = {\n                    error: e_6_1\n                };\n            } finally{\n                try {\n                    if (_l && !_l.done && (_c = _k.return)) _c.call(_k);\n                } finally{\n                    if (e_6) throw e_6.error;\n                }\n            }\n            // add method specific default headers\n            if (_this.applyMethodCommonHeaders) {\n                var methodHeaders = (_f = defaultHeaders[operation.method]) !== null && _f !== void 0 ? _f : {};\n                try {\n                    for(var _o = __values(Object.entries(methodHeaders)), _p = _o.next(); !_p.done; _p = _o.next()){\n                        var _q = __read(_p.value, 2), key = _q[0], val = _q[1];\n                        headers[key] = val;\n                    }\n                } catch (e_7_1) {\n                    e_7 = {\n                        error: e_7_1\n                    };\n                } finally{\n                    try {\n                        if (_p && !_p.done && (_d = _o.return)) _d.call(_o);\n                    } finally{\n                        if (e_7) throw e_7.error;\n                    }\n                }\n            }\n            // construct request config\n            var config = {\n                method: operation.method,\n                url: url,\n                path: path,\n                pathParams: pathParams,\n                query: query,\n                queryString: queryString,\n                headers: headers,\n                cookies: cookies,\n                payload: payload\n            };\n            return config;\n        };\n        /**\n         * Flattens operations into a simple array of Operation objects easy to work with\n         *\n         * @returns {Operation[]}\n         * @memberof OpenAPIBackend\n         */ this.getOperations = function() {\n            var _a;\n            var paths = ((_a = _this.definition) === null || _a === void 0 ? void 0 : _a.paths) || {};\n            return Object.entries(paths).flatMap(function(_a) {\n                var _b = __read(_a, 2), path = _b[0], pathObject = _b[1];\n                return Object.values(client_1.HttpMethod).map(function(method) {\n                    return {\n                        path: path,\n                        method: method,\n                        operation: pathObject[method]\n                    };\n                }).filter(function(_a) {\n                    var operation = _a.operation;\n                    return operation;\n                }).map(function(_a) {\n                    var _b;\n                    var operation = _a.operation, method = _a.method;\n                    var op = __assign(__assign({}, typeof operation === \"object\" ? operation : {}), {\n                        path: path,\n                        method: method\n                    });\n                    if (pathObject.parameters) {\n                        op.parameters = __spreadArray(__spreadArray([], __read(op.parameters || []), false), __read(pathObject.parameters), false);\n                    }\n                    if (pathObject.servers) {\n                        op.servers = __spreadArray(__spreadArray([], __read(op.servers || []), false), __read(pathObject.servers), false);\n                    }\n                    op.security = (_b = op.security) !== null && _b !== void 0 ? _b : _this.definition.security;\n                    return op;\n                });\n            });\n        };\n        /**\n         * Gets a single operation based on operationId\n         *\n         * @param {string} operationId\n         * @returns {Operation}\n         * @memberof OpenAPIBackend\n         */ this.getOperation = function(operationId) {\n            return _this.getOperations().find(function(op) {\n                return op.operationId === operationId;\n            });\n        };\n        /**\n         * Creates an axios method for an operation\n         * (...pathParams, data?, config?) => Promise<AxiosResponse>\n         *\n         * @param {Operation} operation\n         * @memberof OpenAPIClientAxios\n         */ this.createOperationMethod = function(operation) {\n            var originalOperationMethod = function() {\n                var args = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args[_i] = arguments[_i];\n                }\n                return __awaiter(_this, void 0, void 0, function() {\n                    var axiosConfig, runner;\n                    return __generator(this, function(_a) {\n                        axiosConfig = this.getAxiosConfigForOperation(operation, args);\n                        runner = this.getRunner(operation.operationId);\n                        return [\n                            2 /*return*/ ,\n                            runner.runRequest(axiosConfig, operation, runner.context)\n                        ];\n                    });\n                });\n            };\n            return _this.transformOperationMethod(originalOperationMethod, operation);\n        };\n        var optsWithDefaults = __assign(__assign({\n            quick: false,\n            withServer: 0,\n            baseURLVariables: {},\n            transformOperationName: function(operationId) {\n                return operationId;\n            },\n            transformOperationMethod: function(operationMethod) {\n                return operationMethod;\n            },\n            axiosRunner: function(axiosConfig) {\n                return _this.client.request(axiosConfig);\n            },\n            applyMethodCommonHeaders: false\n        }, opts), {\n            axiosConfigDefaults: __assign({}, opts.axiosConfigDefaults || {})\n        });\n        this.inputDocument = optsWithDefaults.definition;\n        this.quick = optsWithDefaults.quick;\n        this.axiosConfigDefaults = optsWithDefaults.axiosConfigDefaults;\n        this.defaultServer = optsWithDefaults.withServer;\n        this.baseURLVariables = optsWithDefaults.baseURLVariables;\n        this.applyMethodCommonHeaders = optsWithDefaults.applyMethodCommonHeaders;\n        this.transformOperationName = optsWithDefaults.transformOperationName;\n        this.transformOperationMethod = optsWithDefaults.transformOperationMethod;\n        this.runners = (_a = {}, _a[DefaultRunnerKey] = {\n            runRequest: optsWithDefaults.axiosRunner\n        }, _a);\n    }\n    Object.defineProperty(OpenAPIClientAxios.prototype, \"client\", {\n        /**\n         * Returns the instance of OpenAPIClient\n         *\n         * @readonly\n         * @type {OpenAPIClient}\n         * @memberof OpenAPIClientAxios\n         */ get: function() {\n            return this.instance;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    OpenAPIClientAxios.prototype.withServer = function(server, variables) {\n        if (variables === void 0) {\n            variables = {};\n        }\n        this.defaultServer = server;\n        this.baseURLVariables = variables;\n    };\n    /**\n     * Loads document from inputDocument\n     *\n     * Supports loading from a string (url) or an object (json)\n     *\n     * @memberof OpenAPIClientAxios\n     */ OpenAPIClientAxios.prototype.loadDocument = function() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function() {\n            var client, documentRes, yaml, err;\n            return __generator(this, function(_b) {\n                switch(_b.label){\n                    case 0:\n                        if (!(typeof this.inputDocument === \"object\")) return [\n                            3 /*break*/ ,\n                            1\n                        ];\n                        this.document = this.inputDocument;\n                        return [\n                            3 /*break*/ ,\n                            6\n                        ];\n                    case 1:\n                        client = this.getAxiosInstance();\n                        return [\n                            4 /*yield*/ ,\n                            client.get(this.inputDocument)\n                        ];\n                    case 2:\n                        documentRes = _b.sent();\n                        if (!(typeof documentRes.data === \"object\")) return [\n                            3 /*break*/ ,\n                            3\n                        ];\n                        // json response\n                        this.document = documentRes.data;\n                        return [\n                            3 /*break*/ ,\n                            6\n                        ];\n                    case 3:\n                        if (!(typeof documentRes.data === \"string\" && ((_a = documentRes.headers[\"content-type\"]) === null || _a === void 0 ? void 0 : _a.match(/ya?ml/)))) return [\n                            3 /*break*/ ,\n                            5\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            Promise.resolve().then(function() {\n                                return __importStar(__webpack_require__(/*! js-yaml */ \"(ssr)/./node_modules/js-yaml/index.js\"));\n                            })\n                        ];\n                    case 4:\n                        yaml = _b.sent();\n                        this.document = yaml.load(documentRes.data);\n                        return [\n                            3 /*break*/ ,\n                            6\n                        ];\n                    case 5:\n                        err = new Error(\"Invalid response fetching OpenAPI definition: \".concat(documentRes));\n                        err.response = documentRes;\n                        throw err;\n                    case 6:\n                        return [\n                            2 /*return*/ ,\n                            this.document\n                        ];\n                }\n            });\n        });\n    };\n    /**\n     * By default OpenAPIClient will use axios as request runner. You can register a different runner,\n     * in case you want to switch over from axios. This allows transitioning from axios to your library of choice.\n     * @param runner - request runner to be registered, either for all operations, or just one operation.\n     * @param operationId - optional parameter. If provided, runner will be registered for a single operation. Else, it will be registered for all operations.\n     */ OpenAPIClientAxios.prototype.registerRunner = function(runner, operationId) {\n        this.runners[operationId !== null && operationId !== void 0 ? operationId : DefaultRunnerKey] = runner;\n    };\n    OpenAPIClientAxios.prototype.getRunner = function(operationId) {\n        var _a;\n        return (_a = this.runners[operationId]) !== null && _a !== void 0 ? _a : this.runners[DefaultRunnerKey];\n    };\n    return OpenAPIClientAxios;\n}();\nexports.OpenAPIClientAxios = OpenAPIClientAxios; //# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openapi-client-axios/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openapi-client-axios/index.js":
/*!****************************************************!*\
  !*** ./node_modules/openapi-client-axios/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar client_1 = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/openapi-client-axios/client.js\");\nexports[\"default\"] = client_1.OpenAPIClientAxios;\n__exportStar(__webpack_require__(/*! ./client */ \"(ssr)/./node_modules/openapi-client-axios/client.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types/client */ \"(ssr)/./node_modules/openapi-client-axios/types/client.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFwaS1jbGllbnQtYXhpb3MvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCLElBQUlHLE9BQU9QLE9BQU9RLHdCQUF3QixDQUFDTCxHQUFHQztJQUM5QyxJQUFJLENBQUNHLFFBQVMsVUFBU0EsT0FBTyxDQUFDSixFQUFFTSxVQUFVLEdBQUdGLEtBQUtHLFFBQVEsSUFBSUgsS0FBS0ksWUFBWSxHQUFHO1FBQ2pGSixPQUFPO1lBQUVLLFlBQVk7WUFBTUMsS0FBSztnQkFBYSxPQUFPVixDQUFDLENBQUNDLEVBQUU7WUFBRTtRQUFFO0lBQzlEO0lBQ0FKLE9BQU9jLGNBQWMsQ0FBQ1osR0FBR0csSUFBSUU7QUFDakMsSUFBTSxTQUFTTCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQ3RCLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCRixDQUFDLENBQUNHLEdBQUcsR0FBR0YsQ0FBQyxDQUFDQyxFQUFFO0FBQ2hCLENBQUM7QUFDRCxJQUFJVyxlQUFlLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsWUFBWSxJQUFLLFNBQVNaLENBQUMsRUFBRWEsUUFBTztJQUNqRSxJQUFLLElBQUlDLEtBQUtkLEVBQUcsSUFBSWMsTUFBTSxhQUFhLENBQUNqQixPQUFPa0IsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osVUFBU0MsSUFBSWxCLGdCQUFnQmlCLFVBQVNiLEdBQUdjO0FBQzNIO0FBQ0FqQiw4Q0FBNkM7SUFBRXFCLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsSUFBSUMsV0FBV0MsbUJBQU9BLENBQUMscUVBQVU7QUFDakNQLGtCQUFlLEdBQUdNLFNBQVNHLGtCQUFrQjtBQUM3Q1YsYUFBYVEsbUJBQU9BLENBQUMscUVBQVUsR0FBR1A7QUFDbENELGFBQWFRLG1CQUFPQSxDQUFDLGlGQUFnQixHQUFHUCxVQUN4QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0Y2hhdC8uL25vZGVfbW9kdWxlcy9vcGVuYXBpLWNsaWVudC1heGlvcy9pbmRleC5qcz81YjEyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgY2xpZW50XzEgPSByZXF1aXJlKFwiLi9jbGllbnRcIik7XG5leHBvcnRzLmRlZmF1bHQgPSBjbGllbnRfMS5PcGVuQVBJQ2xpZW50QXhpb3M7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY2xpZW50XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlcy9jbGllbnRcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9fY3JlYXRlQmluZGluZyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZXNNb2R1bGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZXhwb3J0U3RhciIsImV4cG9ydHMiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidmFsdWUiLCJjbGllbnRfMSIsInJlcXVpcmUiLCJkZWZhdWx0IiwiT3BlbkFQSUNsaWVudEF4aW9zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openapi-client-axios/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openapi-client-axios/types/client.js":
/*!***********************************************************!*\
  !*** ./node_modules/openapi-client-axios/types/client.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ParamType = exports.HttpMethod = void 0;\n/**\n * OpenAPI allowed HTTP methods\n */ var HttpMethod;\n(function(HttpMethod) {\n    HttpMethod[\"Get\"] = \"get\";\n    HttpMethod[\"Put\"] = \"put\";\n    HttpMethod[\"Post\"] = \"post\";\n    HttpMethod[\"Patch\"] = \"patch\";\n    HttpMethod[\"Delete\"] = \"delete\";\n    HttpMethod[\"Options\"] = \"options\";\n    HttpMethod[\"Head\"] = \"head\";\n    HttpMethod[\"Trace\"] = \"trace\";\n})(HttpMethod = exports.HttpMethod || (exports.HttpMethod = {}));\n/**\n * OpenAPI parameters \"in\"\n */ var ParamType;\n(function(ParamType) {\n    ParamType[\"Query\"] = \"query\";\n    ParamType[\"Header\"] = \"header\";\n    ParamType[\"Path\"] = \"path\";\n    ParamType[\"Cookie\"] = \"cookie\";\n})(ParamType = exports.ParamType || (exports.ParamType = {})); //# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbmFwaS1jbGllbnQtYXhpb3MvdHlwZXMvY2xpZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBR0Esa0JBQWtCLEdBQUcsS0FBSztBQUM5Qzs7Q0FFQyxHQUNELElBQUlHO0FBQ0gsVUFBVUEsVUFBVTtJQUNqQkEsVUFBVSxDQUFDLE1BQU0sR0FBRztJQUNwQkEsVUFBVSxDQUFDLE1BQU0sR0FBRztJQUNwQkEsVUFBVSxDQUFDLE9BQU8sR0FBRztJQUNyQkEsVUFBVSxDQUFDLFFBQVEsR0FBRztJQUN0QkEsVUFBVSxDQUFDLFNBQVMsR0FBRztJQUN2QkEsVUFBVSxDQUFDLFVBQVUsR0FBRztJQUN4QkEsVUFBVSxDQUFDLE9BQU8sR0FBRztJQUNyQkEsVUFBVSxDQUFDLFFBQVEsR0FBRztBQUMxQixHQUFHQSxhQUFhSCxRQUFRRyxVQUFVLElBQUtILENBQUFBLGtCQUFrQixHQUFHLENBQUM7QUFDN0Q7O0NBRUMsR0FDRCxJQUFJRTtBQUNILFVBQVVBLFNBQVM7SUFDaEJBLFNBQVMsQ0FBQyxRQUFRLEdBQUc7SUFDckJBLFNBQVMsQ0FBQyxTQUFTLEdBQUc7SUFDdEJBLFNBQVMsQ0FBQyxPQUFPLEdBQUc7SUFDcEJBLFNBQVMsQ0FBQyxTQUFTLEdBQUc7QUFDMUIsR0FBR0EsWUFBWUYsUUFBUUUsU0FBUyxJQUFLRixDQUFBQSxpQkFBaUIsR0FBRyxDQUFDLEtBQzFELGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRjaGF0Ly4vbm9kZV9tb2R1bGVzL29wZW5hcGktY2xpZW50LWF4aW9zL3R5cGVzL2NsaWVudC5qcz9lMjQzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QYXJhbVR5cGUgPSBleHBvcnRzLkh0dHBNZXRob2QgPSB2b2lkIDA7XG4vKipcbiAqIE9wZW5BUEkgYWxsb3dlZCBIVFRQIG1ldGhvZHNcbiAqL1xudmFyIEh0dHBNZXRob2Q7XG4oZnVuY3Rpb24gKEh0dHBNZXRob2QpIHtcbiAgICBIdHRwTWV0aG9kW1wiR2V0XCJdID0gXCJnZXRcIjtcbiAgICBIdHRwTWV0aG9kW1wiUHV0XCJdID0gXCJwdXRcIjtcbiAgICBIdHRwTWV0aG9kW1wiUG9zdFwiXSA9IFwicG9zdFwiO1xuICAgIEh0dHBNZXRob2RbXCJQYXRjaFwiXSA9IFwicGF0Y2hcIjtcbiAgICBIdHRwTWV0aG9kW1wiRGVsZXRlXCJdID0gXCJkZWxldGVcIjtcbiAgICBIdHRwTWV0aG9kW1wiT3B0aW9uc1wiXSA9IFwib3B0aW9uc1wiO1xuICAgIEh0dHBNZXRob2RbXCJIZWFkXCJdID0gXCJoZWFkXCI7XG4gICAgSHR0cE1ldGhvZFtcIlRyYWNlXCJdID0gXCJ0cmFjZVwiO1xufSkoSHR0cE1ldGhvZCA9IGV4cG9ydHMuSHR0cE1ldGhvZCB8fCAoZXhwb3J0cy5IdHRwTWV0aG9kID0ge30pKTtcbi8qKlxuICogT3BlbkFQSSBwYXJhbWV0ZXJzIFwiaW5cIlxuICovXG52YXIgUGFyYW1UeXBlO1xuKGZ1bmN0aW9uIChQYXJhbVR5cGUpIHtcbiAgICBQYXJhbVR5cGVbXCJRdWVyeVwiXSA9IFwicXVlcnlcIjtcbiAgICBQYXJhbVR5cGVbXCJIZWFkZXJcIl0gPSBcImhlYWRlclwiO1xuICAgIFBhcmFtVHlwZVtcIlBhdGhcIl0gPSBcInBhdGhcIjtcbiAgICBQYXJhbVR5cGVbXCJDb29raWVcIl0gPSBcImNvb2tpZVwiO1xufSkoUGFyYW1UeXBlID0gZXhwb3J0cy5QYXJhbVR5cGUgfHwgKGV4cG9ydHMuUGFyYW1UeXBlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsaWVudC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJQYXJhbVR5cGUiLCJIdHRwTWV0aG9kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openapi-client-axios/types/client.js\n");

/***/ })

};
;