"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/micromark-extension-math";
exports.ids = ["vendor-chunks/micromark-extension-math"];
exports.modules = {

/***/ "(ssr)/./node_modules/micromark-extension-math/dev/lib/math-flow.js":
/*!********************************************************************!*\
  !*** ./node_modules/micromark-extension-math/dev/lib/math-flow.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mathFlow: () => (/* binding */ mathFlow)\n/* harmony export */ });\n/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ \"(ssr)/./node_modules/uvu/assert/index.mjs\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-factory-space */ \"(ssr)/./node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-character */ \"(ssr)/./node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ \"(ssr)/./node_modules/micromark-util-symbol/codes.js\");\n/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ \"(ssr)/./node_modules/micromark-util-symbol/constants.js\");\n/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/types.js */ \"(ssr)/./node_modules/micromark-util-symbol/types.js\");\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */ \n\n\n\n\n\n/** @type {Construct} */ const mathFlow = {\n    tokenize: tokenizeMathFenced,\n    concrete: true\n};\n/** @type {Construct} */ const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n};\n/** @type {Tokenizer} */ function tokenizeMathFenced(effects, ok, nok) {\n    const self = this;\n    const tail = self.events[self.events.length - 1];\n    const initialSize = tail && tail[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.linePrefix ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    let sizeOpen = 0;\n    return start;\n    /** @type {State} */ function start(code) {\n        (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.dollarSign, \"expected `$`\");\n        effects.enter(\"mathFlow\");\n        effects.enter(\"mathFlowFence\");\n        effects.enter(\"mathFlowFenceSequence\");\n        return sequenceOpen(code);\n    }\n    /** @type {State} */ function sequenceOpen(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.dollarSign) {\n            effects.consume(code);\n            sizeOpen++;\n            return sequenceOpen;\n        }\n        effects.exit(\"mathFlowFenceSequence\");\n        return sizeOpen < 2 ? nok(code) : (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__.factorySpace)(effects, metaOpen, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.whitespace)(code);\n    }\n    /** @type {State} */ function metaOpen(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            return openAfter(code);\n        }\n        effects.enter(\"mathFlowFenceMeta\");\n        effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.chunkString, {\n            contentType: micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_5__.constants.contentTypeString\n        });\n        return meta(code);\n    }\n    /** @type {State} */ function meta(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.chunkString);\n            effects.exit(\"mathFlowFenceMeta\");\n            return openAfter(code);\n        }\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.dollarSign) return nok(code);\n        effects.consume(code);\n        return meta;\n    }\n    /** @type {State} */ function openAfter(code) {\n        effects.exit(\"mathFlowFence\");\n        return self.interrupt ? ok(code) : contentStart(code);\n    }\n    /** @type {State} */ function contentStart(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof) {\n            return after(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            return effects.attempt(nonLazyLine, effects.attempt({\n                tokenize: tokenizeClosingFence,\n                partial: true\n            }, after, initialSize ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__.factorySpace)(effects, contentStart, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.linePrefix, initialSize + 1) : contentStart), after)(code);\n        }\n        effects.enter(\"mathFlowValue\");\n        return contentContinue(code);\n    }\n    /** @type {State} */ function contentContinue(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            effects.exit(\"mathFlowValue\");\n            return contentStart(code);\n        }\n        effects.consume(code);\n        return contentContinue;\n    }\n    /** @type {State} */ function after(code) {\n        effects.exit(\"mathFlow\");\n        return ok(code);\n    }\n    /** @type {Tokenizer} */ function tokenizeClosingFence(effects, ok, nok) {\n        let size = 0;\n        return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__.factorySpace)(effects, closingPrefixAfter, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.linePrefix, micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_5__.constants.tabSize);\n        /** @type {State} */ function closingPrefixAfter(code) {\n            effects.enter(\"mathFlowFence\");\n            effects.enter(\"mathFlowFenceSequence\");\n            return closingSequence(code);\n        }\n        /** @type {State} */ function closingSequence(code) {\n            if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.dollarSign) {\n                effects.consume(code);\n                size++;\n                return closingSequence;\n            }\n            if (size < sizeOpen) return nok(code);\n            effects.exit(\"mathFlowFenceSequence\");\n            return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__.factorySpace)(effects, closingSequenceEnd, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.whitespace)(code);\n        }\n        /** @type {State} */ function closingSequenceEnd(code) {\n            if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n                effects.exit(\"mathFlowFence\");\n                return ok(code);\n            }\n            return nok(code);\n        }\n    }\n}\n/** @type {Tokenizer} */ function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this;\n    return start;\n    /** @type {State} */ function start(code) {\n        (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code), \"expected eol\");\n        effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding);\n        return lineStart;\n    }\n    /** @type {State} */ function lineStart(code) {\n        return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-math/dev/lib/math-flow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/micromark-extension-math/dev/lib/math-text.js":
/*!********************************************************************!*\
  !*** ./node_modules/micromark-extension-math/dev/lib/math-text.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mathText: () => (/* binding */ mathText)\n/* harmony export */ });\n/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ \"(ssr)/./node_modules/uvu/assert/index.mjs\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-character */ \"(ssr)/./node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ \"(ssr)/./node_modules/micromark-util-symbol/codes.js\");\n/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol/types.js */ \"(ssr)/./node_modules/micromark-util-symbol/types.js\");\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n *\n * @typedef Options\n * @property {boolean} [singleDollarTextMath=true]\n *   Whether to support math (text) with a single dollar (`boolean`, default:\n *   `true`).\n *   Single dollars work in Pandoc and many other places, but often interfere\n *   with “normal” dollars in text.\n */ \n\n\n\n/**\n * @param {Options} [options]\n * @returns {Construct}\n */ function mathText(options = {}) {\n    let single = options.singleDollarTextMath;\n    if (single === null || single === undefined) {\n        single = true;\n    }\n    return {\n        tokenize: tokenizeMathText,\n        resolve: resolveMathText,\n        previous\n    };\n    /** @type {Tokenizer} */ function tokenizeMathText(effects, ok, nok) {\n        const self = this;\n        let sizeOpen = 0;\n        /** @type {number} */ let size;\n        /** @type {Token} */ let token;\n        return start;\n        /** @type {State} */ function start(code) {\n            (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dollarSign, \"expected `$`\");\n            (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(previous.call(self, self.previous), \"expected correct previous\");\n            effects.enter(\"mathText\");\n            effects.enter(\"mathTextSequence\");\n            return openingSequence(code);\n        }\n        /** @type {State} */ function openingSequence(code) {\n            if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dollarSign) {\n                effects.consume(code);\n                sizeOpen++;\n                return openingSequence;\n            }\n            if (sizeOpen < 2 && !single) return nok(code);\n            effects.exit(\"mathTextSequence\");\n            return gap(code);\n        }\n        /** @type {State} */ function gap(code) {\n            if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n                return nok(code);\n            }\n            // Closing fence?\n            // Could also be data.\n            if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dollarSign) {\n                token = effects.enter(\"mathTextSequence\");\n                size = 0;\n                return closingSequence(code);\n            }\n            // Tabs don’t work, and virtual spaces don’t make sense.\n            if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.space) {\n                effects.enter(\"space\");\n                effects.consume(code);\n                effects.exit(\"space\");\n                return gap;\n            }\n            if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n                effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.lineEnding);\n                effects.consume(code);\n                effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.lineEnding);\n                return gap;\n            }\n            // Data.\n            effects.enter(\"mathTextData\");\n            return data(code);\n        }\n        // In math.\n        /** @type {State} */ function data(code) {\n            if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.space || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dollarSign || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n                effects.exit(\"mathTextData\");\n                return gap(code);\n            }\n            effects.consume(code);\n            return data;\n        }\n        // Closing fence.\n        /** @type {State} */ function closingSequence(code) {\n            // More.\n            if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dollarSign) {\n                effects.consume(code);\n                size++;\n                return closingSequence;\n            }\n            // Done!\n            if (size === sizeOpen) {\n                effects.exit(\"mathTextSequence\");\n                effects.exit(\"mathText\");\n                return ok(code);\n            }\n            // More or less accents: mark as data.\n            token.type = \"mathTextData\";\n            return data(code);\n        }\n    }\n}\n/** @type {Resolver} */ function resolveMathText(events) {\n    let tailExitIndex = events.length - 4;\n    let headEnterIndex = 3;\n    /** @type {number} */ let index;\n    /** @type {number|undefined} */ let enter;\n    // If we start and end with an EOL or a space.\n    if ((events[headEnterIndex][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.lineEnding || events[headEnterIndex][1].type === \"space\") && (events[tailExitIndex][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.lineEnding || events[tailExitIndex][1].type === \"space\")) {\n        index = headEnterIndex;\n        // And we have data.\n        while(++index < tailExitIndex){\n            if (events[index][1].type === \"mathTextData\") {\n                // Then we have padding.\n                events[tailExitIndex][1].type = \"mathTextPadding\";\n                events[headEnterIndex][1].type = \"mathTextPadding\";\n                headEnterIndex += 2;\n                tailExitIndex -= 2;\n                break;\n            }\n        }\n    }\n    // Merge adjacent spaces and data.\n    index = headEnterIndex - 1;\n    tailExitIndex++;\n    while(++index <= tailExitIndex){\n        if (enter === undefined) {\n            if (index !== tailExitIndex && events[index][1].type !== micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.lineEnding) {\n                enter = index;\n            }\n        } else if (index === tailExitIndex || events[index][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.lineEnding) {\n            events[enter][1].type = \"mathTextData\";\n            if (index !== enter + 2) {\n                events[enter][1].end = events[index - 1][1].end;\n                events.splice(enter + 2, index - enter - 2);\n                tailExitIndex -= index - enter - 2;\n                index = enter + 2;\n            }\n            enter = undefined;\n        }\n    }\n    return events;\n}\n/** @type {Previous} */ function previous(code) {\n    // If there is a previous code, there will always be a tail.\n    return code !== micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dollarSign || this.events[this.events.length - 1][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.characterEscape;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-math/dev/lib/math-text.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/micromark-extension-math/dev/lib/syntax.js":
/*!*****************************************************************!*\
  !*** ./node_modules/micromark-extension-math/dev/lib/syntax.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   math: () => (/* binding */ math)\n/* harmony export */ });\n/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ \"(ssr)/./node_modules/micromark-util-symbol/codes.js\");\n/* harmony import */ var _math_flow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./math-flow.js */ \"(ssr)/./node_modules/micromark-extension-math/dev/lib/math-flow.js\");\n/* harmony import */ var _math_text_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./math-text.js */ \"(ssr)/./node_modules/micromark-extension-math/dev/lib/math-text.js\");\n/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('./math-text').Options} Options\n */ \n\n\n/**\n * @param {Options} [options]\n * @returns {Extension}\n */ function math(options) {\n    return {\n        flow: {\n            [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.dollarSign]: _math_flow_js__WEBPACK_IMPORTED_MODULE_1__.mathFlow\n        },\n        text: {\n            [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.dollarSign]: (0,_math_text_js__WEBPACK_IMPORTED_MODULE_2__.mathText)(options)\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1tYXRoL2Rldi9saWIvc3ludGF4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7O0NBR0MsR0FFbUQ7QUFDYjtBQUNBO0FBRXZDOzs7Q0FHQyxHQUNNLFNBQVNHLEtBQUtDLE9BQU87SUFDMUIsT0FBTztRQUNMQyxNQUFNO1lBQUMsQ0FBQ0wsaUVBQUtBLENBQUNNLFVBQVUsQ0FBQyxFQUFFTCxtREFBUUE7UUFBQTtRQUNuQ00sTUFBTTtZQUFDLENBQUNQLGlFQUFLQSxDQUFDTSxVQUFVLENBQUMsRUFBRUosdURBQVFBLENBQUNFO1FBQVE7SUFDOUM7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRjaGF0Ly4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay1leHRlbnNpb24tbWF0aC9kZXYvbGliL3N5bnRheC5qcz80NGYwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5FeHRlbnNpb259IEV4dGVuc2lvblxuICogQHR5cGVkZWYge2ltcG9ydCgnLi9tYXRoLXRleHQnKS5PcHRpb25zfSBPcHRpb25zXG4gKi9cblxuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvZGVzLmpzJ1xuaW1wb3J0IHttYXRoRmxvd30gZnJvbSAnLi9tYXRoLWZsb3cuanMnXG5pbXBvcnQge21hdGhUZXh0fSBmcm9tICcuL21hdGgtdGV4dC5qcydcblxuLyoqXG4gKiBAcGFyYW0ge09wdGlvbnN9IFtvcHRpb25zXVxuICogQHJldHVybnMge0V4dGVuc2lvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdGgob3B0aW9ucykge1xuICByZXR1cm4ge1xuICAgIGZsb3c6IHtbY29kZXMuZG9sbGFyU2lnbl06IG1hdGhGbG93fSxcbiAgICB0ZXh0OiB7W2NvZGVzLmRvbGxhclNpZ25dOiBtYXRoVGV4dChvcHRpb25zKX1cbiAgfVxufVxuIl0sIm5hbWVzIjpbImNvZGVzIiwibWF0aEZsb3ciLCJtYXRoVGV4dCIsIm1hdGgiLCJvcHRpb25zIiwiZmxvdyIsImRvbGxhclNpZ24iLCJ0ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-math/dev/lib/syntax.js\n");

/***/ })

};
;