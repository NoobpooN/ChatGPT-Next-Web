"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/micromark-extension-gfm-footnote";
exports.ids = ["vendor-chunks/micromark-extension-gfm-footnote"];
exports.modules = {

/***/ "(ssr)/./node_modules/micromark-extension-gfm-footnote/dev/lib/html.js":
/*!***********************************************************************!*\
  !*** ./node_modules/micromark-extension-gfm-footnote/dev/lib/html.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   gfmFootnoteHtml: () => (/* binding */ gfmFootnoteHtml)\n/* harmony export */ });\n/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ \"(ssr)/./node_modules/uvu/assert/index.mjs\");\n/* harmony import */ var micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-normalize-identifier */ \"(ssr)/./node_modules/micromark-util-normalize-identifier/dev/index.js\");\n/* harmony import */ var micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-sanitize-uri */ \"(ssr)/./node_modules/micromark-util-sanitize-uri/dev/index.js\");\n/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n *\n * @typedef Options\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\n *   attributes.\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=x></p>\n *   <script>alert(x)</script>\n *   ```\n *\n *   Elements by their ID are made available in browsers on the `window` object.\n *   Using a prefix prevents this from being a problem.\n * @property {string} [label='Footnotes']\n *   Label to use for the footnotes section.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {string} [backLabel='Back to content']\n *   Label to use from backreferences back to their footnote call.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n */ \n\n\nconst own = {}.hasOwnProperty;\n/**\n * @param {Options} [options={}]\n * @returns {HtmlExtension}\n */ function gfmFootnoteHtml(options = {}) {\n    const label = options.label || \"Footnotes\";\n    const backLabel = options.backLabel || \"Back to content\";\n    const clobberPrefix = options.clobberPrefix === undefined || options.clobberPrefix === null ? \"user-content-\" : options.clobberPrefix;\n    return {\n        enter: {\n            gfmFootnoteDefinition () {\n                const stack = /** @type {Array<boolean>} */ this.getData(\"tightStack\");\n                stack.push(false);\n            },\n            gfmFootnoteDefinitionLabelString () {\n                this.buffer();\n            },\n            gfmFootnoteCallString () {\n                this.buffer();\n            }\n        },\n        exit: {\n            gfmFootnoteDefinition () {\n                let definitions = /** @type {Record<string, string>} */ this.getData(\"gfmFootnoteDefinitions\");\n                const footnoteStack = /** @type {Array<string>} */ this.getData(\"gfmFootnoteDefinitionStack\");\n                const tightStack = /** @type {Array<boolean>} */ this.getData(\"tightStack\");\n                const current = footnoteStack.pop();\n                const value = this.resume();\n                (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(current, \"expected to be in a footnote\");\n                if (!definitions) {\n                    this.setData(\"gfmFootnoteDefinitions\", definitions = {});\n                }\n                if (!own.call(definitions, current)) definitions[current] = value;\n                tightStack.pop();\n                this.setData(\"slurpOneLineEnding\", true);\n                // “Hack” to prevent a line ending from showing up if we’re in a definition in\n                // an empty list item.\n                this.setData(\"lastWasTag\");\n            },\n            gfmFootnoteDefinitionLabelString (token) {\n                let footnoteStack = /** @type {Array<string>} */ this.getData(\"gfmFootnoteDefinitionStack\");\n                if (!footnoteStack) {\n                    this.setData(\"gfmFootnoteDefinitionStack\", footnoteStack = []);\n                }\n                footnoteStack.push((0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_1__.normalizeIdentifier)(this.sliceSerialize(token)));\n                this.resume() // Drop the label.\n                ;\n                this.buffer() // Get ready for a value.\n                ;\n            },\n            gfmFootnoteCallString (token) {\n                let calls = /** @type {Array<string>|undefined} */ this.getData(\"gfmFootnoteCallOrder\");\n                let counts = /** @type {Record<string, number>|undefined} */ this.getData(\"gfmFootnoteCallCounts\");\n                const id = (0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_1__.normalizeIdentifier)(this.sliceSerialize(token));\n                /** @type {number} */ let counter;\n                this.resume();\n                if (!calls) this.setData(\"gfmFootnoteCallOrder\", calls = []);\n                if (!counts) this.setData(\"gfmFootnoteCallCounts\", counts = {});\n                const index = calls.indexOf(id);\n                const safeId = (0,micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_2__.sanitizeUri)(id.toLowerCase());\n                if (index === -1) {\n                    calls.push(id);\n                    counts[id] = 1;\n                    counter = calls.length;\n                } else {\n                    counts[id]++;\n                    counter = index + 1;\n                }\n                const reuseCounter = counts[id];\n                this.tag('<sup><a href=\"#' + clobberPrefix + \"fn-\" + safeId + '\" id=\"' + clobberPrefix + \"fnref-\" + safeId + (reuseCounter > 1 ? \"-\" + reuseCounter : \"\") + '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' + String(counter) + \"</a></sup>\");\n            },\n            null () {\n                const calls = /** @type {Array<string>} */ this.getData(\"gfmFootnoteCallOrder\") || [];\n                const counts = /** @type {Record<string, number>} */ this.getData(\"gfmFootnoteCallCounts\") || {};\n                const definitions = /** @type {Record<string, string>} */ this.getData(\"gfmFootnoteDefinitions\") || {};\n                let index = -1;\n                if (calls.length > 0) {\n                    this.lineEndingIfNeeded();\n                    this.tag('<section data-footnotes=\"\" class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">');\n                    this.raw(this.encode(label));\n                    this.tag(\"</h2>\");\n                    this.lineEndingIfNeeded();\n                    this.tag(\"<ol>\");\n                }\n                while(++index < calls.length){\n                    // Called definitions are always defined.\n                    const id = calls[index];\n                    const safeId = (0,micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_2__.sanitizeUri)(id.toLowerCase());\n                    let referenceIndex = 0;\n                    /** @type {Array<string>} */ const references = [];\n                    while(++referenceIndex <= counts[id]){\n                        references.push('<a href=\"#' + clobberPrefix + \"fnref-\" + safeId + (referenceIndex > 1 ? \"-\" + referenceIndex : \"\") + '\" data-footnote-backref=\"\" class=\"data-footnote-backref\" aria-label=\"' + this.encode(backLabel) + '\">↩' + (referenceIndex > 1 ? \"<sup>\" + referenceIndex + \"</sup>\" : \"\") + \"</a>\");\n                    }\n                    const reference = references.join(\" \");\n                    let injected = false;\n                    this.lineEndingIfNeeded();\n                    this.tag('<li id=\"' + clobberPrefix + \"fn-\" + safeId + '\">');\n                    this.lineEndingIfNeeded();\n                    this.tag(definitions[id].replace(/<\\/p>(?:\\r?\\n|\\r)?$/, (/** @type {string} */ $0)=>{\n                        injected = true;\n                        return \" \" + reference + $0;\n                    }));\n                    if (!injected) {\n                        this.lineEndingIfNeeded();\n                        this.tag(reference);\n                    }\n                    this.lineEndingIfNeeded();\n                    this.tag(\"</li>\");\n                }\n                if (calls.length > 0) {\n                    this.lineEndingIfNeeded();\n                    this.tag(\"</ol>\");\n                    this.lineEndingIfNeeded();\n                    this.tag(\"</section>\");\n                }\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-gfm-footnote/dev/lib/html.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/micromark-extension-gfm-footnote/dev/lib/syntax.js":
/*!*************************************************************************!*\
  !*** ./node_modules/micromark-extension-gfm-footnote/dev/lib/syntax.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   gfmFootnote: () => (/* binding */ gfmFootnote)\n/* harmony export */ });\n/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ \"(ssr)/./node_modules/uvu/assert/index.mjs\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! micromark-core-commonmark */ \"(ssr)/./node_modules/micromark-core-commonmark/dev/lib/blank-line.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-factory-space */ \"(ssr)/./node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-character */ \"(ssr)/./node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ \"(ssr)/./node_modules/micromark-util-symbol/codes.js\");\n/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ \"(ssr)/./node_modules/micromark-util-symbol/constants.js\");\n/* harmony import */ var micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-normalize-identifier */ \"(ssr)/./node_modules/micromark-util-normalize-identifier/dev/index.js\");\n/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/types.js */ \"(ssr)/./node_modules/micromark-util-symbol/types.js\");\n/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n */ \n\n\n\n\n\n\n\nconst indent = {\n    tokenize: tokenizeIndent,\n    partial: true\n};\n/**\n * @returns {Extension}\n */ function gfmFootnote() {\n    /** @type {Extension} */ return {\n        document: {\n            [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket]: {\n                tokenize: tokenizeDefinitionStart,\n                continuation: {\n                    tokenize: tokenizeDefinitionContinuation\n                },\n                exit: gfmFootnoteDefinitionEnd\n            }\n        },\n        text: {\n            [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket]: {\n                tokenize: tokenizeGfmFootnoteCall\n            },\n            [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket]: {\n                add: \"after\",\n                tokenize: tokenizePotentialGfmFootnoteCall,\n                resolveTo: resolveToPotentialGfmFootnoteCall\n            }\n        }\n    };\n}\n/** @type {Tokenizer} */ function tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n    const self = this;\n    let index = self.events.length;\n    /** @type {Array<string>} */ // @ts-expect-error It’s fine!\n    const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n    /** @type {Token} */ let labelStart;\n    // Find an opening.\n    while(index--){\n        const token = self.events[index][1];\n        if (token.type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.labelImage) {\n            labelStart = token;\n            break;\n        }\n        // Exit if we’ve walked far enough.\n        if (token.type === \"gfmFootnoteCall\" || token.type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.labelLink || token.type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.label || token.type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.image || token.type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.link) {\n            break;\n        }\n    }\n    return start;\n    /** @type {State} */ function start(code) {\n        (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket, \"expected `]`\");\n        if (!labelStart || !labelStart._balanced) {\n            return nok(code);\n        }\n        const id = (0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_3__.normalizeIdentifier)(self.sliceSerialize({\n            start: labelStart.end,\n            end: self.now()\n        }));\n        if (id.charCodeAt(0) !== micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.caret || !defined.includes(id.slice(1))) {\n            return nok(code);\n        }\n        effects.enter(\"gfmFootnoteCallLabelMarker\");\n        effects.consume(code);\n        effects.exit(\"gfmFootnoteCallLabelMarker\");\n        return ok(code);\n    }\n}\n/** @type {Resolver} */ function resolveToPotentialGfmFootnoteCall(events, context) {\n    let index = events.length;\n    /** @type {Token|undefined} */ let labelStart;\n    // Find an opening.\n    while(index--){\n        if (events[index][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.labelImage && events[index][0] === \"enter\") {\n            labelStart = events[index][1];\n            break;\n        }\n    }\n    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(labelStart, \"expected `labelStart` to resolve\");\n    // Change the `labelImageMarker` to a `data`.\n    events[index + 1][1].type = micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.data;\n    events[index + 3][1].type = \"gfmFootnoteCallLabelMarker\";\n    // The whole (without `!`):\n    const call = {\n        type: \"gfmFootnoteCall\",\n        start: Object.assign({}, events[index + 3][1].start),\n        end: Object.assign({}, events[events.length - 1][1].end)\n    };\n    // The `^` marker\n    const marker = {\n        type: \"gfmFootnoteCallMarker\",\n        start: Object.assign({}, events[index + 3][1].end),\n        end: Object.assign({}, events[index + 3][1].end)\n    };\n    // Increment the end 1 character.\n    marker.end.column++;\n    marker.end.offset++;\n    marker.end._bufferIndex++;\n    const string = {\n        type: \"gfmFootnoteCallString\",\n        start: Object.assign({}, marker.end),\n        end: Object.assign({}, events[events.length - 1][1].start)\n    };\n    const chunk = {\n        type: micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.chunkString,\n        contentType: \"string\",\n        start: Object.assign({}, string.start),\n        end: Object.assign({}, string.end)\n    };\n    /** @type {Array<Event>} */ const replacement = [\n        // Take the `labelImageMarker` (now `data`, the `!`)\n        events[index + 1],\n        events[index + 2],\n        [\n            \"enter\",\n            call,\n            context\n        ],\n        // The `[`\n        events[index + 3],\n        events[index + 4],\n        // The `^`.\n        [\n            \"enter\",\n            marker,\n            context\n        ],\n        [\n            \"exit\",\n            marker,\n            context\n        ],\n        // Everything in between.\n        [\n            \"enter\",\n            string,\n            context\n        ],\n        [\n            \"enter\",\n            chunk,\n            context\n        ],\n        [\n            \"exit\",\n            chunk,\n            context\n        ],\n        [\n            \"exit\",\n            string,\n            context\n        ],\n        // The ending (`]`, properly parsed and labelled).\n        events[events.length - 2],\n        events[events.length - 1],\n        [\n            \"exit\",\n            call,\n            context\n        ]\n    ];\n    events.splice(index, events.length - index + 1, ...replacement);\n    return events;\n}\n/** @type {Tokenizer} */ function tokenizeGfmFootnoteCall(effects, ok, nok) {\n    const self = this;\n    /** @type {Array<string>} */ // @ts-expect-error It’s fine!\n    const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n    let size = 0;\n    /** @type {boolean} */ let data;\n    return start;\n    /** @type {State} */ function start(code) {\n        (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket, \"expected `[`\");\n        effects.enter(\"gfmFootnoteCall\");\n        effects.enter(\"gfmFootnoteCallLabelMarker\");\n        effects.consume(code);\n        effects.exit(\"gfmFootnoteCallLabelMarker\");\n        return callStart;\n    }\n    /** @type {State} */ function callStart(code) {\n        if (code !== micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.caret) return nok(code);\n        effects.enter(\"gfmFootnoteCallMarker\");\n        effects.consume(code);\n        effects.exit(\"gfmFootnoteCallMarker\");\n        effects.enter(\"gfmFootnoteCallString\");\n        effects.enter(\"chunkString\").contentType = \"string\";\n        return callData;\n    }\n    /** @type {State} */ function callData(code) {\n        /** @type {Token} */ let token;\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket || size++ > micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_4__.constants.linkReferenceSizeMax) {\n            return nok(code);\n        }\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket) {\n            if (!data) {\n                return nok(code);\n            }\n            effects.exit(\"chunkString\");\n            token = effects.exit(\"gfmFootnoteCallString\");\n            return defined.includes((0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_3__.normalizeIdentifier)(self.sliceSerialize(token))) ? end(code) : nok(code);\n        }\n        effects.consume(code);\n        if (!(0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEndingOrSpace)(code)) {\n            data = true;\n        }\n        return code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.backslash ? callEscape : callData;\n    }\n    /** @type {State} */ function callEscape(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.backslash || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket) {\n            effects.consume(code);\n            size++;\n            return callData;\n        }\n        return callData(code);\n    }\n    /** @type {State} */ function end(code) {\n        (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket, \"expected `]`\");\n        effects.enter(\"gfmFootnoteCallLabelMarker\");\n        effects.consume(code);\n        effects.exit(\"gfmFootnoteCallLabelMarker\");\n        effects.exit(\"gfmFootnoteCall\");\n        return ok;\n    }\n}\n/** @type {Tokenizer} */ function tokenizeDefinitionStart(effects, ok, nok) {\n    const self = this;\n    /** @type {Array<string>} */ // @ts-expect-error It’s fine!\n    const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n    /** @type {string} */ let identifier;\n    let size = 0;\n    /** @type {boolean|undefined} */ let data;\n    return start;\n    /** @type {State} */ function start(code) {\n        (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket, \"expected `[`\");\n        effects.enter(\"gfmFootnoteDefinition\")._container = true;\n        effects.enter(\"gfmFootnoteDefinitionLabel\");\n        effects.enter(\"gfmFootnoteDefinitionLabelMarker\");\n        effects.consume(code);\n        effects.exit(\"gfmFootnoteDefinitionLabelMarker\");\n        return labelStart;\n    }\n    /** @type {State} */ function labelStart(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.caret) {\n            effects.enter(\"gfmFootnoteDefinitionMarker\");\n            effects.consume(code);\n            effects.exit(\"gfmFootnoteDefinitionMarker\");\n            effects.enter(\"gfmFootnoteDefinitionLabelString\");\n            return atBreak;\n        }\n        return nok(code);\n    }\n    /** @type {State} */ function atBreak(code) {\n        /** @type {Token} */ let token;\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket || size > micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_4__.constants.linkReferenceSizeMax) {\n            return nok(code);\n        }\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket) {\n            if (!data) {\n                return nok(code);\n            }\n            token = effects.exit(\"gfmFootnoteDefinitionLabelString\");\n            identifier = (0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_3__.normalizeIdentifier)(self.sliceSerialize(token));\n            effects.enter(\"gfmFootnoteDefinitionLabelMarker\");\n            effects.consume(code);\n            effects.exit(\"gfmFootnoteDefinitionLabelMarker\");\n            effects.exit(\"gfmFootnoteDefinitionLabel\");\n            return labelAfter;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEnding)(code)) {\n            effects.enter(\"lineEnding\");\n            effects.consume(code);\n            effects.exit(\"lineEnding\");\n            size++;\n            return atBreak;\n        }\n        effects.enter(\"chunkString\").contentType = \"string\";\n        return label(code);\n    }\n    /** @type {State} */ function label(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEnding)(code) || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket || size > micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_4__.constants.linkReferenceSizeMax) {\n            effects.exit(\"chunkString\");\n            return atBreak(code);\n        }\n        if (!(0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEndingOrSpace)(code)) {\n            data = true;\n        }\n        size++;\n        effects.consume(code);\n        return code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.backslash ? labelEscape : label;\n    }\n    /** @type {State} */ function labelEscape(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.backslash || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket) {\n            effects.consume(code);\n            size++;\n            return label;\n        }\n        return label(code);\n    }\n    /** @type {State} */ function labelAfter(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.colon) {\n            effects.enter(\"definitionMarker\");\n            effects.consume(code);\n            effects.exit(\"definitionMarker\");\n            // Any whitespace after the marker is eaten, forming indented code\n            // is not possible.\n            // No space is also fine, just like a block quote marker.\n            return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__.factorySpace)(effects, done, \"gfmFootnoteDefinitionWhitespace\");\n        }\n        return nok(code);\n    }\n    /** @type {State} */ function done(code) {\n        if (!defined.includes(identifier)) {\n            defined.push(identifier);\n        }\n        return ok(code);\n    }\n}\n/** @type {Tokenizer} */ function tokenizeDefinitionContinuation(effects, ok, nok) {\n    // Either a blank line, which is okay, or an indented thing.\n    return effects.check(micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_7__.blankLine, ok, effects.attempt(indent, ok, nok));\n}\n/** @type {Exiter} */ function gfmFootnoteDefinitionEnd(effects) {\n    effects.exit(\"gfmFootnoteDefinition\");\n}\n/** @type {Tokenizer} */ function tokenizeIndent(effects, ok, nok) {\n    const self = this;\n    return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__.factorySpace)(effects, afterPrefix, \"gfmFootnoteDefinitionIndent\", micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_4__.constants.tabSize + 1);\n    /** @type {State} */ function afterPrefix(code) {\n        const tail = self.events[self.events.length - 1];\n        return tail && tail[1].type === \"gfmFootnoteDefinitionIndent\" && tail[2].sliceSerialize(tail[1], true).length === micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_4__.constants.tabSize ? ok(code) : nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-gfm-footnote/dev/lib/syntax.js\n");

/***/ })

};
;