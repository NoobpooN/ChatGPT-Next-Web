"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/micromark-extension-gfm-table";
exports.ids = ["vendor-chunks/micromark-extension-gfm-table"];
exports.modules = {

/***/ "(ssr)/./node_modules/micromark-extension-gfm-table/dev/lib/html.js":
/*!********************************************************************!*\
  !*** ./node_modules/micromark-extension-gfm-table/dev/lib/html.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   gfmTableHtml: () => (/* binding */ gfmTableHtml)\n/* harmony export */ });\n/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('./syntax.js').Align} Align\n */ const alignment = {\n    none: \"\",\n    left: ' align=\"left\"',\n    right: ' align=\"right\"',\n    center: ' align=\"center\"'\n};\n/** @type {HtmlExtension} */ const gfmTableHtml = {\n    enter: {\n        table (token) {\n            /** @type {Array<Align>} */ // @ts-expect-error Custom.\n            const tableAlign = token._align;\n            this.lineEndingIfNeeded();\n            this.tag(\"<table>\");\n            this.setData(\"tableAlign\", tableAlign);\n        },\n        tableBody () {\n            // Clear slurping line ending from the delimiter row.\n            this.setData(\"slurpOneLineEnding\");\n            this.tag(\"<tbody>\");\n        },\n        tableData () {\n            const tableAlign = /** @type {Array<Align>} */ this.getData(\"tableAlign\");\n            const tableColumn = /** @type {number} */ this.getData(\"tableColumn\");\n            const align = alignment[tableAlign[tableColumn]];\n            if (align === undefined) {\n                // Capture results to ignore them.\n                this.buffer();\n            } else {\n                this.lineEndingIfNeeded();\n                this.tag(\"<td\" + align + \">\");\n            }\n        },\n        tableHead () {\n            this.lineEndingIfNeeded();\n            this.tag(\"<thead>\");\n        },\n        tableHeader () {\n            const tableAlign = /** @type {Array<Align>} */ this.getData(\"tableAlign\");\n            const tableColumn = /** @type {number} */ this.getData(\"tableColumn\");\n            const align = alignment[tableAlign[tableColumn]];\n            this.lineEndingIfNeeded();\n            this.tag(\"<th\" + align + \">\");\n        },\n        tableRow () {\n            this.setData(\"tableColumn\", 0);\n            this.lineEndingIfNeeded();\n            this.tag(\"<tr>\");\n        }\n    },\n    exit: {\n        // Overwrite the default code text data handler to unescape escaped pipes when\n        // they are in tables.\n        codeTextData (token) {\n            let value = this.sliceSerialize(token);\n            if (this.getData(\"tableAlign\")) {\n                value = value.replace(/\\\\([\\\\|])/g, replace);\n            }\n            this.raw(this.encode(value));\n        },\n        table () {\n            this.setData(\"tableAlign\");\n            // If there was no table body, make sure the slurping from the delimiter row\n            // is cleared.\n            this.setData(\"slurpAllLineEndings\");\n            this.lineEndingIfNeeded();\n            this.tag(\"</table>\");\n        },\n        tableBody () {\n            this.lineEndingIfNeeded();\n            this.tag(\"</tbody>\");\n        },\n        tableData () {\n            const tableAlign = /** @type {Array<Align>} */ this.getData(\"tableAlign\");\n            const tableColumn = /** @type {number} */ this.getData(\"tableColumn\");\n            if (tableColumn in tableAlign) {\n                this.tag(\"</td>\");\n                this.setData(\"tableColumn\", tableColumn + 1);\n            } else {\n                // Stop capturing.\n                this.resume();\n            }\n        },\n        tableHead () {\n            this.lineEndingIfNeeded();\n            this.tag(\"</thead>\");\n            this.setData(\"slurpOneLineEnding\", true);\n        // Slurp the line ending from the delimiter row.\n        },\n        tableHeader () {\n            const tableColumn = /** @type {number} */ this.getData(\"tableColumn\");\n            this.tag(\"</th>\");\n            this.setData(\"tableColumn\", tableColumn + 1);\n        },\n        tableRow () {\n            const tableAlign = /** @type {Array<Align>} */ this.getData(\"tableAlign\");\n            let tableColumn = /** @type {number} */ this.getData(\"tableColumn\");\n            while(tableColumn < tableAlign.length){\n                this.lineEndingIfNeeded();\n                this.tag(\"<td\" + alignment[tableAlign[tableColumn]] + \"></td>\");\n                tableColumn++;\n            }\n            this.setData(\"tableColumn\", tableColumn);\n            this.lineEndingIfNeeded();\n            this.tag(\"</tr>\");\n        }\n    }\n};\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */ function replace($0, $1) {\n    // Pipes work, backslashes don’t (but can’t escape pipes).\n    return $1 === \"|\" ? $1 : $0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-gfm-table/dev/lib/html.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/micromark-extension-gfm-table/dev/lib/syntax.js":
/*!**********************************************************************!*\
  !*** ./node_modules/micromark-extension-gfm-table/dev/lib/syntax.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   gfmTable: () => (/* binding */ gfmTable)\n/* harmony export */ });\n/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ \"(ssr)/./node_modules/uvu/assert/index.mjs\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-factory-space */ \"(ssr)/./node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-character */ \"(ssr)/./node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ \"(ssr)/./node_modules/micromark-util-symbol/codes.js\");\n/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ \"(ssr)/./node_modules/micromark-util-symbol/constants.js\");\n/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/types.js */ \"(ssr)/./node_modules/micromark-util-symbol/types.js\");\n/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n */ /**\n * @typedef {'left'|'center'|'right'|'none'} Align\n */ \n\n\n\n\n\n/** @type {Extension} */ const gfmTable = {\n    flow: {\n        null: {\n            tokenize: tokenizeTable,\n            resolve: resolveTable\n        }\n    }\n};\nconst nextPrefixedOrBlank = {\n    tokenize: tokenizeNextPrefixedOrBlank,\n    partial: true\n};\n/** @type {Resolver} */ function resolveTable(events, context) {\n    let index = -1;\n    /** @type {boolean|undefined} */ let inHead;\n    /** @type {boolean|undefined} */ let inDelimiterRow;\n    /** @type {boolean|undefined} */ let inRow;\n    /** @type {number|undefined} */ let contentStart;\n    /** @type {number|undefined} */ let contentEnd;\n    /** @type {number|undefined} */ let cellStart;\n    /** @type {boolean|undefined} */ let seenCellInRow;\n    while(++index < events.length){\n        const token = events[index][1];\n        if (inRow) {\n            if (token.type === \"temporaryTableCellContent\") {\n                contentStart = contentStart || index;\n                contentEnd = index;\n            }\n            if (// Combine separate content parts into one.\n            (token.type === \"tableCellDivider\" || token.type === \"tableRow\") && contentEnd) {\n                (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(contentStart, \"expected `contentStart` to be defined if `contentEnd` is\");\n                const content = {\n                    type: \"tableContent\",\n                    start: events[contentStart][1].start,\n                    end: events[contentEnd][1].end\n                };\n                /** @type {Token} */ const text = {\n                    type: micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.chunkText,\n                    start: content.start,\n                    end: content.end,\n                    // @ts-expect-error It’s fine.\n                    contentType: micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__.constants.contentTypeText\n                };\n                (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(contentStart, \"expected `contentStart` to be defined if `contentEnd` is\");\n                events.splice(contentStart, contentEnd - contentStart + 1, [\n                    \"enter\",\n                    content,\n                    context\n                ], [\n                    \"enter\",\n                    text,\n                    context\n                ], [\n                    \"exit\",\n                    text,\n                    context\n                ], [\n                    \"exit\",\n                    content,\n                    context\n                ]);\n                index -= contentEnd - contentStart - 3;\n                contentStart = undefined;\n                contentEnd = undefined;\n            }\n        }\n        if (events[index][0] === \"exit\" && cellStart !== undefined && cellStart + (seenCellInRow ? 0 : 1) < index && (token.type === \"tableCellDivider\" || token.type === \"tableRow\" && (cellStart + 3 < index || events[cellStart][1].type !== micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.whitespace))) {\n            const cell = {\n                type: inDelimiterRow ? \"tableDelimiter\" : inHead ? \"tableHeader\" : \"tableData\",\n                start: events[cellStart][1].start,\n                end: events[index][1].end\n            };\n            events.splice(index + (token.type === \"tableCellDivider\" ? 1 : 0), 0, [\n                \"exit\",\n                cell,\n                context\n            ]);\n            events.splice(cellStart, 0, [\n                \"enter\",\n                cell,\n                context\n            ]);\n            index += 2;\n            cellStart = index + 1;\n            seenCellInRow = true;\n        }\n        if (token.type === \"tableRow\") {\n            inRow = events[index][0] === \"enter\";\n            if (inRow) {\n                cellStart = index + 1;\n                seenCellInRow = false;\n            }\n        }\n        if (token.type === \"tableDelimiterRow\") {\n            inDelimiterRow = events[index][0] === \"enter\";\n            if (inDelimiterRow) {\n                cellStart = index + 1;\n                seenCellInRow = false;\n            }\n        }\n        if (token.type === \"tableHead\") {\n            inHead = events[index][0] === \"enter\";\n        }\n    }\n    return events;\n}\n/** @type {Tokenizer} */ function tokenizeTable(effects, ok, nok) {\n    const self = this;\n    /** @type {Array<Align>} */ const align = [];\n    let tableHeaderCount = 0;\n    /** @type {boolean|undefined} */ let seenDelimiter;\n    /** @type {boolean|undefined} */ let hasDash;\n    return start;\n    /** @type {State} */ function start(code) {\n        // @ts-expect-error Custom.\n        effects.enter(\"table\")._align = align;\n        effects.enter(\"tableHead\");\n        effects.enter(\"tableRow\");\n        // If we start with a pipe, we open a cell marker.\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.verticalBar) {\n            return cellDividerHead(code);\n        }\n        tableHeaderCount++;\n        effects.enter(\"temporaryTableCellContent\");\n        // Can’t be space or eols at the start of a construct, so we’re in a cell.\n        (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(!(0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEndingOrSpace)(code), \"expected non-space\");\n        return inCellContentHead(code);\n    }\n    /** @type {State} */ function cellDividerHead(code) {\n        (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.verticalBar, \"expected `|`\");\n        effects.enter(\"tableCellDivider\");\n        effects.consume(code);\n        effects.exit(\"tableCellDivider\");\n        seenDelimiter = true;\n        return cellBreakHead;\n    }\n    /** @type {State} */ function cellBreakHead(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            return atRowEndHead(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.whitespace);\n            effects.consume(code);\n            return inWhitespaceHead;\n        }\n        if (seenDelimiter) {\n            seenDelimiter = undefined;\n            tableHeaderCount++;\n        }\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.verticalBar) {\n            return cellDividerHead(code);\n        }\n        // Anything else is cell content.\n        effects.enter(\"temporaryTableCellContent\");\n        return inCellContentHead(code);\n    }\n    /** @type {State} */ function inWhitespaceHead(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            effects.consume(code);\n            return inWhitespaceHead;\n        }\n        effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.whitespace);\n        return cellBreakHead(code);\n    }\n    /** @type {State} */ function inCellContentHead(code) {\n        // EOF, whitespace, pipe\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.verticalBar || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEndingOrSpace)(code)) {\n            effects.exit(\"temporaryTableCellContent\");\n            return cellBreakHead(code);\n        }\n        effects.consume(code);\n        return code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.backslash ? inCellContentEscapeHead : inCellContentHead;\n    }\n    /** @type {State} */ function inCellContentEscapeHead(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.backslash || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.verticalBar) {\n            effects.consume(code);\n            return inCellContentHead;\n        }\n        // Anything else.\n        return inCellContentHead(code);\n    }\n    /** @type {State} */ function atRowEndHead(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof) {\n            return nok(code);\n        }\n        (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code), \"expected eol\");\n        effects.exit(\"tableRow\");\n        effects.exit(\"tableHead\");\n        const originalInterrupt = self.interrupt;\n        self.interrupt = true;\n        return effects.attempt({\n            tokenize: tokenizeRowEnd,\n            partial: true\n        }, function(code) {\n            self.interrupt = originalInterrupt;\n            effects.enter(\"tableDelimiterRow\");\n            return atDelimiterRowBreak(code);\n        }, function(code) {\n            self.interrupt = originalInterrupt;\n            return nok(code);\n        })(code);\n    }\n    /** @type {State} */ function atDelimiterRowBreak(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            return rowEndDelimiter(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.whitespace);\n            effects.consume(code);\n            return inWhitespaceDelimiter;\n        }\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.dash) {\n            effects.enter(\"tableDelimiterFiller\");\n            effects.consume(code);\n            hasDash = true;\n            align.push(\"none\");\n            return inFillerDelimiter;\n        }\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.colon) {\n            effects.enter(\"tableDelimiterAlignment\");\n            effects.consume(code);\n            effects.exit(\"tableDelimiterAlignment\");\n            align.push(\"left\");\n            return afterLeftAlignment;\n        }\n        // If we start with a pipe, we open a cell marker.\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.verticalBar) {\n            effects.enter(\"tableCellDivider\");\n            effects.consume(code);\n            effects.exit(\"tableCellDivider\");\n            return atDelimiterRowBreak;\n        }\n        return nok(code);\n    }\n    /** @type {State} */ function inWhitespaceDelimiter(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            effects.consume(code);\n            return inWhitespaceDelimiter;\n        }\n        effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.whitespace);\n        return atDelimiterRowBreak(code);\n    }\n    /** @type {State} */ function inFillerDelimiter(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.dash) {\n            effects.consume(code);\n            return inFillerDelimiter;\n        }\n        effects.exit(\"tableDelimiterFiller\");\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.colon) {\n            effects.enter(\"tableDelimiterAlignment\");\n            effects.consume(code);\n            effects.exit(\"tableDelimiterAlignment\");\n            align[align.length - 1] = align[align.length - 1] === \"left\" ? \"center\" : \"right\";\n            return afterRightAlignment;\n        }\n        return atDelimiterRowBreak(code);\n    }\n    /** @type {State} */ function afterLeftAlignment(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.dash) {\n            effects.enter(\"tableDelimiterFiller\");\n            effects.consume(code);\n            hasDash = true;\n            return inFillerDelimiter;\n        }\n        // Anything else is not ok.\n        return nok(code);\n    }\n    /** @type {State} */ function afterRightAlignment(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            return rowEndDelimiter(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.whitespace);\n            effects.consume(code);\n            return inWhitespaceDelimiter;\n        }\n        // `|`\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.verticalBar) {\n            effects.enter(\"tableCellDivider\");\n            effects.consume(code);\n            effects.exit(\"tableCellDivider\");\n            return atDelimiterRowBreak;\n        }\n        return nok(code);\n    }\n    /** @type {State} */ function rowEndDelimiter(code) {\n        effects.exit(\"tableDelimiterRow\");\n        // Exit if there was no dash at all, or if the header cell count is not the\n        // delimiter cell count.\n        if (!hasDash || tableHeaderCount !== align.length) {\n            return nok(code);\n        }\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof) {\n            return tableClose(code);\n        }\n        (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code), \"expected eol\");\n        return effects.check(nextPrefixedOrBlank, tableClose, effects.attempt({\n            tokenize: tokenizeRowEnd,\n            partial: true\n        }, (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__.factorySpace)(effects, bodyStart, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.linePrefix, micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__.constants.tabSize), tableClose))(code);\n    }\n    /** @type {State} */ function tableClose(code) {\n        effects.exit(\"table\");\n        return ok(code);\n    }\n    /** @type {State} */ function bodyStart(code) {\n        effects.enter(\"tableBody\");\n        return rowStartBody(code);\n    }\n    /** @type {State} */ function rowStartBody(code) {\n        effects.enter(\"tableRow\");\n        // If we start with a pipe, we open a cell marker.\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.verticalBar) {\n            return cellDividerBody(code);\n        }\n        effects.enter(\"temporaryTableCellContent\");\n        // Can’t be space or eols at the start of a construct, so we’re in a cell.\n        return inCellContentBody(code);\n    }\n    /** @type {State} */ function cellDividerBody(code) {\n        (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.verticalBar, \"expected `|`\");\n        effects.enter(\"tableCellDivider\");\n        effects.consume(code);\n        effects.exit(\"tableCellDivider\");\n        return cellBreakBody;\n    }\n    /** @type {State} */ function cellBreakBody(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            return atRowEndBody(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.whitespace);\n            effects.consume(code);\n            return inWhitespaceBody;\n        }\n        // `|`\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.verticalBar) {\n            return cellDividerBody(code);\n        }\n        // Anything else is cell content.\n        effects.enter(\"temporaryTableCellContent\");\n        return inCellContentBody(code);\n    }\n    /** @type {State} */ function inWhitespaceBody(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            effects.consume(code);\n            return inWhitespaceBody;\n        }\n        effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.whitespace);\n        return cellBreakBody(code);\n    }\n    /** @type {State} */ function inCellContentBody(code) {\n        // EOF, whitespace, pipe\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.verticalBar || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEndingOrSpace)(code)) {\n            effects.exit(\"temporaryTableCellContent\");\n            return cellBreakBody(code);\n        }\n        effects.consume(code);\n        return code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.backslash ? inCellContentEscapeBody : inCellContentBody;\n    }\n    /** @type {State} */ function inCellContentEscapeBody(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.backslash || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.verticalBar) {\n            effects.consume(code);\n            return inCellContentBody;\n        }\n        // Anything else.\n        return inCellContentBody(code);\n    }\n    /** @type {State} */ function atRowEndBody(code) {\n        effects.exit(\"tableRow\");\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof) {\n            return tableBodyClose(code);\n        }\n        return effects.check(nextPrefixedOrBlank, tableBodyClose, effects.attempt({\n            tokenize: tokenizeRowEnd,\n            partial: true\n        }, (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__.factorySpace)(effects, rowStartBody, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.linePrefix, micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__.constants.tabSize), tableBodyClose))(code);\n    }\n    /** @type {State} */ function tableBodyClose(code) {\n        effects.exit(\"tableBody\");\n        return tableClose(code);\n    }\n    /** @type {Tokenizer} */ function tokenizeRowEnd(effects, ok, nok) {\n        return start;\n        /** @type {State} */ function start(code) {\n            (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code), \"expected eol\");\n            effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding);\n            return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__.factorySpace)(effects, prefixed, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.linePrefix);\n        }\n        /** @type {State} */ function prefixed(code) {\n            // Blank or interrupting line.\n            if (self.parser.lazy[self.now().line] || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n                return nok(code);\n            }\n            const tail = self.events[self.events.length - 1];\n            // Indented code can interrupt delimiter and body rows.\n            if (!self.parser.constructs.disable.null.includes(\"codeIndented\") && tail && tail[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__.constants.tabSize) {\n                return nok(code);\n            }\n            self._gfmTableDynamicInterruptHack = true;\n            return effects.check(self.parser.constructs.flow, function(code) {\n                self._gfmTableDynamicInterruptHack = false;\n                return nok(code);\n            }, function(code) {\n                self._gfmTableDynamicInterruptHack = false;\n                return ok(code);\n            })(code);\n        }\n    }\n}\n/** @type {Tokenizer} */ function tokenizeNextPrefixedOrBlank(effects, ok, nok) {\n    let size = 0;\n    return start;\n    /** @type {State} */ function start(code) {\n        // This is a check, so we don’t care about tokens, but we open a bogus one\n        // so we’re valid.\n        effects.enter(\"check\");\n        // EOL.\n        effects.consume(code);\n        return whitespace;\n    }\n    /** @type {State} */ function whitespace(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.virtualSpace || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.space) {\n            effects.consume(code);\n            size++;\n            return size === micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__.constants.tabSize ? ok : whitespace;\n        }\n        // EOF or whitespace\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEndingOrSpace)(code)) {\n            return ok(code);\n        }\n        // Anything else.\n        return nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-gfm-table/dev/lib/syntax.js\n");

/***/ })

};
;