"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/micromark-extension-gfm-task-list-item";
exports.ids = ["vendor-chunks/micromark-extension-gfm-task-list-item"];
exports.modules = {

/***/ "(ssr)/./node_modules/micromark-extension-gfm-task-list-item/dev/lib/html.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/micromark-extension-gfm-task-list-item/dev/lib/html.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   gfmTaskListItemHtml: () => (/* binding */ gfmTaskListItemHtml)\n/* harmony export */ });\n/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */ /** @type {HtmlExtension} */ const gfmTaskListItemHtml = {\n    enter: {\n        taskListCheck () {\n            this.tag('<input type=\"checkbox\" disabled=\"\" ');\n        }\n    },\n    exit: {\n        taskListCheck () {\n            this.tag(\"/>\");\n        },\n        taskListCheckValueChecked () {\n            this.tag('checked=\"\" ');\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tdGFzay1saXN0LWl0ZW0vZGV2L2xpYi9odG1sLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUVELDBCQUEwQixHQUNuQixNQUFNQSxzQkFBc0I7SUFDakNDLE9BQU87UUFDTEM7WUFDRSxJQUFJLENBQUNDLEdBQUcsQ0FBQztRQUNYO0lBQ0Y7SUFDQUMsTUFBTTtRQUNKRjtZQUNFLElBQUksQ0FBQ0MsR0FBRyxDQUFDO1FBQ1g7UUFDQUU7WUFDRSxJQUFJLENBQUNGLEdBQUcsQ0FBQztRQUNYO0lBQ0Y7QUFDRixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGNoYXQvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tdGFzay1saXN0LWl0ZW0vZGV2L2xpYi9odG1sLmpzPzdlNjUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkh0bWxFeHRlbnNpb259IEh0bWxFeHRlbnNpb25cbiAqL1xuXG4vKiogQHR5cGUge0h0bWxFeHRlbnNpb259ICovXG5leHBvcnQgY29uc3QgZ2ZtVGFza0xpc3RJdGVtSHRtbCA9IHtcbiAgZW50ZXI6IHtcbiAgICB0YXNrTGlzdENoZWNrKCkge1xuICAgICAgdGhpcy50YWcoJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBkaXNhYmxlZD1cIlwiICcpXG4gICAgfVxuICB9LFxuICBleGl0OiB7XG4gICAgdGFza0xpc3RDaGVjaygpIHtcbiAgICAgIHRoaXMudGFnKCcvPicpXG4gICAgfSxcbiAgICB0YXNrTGlzdENoZWNrVmFsdWVDaGVja2VkKCkge1xuICAgICAgdGhpcy50YWcoJ2NoZWNrZWQ9XCJcIiAnKVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbImdmbVRhc2tMaXN0SXRlbUh0bWwiLCJlbnRlciIsInRhc2tMaXN0Q2hlY2siLCJ0YWciLCJleGl0IiwidGFza0xpc3RDaGVja1ZhbHVlQ2hlY2tlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-gfm-task-list-item/dev/lib/html.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/micromark-extension-gfm-task-list-item/dev/lib/syntax.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/micromark-extension-gfm-task-list-item/dev/lib/syntax.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   gfmTaskListItem: () => (/* binding */ gfmTaskListItem)\n/* harmony export */ });\n/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ \"(ssr)/./node_modules/uvu/assert/index.mjs\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-factory-space */ \"(ssr)/./node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-character */ \"(ssr)/./node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ \"(ssr)/./node_modules/micromark-util-symbol/codes.js\");\n/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol/types.js */ \"(ssr)/./node_modules/micromark-util-symbol/types.js\");\n/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */ \n\n\n\n\nconst tasklistCheck = {\n    tokenize: tokenizeTasklistCheck\n};\nconst gfmTaskListItem = {\n    text: {\n        [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket]: tasklistCheck\n    }\n};\n/** @type {Tokenizer} */ function tokenizeTasklistCheck(effects, ok, nok) {\n    const self = this;\n    return open;\n    /** @type {State} */ function open(code) {\n        (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket, \"expected `[`\");\n        if (// Exit if there’s stuff before.\n        self.previous !== micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof || // Exit if not in the first content that is the first child of a list\n        // item.\n        !self._gfmTasklistFirstContentOfListItem) {\n            return nok(code);\n        }\n        effects.enter(\"taskListCheck\");\n        effects.enter(\"taskListCheckMarker\");\n        effects.consume(code);\n        effects.exit(\"taskListCheckMarker\");\n        return inside;\n    }\n    /** @type {State} */ function inside(code) {\n        // To match how GH works in comments, use `markdownSpace` (`[ \\t]`) instead\n        // of `markdownLineEndingOrSpace` (`[ \\t\\r\\n]`).\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code)) {\n            effects.enter(\"taskListCheckValueUnchecked\");\n            effects.consume(code);\n            effects.exit(\"taskListCheckValueUnchecked\");\n            return close;\n        }\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.uppercaseX || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.lowercaseX) {\n            effects.enter(\"taskListCheckValueChecked\");\n            effects.consume(code);\n            effects.exit(\"taskListCheckValueChecked\");\n            return close;\n        }\n        return nok(code);\n    }\n    /** @type {State} */ function close(code) {\n        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket) {\n            effects.enter(\"taskListCheckMarker\");\n            effects.consume(code);\n            effects.exit(\"taskListCheckMarker\");\n            effects.exit(\"taskListCheck\");\n            return effects.check({\n                tokenize: spaceThenNonSpace\n            }, ok, nok);\n        }\n        return nok(code);\n    }\n}\n/** @type {Tokenizer} */ function spaceThenNonSpace(effects, ok, nok) {\n    const self = this;\n    return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__.factorySpace)(effects, after, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.whitespace);\n    /** @type {State} */ function after(code) {\n        const tail = self.events[self.events.length - 1];\n        return(// We either found spaces…\n        (tail && tail[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.whitespace || // …or it was followed by a line ending, in which case, there has to be\n        // non-whitespace after that line ending, because otherwise we’d get an\n        // EOF as the content is closed with blank lines.\n        (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) && code !== micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof ? ok(code) : nok(code));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tdGFzay1saXN0LWl0ZW0vZGV2L2xpYi9zeW50YXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7O0NBUUMsR0FFc0M7QUFDYTtBQUluQjtBQUNtQjtBQUNBO0FBRXBELE1BQU1PLGdCQUFnQjtJQUFDQyxVQUFVQztBQUFxQjtBQUUvQyxNQUFNQyxrQkFBa0I7SUFDN0JDLE1BQU07UUFBQyxDQUFDTixpRUFBS0EsQ0FBQ08saUJBQWlCLENBQUMsRUFBRUw7SUFBYTtBQUNqRCxFQUFDO0FBRUQsc0JBQXNCLEdBQ3RCLFNBQVNFLHNCQUFzQkksT0FBTyxFQUFFYixFQUFFLEVBQUVjLEdBQUc7SUFDN0MsTUFBTUMsT0FBTyxJQUFJO0lBRWpCLE9BQU9DO0lBRVAsa0JBQWtCLEdBQ2xCLFNBQVNBLEtBQUtDLElBQUk7UUFDaEJoQiw4Q0FBTUEsQ0FBQ2dCLFNBQVNaLGlFQUFLQSxDQUFDTyxpQkFBaUIsRUFBRTtRQUV6QyxJQUNFLGdDQUFnQztRQUNoQ0csS0FBS0csUUFBUSxLQUFLYixpRUFBS0EsQ0FBQ2MsR0FBRyxJQUMzQixxRUFBcUU7UUFDckUsUUFBUTtRQUNSLENBQUNKLEtBQUtLLGtDQUFrQyxFQUN4QztZQUNBLE9BQU9OLElBQUlHO1FBQ2I7UUFFQUosUUFBUVEsS0FBSyxDQUFDO1FBQ2RSLFFBQVFRLEtBQUssQ0FBQztRQUNkUixRQUFRUyxPQUFPLENBQUNMO1FBQ2hCSixRQUFRVSxJQUFJLENBQUM7UUFDYixPQUFPQztJQUNUO0lBRUEsa0JBQWtCLEdBQ2xCLFNBQVNBLE9BQU9QLElBQUk7UUFDbEIsMkVBQTJFO1FBQzNFLGdEQUFnRDtRQUNoRCxJQUFJZCxtRkFBeUJBLENBQUNjLE9BQU87WUFDbkNKLFFBQVFRLEtBQUssQ0FBQztZQUNkUixRQUFRUyxPQUFPLENBQUNMO1lBQ2hCSixRQUFRVSxJQUFJLENBQUM7WUFDYixPQUFPRTtRQUNUO1FBRUEsSUFBSVIsU0FBU1osaUVBQUtBLENBQUNxQixVQUFVLElBQUlULFNBQVNaLGlFQUFLQSxDQUFDc0IsVUFBVSxFQUFFO1lBQzFEZCxRQUFRUSxLQUFLLENBQUM7WUFDZFIsUUFBUVMsT0FBTyxDQUFDTDtZQUNoQkosUUFBUVUsSUFBSSxDQUFDO1lBQ2IsT0FBT0U7UUFDVDtRQUVBLE9BQU9YLElBQUlHO0lBQ2I7SUFFQSxrQkFBa0IsR0FDbEIsU0FBU1EsTUFBTVIsSUFBSTtRQUNqQixJQUFJQSxTQUFTWixpRUFBS0EsQ0FBQ3VCLGtCQUFrQixFQUFFO1lBQ3JDZixRQUFRUSxLQUFLLENBQUM7WUFDZFIsUUFBUVMsT0FBTyxDQUFDTDtZQUNoQkosUUFBUVUsSUFBSSxDQUFDO1lBQ2JWLFFBQVFVLElBQUksQ0FBQztZQUNiLE9BQU9WLFFBQVFnQixLQUFLLENBQUM7Z0JBQUNyQixVQUFVc0I7WUFBaUIsR0FBRzlCLElBQUljO1FBQzFEO1FBRUEsT0FBT0EsSUFBSUc7SUFDYjtBQUNGO0FBRUEsc0JBQXNCLEdBQ3RCLFNBQVNhLGtCQUFrQmpCLE9BQU8sRUFBRWIsRUFBRSxFQUFFYyxHQUFHO0lBQ3pDLE1BQU1DLE9BQU8sSUFBSTtJQUVqQixPQUFPYixxRUFBWUEsQ0FBQ1csU0FBU2tCLE9BQU96QixpRUFBS0EsQ0FBQzBCLFVBQVU7SUFFcEQsa0JBQWtCLEdBQ2xCLFNBQVNELE1BQU1kLElBQUk7UUFDakIsTUFBTWdCLE9BQU9sQixLQUFLbUIsTUFBTSxDQUFDbkIsS0FBS21CLE1BQU0sQ0FBQ0MsTUFBTSxHQUFHLEVBQUU7UUFFaEQsT0FFRSwwQkFEMEI7UUFDekIsU0FBU0YsSUFBSSxDQUFDLEVBQUUsQ0FBQ0csSUFBSSxLQUFLOUIsaUVBQUtBLENBQUMwQixVQUFVLElBQ3pDLHVFQUF1RTtRQUN2RSx1RUFBdUU7UUFDdkUsaURBQWlEO1FBQ2pENUIsNEVBQWtCQSxDQUFDYSxLQUFJLEtBQ3ZCQSxTQUFTWixpRUFBS0EsQ0FBQ2MsR0FBRyxHQUNoQm5CLEdBQUdpQixRQUNISCxJQUFJRztJQUVaO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0Y2hhdC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLWdmbS10YXNrLWxpc3QtaXRlbS9kZXYvbGliL3N5bnRheC5qcz85NDA2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5FeHRlbnNpb259IEV4dGVuc2lvblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3RSZWNvcmR9IENvbnN0cnVjdFJlY29yZFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5QcmV2aW91c30gUHJldmlvdXNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkV2ZW50fSBFdmVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db2RlfSBDb2RlXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ3V2dS9hc3NlcnQnXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge1xuICBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlLFxuICBtYXJrZG93bkxpbmVFbmRpbmdcbn0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvZGVzLmpzJ1xuaW1wb3J0IHt0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL3R5cGVzLmpzJ1xuXG5jb25zdCB0YXNrbGlzdENoZWNrID0ge3Rva2VuaXplOiB0b2tlbml6ZVRhc2tsaXN0Q2hlY2t9XG5cbmV4cG9ydCBjb25zdCBnZm1UYXNrTGlzdEl0ZW0gPSB7XG4gIHRleHQ6IHtbY29kZXMubGVmdFNxdWFyZUJyYWNrZXRdOiB0YXNrbGlzdENoZWNrfVxufVxuXG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cbmZ1bmN0aW9uIHRva2VuaXplVGFza2xpc3RDaGVjayhlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgcmV0dXJuIG9wZW5cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBvcGVuKGNvZGUpIHtcbiAgICBhc3NlcnQoY29kZSA9PT0gY29kZXMubGVmdFNxdWFyZUJyYWNrZXQsICdleHBlY3RlZCBgW2AnKVxuXG4gICAgaWYgKFxuICAgICAgLy8gRXhpdCBpZiB0aGVyZeKAmXMgc3R1ZmYgYmVmb3JlLlxuICAgICAgc2VsZi5wcmV2aW91cyAhPT0gY29kZXMuZW9mIHx8XG4gICAgICAvLyBFeGl0IGlmIG5vdCBpbiB0aGUgZmlyc3QgY29udGVudCB0aGF0IGlzIHRoZSBmaXJzdCBjaGlsZCBvZiBhIGxpc3RcbiAgICAgIC8vIGl0ZW0uXG4gICAgICAhc2VsZi5fZ2ZtVGFza2xpc3RGaXJzdENvbnRlbnRPZkxpc3RJdGVtXG4gICAgKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcigndGFza0xpc3RDaGVjaycpXG4gICAgZWZmZWN0cy5lbnRlcigndGFza0xpc3RDaGVja01hcmtlcicpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KCd0YXNrTGlzdENoZWNrTWFya2VyJylcbiAgICByZXR1cm4gaW5zaWRlXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBpbnNpZGUoY29kZSkge1xuICAgIC8vIFRvIG1hdGNoIGhvdyBHSCB3b3JrcyBpbiBjb21tZW50cywgdXNlIGBtYXJrZG93blNwYWNlYCAoYFsgXFx0XWApIGluc3RlYWRcbiAgICAvLyBvZiBgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZWAgKGBbIFxcdFxcclxcbl1gKS5cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5lbnRlcigndGFza0xpc3RDaGVja1ZhbHVlVW5jaGVja2VkJylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KCd0YXNrTGlzdENoZWNrVmFsdWVVbmNoZWNrZWQnKVxuICAgICAgcmV0dXJuIGNsb3NlXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLnVwcGVyY2FzZVggfHwgY29kZSA9PT0gY29kZXMubG93ZXJjYXNlWCkge1xuICAgICAgZWZmZWN0cy5lbnRlcigndGFza0xpc3RDaGVja1ZhbHVlQ2hlY2tlZCcpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgndGFza0xpc3RDaGVja1ZhbHVlQ2hlY2tlZCcpXG4gICAgICByZXR1cm4gY2xvc2VcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBjbG9zZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLnJpZ2h0U3F1YXJlQnJhY2tldCkge1xuICAgICAgZWZmZWN0cy5lbnRlcigndGFza0xpc3RDaGVja01hcmtlcicpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgndGFza0xpc3RDaGVja01hcmtlcicpXG4gICAgICBlZmZlY3RzLmV4aXQoJ3Rhc2tMaXN0Q2hlY2snKVxuICAgICAgcmV0dXJuIGVmZmVjdHMuY2hlY2soe3Rva2VuaXplOiBzcGFjZVRoZW5Ob25TcGFjZX0sIG9rLCBub2spXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG59XG5cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuZnVuY3Rpb24gc3BhY2VUaGVuTm9uU3BhY2UoZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuXG4gIHJldHVybiBmYWN0b3J5U3BhY2UoZWZmZWN0cywgYWZ0ZXIsIHR5cGVzLndoaXRlc3BhY2UpXG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gYWZ0ZXIoY29kZSkge1xuICAgIGNvbnN0IHRhaWwgPSBzZWxmLmV2ZW50c1tzZWxmLmV2ZW50cy5sZW5ndGggLSAxXVxuXG4gICAgcmV0dXJuIChcbiAgICAgIC8vIFdlIGVpdGhlciBmb3VuZCBzcGFjZXPigKZcbiAgICAgICgodGFpbCAmJiB0YWlsWzFdLnR5cGUgPT09IHR5cGVzLndoaXRlc3BhY2UpIHx8XG4gICAgICAgIC8vIOKApm9yIGl0IHdhcyBmb2xsb3dlZCBieSBhIGxpbmUgZW5kaW5nLCBpbiB3aGljaCBjYXNlLCB0aGVyZSBoYXMgdG8gYmVcbiAgICAgICAgLy8gbm9uLXdoaXRlc3BhY2UgYWZ0ZXIgdGhhdCBsaW5lIGVuZGluZywgYmVjYXVzZSBvdGhlcndpc2Ugd2XigJlkIGdldCBhblxuICAgICAgICAvLyBFT0YgYXMgdGhlIGNvbnRlbnQgaXMgY2xvc2VkIHdpdGggYmxhbmsgbGluZXMuXG4gICAgICAgIG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkgJiZcbiAgICAgICAgY29kZSAhPT0gY29kZXMuZW9mXG4gICAgICAgID8gb2soY29kZSlcbiAgICAgICAgOiBub2soY29kZSlcbiAgICApXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJvayIsImFzc2VydCIsImZhY3RvcnlTcGFjZSIsIm1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UiLCJtYXJrZG93bkxpbmVFbmRpbmciLCJjb2RlcyIsInR5cGVzIiwidGFza2xpc3RDaGVjayIsInRva2VuaXplIiwidG9rZW5pemVUYXNrbGlzdENoZWNrIiwiZ2ZtVGFza0xpc3RJdGVtIiwidGV4dCIsImxlZnRTcXVhcmVCcmFja2V0IiwiZWZmZWN0cyIsIm5vayIsInNlbGYiLCJvcGVuIiwiY29kZSIsInByZXZpb3VzIiwiZW9mIiwiX2dmbVRhc2tsaXN0Rmlyc3RDb250ZW50T2ZMaXN0SXRlbSIsImVudGVyIiwiY29uc3VtZSIsImV4aXQiLCJpbnNpZGUiLCJjbG9zZSIsInVwcGVyY2FzZVgiLCJsb3dlcmNhc2VYIiwicmlnaHRTcXVhcmVCcmFja2V0IiwiY2hlY2siLCJzcGFjZVRoZW5Ob25TcGFjZSIsImFmdGVyIiwid2hpdGVzcGFjZSIsInRhaWwiLCJldmVudHMiLCJsZW5ndGgiLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-gfm-task-list-item/dev/lib/syntax.js\n");

/***/ })

};
;