"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@fortaine";
exports.ids = ["vendor-chunks/@fortaine"];
exports.modules = {

/***/ "(ssr)/./node_modules/@fortaine/fetch-event-source/lib/esm/fetch.js":
/*!********************************************************************!*\
  !*** ./node_modules/@fortaine/fetch-event-source/lib/esm/fetch.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventStreamContentType: () => (/* binding */ EventStreamContentType),\n/* harmony export */   fetchEventSource: () => (/* binding */ fetchEventSource)\n/* harmony export */ });\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ \"(ssr)/./node_modules/@fortaine/fetch-event-source/lib/esm/parse.js\");\nvar __rest = undefined && undefined.__rest || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\n\nconst EventStreamContentType = \"text/event-stream\";\nconst DefaultRetryInterval = 1000;\nconst LastEventId = \"last-event-id\";\nfunction fetchEventSource(input, _a) {\n    var { signal: inputSignal, headers: inputHeaders, onopen: inputOnOpen, onmessage, onclose, onerror, openWhenHidden, fetch: inputFetch } = _a, rest = __rest(_a, [\n        \"signal\",\n        \"headers\",\n        \"onopen\",\n        \"onmessage\",\n        \"onclose\",\n        \"onerror\",\n        \"openWhenHidden\",\n        \"fetch\"\n    ]);\n    return new Promise((resolve, reject)=>{\n        const headers = Object.assign({}, inputHeaders);\n        if (!headers.accept) {\n            headers.accept = EventStreamContentType;\n        }\n        let curRequestController;\n        function onVisibilityChange() {\n            curRequestController.abort();\n            if (!document.hidden) {\n                create();\n            }\n        }\n        if (typeof document !== \"undefined\" && !openWhenHidden) {\n            document.addEventListener(\"visibilitychange\", onVisibilityChange);\n        }\n        let retryInterval = DefaultRetryInterval;\n        let retryTimer = 0;\n        function dispose() {\n            if (typeof document !== \"undefined\" && !openWhenHidden) {\n                document.removeEventListener(\"visibilitychange\", onVisibilityChange);\n            }\n            clearTimeout(retryTimer);\n            curRequestController.abort();\n        }\n        inputSignal === null || inputSignal === void 0 ? void 0 : inputSignal.addEventListener(\"abort\", ()=>{\n            dispose();\n            resolve();\n        });\n        const fetchFn = inputFetch !== null && inputFetch !== void 0 ? inputFetch : fetch;\n        const onopen = inputOnOpen !== null && inputOnOpen !== void 0 ? inputOnOpen : defaultOnOpen;\n        async function create() {\n            var _a;\n            curRequestController = new AbortController();\n            try {\n                const response = await fetchFn(input, Object.assign(Object.assign({}, rest), {\n                    headers,\n                    signal: curRequestController.signal\n                }));\n                await onopen(response);\n                await (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(response.body, (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__.getLines)((0,_parse_js__WEBPACK_IMPORTED_MODULE_0__.getMessages)(onmessage, (id)=>{\n                    if (id) {\n                        headers[LastEventId] = id;\n                    } else {\n                        delete headers[LastEventId];\n                    }\n                }, (retry)=>{\n                    retryInterval = retry;\n                })));\n                onclose === null || onclose === void 0 ? void 0 : onclose();\n                dispose();\n                resolve();\n            } catch (err) {\n                if (!curRequestController.signal.aborted) {\n                    try {\n                        const interval = (_a = onerror === null || onerror === void 0 ? void 0 : onerror(err)) !== null && _a !== void 0 ? _a : retryInterval;\n                        clearTimeout(retryTimer);\n                        retryTimer = setTimeout(create, interval);\n                    } catch (innerErr) {\n                        dispose();\n                        reject(innerErr);\n                    }\n                }\n            }\n        }\n        create();\n    });\n}\nfunction defaultOnOpen(response) {\n    const contentType = response.headers.get(\"content-type\");\n    if (!(contentType === null || contentType === void 0 ? void 0 : contentType.startsWith(EventStreamContentType))) {\n        throw new Error(`Expected content-type to be ${EventStreamContentType}, Actual: ${contentType}`);\n    }\n} //# sourceMappingURL=fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZvcnRhaW5lL2ZldGNoLWV2ZW50LXNvdXJjZS9saWIvZXNtL2ZldGNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUlBLFNBQVMsU0FBSyxJQUFJLFNBQUksQ0FBQ0EsTUFBTSxJQUFLLFNBQVVDLENBQUMsRUFBRUMsQ0FBQztJQUNoRCxJQUFJQyxJQUFJLENBQUM7SUFDVCxJQUFLLElBQUlDLEtBQUtILEVBQUcsSUFBSUksT0FBT0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1AsR0FBR0csTUFBTUYsRUFBRU8sT0FBTyxDQUFDTCxLQUFLLEdBQzlFRCxDQUFDLENBQUNDLEVBQUUsR0FBR0gsQ0FBQyxDQUFDRyxFQUFFO0lBQ2YsSUFBSUgsS0FBSyxRQUFRLE9BQU9JLE9BQU9LLHFCQUFxQixLQUFLLFlBQ3JELElBQUssSUFBSUMsSUFBSSxHQUFHUCxJQUFJQyxPQUFPSyxxQkFBcUIsQ0FBQ1QsSUFBSVUsSUFBSVAsRUFBRVEsTUFBTSxFQUFFRCxJQUFLO1FBQ3BFLElBQUlULEVBQUVPLE9BQU8sQ0FBQ0wsQ0FBQyxDQUFDTyxFQUFFLElBQUksS0FBS04sT0FBT0MsU0FBUyxDQUFDTyxvQkFBb0IsQ0FBQ0wsSUFBSSxDQUFDUCxHQUFHRyxDQUFDLENBQUNPLEVBQUUsR0FDekVSLENBQUMsQ0FBQ0MsQ0FBQyxDQUFDTyxFQUFFLENBQUMsR0FBR1YsQ0FBQyxDQUFDRyxDQUFDLENBQUNPLEVBQUUsQ0FBQztJQUN6QjtJQUNKLE9BQU9SO0FBQ1g7QUFDNkQ7QUFDdEQsTUFBTWMseUJBQXlCLG9CQUFvQjtBQUMxRCxNQUFNQyx1QkFBdUI7QUFDN0IsTUFBTUMsY0FBYztBQUNiLFNBQVNDLGlCQUFpQkMsS0FBSyxFQUFFQyxFQUFFO0lBQ3RDLElBQUksRUFBRUMsUUFBUUMsV0FBVyxFQUFFQyxTQUFTQyxZQUFZLEVBQUVDLFFBQVFDLFdBQVcsRUFBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUVDLE9BQU8sRUFB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LHVCQUF1QixVQUFVLEVBQUVnRCxZQUFZLENBQUM7SUFDbkc7QUFDSixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRjaGF0Ly4vbm9kZV9tb2R1bGVzL0Bmb3J0YWluZS9mZXRjaC1ldmVudC1zb3VyY2UvbGliL2VzbS9mZXRjaC5qcz8yOGU4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCB7IGdldEJ5dGVzLCBnZXRMaW5lcywgZ2V0TWVzc2FnZXMgfSBmcm9tICcuL3BhcnNlLmpzJztcbmV4cG9ydCBjb25zdCBFdmVudFN0cmVhbUNvbnRlbnRUeXBlID0gJ3RleHQvZXZlbnQtc3RyZWFtJztcbmNvbnN0IERlZmF1bHRSZXRyeUludGVydmFsID0gMTAwMDtcbmNvbnN0IExhc3RFdmVudElkID0gJ2xhc3QtZXZlbnQtaWQnO1xuZXhwb3J0IGZ1bmN0aW9uIGZldGNoRXZlbnRTb3VyY2UoaW5wdXQsIF9hKSB7XG4gICAgdmFyIHsgc2lnbmFsOiBpbnB1dFNpZ25hbCwgaGVhZGVyczogaW5wdXRIZWFkZXJzLCBvbm9wZW46IGlucHV0T25PcGVuLCBvbm1lc3NhZ2UsIG9uY2xvc2UsIG9uZXJyb3IsIG9wZW5XaGVuSGlkZGVuLCBmZXRjaDogaW5wdXRGZXRjaCB9ID0gX2EsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcInNpZ25hbFwiLCBcImhlYWRlcnNcIiwgXCJvbm9wZW5cIiwgXCJvbm1lc3NhZ2VcIiwgXCJvbmNsb3NlXCIsIFwib25lcnJvclwiLCBcIm9wZW5XaGVuSGlkZGVuXCIsIFwiZmV0Y2hcIl0pO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCBpbnB1dEhlYWRlcnMpO1xuICAgICAgICBpZiAoIWhlYWRlcnMuYWNjZXB0KSB7XG4gICAgICAgICAgICBoZWFkZXJzLmFjY2VwdCA9IEV2ZW50U3RyZWFtQ29udGVudFR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGN1clJlcXVlc3RDb250cm9sbGVyO1xuICAgICAgICBmdW5jdGlvbiBvblZpc2liaWxpdHlDaGFuZ2UoKSB7XG4gICAgICAgICAgICBjdXJSZXF1ZXN0Q29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgICAgICAgaWYgKCFkb2N1bWVudC5oaWRkZW4pIHtcbiAgICAgICAgICAgICAgICBjcmVhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhb3BlbldoZW5IaWRkZW4pIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBvblZpc2liaWxpdHlDaGFuZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXRyeUludGVydmFsID0gRGVmYXVsdFJldHJ5SW50ZXJ2YWw7XG4gICAgICAgIGxldCByZXRyeVRpbWVyID0gMDtcbiAgICAgICAgZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmICFvcGVuV2hlbkhpZGRlbikge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBvblZpc2liaWxpdHlDaGFuZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHJldHJ5VGltZXIpO1xuICAgICAgICAgICAgY3VyUmVxdWVzdENvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dFNpZ25hbCA9PT0gbnVsbCB8fCBpbnB1dFNpZ25hbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5wdXRTaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCAoKSA9PiB7XG4gICAgICAgICAgICBkaXNwb3NlKCk7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBmZXRjaEZuID0gaW5wdXRGZXRjaCAhPT0gbnVsbCAmJiBpbnB1dEZldGNoICE9PSB2b2lkIDAgPyBpbnB1dEZldGNoIDogZmV0Y2g7XG4gICAgICAgIGNvbnN0IG9ub3BlbiA9IGlucHV0T25PcGVuICE9PSBudWxsICYmIGlucHV0T25PcGVuICE9PSB2b2lkIDAgPyBpbnB1dE9uT3BlbiA6IGRlZmF1bHRPbk9wZW47XG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGN1clJlcXVlc3RDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoRm4oaW5wdXQsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzdCksIHsgaGVhZGVycywgc2lnbmFsOiBjdXJSZXF1ZXN0Q29udHJvbGxlci5zaWduYWwgfSkpO1xuICAgICAgICAgICAgICAgIGF3YWl0IG9ub3BlbihyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgZ2V0Qnl0ZXMocmVzcG9uc2UuYm9keSwgZ2V0TGluZXMoZ2V0TWVzc2FnZXMob25tZXNzYWdlLCBpZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1tMYXN0RXZlbnRJZF0gPSBpZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBoZWFkZXJzW0xhc3RFdmVudElkXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHJldHJ5ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0cnlJbnRlcnZhbCA9IHJldHJ5O1xuICAgICAgICAgICAgICAgIH0pKSk7XG4gICAgICAgICAgICAgICAgb25jbG9zZSA9PT0gbnVsbCB8fCBvbmNsb3NlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWN1clJlcXVlc3RDb250cm9sbGVyLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnRlcnZhbCA9IChfYSA9IG9uZXJyb3IgPT09IG51bGwgfHwgb25lcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25lcnJvcihlcnIpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiByZXRyeUludGVydmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHJldHJ5VGltZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnlUaW1lciA9IHNldFRpbWVvdXQoY3JlYXRlLCBpbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGlubmVyRXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoaW5uZXJFcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNyZWF0ZSgpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZGVmYXVsdE9uT3BlbihyZXNwb25zZSkge1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpO1xuICAgIGlmICghKGNvbnRlbnRUeXBlID09PSBudWxsIHx8IGNvbnRlbnRUeXBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb250ZW50VHlwZS5zdGFydHNXaXRoKEV2ZW50U3RyZWFtQ29udGVudFR5cGUpKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGNvbnRlbnQtdHlwZSB0byBiZSAke0V2ZW50U3RyZWFtQ29udGVudFR5cGV9LCBBY3R1YWw6ICR7Y29udGVudFR5cGV9YCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmV0Y2guanMubWFwIl0sIm5hbWVzIjpbIl9fcmVzdCIsInMiLCJlIiwidCIsInAiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaSIsImxlbmd0aCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiZ2V0Qnl0ZXMiLCJnZXRMaW5lcyIsImdldE1lc3NhZ2VzIiwiRXZlbnRTdHJlYW1Db250ZW50VHlwZSIsIkRlZmF1bHRSZXRyeUludGVydmFsIiwiTGFzdEV2ZW50SWQiLCJmZXRjaEV2ZW50U291cmNlIiwiaW5wdXQiLCJfYSIsInNpZ25hbCIsImlucHV0U2lnbmFsIiwiaGVhZGVycyIsImlucHV0SGVhZGVycyIsIm9ub3BlbiIsImlucHV0T25PcGVuIiwib25tZXNzYWdlIiwib25jbG9zZSIsIm9uZXJyb3IiLCJvcGVuV2hlbkhpZGRlbiIsImZldGNoIiwiaW5wdXRGZXRjaCIsInJlc3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImFzc2lnbiIsImFjY2VwdCIsImN1clJlcXVlc3RDb250cm9sbGVyIiwib25WaXNpYmlsaXR5Q2hhbmdlIiwiYWJvcnQiLCJkb2N1bWVudCIsImhpZGRlbiIsImNyZWF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZXRyeUludGVydmFsIiwicmV0cnlUaW1lciIsImRpc3Bvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2xlYXJUaW1lb3V0IiwiZmV0Y2hGbiIsImRlZmF1bHRPbk9wZW4iLCJBYm9ydENvbnRyb2xsZXIiLCJyZXNwb25zZSIsImJvZHkiLCJpZCIsInJldHJ5IiwiZXJyIiwiYWJvcnRlZCIsImludGVydmFsIiwic2V0VGltZW91dCIsImlubmVyRXJyIiwiY29udGVudFR5cGUiLCJnZXQiLCJzdGFydHNXaXRoIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fortaine/fetch-event-source/lib/esm/fetch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fortaine/fetch-event-source/lib/esm/parse.js":
/*!********************************************************************!*\
  !*** ./node_modules/@fortaine/fetch-event-source/lib/esm/parse.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBytes: () => (/* binding */ getBytes),\n/* harmony export */   getLines: () => (/* binding */ getLines),\n/* harmony export */   getMessages: () => (/* binding */ getMessages)\n/* harmony export */ });\nasync function getBytes(stream, onChunk) {\n    const reader = stream.getReader();\n    let result;\n    while(!(result = await reader.read()).done){\n        onChunk(result.value);\n    }\n}\nfunction getLines(onLine) {\n    let buffer;\n    let position;\n    let fieldLength;\n    let discardTrailingNewline = false;\n    return function onChunk(arr) {\n        if (buffer === undefined) {\n            buffer = arr;\n            position = 0;\n            fieldLength = -1;\n        } else {\n            buffer = concat(buffer, arr);\n        }\n        const bufLength = buffer.length;\n        let lineStart = 0;\n        while(position < bufLength){\n            if (discardTrailingNewline) {\n                if (buffer[position] === 10) {\n                    lineStart = ++position;\n                }\n                discardTrailingNewline = false;\n            }\n            let lineEnd = -1;\n            for(; position < bufLength && lineEnd === -1; ++position){\n                switch(buffer[position]){\n                    case 58:\n                        if (fieldLength === -1) {\n                            fieldLength = position - lineStart;\n                        }\n                        break;\n                    case 13:\n                        discardTrailingNewline = true;\n                    case 10:\n                        lineEnd = position;\n                        break;\n                }\n            }\n            if (lineEnd === -1) {\n                break;\n            }\n            onLine(buffer.subarray(lineStart, lineEnd), fieldLength);\n            lineStart = position;\n            fieldLength = -1;\n        }\n        if (lineStart === bufLength) {\n            buffer = undefined;\n        } else if (lineStart !== 0) {\n            buffer = buffer.subarray(lineStart);\n            position -= lineStart;\n        }\n    };\n}\nfunction getMessages(onMessage, onId, onRetry) {\n    let message = newMessage();\n    const decoder = new TextDecoder();\n    return function onLine(line, fieldLength) {\n        if (line.length === 0) {\n            onMessage === null || onMessage === void 0 ? void 0 : onMessage(message);\n            message = newMessage();\n        } else if (fieldLength > 0) {\n            const field = decoder.decode(line.subarray(0, fieldLength));\n            const valueOffset = fieldLength + (line[fieldLength + 1] === 32 ? 2 : 1);\n            const value = decoder.decode(line.subarray(valueOffset));\n            switch(field){\n                case \"data\":\n                    message.data = message.data ? message.data + \"\\n\" + value : value;\n                    break;\n                case \"event\":\n                    message.event = value;\n                    break;\n                case \"id\":\n                    onId === null || onId === void 0 ? void 0 : onId(message.id = value);\n                    break;\n                case \"retry\":\n                    const retry = parseInt(value, 10);\n                    if (!isNaN(retry)) {\n                        onRetry === null || onRetry === void 0 ? void 0 : onRetry(message.retry = retry);\n                    }\n                    break;\n            }\n        }\n    };\n}\nfunction concat(a, b) {\n    const res = new Uint8Array(a.length + b.length);\n    res.set(a);\n    res.set(b, a.length);\n    return res;\n}\nfunction newMessage() {\n    return {\n        data: \"\",\n        event: \"\",\n        id: \"\",\n        retry: undefined\n    };\n} //# sourceMappingURL=parse.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fortaine/fetch-event-source/lib/esm/parse.js\n");

/***/ })

};
;