"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/flairup";
exports.ids = ["vendor-chunks/flairup"];
exports.modules = {

/***/ "(ssr)/./node_modules/flairup/dist/esm/index.js":
/*!************************************************!*\
  !*** ./node_modules/flairup/dist/esm/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSheet: () => (/* binding */ createSheet),\n/* harmony export */   cx: () => (/* binding */ cx)\n/* harmony export */ });\n// src/utils/asArray.ts\nfunction asArray(v) {\n    return [].concat(v);\n}\n// src/utils/is.ts\nfunction isPsuedoSelector(selector) {\n    return selector.startsWith(\":\");\n}\nfunction isStyleCondition(selector) {\n    return isString(selector) && (selector === \"*\" || selector.length > 1 && \":>~.+*\".includes(selector.slice(0, 1)) || isImmediatePostcondition(selector));\n}\nfunction isValidProperty(property, value) {\n    return (isString(value) || typeof value === \"number\") && !isCssVariables(property) && !isPsuedoSelector(property) && !isMediaQuery(property);\n}\nfunction isMediaQuery(selector) {\n    return selector.startsWith(\"@media\");\n}\nfunction isDirectClass(selector) {\n    return selector === \".\";\n}\nfunction isCssVariables(selector) {\n    return selector === \"--\";\n}\nfunction isString(value) {\n    return value + \"\" === value;\n}\nfunction isImmediatePostcondition(value) {\n    return isString(value) && (value.startsWith(\"&\") || isPsuedoSelector(value));\n}\n// src/utils/joinTruthy.ts\nfunction joinTruthy(arr, delimiter = \"\") {\n    return arr.filter(Boolean).join(delimiter);\n}\n// src/utils/stableHash.ts\nfunction stableHash(prefix, seed) {\n    let hash = 0;\n    if (seed.length === 0) return hash.toString();\n    for(let i = 0; i < seed.length; i++){\n        const char = seed.charCodeAt(i);\n        hash = (hash << 5) - hash + char;\n        hash = hash & hash;\n    }\n    return `${prefix ?? \"cl\"}_${hash.toString(36)}`;\n}\n// src/utils/stringManipulators.ts\nfunction handlePropertyValue(property, value) {\n    if (property === \"content\") {\n        return `\"${value}\"`;\n    }\n    return value;\n}\nfunction camelCaseToDash(str) {\n    return str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nfunction joinedProperty(property, value) {\n    return `${property}:${value}`;\n}\nfunction toClass(str) {\n    return str ? `.${str}` : \"\";\n}\nfunction appendString(base, line) {\n    return base ? `${base}\n${line}` : line;\n}\n// src/Rule.ts\nvar Rule = class _Rule {\n    constructor(sheet, property, value, selector){\n        this.sheet = sheet;\n        this.property = property;\n        this.value = value;\n        this.selector = selector;\n        this.property = property;\n        this.value = value;\n        this.joined = joinedProperty(property, value);\n        const joinedConditions = this.selector.preconditions.concat(this.selector.postconditions);\n        this.hash = this.selector.hasConditions ? this.selector.scopeClassName : stableHash(this.sheet.name, this.joined);\n        this.key = joinTruthy([\n            this.joined,\n            joinedConditions,\n            this.hash\n        ]);\n    }\n    toString() {\n        let selectors = mergeSelectors(this.selector.preconditions, {\n            right: this.hash\n        });\n        selectors = mergeSelectors(this.selector.postconditions, {\n            left: selectors\n        });\n        return `${selectors} {${_Rule.genRule(this.property, this.value)}}`;\n    }\n    static genRule(property, value) {\n        const transformedProperty = camelCaseToDash(property);\n        return joinedProperty(transformedProperty, handlePropertyValue(property, value)) + \";\";\n    }\n};\nfunction mergeSelectors(selectors, { left = \"\", right = \"\" } = {}) {\n    const output = selectors.reduce((selectors2, current)=>{\n        if (isPsuedoSelector(current)) {\n            return selectors2 + current;\n        }\n        if (isImmediatePostcondition(current)) {\n            return selectors2 + current.slice(1);\n        }\n        return joinTruthy([\n            selectors2,\n            current\n        ], \" \");\n    }, left);\n    return joinTruthy([\n        output,\n        toClass(right)\n    ], \" \");\n}\nvar Selector = class _Selector {\n    constructor(sheet, scopeName = null, { preconditions, postconditions } = {}){\n        this.sheet = sheet;\n        this.preconditions = [];\n        this.scopeClassName = null;\n        this.scopeName = null;\n        this.postconditions = [];\n        this.preconditions = preconditions ? asArray(preconditions) : [];\n        this.postconditions = postconditions ? asArray(postconditions) : [];\n        this.setScope(scopeName);\n    }\n    setScope(scopeName) {\n        if (!scopeName) {\n            return this;\n        }\n        if (!this.scopeClassName) {\n            this.scopeName = scopeName;\n            this.scopeClassName = stableHash(this.sheet.name, // adding the count guarantees uniqueness across style.create calls\n            scopeName + this.sheet.count);\n        }\n        return this;\n    }\n    get hasConditions() {\n        return this.preconditions.length > 0 || this.postconditions.length > 0;\n    }\n    addScope(scopeName) {\n        return new _Selector(this.sheet, scopeName, {\n            preconditions: this.preconditions,\n            postconditions: this.postconditions\n        });\n    }\n    addPrecondition(precondition) {\n        return new _Selector(this.sheet, this.scopeClassName, {\n            postconditions: this.postconditions,\n            preconditions: this.preconditions.concat(precondition)\n        });\n    }\n    addPostcondition(postcondition) {\n        return new _Selector(this.sheet, this.scopeClassName, {\n            preconditions: this.preconditions,\n            postconditions: this.postconditions.concat(postcondition)\n        });\n    }\n    createRule(property, value) {\n        return new Rule(this.sheet, property, value, this);\n    }\n};\n// src/Sheet.ts\nvar Sheet = class {\n    constructor(name, rootNode){\n        this.name = name;\n        this.rootNode = rootNode;\n        // Hash->css\n        this.storedStyles = {};\n        // styles->hash\n        this.storedClasses = {};\n        this.style = \"\";\n        this.count = 0;\n        this.id = `flairup-${name}`;\n        this.styleTag = this.createStyleTag();\n    }\n    getStyle() {\n        return this.style;\n    }\n    append(css) {\n        this.style = appendString(this.style, css);\n    }\n    apply() {\n        this.count++;\n        if (!this.styleTag) {\n            return;\n        }\n        this.styleTag.innerHTML = this.style;\n    }\n    isApplied() {\n        return !!this.styleTag;\n    }\n    createStyleTag() {\n        if (typeof document === \"undefined\" || this.isApplied() || // Explicitly disallow mounting to the DOM\n        this.rootNode === null) {\n            return this.styleTag;\n        }\n        const styleTag = document.createElement(\"style\");\n        styleTag.type = \"text/css\";\n        styleTag.id = this.id;\n        (this.rootNode ?? document.head).appendChild(styleTag);\n        return styleTag;\n    }\n    addRule(rule) {\n        const storedClass = this.storedClasses[rule.key];\n        if (isString(storedClass)) {\n            return storedClass;\n        }\n        this.storedClasses[rule.key] = rule.hash;\n        this.storedStyles[rule.hash] = [\n            rule.property,\n            rule.value\n        ];\n        this.append(rule.toString());\n        return rule.hash;\n    }\n};\n// src/utils/forIn.ts\nfunction forIn(obj, fn) {\n    for(const key in obj){\n        fn(key.trim(), obj[key]);\n    }\n}\n// src/cx.ts\nfunction cx(...args) {\n    const classes = args.reduce((classes2, arg)=>{\n        if (arg instanceof Set) {\n            classes2.push(...arg);\n        } else if (typeof arg === \"string\") {\n            classes2.push(arg);\n        } else if (Array.isArray(arg)) {\n            classes2.push(cx(...arg));\n        } else if (typeof arg === \"object\") {\n            Object.entries(arg).forEach(([key, value])=>{\n                if (value) {\n                    classes2.push(key);\n                }\n            });\n        }\n        return classes2;\n    }, []);\n    return joinTruthy(classes, \" \").trim();\n}\n// src/index.ts\nfunction createSheet(name, rootNode) {\n    const sheet = new Sheet(name, rootNode);\n    return {\n        create,\n        getStyle: sheet.getStyle.bind(sheet),\n        isApplied: sheet.isApplied.bind(sheet)\n    };\n    function create(styles) {\n        const scopedStyles = {};\n        iteratePreconditions(sheet, styles, new Selector(sheet)).forEach(([scopeName, styles2, selector])=>{\n            iterateStyles(sheet, styles2, selector).forEach((className)=>{\n                addScopedStyle(scopeName, className);\n            });\n        });\n        sheet.apply();\n        return scopedStyles;\n        function addScopedStyle(name2, className) {\n            scopedStyles[name2] = scopedStyles[name2] ?? /* @__PURE__ */ new Set();\n            scopedStyles[name2].add(className);\n        }\n    }\n}\nfunction iteratePreconditions(sheet, styles, selector) {\n    const output = [];\n    forIn(styles, (key, value)=>{\n        if (isStyleCondition(key)) {\n            return iteratePreconditions(sheet, value, selector.addPrecondition(key)).forEach((item)=>output.push(item));\n        }\n        output.push([\n            key,\n            styles[key],\n            selector.addScope(key)\n        ]);\n    });\n    return output;\n}\nfunction iterateStyles(sheet, styles, selector) {\n    const output = /* @__PURE__ */ new Set();\n    forIn(styles, (property, value)=>{\n        let res = [];\n        if (isStyleCondition(property)) {\n            res = iterateStyles(sheet, value, selector.addPostcondition(property));\n        } else if (isDirectClass(property)) {\n            res = asArray(value);\n        } else if (isMediaQuery(property)) {\n            res = handleMediaQuery(sheet, value, property, selector);\n        } else if (isCssVariables(property)) {\n            res = cssVariablesBlock(sheet, value, selector);\n        } else if (isValidProperty(property, value)) {\n            const rule = selector.createRule(property, value);\n            sheet.addRule(rule);\n            output.add(rule.hash);\n        }\n        return addEachClass(res, output);\n    });\n    return output;\n}\nfunction addEachClass(list, to) {\n    list.forEach((className)=>to.add(className));\n    return to;\n}\nfunction cssVariablesBlock(sheet, styles, selector) {\n    const classes = /* @__PURE__ */ new Set();\n    const chunkRows = [];\n    forIn(styles, (property, value)=>{\n        if (isValidProperty(property, value)) {\n            chunkRows.push(Rule.genRule(property, value));\n            return;\n        }\n        const res = iterateStyles(sheet, value ?? {}, selector);\n        addEachClass(res, classes);\n    });\n    if (!selector.scopeClassName) {\n        return classes;\n    }\n    if (chunkRows.length) {\n        const output = chunkRows.join(\" \");\n        sheet.append(`${mergeSelectors(selector.preconditions, {\n            right: selector.scopeClassName\n        })} {${output}}`);\n    }\n    classes.add(selector.scopeClassName);\n    return classes;\n}\nfunction handleMediaQuery(sheet, styles, mediaQuery, selector) {\n    sheet.append(mediaQuery + \" {\");\n    const output = iterateStyles(sheet, styles, selector);\n    sheet.append(\"}\");\n    return output;\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/flairup/dist/esm/index.js\n");

/***/ })

};
;