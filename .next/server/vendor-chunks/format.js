"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/format";
exports.ids = ["vendor-chunks/format"];
exports.modules = {

/***/ "(ssr)/./node_modules/format/format.js":
/*!***************************************!*\
  !*** ./node_modules/format/format.js ***!
  \***************************************/
/***/ ((module) => {

eval("//\n// format - printf-like string formatting for JavaScript\n// github.com/samsonjs/format\n// @_sjs\n//\n// Copyright 2010 - 2013 Sami Samhuri <sami@samhuri.net>\n//\n// MIT License\n// http://sjs.mit-license.org\n//\n\n(function() {\n    //// Export the API\n    var namespace;\n    // CommonJS / Node module\n    if (true) {\n        namespace = module.exports = format;\n    } else {}\n    namespace.format = format;\n    namespace.vsprintf = vsprintf;\n    if (typeof console !== \"undefined\" && typeof console.log === \"function\") {\n        namespace.printf = printf;\n    }\n    function printf() {\n        console.log(format.apply(null, arguments));\n    }\n    function vsprintf(fmt, replacements) {\n        return format.apply(null, [\n            fmt\n        ].concat(replacements));\n    }\n    function format(fmt) {\n        var argIndex = 1 // skip initial format argument\n        , args = [].slice.call(arguments), i = 0, n = fmt.length, result = \"\", c, escaped = false, arg, tmp, leadingZero = false, precision, nextArg = function() {\n            return args[argIndex++];\n        }, slurpNumber = function() {\n            var digits = \"\";\n            while(/\\d/.test(fmt[i])){\n                digits += fmt[i++];\n                c = fmt[i];\n            }\n            return digits.length > 0 ? parseInt(digits) : null;\n        };\n        for(; i < n; ++i){\n            c = fmt[i];\n            if (escaped) {\n                escaped = false;\n                if (c == \".\") {\n                    leadingZero = false;\n                    c = fmt[++i];\n                } else if (c == \"0\" && fmt[i + 1] == \".\") {\n                    leadingZero = true;\n                    i += 2;\n                    c = fmt[i];\n                } else {\n                    leadingZero = true;\n                }\n                precision = slurpNumber();\n                switch(c){\n                    case \"b\":\n                        result += parseInt(nextArg(), 10).toString(2);\n                        break;\n                    case \"c\":\n                        arg = nextArg();\n                        if (typeof arg === \"string\" || arg instanceof String) result += arg;\n                        else result += String.fromCharCode(parseInt(arg, 10));\n                        break;\n                    case \"d\":\n                        result += parseInt(nextArg(), 10);\n                        break;\n                    case \"f\":\n                        tmp = String(parseFloat(nextArg()).toFixed(precision || 6));\n                        result += leadingZero ? tmp : tmp.replace(/^0/, \"\");\n                        break;\n                    case \"j\":\n                        result += JSON.stringify(nextArg());\n                        break;\n                    case \"o\":\n                        result += \"0\" + parseInt(nextArg(), 10).toString(8);\n                        break;\n                    case \"s\":\n                        result += nextArg();\n                        break;\n                    case \"x\":\n                        result += \"0x\" + parseInt(nextArg(), 10).toString(16);\n                        break;\n                    case \"X\":\n                        result += \"0x\" + parseInt(nextArg(), 10).toString(16).toUpperCase();\n                        break;\n                    default:\n                        result += c;\n                        break;\n                }\n            } else if (c === \"%\") {\n                escaped = true;\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/format/format.js\n");

/***/ })

};
;