"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/katex";
exports.ids = ["vendor-chunks/katex"];
exports.modules = {

/***/ "(ssr)/./node_modules/katex/dist/katex.min.css":
/*!***********************************************!*\
  !*** ./node_modules/katex/dist/katex.min.css ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"000b7545e12f\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMva2F0ZXgvZGlzdC9rYXRleC5taW4uY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGNoYXQvLi9ub2RlX21vZHVsZXMva2F0ZXgvZGlzdC9rYXRleC5taW4uY3NzPzk4MDEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIwMDBiNzU0NWUxMmZcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/katex/dist/katex.min.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/katex/dist/katex.mjs":
/*!*******************************************!*\
  !*** ./node_modules/katex/dist/katex.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ katex)\n/* harmony export */ });\n/**\n * Lexing or parsing positional information for error reporting.\n * This object is immutable.\n */ class SourceLocation {\n    // The + prefix indicates that these fields aren't writeable\n    // Lexer holding the input string.\n    // Start offset, zero-based inclusive.\n    // End offset, zero-based exclusive.\n    constructor(lexer, start, end){\n        this.lexer = void 0;\n        this.start = void 0;\n        this.end = void 0;\n        this.lexer = lexer;\n        this.start = start;\n        this.end = end;\n    }\n    /**\n   * Merges two `SourceLocation`s from location providers, given they are\n   * provided in order of appearance.\n   * - Returns the first one's location if only the first is provided.\n   * - Returns a merged range of the first and the last if both are provided\n   *   and their lexers match.\n   * - Otherwise, returns null.\n   */ static range(first, second) {\n        if (!second) {\n            return first && first.loc;\n        } else if (!first || !first.loc || !second.loc || first.loc.lexer !== second.loc.lexer) {\n            return null;\n        } else {\n            return new SourceLocation(first.loc.lexer, first.loc.start, second.loc.end);\n        }\n    }\n}\n/**\n * Interface required to break circular dependency between Token, Lexer, and\n * ParseError.\n */ /**\n * The resulting token returned from `lex`.\n *\n * It consists of the token text plus some position information.\n * The position information is essentially a range in an input string,\n * but instead of referencing the bare input string, we refer to the lexer.\n * That way it is possible to attach extra metadata to the input string,\n * like for example a file name or similar.\n *\n * The position information is optional, so it is OK to construct synthetic\n * tokens if appropriate. Not providing available position information may\n * lead to degraded error reporting, though.\n */ class Token {\n    // don't expand the token\n    // used in \\noexpand\n    constructor(text, loc){\n        this.text = void 0;\n        this.loc = void 0;\n        this.noexpand = void 0;\n        this.treatAsRelax = void 0;\n        this.text = text;\n        this.loc = loc;\n    }\n    /**\n   * Given a pair of tokens (this and endToken), compute a `Token` encompassing\n   * the whole input range enclosed by these two.\n   */ range(endToken, text // the text of the newly constructed token\n    ) {\n        return new Token(text, SourceLocation.range(this, endToken));\n    }\n}\n/**\n * This is the ParseError class, which is the main error thrown by KaTeX\n * functions when something has gone wrong. This is used to distinguish internal\n * errors from errors in the expression that the user provided.\n *\n * If possible, a caller should provide a Token or ParseNode with information\n * about where in the source string the problem occurred.\n */ class ParseError {\n    // Error start position based on passed-in Token or ParseNode.\n    // Length of affected text based on passed-in Token or ParseNode.\n    // The underlying error message without any context added.\n    constructor(message, token // An object providing position information\n    ){\n        this.name = void 0;\n        this.position = void 0;\n        this.length = void 0;\n        this.rawMessage = void 0;\n        var error = \"KaTeX parse error: \" + message;\n        var start;\n        var end;\n        var loc = token && token.loc;\n        if (loc && loc.start <= loc.end) {\n            // If we have the input and a position, make the error a bit fancier\n            // Get the input\n            var input = loc.lexer.input; // Prepend some information\n            start = loc.start;\n            end = loc.end;\n            if (start === input.length) {\n                error += \" at end of input: \";\n            } else {\n                error += \" at position \" + (start + 1) + \": \";\n            } // Underline token in question using combining underscores\n            var underlined = input.slice(start, end).replace(/[^]/g, \"$&̲\"); // Extract some context from the input and add it to the error\n            var left;\n            if (start > 15) {\n                left = \"…\" + input.slice(start - 15, start);\n            } else {\n                left = input.slice(0, start);\n            }\n            var right;\n            if (end + 15 < input.length) {\n                right = input.slice(end, end + 15) + \"…\";\n            } else {\n                right = input.slice(end);\n            }\n            error += left + underlined + right;\n        } // Some hackery to make ParseError a prototype of Error\n        // See http://stackoverflow.com/a/8460753\n        // $FlowFixMe\n        var self = new Error(error);\n        self.name = \"ParseError\"; // $FlowFixMe\n        self.__proto__ = ParseError.prototype;\n        self.position = start;\n        if (start != null && end != null) {\n            self.length = end - start;\n        }\n        self.rawMessage = message;\n        return self;\n    }\n} // $FlowFixMe More hackery\nParseError.prototype.__proto__ = Error.prototype;\n/**\n * This file contains a list of utility functions which are useful in other\n * files.\n */ /**\n * Return whether an element is contained in a list\n */ var contains = function contains(list, elem) {\n    return list.indexOf(elem) !== -1;\n};\n/**\n * Provide a default value if a setting is undefined\n * NOTE: Couldn't use `T` as the output type due to facebook/flow#5022.\n */ var deflt = function deflt(setting, defaultIfUndefined) {\n    return setting === undefined ? defaultIfUndefined : setting;\n}; // hyphenate and escape adapted from Facebook's React under Apache 2 license\nvar uppercase = /([A-Z])/g;\nvar hyphenate = function hyphenate(str) {\n    return str.replace(uppercase, \"-$1\").toLowerCase();\n};\nvar ESCAPE_LOOKUP = {\n    \"&\": \"&amp;\",\n    \">\": \"&gt;\",\n    \"<\": \"&lt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#x27;\"\n};\nvar ESCAPE_REGEX = /[&><\"']/g;\n/**\n * Escapes text to prevent scripting attacks.\n */ function escape(text) {\n    return String(text).replace(ESCAPE_REGEX, (match)=>ESCAPE_LOOKUP[match]);\n}\n/**\n * Sometimes we want to pull out the innermost element of a group. In most\n * cases, this will just be the group itself, but when ordgroups and colors have\n * a single element, we want to pull that out.\n */ var getBaseElem = function getBaseElem(group) {\n    if (group.type === \"ordgroup\") {\n        if (group.body.length === 1) {\n            return getBaseElem(group.body[0]);\n        } else {\n            return group;\n        }\n    } else if (group.type === \"color\") {\n        if (group.body.length === 1) {\n            return getBaseElem(group.body[0]);\n        } else {\n            return group;\n        }\n    } else if (group.type === \"font\") {\n        return getBaseElem(group.body);\n    } else {\n        return group;\n    }\n};\n/**\n * TeXbook algorithms often reference \"character boxes\", which are simply groups\n * with a single character in them. To decide if something is a character box,\n * we find its innermost group, and see if it is a single character.\n */ var isCharacterBox = function isCharacterBox(group) {\n    var baseElem = getBaseElem(group); // These are all they types of groups which hold single characters\n    return baseElem.type === \"mathord\" || baseElem.type === \"textord\" || baseElem.type === \"atom\";\n};\nvar assert = function assert(value) {\n    if (!value) {\n        throw new Error(\"Expected non-null, but got \" + String(value));\n    }\n    return value;\n};\n/**\n * Return the protocol of a URL, or \"_relative\" if the URL does not specify a\n * protocol (and thus is relative).\n */ var protocolFromUrl = function protocolFromUrl(url) {\n    var protocol = /^\\s*([^\\\\/#]*?)(?::|&#0*58|&#x0*3a)/i.exec(url);\n    return protocol != null ? protocol[1] : \"_relative\";\n};\nvar utils = {\n    contains,\n    deflt,\n    escape,\n    hyphenate,\n    getBaseElem,\n    isCharacterBox,\n    protocolFromUrl\n};\n/* eslint no-console:0 */ // TODO: automatically generate documentation\n// TODO: check all properties on Settings exist\n// TODO: check the type of a property on Settings matches\nvar SETTINGS_SCHEMA = {\n    displayMode: {\n        type: \"boolean\",\n        description: \"Render math in display mode, which puts the math in \" + \"display style (so \\\\int and \\\\sum are large, for example), and \" + \"centers the math on the page on its own line.\",\n        cli: \"-d, --display-mode\"\n    },\n    output: {\n        type: {\n            enum: [\n                \"htmlAndMathml\",\n                \"html\",\n                \"mathml\"\n            ]\n        },\n        description: \"Determines the markup language of the output.\",\n        cli: \"-F, --format <type>\"\n    },\n    leqno: {\n        type: \"boolean\",\n        description: \"Render display math in leqno style (left-justified tags).\"\n    },\n    fleqn: {\n        type: \"boolean\",\n        description: \"Render display math flush left.\"\n    },\n    throwOnError: {\n        type: \"boolean\",\n        default: true,\n        cli: \"-t, --no-throw-on-error\",\n        cliDescription: \"Render errors (in the color given by --error-color) ins\" + \"tead of throwing a ParseError exception when encountering an error.\"\n    },\n    errorColor: {\n        type: \"string\",\n        default: \"#cc0000\",\n        cli: \"-c, --error-color <color>\",\n        cliDescription: \"A color string given in the format 'rgb' or 'rrggbb' \" + \"(no #). This option determines the color of errors rendered by the \" + \"-t option.\",\n        cliProcessor: (color)=>\"#\" + color\n    },\n    macros: {\n        type: \"object\",\n        cli: \"-m, --macro <def>\",\n        cliDescription: \"Define custom macro of the form '\\\\foo:expansion' (use \" + \"multiple -m arguments for multiple macros).\",\n        cliDefault: [],\n        cliProcessor: (def, defs)=>{\n            defs.push(def);\n            return defs;\n        }\n    },\n    minRuleThickness: {\n        type: \"number\",\n        description: \"Specifies a minimum thickness, in ems, for fraction lines,\" + \" `\\\\sqrt` top lines, `{array}` vertical lines, `\\\\hline`, \" + \"`\\\\hdashline`, `\\\\underline`, `\\\\overline`, and the borders of \" + \"`\\\\fbox`, `\\\\boxed`, and `\\\\fcolorbox`.\",\n        processor: (t)=>Math.max(0, t),\n        cli: \"--min-rule-thickness <size>\",\n        cliProcessor: parseFloat\n    },\n    colorIsTextColor: {\n        type: \"boolean\",\n        description: \"Makes \\\\color behave like LaTeX's 2-argument \\\\textcolor, \" + \"instead of LaTeX's one-argument \\\\color mode change.\",\n        cli: \"-b, --color-is-text-color\"\n    },\n    strict: {\n        type: [\n            {\n                enum: [\n                    \"warn\",\n                    \"ignore\",\n                    \"error\"\n                ]\n            },\n            \"boolean\",\n            \"function\"\n        ],\n        description: \"Turn on strict / LaTeX faithfulness mode, which throws an \" + \"error if the input uses features that are not supported by LaTeX.\",\n        cli: \"-S, --strict\",\n        cliDefault: false\n    },\n    trust: {\n        type: [\n            \"boolean\",\n            \"function\"\n        ],\n        description: \"Trust the input, enabling all HTML features such as \\\\url.\",\n        cli: \"-T, --trust\"\n    },\n    maxSize: {\n        type: \"number\",\n        default: Infinity,\n        description: \"If non-zero, all user-specified sizes, e.g. in \" + \"\\\\rule{500em}{500em}, will be capped to maxSize ems. Otherwise, \" + \"elements and spaces can be arbitrarily large\",\n        processor: (s)=>Math.max(0, s),\n        cli: \"-s, --max-size <n>\",\n        cliProcessor: parseInt\n    },\n    maxExpand: {\n        type: \"number\",\n        default: 1000,\n        description: \"Limit the number of macro expansions to the specified \" + \"number, to prevent e.g. infinite macro loops. If set to Infinity, \" + \"the macro expander will try to fully expand as in LaTeX.\",\n        processor: (n)=>Math.max(0, n),\n        cli: \"-e, --max-expand <n>\",\n        cliProcessor: (n)=>n === \"Infinity\" ? Infinity : parseInt(n)\n    },\n    globalGroup: {\n        type: \"boolean\",\n        cli: false\n    }\n};\nfunction getDefaultValue(schema) {\n    if (schema.default) {\n        return schema.default;\n    }\n    var type = schema.type;\n    var defaultType = Array.isArray(type) ? type[0] : type;\n    if (typeof defaultType !== \"string\") {\n        return defaultType.enum[0];\n    }\n    switch(defaultType){\n        case \"boolean\":\n            return false;\n        case \"string\":\n            return \"\";\n        case \"number\":\n            return 0;\n        case \"object\":\n            return {};\n    }\n}\n/**\n * The main Settings object\n *\n * The current options stored are:\n *  - displayMode: Whether the expression should be typeset as inline math\n *                 (false, the default), meaning that the math starts in\n *                 \\textstyle and is placed in an inline-block); or as display\n *                 math (true), meaning that the math starts in \\displaystyle\n *                 and is placed in a block with vertical margin.\n */ class Settings {\n    constructor(options){\n        this.displayMode = void 0;\n        this.output = void 0;\n        this.leqno = void 0;\n        this.fleqn = void 0;\n        this.throwOnError = void 0;\n        this.errorColor = void 0;\n        this.macros = void 0;\n        this.minRuleThickness = void 0;\n        this.colorIsTextColor = void 0;\n        this.strict = void 0;\n        this.trust = void 0;\n        this.maxSize = void 0;\n        this.maxExpand = void 0;\n        this.globalGroup = void 0;\n        // allow null options\n        options = options || {};\n        for(var prop in SETTINGS_SCHEMA){\n            if (SETTINGS_SCHEMA.hasOwnProperty(prop)) {\n                // $FlowFixMe\n                var schema = SETTINGS_SCHEMA[prop]; // TODO: validate options\n                // $FlowFixMe\n                this[prop] = options[prop] !== undefined ? schema.processor ? schema.processor(options[prop]) : options[prop] : getDefaultValue(schema);\n            }\n        }\n    }\n    /**\n   * Report nonstrict (non-LaTeX-compatible) input.\n   * Can safely not be called if `this.strict` is false in JavaScript.\n   */ reportNonstrict(errorCode, errorMsg, token) {\n        var strict = this.strict;\n        if (typeof strict === \"function\") {\n            // Allow return value of strict function to be boolean or string\n            // (or null/undefined, meaning no further processing).\n            strict = strict(errorCode, errorMsg, token);\n        }\n        if (!strict || strict === \"ignore\") {\n            return;\n        } else if (strict === true || strict === \"error\") {\n            throw new ParseError(\"LaTeX-incompatible input and strict mode is set to 'error': \" + (errorMsg + \" [\" + errorCode + \"]\"), token);\n        } else if (strict === \"warn\") {\n            typeof console !== \"undefined\" && console.warn(\"LaTeX-incompatible input and strict mode is set to 'warn': \" + (errorMsg + \" [\" + errorCode + \"]\"));\n        } else {\n            // won't happen in type-safe code\n            typeof console !== \"undefined\" && console.warn(\"LaTeX-incompatible input and strict mode is set to \" + (\"unrecognized '\" + strict + \"': \" + errorMsg + \" [\" + errorCode + \"]\"));\n        }\n    }\n    /**\n   * Check whether to apply strict (LaTeX-adhering) behavior for unusual\n   * input (like `\\\\`).  Unlike `nonstrict`, will not throw an error;\n   * instead, \"error\" translates to a return value of `true`, while \"ignore\"\n   * translates to a return value of `false`.  May still print a warning:\n   * \"warn\" prints a warning and returns `false`.\n   * This is for the second category of `errorCode`s listed in the README.\n   */ useStrictBehavior(errorCode, errorMsg, token) {\n        var strict = this.strict;\n        if (typeof strict === \"function\") {\n            // Allow return value of strict function to be boolean or string\n            // (or null/undefined, meaning no further processing).\n            // But catch any exceptions thrown by function, treating them\n            // like \"error\".\n            try {\n                strict = strict(errorCode, errorMsg, token);\n            } catch (error) {\n                strict = \"error\";\n            }\n        }\n        if (!strict || strict === \"ignore\") {\n            return false;\n        } else if (strict === true || strict === \"error\") {\n            return true;\n        } else if (strict === \"warn\") {\n            typeof console !== \"undefined\" && console.warn(\"LaTeX-incompatible input and strict mode is set to 'warn': \" + (errorMsg + \" [\" + errorCode + \"]\"));\n            return false;\n        } else {\n            // won't happen in type-safe code\n            typeof console !== \"undefined\" && console.warn(\"LaTeX-incompatible input and strict mode is set to \" + (\"unrecognized '\" + strict + \"': \" + errorMsg + \" [\" + errorCode + \"]\"));\n            return false;\n        }\n    }\n    /**\n   * Check whether to test potentially dangerous input, and return\n   * `true` (trusted) or `false` (untrusted).  The sole argument `context`\n   * should be an object with `command` field specifying the relevant LaTeX\n   * command (as a string starting with `\\`), and any other arguments, etc.\n   * If `context` has a `url` field, a `protocol` field will automatically\n   * get added by this function (changing the specified object).\n   */ isTrusted(context) {\n        if (context.url && !context.protocol) {\n            context.protocol = utils.protocolFromUrl(context.url);\n        }\n        var trust = typeof this.trust === \"function\" ? this.trust(context) : this.trust;\n        return Boolean(trust);\n    }\n}\n/**\n * This file contains information and classes for the various kinds of styles\n * used in TeX. It provides a generic `Style` class, which holds information\n * about a specific style. It then provides instances of all the different kinds\n * of styles possible, and provides functions to move between them and get\n * information about them.\n */ /**\n * The main style class. Contains a unique id for the style, a size (which is\n * the same for cramped and uncramped version of a style), and a cramped flag.\n */ class Style {\n    constructor(id, size, cramped){\n        this.id = void 0;\n        this.size = void 0;\n        this.cramped = void 0;\n        this.id = id;\n        this.size = size;\n        this.cramped = cramped;\n    }\n    /**\n   * Get the style of a superscript given a base in the current style.\n   */ sup() {\n        return styles[sup[this.id]];\n    }\n    /**\n   * Get the style of a subscript given a base in the current style.\n   */ sub() {\n        return styles[sub[this.id]];\n    }\n    /**\n   * Get the style of a fraction numerator given the fraction in the current\n   * style.\n   */ fracNum() {\n        return styles[fracNum[this.id]];\n    }\n    /**\n   * Get the style of a fraction denominator given the fraction in the current\n   * style.\n   */ fracDen() {\n        return styles[fracDen[this.id]];\n    }\n    /**\n   * Get the cramped version of a style (in particular, cramping a cramped style\n   * doesn't change the style).\n   */ cramp() {\n        return styles[cramp[this.id]];\n    }\n    /**\n   * Get a text or display version of this style.\n   */ text() {\n        return styles[text$1[this.id]];\n    }\n    /**\n   * Return true if this style is tightly spaced (scriptstyle/scriptscriptstyle)\n   */ isTight() {\n        return this.size >= 2;\n    }\n} // Export an interface for type checking, but don't expose the implementation.\n// This way, no more styles can be generated.\n// IDs of the different styles\nvar D = 0;\nvar Dc = 1;\nvar T = 2;\nvar Tc = 3;\nvar S = 4;\nvar Sc = 5;\nvar SS = 6;\nvar SSc = 7; // Instances of the different styles\nvar styles = [\n    new Style(D, 0, false),\n    new Style(Dc, 0, true),\n    new Style(T, 1, false),\n    new Style(Tc, 1, true),\n    new Style(S, 2, false),\n    new Style(Sc, 2, true),\n    new Style(SS, 3, false),\n    new Style(SSc, 3, true)\n]; // Lookup tables for switching from one style to another\nvar sup = [\n    S,\n    Sc,\n    S,\n    Sc,\n    SS,\n    SSc,\n    SS,\n    SSc\n];\nvar sub = [\n    Sc,\n    Sc,\n    Sc,\n    Sc,\n    SSc,\n    SSc,\n    SSc,\n    SSc\n];\nvar fracNum = [\n    T,\n    Tc,\n    S,\n    Sc,\n    SS,\n    SSc,\n    SS,\n    SSc\n];\nvar fracDen = [\n    Tc,\n    Tc,\n    Sc,\n    Sc,\n    SSc,\n    SSc,\n    SSc,\n    SSc\n];\nvar cramp = [\n    Dc,\n    Dc,\n    Tc,\n    Tc,\n    Sc,\n    Sc,\n    SSc,\n    SSc\n];\nvar text$1 = [\n    D,\n    Dc,\n    T,\n    Tc,\n    T,\n    Tc,\n    T,\n    Tc\n]; // We only export some of the styles.\nvar Style$1 = {\n    DISPLAY: styles[D],\n    TEXT: styles[T],\n    SCRIPT: styles[S],\n    SCRIPTSCRIPT: styles[SS]\n};\n/*\n * This file defines the Unicode scripts and script families that we\n * support. To add new scripts or families, just add a new entry to the\n * scriptData array below. Adding scripts to the scriptData array allows\n * characters from that script to appear in \\text{} environments.\n */ /**\n * Each script or script family has a name and an array of blocks.\n * Each block is an array of two numbers which specify the start and\n * end points (inclusive) of a block of Unicode codepoints.\n */ /**\n * Unicode block data for the families of scripts we support in \\text{}.\n * Scripts only need to appear here if they do not have font metrics.\n */ var scriptData = [\n    {\n        // Latin characters beyond the Latin-1 characters we have metrics for.\n        // Needed for Czech, Hungarian and Turkish text, for example.\n        name: \"latin\",\n        blocks: [\n            [\n                0x0100,\n                0x024f\n            ],\n            [\n                0x0300,\n                0x036f\n            ] // Combining Diacritical marks\n        ]\n    },\n    {\n        // The Cyrillic script used by Russian and related languages.\n        // A Cyrillic subset used to be supported as explicitly defined\n        // symbols in symbols.js\n        name: \"cyrillic\",\n        blocks: [\n            [\n                0x0400,\n                0x04ff\n            ]\n        ]\n    },\n    {\n        // Armenian\n        name: \"armenian\",\n        blocks: [\n            [\n                0x0530,\n                0x058F\n            ]\n        ]\n    },\n    {\n        // The Brahmic scripts of South and Southeast Asia\n        // Devanagari (0900–097F)\n        // Bengali (0980–09FF)\n        // Gurmukhi (0A00–0A7F)\n        // Gujarati (0A80–0AFF)\n        // Oriya (0B00–0B7F)\n        // Tamil (0B80–0BFF)\n        // Telugu (0C00–0C7F)\n        // Kannada (0C80–0CFF)\n        // Malayalam (0D00–0D7F)\n        // Sinhala (0D80–0DFF)\n        // Thai (0E00–0E7F)\n        // Lao (0E80–0EFF)\n        // Tibetan (0F00–0FFF)\n        // Myanmar (1000–109F)\n        name: \"brahmic\",\n        blocks: [\n            [\n                0x0900,\n                0x109F\n            ]\n        ]\n    },\n    {\n        name: \"georgian\",\n        blocks: [\n            [\n                0x10A0,\n                0x10ff\n            ]\n        ]\n    },\n    {\n        // Chinese and Japanese.\n        // The \"k\" in cjk is for Korean, but we've separated Korean out\n        name: \"cjk\",\n        blocks: [\n            [\n                0x3000,\n                0x30FF\n            ],\n            [\n                0x4E00,\n                0x9FAF\n            ],\n            [\n                0xFF00,\n                0xFF60\n            ] // Fullwidth punctuation\n        ]\n    },\n    {\n        // Korean\n        name: \"hangul\",\n        blocks: [\n            [\n                0xAC00,\n                0xD7AF\n            ]\n        ]\n    }\n];\n/**\n * Given a codepoint, return the name of the script or script family\n * it is from, or null if it is not part of a known block\n */ function scriptFromCodepoint(codepoint) {\n    for(var i = 0; i < scriptData.length; i++){\n        var script = scriptData[i];\n        for(var _i = 0; _i < script.blocks.length; _i++){\n            var block = script.blocks[_i];\n            if (codepoint >= block[0] && codepoint <= block[1]) {\n                return script.name;\n            }\n        }\n    }\n    return null;\n}\n/**\n * A flattened version of all the supported blocks in a single array.\n * This is an optimization to make supportedCodepoint() fast.\n */ var allBlocks = [];\nscriptData.forEach((s)=>s.blocks.forEach((b)=>allBlocks.push(...b)));\n/**\n * Given a codepoint, return true if it falls within one of the\n * scripts or script families defined above and false otherwise.\n *\n * Micro benchmarks shows that this is faster than\n * /[\\u3000-\\u30FF\\u4E00-\\u9FAF\\uFF00-\\uFF60\\uAC00-\\uD7AF\\u0900-\\u109F]/.test()\n * in Firefox, Chrome and Node.\n */ function supportedCodepoint(codepoint) {\n    for(var i = 0; i < allBlocks.length; i += 2){\n        if (codepoint >= allBlocks[i] && codepoint <= allBlocks[i + 1]) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * This file provides support to domTree.js and delimiter.js.\n * It's a storehouse of path geometry for SVG images.\n */ // In all paths below, the viewBox-to-em scale is 1000:1.\nvar hLinePad = 80; // padding above a sqrt vinculum. Prevents image cropping.\n// The vinculum of a \\sqrt can be made thicker by a KaTeX rendering option.\n// Think of variable extraVinculum as two detours in the SVG path.\n// The detour begins at the lower left of the area labeled extraVinculum below.\n// The detour proceeds one extraVinculum distance up and slightly to the right,\n// displacing the radiused corner between surd and vinculum. The radius is\n// traversed as usual, then the detour resumes. It goes right, to the end of\n// the very long vinculum, then down one extraVinculum distance,\n// after which it resumes regular path geometry for the radical.\n/*                                                  vinculum\n                                                   /\n         /▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒←extraVinculum\n        / █████████████████████←0.04em (40 unit) std vinculum thickness\n       / /\n      / /\n     / /\\\n    / / surd\n*/ var sqrtMain = function sqrtMain(extraVinculum, hLinePad) {\n    // sqrtMain path geometry is from glyph U221A in the font KaTeX Main\n    return \"M95,\" + (622 + extraVinculum + hLinePad) + \"\\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\\nc69,-144,104.5,-217.7,106.5,-221\\nl\" + extraVinculum / 2.075 + \" -\" + extraVinculum + \"\\nc5.3,-9.3,12,-14,20,-14\\nH400000v\" + (40 + extraVinculum) + \"H845.2724\\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\\nM\" + (834 + extraVinculum) + \" \" + hLinePad + \"h400000v\" + (40 + extraVinculum) + \"h-400000z\";\n};\nvar sqrtSize1 = function sqrtSize1(extraVinculum, hLinePad) {\n    // size1 is from glyph U221A in the font KaTeX_Size1-Regular\n    return \"M263,\" + (601 + extraVinculum + hLinePad) + \"c0.7,0,18,39.7,52,119\\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\\nc340,-704.7,510.7,-1060.3,512,-1067\\nl\" + extraVinculum / 2.084 + \" -\" + extraVinculum + \"\\nc4.7,-7.3,11,-11,19,-11\\nH40000v\" + (40 + extraVinculum) + \"H1012.3\\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\\nM\" + (1001 + extraVinculum) + \" \" + hLinePad + \"h400000v\" + (40 + extraVinculum) + \"h-400000z\";\n};\nvar sqrtSize2 = function sqrtSize2(extraVinculum, hLinePad) {\n    // size2 is from glyph U221A in the font KaTeX_Size2-Regular\n    return \"M983 \" + (10 + extraVinculum + hLinePad) + \"\\nl\" + extraVinculum / 3.13 + \" -\" + extraVinculum + \"\\nc4,-6.7,10,-10,18,-10 H400000v\" + (40 + extraVinculum) + \"\\nH1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7\\ns-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744\\nc-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30\\nc26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722\\nc56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5\\nc53.7,-170.3,84.5,-266.8,92.5,-289.5z\\nM\" + (1001 + extraVinculum) + \" \" + hLinePad + \"h400000v\" + (40 + extraVinculum) + \"h-400000z\";\n};\nvar sqrtSize3 = function sqrtSize3(extraVinculum, hLinePad) {\n    // size3 is from glyph U221A in the font KaTeX_Size3-Regular\n    return \"M424,\" + (2398 + extraVinculum + hLinePad) + \"\\nc-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514\\nc0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20\\ns-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121\\ns209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081\\nl\" + extraVinculum / 4.223 + \" -\" + extraVinculum + \"c4,-6.7,10,-10,18,-10 H400000\\nv\" + (40 + extraVinculum) + \"H1014.6\\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185\\nc-2,6,-10,9,-24,9\\nc-8,0,-12,-0.7,-12,-2z M\" + (1001 + extraVinculum) + \" \" + hLinePad + \"\\nh400000v\" + (40 + extraVinculum) + \"h-400000z\";\n};\nvar sqrtSize4 = function sqrtSize4(extraVinculum, hLinePad) {\n    // size4 is from glyph U221A in the font KaTeX_Size4-Regular\n    return \"M473,\" + (2713 + extraVinculum + hLinePad) + \"\\nc339.3,-1799.3,509.3,-2700,510,-2702 l\" + extraVinculum / 5.298 + \" -\" + extraVinculum + \"\\nc3.3,-7.3,9.3,-11,18,-11 H400000v\" + (40 + extraVinculum) + \"H1017.7\\ns-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9\\nc-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200\\nc0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26\\ns76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,\\n606zM\" + (1001 + extraVinculum) + \" \" + hLinePad + \"h400000v\" + (40 + extraVinculum) + \"H1017.7z\";\n};\nvar phasePath = function phasePath(y) {\n    var x = y / 2; // x coordinate at top of angle\n    return \"M400000 \" + y + \" H0 L\" + x + \" 0 l65 45 L145 \" + (y - 80) + \" H400000z\";\n};\nvar sqrtTall = function sqrtTall(extraVinculum, hLinePad, viewBoxHeight) {\n    // sqrtTall is from glyph U23B7 in the font KaTeX_Size4-Regular\n    // One path edge has a variable length. It runs vertically from the vinculum\n    // to a point near (14 units) the bottom of the surd. The vinculum\n    // is normally 40 units thick. So the length of the line in question is:\n    var vertSegment = viewBoxHeight - 54 - hLinePad - extraVinculum;\n    return \"M702 \" + (extraVinculum + hLinePad) + \"H400000\" + (40 + extraVinculum) + \"\\nH742v\" + vertSegment + \"l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1\\nh-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170\\nc-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667\\n219 661 l218 661zM702 \" + hLinePad + \"H400000v\" + (40 + extraVinculum) + \"H742z\";\n};\nvar sqrtPath = function sqrtPath(size, extraVinculum, viewBoxHeight) {\n    extraVinculum = 1000 * extraVinculum; // Convert from document ems to viewBox.\n    var path = \"\";\n    switch(size){\n        case \"sqrtMain\":\n            path = sqrtMain(extraVinculum, hLinePad);\n            break;\n        case \"sqrtSize1\":\n            path = sqrtSize1(extraVinculum, hLinePad);\n            break;\n        case \"sqrtSize2\":\n            path = sqrtSize2(extraVinculum, hLinePad);\n            break;\n        case \"sqrtSize3\":\n            path = sqrtSize3(extraVinculum, hLinePad);\n            break;\n        case \"sqrtSize4\":\n            path = sqrtSize4(extraVinculum, hLinePad);\n            break;\n        case \"sqrtTall\":\n            path = sqrtTall(extraVinculum, hLinePad, viewBoxHeight);\n    }\n    return path;\n};\nvar innerPath = function innerPath(name, height) {\n    // The inner part of stretchy tall delimiters\n    switch(name){\n        case \"⎜\":\n            return \"M291 0 H417 V\" + height + \" H291z M291 0 H417 V\" + height + \" H291z\";\n        case \"∣\":\n            return \"M145 0 H188 V\" + height + \" H145z M145 0 H188 V\" + height + \" H145z\";\n        case \"∥\":\n            return \"M145 0 H188 V\" + height + \" H145z M145 0 H188 V\" + height + \" H145z\" + (\"M367 0 H410 V\" + height + \" H367z M367 0 H410 V\" + height + \" H367z\");\n        case \"⎟\":\n            return \"M457 0 H583 V\" + height + \" H457z M457 0 H583 V\" + height + \" H457z\";\n        case \"⎢\":\n            return \"M319 0 H403 V\" + height + \" H319z M319 0 H403 V\" + height + \" H319z\";\n        case \"⎥\":\n            return \"M263 0 H347 V\" + height + \" H263z M263 0 H347 V\" + height + \" H263z\";\n        case \"⎪\":\n            return \"M384 0 H504 V\" + height + \" H384z M384 0 H504 V\" + height + \" H384z\";\n        case \"⏐\":\n            return \"M312 0 H355 V\" + height + \" H312z M312 0 H355 V\" + height + \" H312z\";\n        case \"‖\":\n            return \"M257 0 H300 V\" + height + \" H257z M257 0 H300 V\" + height + \" H257z\" + (\"M478 0 H521 V\" + height + \" H478z M478 0 H521 V\" + height + \" H478z\");\n        default:\n            return \"\";\n    }\n};\nvar path = {\n    // The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main\n    doubleleftarrow: \"M262 157\\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\\nm8 0v40h399730v-40zm0 194v40h399730v-40z\",\n    // doublerightarrow is from glyph U+21D2 in font KaTeX Main\n    doublerightarrow: \"M399738 392l\\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z\",\n    // leftarrow is from glyph U+2190 in font KaTeX Main\n    leftarrow: \"M400000 241H110l3-3c68.7-52.7 113.7-120\\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\\n l-3-3h399890zM100 241v40h399900v-40z\",\n    // overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular\n    leftbrace: \"M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z\",\n    leftbraceunder: \"M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z\",\n    // overgroup is from the MnSymbol package (public domain)\n    leftgroup: \"M400000 80\\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\\n 435 0h399565z\",\n    leftgroupunder: \"M400000 262\\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\\n 435 219h399565z\",\n    // Harpoons are from glyph U+21BD in font KaTeX Main\n    leftharpoon: \"M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z\",\n    leftharpoonplus: \"M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\\nm0 0v40h400000v-40z\",\n    leftharpoondown: \"M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z\",\n    leftharpoondownplus: \"M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z\",\n    // hook is from glyph U+21A9 in font KaTeX Main\n    lefthook: \"M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\\n 71.5 23h399859zM103 281v-40h399897v40z\",\n    leftlinesegment: \"M40 281 V428 H0 V94 H40 V241 H400000 v40z\\nM40 281 V428 H0 V94 H40 V241 H400000 v40z\",\n    leftmapsto: \"M40 281 V448H0V74H40V241H400000v40z\\nM40 281 V448H0V74H40V241H400000v40z\",\n    // tofrom is from glyph U+21C4 in font KaTeX AMS Regular\n    leftToFrom: \"M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z\",\n    longequal: \"M0 50 h400000 v40H0z m0 194h40000v40H0z\\nM0 50 h400000 v40H0z m0 194h40000v40H0z\",\n    midbrace: \"M200428 334\\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z\",\n    midbraceunder: \"M199572 214\\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z\",\n    oiintSize1: \"M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z\",\n    oiintSize2: \"M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\\nc0 110 84 276 504 276s502.4-166 502.4-276z\",\n    oiiintSize1: \"M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z\",\n    oiiintSize2: \"M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z\",\n    rightarrow: \"M0 241v40h399891c-47.3 35.3-84 78-110 128\\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\\n 151.7 139 205zm0 0v40h399900v-40z\",\n    rightbrace: \"M400000 542l\\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z\",\n    rightbraceunder: \"M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z\",\n    rightgroup: \"M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\\n 3-1 3-3v-38c-76-158-257-219-435-219H0z\",\n    rightgroupunder: \"M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z\",\n    rightharpoon: \"M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\\n 69.2 92 94.5zm0 0v40h399900v-40z\",\n    rightharpoonplus: \"M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z\",\n    rightharpoondown: \"M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z\",\n    rightharpoondownplus: \"M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\\nm0-194v40h400000v-40zm0 0v40h400000v-40z\",\n    righthook: \"M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z\",\n    rightlinesegment: \"M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z\",\n    rightToFrom: \"M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z\",\n    // twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular\n    twoheadleftarrow: \"M0 167c68 40\\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z\",\n    twoheadrightarrow: \"M400000 167\\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z\",\n    // tilde1 is a modified version of a glyph from the MnSymbol package\n    tilde1: \"M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\\n-68.267.847-113-73.952-191-73.952z\",\n    // ditto tilde2, tilde3, & tilde4\n    tilde2: \"M344 55.266c-142 0-300.638 81.316-311.5 86.418\\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z\",\n    tilde3: \"M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\\n -338 0-409-156.573-744-156.573z\",\n    tilde4: \"M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\\n -175.236-744-175.236z\",\n    // vec is from glyph U+20D7 in font KaTeX Main\n    vec: \"M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\\nc-16-25.333-24-45-24-59z\",\n    // widehat1 is a modified version of a glyph from the MnSymbol package\n    widehat1: \"M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z\",\n    // ditto widehat2, widehat3, & widehat4\n    widehat2: \"M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z\",\n    widehat3: \"M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z\",\n    widehat4: \"M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z\",\n    // widecheck paths are all inverted versions of widehat\n    widecheck1: \"M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z\",\n    widecheck2: \"M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z\",\n    widecheck3: \"M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z\",\n    widecheck4: \"M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z\",\n    // The next ten paths support reaction arrows from the mhchem package.\n    // Arrows for \\ce{<-->} are offset from xAxis by 0.22ex, per mhchem in LaTeX\n    // baraboveleftarrow is mostly from glyph U+2190 in font KaTeX Main\n    baraboveleftarrow: \"M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z\",\n    // rightarrowabovebar is mostly from glyph U+2192, KaTeX Main\n    rightarrowabovebar: \"M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z\",\n    // The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.\n    // Ref from mhchem.sty: \\rlap{\\raisebox{-.22ex}{$\\kern0.5em\n    baraboveshortleftharpoon: \"M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z\",\n    rightharpoonaboveshortbar: \"M0,241 l0,40c399126,0,399993,0,399993,0\\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z\",\n    shortbaraboveleftharpoon: \"M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z\",\n    shortrightharpoonabovebar: \"M53,241l0,40c398570,0,399437,0,399437,0\\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z\"\n};\nvar tallDelim = function tallDelim(label, midHeight) {\n    switch(label){\n        case \"lbrack\":\n            return \"M403 1759 V84 H666 V0 H319 V1759 v\" + midHeight + \" v1759 h347 v-84\\nH403z M403 1759 V0 H319 V1759 v\" + midHeight + \" v1759 h84z\";\n        case \"rbrack\":\n            return \"M347 1759 V0 H0 V84 H263 V1759 v\" + midHeight + \" v1759 H0 v84 H347z\\nM347 1759 V0 H263 V1759 v\" + midHeight + \" v1759 h84z\";\n        case \"vert\":\n            return \"M145 15 v585 v\" + midHeight + \" v585 c2.667,10,9.667,15,21,15\\nc10,0,16.667,-5,20,-15 v-585 v\" + -midHeight + \" v-585 c-2.667,-10,-9.667,-15,-21,-15\\nc-10,0,-16.667,5,-20,15z M188 15 H145 v585 v\" + midHeight + \" v585 h43z\";\n        case \"doublevert\":\n            return \"M145 15 v585 v\" + midHeight + \" v585 c2.667,10,9.667,15,21,15\\nc10,0,16.667,-5,20,-15 v-585 v\" + -midHeight + \" v-585 c-2.667,-10,-9.667,-15,-21,-15\\nc-10,0,-16.667,5,-20,15z M188 15 H145 v585 v\" + midHeight + \" v585 h43z\\nM367 15 v585 v\" + midHeight + \" v585 c2.667,10,9.667,15,21,15\\nc10,0,16.667,-5,20,-15 v-585 v\" + -midHeight + \" v-585 c-2.667,-10,-9.667,-15,-21,-15\\nc-10,0,-16.667,5,-20,15z M410 15 H367 v585 v\" + midHeight + \" v585 h43z\";\n        case \"lfloor\":\n            return \"M319 602 V0 H403 V602 v\" + midHeight + \" v1715 h263 v84 H319z\\nMM319 602 V0 H403 V602 v\" + midHeight + \" v1715 H319z\";\n        case \"rfloor\":\n            return \"M319 602 V0 H403 V602 v\" + midHeight + \" v1799 H0 v-84 H319z\\nMM319 602 V0 H403 V602 v\" + midHeight + \" v1715 H319z\";\n        case \"lceil\":\n            return \"M403 1759 V84 H666 V0 H319 V1759 v\" + midHeight + \" v602 h84z\\nM403 1759 V0 H319 V1759 v\" + midHeight + \" v602 h84z\";\n        case \"rceil\":\n            return \"M347 1759 V0 H0 V84 H263 V1759 v\" + midHeight + \" v602 h84z\\nM347 1759 V0 h-84 V1759 v\" + midHeight + \" v602 h84z\";\n        case \"lparen\":\n            return \"M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1\\nc-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,\\n-36,557 l0,\" + (midHeight + 84) + \"c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,\\n949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9\\nc0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,\\n-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189\\nl0,-\" + (midHeight + 92) + \"c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,\\n-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z\";\n        case \"rparen\":\n            return \"M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,\\n63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5\\nc11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,\" + (midHeight + 9) + \"\\nc-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664\\nc-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11\\nc0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17\\nc242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558\\nl0,-\" + (midHeight + 144) + \"c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,\\n-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z\";\n        default:\n            // We should not ever get here.\n            throw new Error(\"Unknown stretchy delimiter.\");\n    }\n};\n/**\n * This node represents a document fragment, which contains elements, but when\n * placed into the DOM doesn't have any representation itself. It only contains\n * children and doesn't have any DOM node properties.\n */ class DocumentFragment {\n    // HtmlDomNode\n    // Never used; needed for satisfying interface.\n    constructor(children){\n        this.children = void 0;\n        this.classes = void 0;\n        this.height = void 0;\n        this.depth = void 0;\n        this.maxFontSize = void 0;\n        this.style = void 0;\n        this.children = children;\n        this.classes = [];\n        this.height = 0;\n        this.depth = 0;\n        this.maxFontSize = 0;\n        this.style = {};\n    }\n    hasClass(className) {\n        return utils.contains(this.classes, className);\n    }\n    /** Convert the fragment into a node. */ toNode() {\n        var frag = document.createDocumentFragment();\n        for(var i = 0; i < this.children.length; i++){\n            frag.appendChild(this.children[i].toNode());\n        }\n        return frag;\n    }\n    /** Convert the fragment into HTML markup. */ toMarkup() {\n        var markup = \"\"; // Simply concatenate the markup for the children together.\n        for(var i = 0; i < this.children.length; i++){\n            markup += this.children[i].toMarkup();\n        }\n        return markup;\n    }\n    /**\n   * Converts the math node into a string, similar to innerText. Applies to\n   * MathDomNode's only.\n   */ toText() {\n        // To avoid this, we would subclass documentFragment separately for\n        // MathML, but polyfills for subclassing is expensive per PR 1469.\n        // $FlowFixMe: Only works for ChildType = MathDomNode.\n        var toText = (child)=>child.toText();\n        return this.children.map(toText).join(\"\");\n    }\n}\n// This file is GENERATED by buildMetrics.sh. DO NOT MODIFY.\nvar fontMetricsData = {\n    \"AMS-Regular\": {\n        \"32\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"65\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.72222\n        ],\n        \"66\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.66667\n        ],\n        \"67\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.72222\n        ],\n        \"68\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.72222\n        ],\n        \"69\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.66667\n        ],\n        \"70\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.61111\n        ],\n        \"71\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.77778\n        ],\n        \"72\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.77778\n        ],\n        \"73\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.38889\n        ],\n        \"74\": [\n            0.16667,\n            0.68889,\n            0,\n            0,\n            0.5\n        ],\n        \"75\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.77778\n        ],\n        \"76\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.66667\n        ],\n        \"77\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.94445\n        ],\n        \"78\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.72222\n        ],\n        \"79\": [\n            0.16667,\n            0.68889,\n            0,\n            0,\n            0.77778\n        ],\n        \"80\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.61111\n        ],\n        \"81\": [\n            0.16667,\n            0.68889,\n            0,\n            0,\n            0.77778\n        ],\n        \"82\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.72222\n        ],\n        \"83\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.55556\n        ],\n        \"84\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.66667\n        ],\n        \"85\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.72222\n        ],\n        \"86\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.72222\n        ],\n        \"87\": [\n            0,\n            0.68889,\n            0,\n            0,\n            1.0\n        ],\n        \"88\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.72222\n        ],\n        \"89\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.72222\n        ],\n        \"90\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.66667\n        ],\n        \"107\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.55556\n        ],\n        \"160\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"165\": [\n            0,\n            0.675,\n            0.025,\n            0,\n            0.75\n        ],\n        \"174\": [\n            0.15559,\n            0.69224,\n            0,\n            0,\n            0.94666\n        ],\n        \"240\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.55556\n        ],\n        \"295\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.54028\n        ],\n        \"710\": [\n            0,\n            0.825,\n            0,\n            0,\n            2.33334\n        ],\n        \"732\": [\n            0,\n            0.9,\n            0,\n            0,\n            2.33334\n        ],\n        \"770\": [\n            0,\n            0.825,\n            0,\n            0,\n            2.33334\n        ],\n        \"771\": [\n            0,\n            0.9,\n            0,\n            0,\n            2.33334\n        ],\n        \"989\": [\n            0.08167,\n            0.58167,\n            0,\n            0,\n            0.77778\n        ],\n        \"1008\": [\n            0,\n            0.43056,\n            0.04028,\n            0,\n            0.66667\n        ],\n        \"8245\": [\n            0,\n            0.54986,\n            0,\n            0,\n            0.275\n        ],\n        \"8463\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.54028\n        ],\n        \"8487\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.72222\n        ],\n        \"8498\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.55556\n        ],\n        \"8502\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.66667\n        ],\n        \"8503\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.44445\n        ],\n        \"8504\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.66667\n        ],\n        \"8513\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.63889\n        ],\n        \"8592\": [\n            -0.03598,\n            0.46402,\n            0,\n            0,\n            0.5\n        ],\n        \"8594\": [\n            -0.03598,\n            0.46402,\n            0,\n            0,\n            0.5\n        ],\n        \"8602\": [\n            -0.13313,\n            0.36687,\n            0,\n            0,\n            1.0\n        ],\n        \"8603\": [\n            -0.13313,\n            0.36687,\n            0,\n            0,\n            1.0\n        ],\n        \"8606\": [\n            0.01354,\n            0.52239,\n            0,\n            0,\n            1.0\n        ],\n        \"8608\": [\n            0.01354,\n            0.52239,\n            0,\n            0,\n            1.0\n        ],\n        \"8610\": [\n            0.01354,\n            0.52239,\n            0,\n            0,\n            1.11111\n        ],\n        \"8611\": [\n            0.01354,\n            0.52239,\n            0,\n            0,\n            1.11111\n        ],\n        \"8619\": [\n            0,\n            0.54986,\n            0,\n            0,\n            1.0\n        ],\n        \"8620\": [\n            0,\n            0.54986,\n            0,\n            0,\n            1.0\n        ],\n        \"8621\": [\n            -0.13313,\n            0.37788,\n            0,\n            0,\n            1.38889\n        ],\n        \"8622\": [\n            -0.13313,\n            0.36687,\n            0,\n            0,\n            1.0\n        ],\n        \"8624\": [\n            0,\n            0.69224,\n            0,\n            0,\n            0.5\n        ],\n        \"8625\": [\n            0,\n            0.69224,\n            0,\n            0,\n            0.5\n        ],\n        \"8630\": [\n            0,\n            0.43056,\n            0,\n            0,\n            1.0\n        ],\n        \"8631\": [\n            0,\n            0.43056,\n            0,\n            0,\n            1.0\n        ],\n        \"8634\": [\n            0.08198,\n            0.58198,\n            0,\n            0,\n            0.77778\n        ],\n        \"8635\": [\n            0.08198,\n            0.58198,\n            0,\n            0,\n            0.77778\n        ],\n        \"8638\": [\n            0.19444,\n            0.69224,\n            0,\n            0,\n            0.41667\n        ],\n        \"8639\": [\n            0.19444,\n            0.69224,\n            0,\n            0,\n            0.41667\n        ],\n        \"8642\": [\n            0.19444,\n            0.69224,\n            0,\n            0,\n            0.41667\n        ],\n        \"8643\": [\n            0.19444,\n            0.69224,\n            0,\n            0,\n            0.41667\n        ],\n        \"8644\": [\n            0.1808,\n            0.675,\n            0,\n            0,\n            1.0\n        ],\n        \"8646\": [\n            0.1808,\n            0.675,\n            0,\n            0,\n            1.0\n        ],\n        \"8647\": [\n            0.1808,\n            0.675,\n            0,\n            0,\n            1.0\n        ],\n        \"8648\": [\n            0.19444,\n            0.69224,\n            0,\n            0,\n            0.83334\n        ],\n        \"8649\": [\n            0.1808,\n            0.675,\n            0,\n            0,\n            1.0\n        ],\n        \"8650\": [\n            0.19444,\n            0.69224,\n            0,\n            0,\n            0.83334\n        ],\n        \"8651\": [\n            0.01354,\n            0.52239,\n            0,\n            0,\n            1.0\n        ],\n        \"8652\": [\n            0.01354,\n            0.52239,\n            0,\n            0,\n            1.0\n        ],\n        \"8653\": [\n            -0.13313,\n            0.36687,\n            0,\n            0,\n            1.0\n        ],\n        \"8654\": [\n            -0.13313,\n            0.36687,\n            0,\n            0,\n            1.0\n        ],\n        \"8655\": [\n            -0.13313,\n            0.36687,\n            0,\n            0,\n            1.0\n        ],\n        \"8666\": [\n            0.13667,\n            0.63667,\n            0,\n            0,\n            1.0\n        ],\n        \"8667\": [\n            0.13667,\n            0.63667,\n            0,\n            0,\n            1.0\n        ],\n        \"8669\": [\n            -0.13313,\n            0.37788,\n            0,\n            0,\n            1.0\n        ],\n        \"8672\": [\n            -0.064,\n            0.437,\n            0,\n            0,\n            1.334\n        ],\n        \"8674\": [\n            -0.064,\n            0.437,\n            0,\n            0,\n            1.334\n        ],\n        \"8705\": [\n            0,\n            0.825,\n            0,\n            0,\n            0.5\n        ],\n        \"8708\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.55556\n        ],\n        \"8709\": [\n            0.08167,\n            0.58167,\n            0,\n            0,\n            0.77778\n        ],\n        \"8717\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.42917\n        ],\n        \"8722\": [\n            -0.03598,\n            0.46402,\n            0,\n            0,\n            0.5\n        ],\n        \"8724\": [\n            0.08198,\n            0.69224,\n            0,\n            0,\n            0.77778\n        ],\n        \"8726\": [\n            0.08167,\n            0.58167,\n            0,\n            0,\n            0.77778\n        ],\n        \"8733\": [\n            0,\n            0.69224,\n            0,\n            0,\n            0.77778\n        ],\n        \"8736\": [\n            0,\n            0.69224,\n            0,\n            0,\n            0.72222\n        ],\n        \"8737\": [\n            0,\n            0.69224,\n            0,\n            0,\n            0.72222\n        ],\n        \"8738\": [\n            0.03517,\n            0.52239,\n            0,\n            0,\n            0.72222\n        ],\n        \"8739\": [\n            0.08167,\n            0.58167,\n            0,\n            0,\n            0.22222\n        ],\n        \"8740\": [\n            0.25142,\n            0.74111,\n            0,\n            0,\n            0.27778\n        ],\n        \"8741\": [\n            0.08167,\n            0.58167,\n            0,\n            0,\n            0.38889\n        ],\n        \"8742\": [\n            0.25142,\n            0.74111,\n            0,\n            0,\n            0.5\n        ],\n        \"8756\": [\n            0,\n            0.69224,\n            0,\n            0,\n            0.66667\n        ],\n        \"8757\": [\n            0,\n            0.69224,\n            0,\n            0,\n            0.66667\n        ],\n        \"8764\": [\n            -0.13313,\n            0.36687,\n            0,\n            0,\n            0.77778\n        ],\n        \"8765\": [\n            -0.13313,\n            0.37788,\n            0,\n            0,\n            0.77778\n        ],\n        \"8769\": [\n            -0.13313,\n            0.36687,\n            0,\n            0,\n            0.77778\n        ],\n        \"8770\": [\n            -0.03625,\n            0.46375,\n            0,\n            0,\n            0.77778\n        ],\n        \"8774\": [\n            0.30274,\n            0.79383,\n            0,\n            0,\n            0.77778\n        ],\n        \"8776\": [\n            -0.01688,\n            0.48312,\n            0,\n            0,\n            0.77778\n        ],\n        \"8778\": [\n            0.08167,\n            0.58167,\n            0,\n            0,\n            0.77778\n        ],\n        \"8782\": [\n            0.06062,\n            0.54986,\n            0,\n            0,\n            0.77778\n        ],\n        \"8783\": [\n            0.06062,\n            0.54986,\n            0,\n            0,\n            0.77778\n        ],\n        \"8785\": [\n            0.08198,\n            0.58198,\n            0,\n            0,\n            0.77778\n        ],\n        \"8786\": [\n            0.08198,\n            0.58198,\n            0,\n            0,\n            0.77778\n        ],\n        \"8787\": [\n            0.08198,\n            0.58198,\n            0,\n            0,\n            0.77778\n        ],\n        \"8790\": [\n            0,\n            0.69224,\n            0,\n            0,\n            0.77778\n        ],\n        \"8791\": [\n            0.22958,\n            0.72958,\n            0,\n            0,\n            0.77778\n        ],\n        \"8796\": [\n            0.08198,\n            0.91667,\n            0,\n            0,\n            0.77778\n        ],\n        \"8806\": [\n            0.25583,\n            0.75583,\n            0,\n            0,\n            0.77778\n        ],\n        \"8807\": [\n            0.25583,\n            0.75583,\n            0,\n            0,\n            0.77778\n        ],\n        \"8808\": [\n            0.25142,\n            0.75726,\n            0,\n            0,\n            0.77778\n        ],\n        \"8809\": [\n            0.25142,\n            0.75726,\n            0,\n            0,\n            0.77778\n        ],\n        \"8812\": [\n            0.25583,\n            0.75583,\n            0,\n            0,\n            0.5\n        ],\n        \"8814\": [\n            0.20576,\n            0.70576,\n            0,\n            0,\n            0.77778\n        ],\n        \"8815\": [\n            0.20576,\n            0.70576,\n            0,\n            0,\n            0.77778\n        ],\n        \"8816\": [\n            0.30274,\n            0.79383,\n            0,\n            0,\n            0.77778\n        ],\n        \"8817\": [\n            0.30274,\n            0.79383,\n            0,\n            0,\n            0.77778\n        ],\n        \"8818\": [\n            0.22958,\n            0.72958,\n            0,\n            0,\n            0.77778\n        ],\n        \"8819\": [\n            0.22958,\n            0.72958,\n            0,\n            0,\n            0.77778\n        ],\n        \"8822\": [\n            0.1808,\n            0.675,\n            0,\n            0,\n            0.77778\n        ],\n        \"8823\": [\n            0.1808,\n            0.675,\n            0,\n            0,\n            0.77778\n        ],\n        \"8828\": [\n            0.13667,\n            0.63667,\n            0,\n            0,\n            0.77778\n        ],\n        \"8829\": [\n            0.13667,\n            0.63667,\n            0,\n            0,\n            0.77778\n        ],\n        \"8830\": [\n            0.22958,\n            0.72958,\n            0,\n            0,\n            0.77778\n        ],\n        \"8831\": [\n            0.22958,\n            0.72958,\n            0,\n            0,\n            0.77778\n        ],\n        \"8832\": [\n            0.20576,\n            0.70576,\n            0,\n            0,\n            0.77778\n        ],\n        \"8833\": [\n            0.20576,\n            0.70576,\n            0,\n            0,\n            0.77778\n        ],\n        \"8840\": [\n            0.30274,\n            0.79383,\n            0,\n            0,\n            0.77778\n        ],\n        \"8841\": [\n            0.30274,\n            0.79383,\n            0,\n            0,\n            0.77778\n        ],\n        \"8842\": [\n            0.13597,\n            0.63597,\n            0,\n            0,\n            0.77778\n        ],\n        \"8843\": [\n            0.13597,\n            0.63597,\n            0,\n            0,\n            0.77778\n        ],\n        \"8847\": [\n            0.03517,\n            0.54986,\n            0,\n            0,\n            0.77778\n        ],\n        \"8848\": [\n            0.03517,\n            0.54986,\n            0,\n            0,\n            0.77778\n        ],\n        \"8858\": [\n            0.08198,\n            0.58198,\n            0,\n            0,\n            0.77778\n        ],\n        \"8859\": [\n            0.08198,\n            0.58198,\n            0,\n            0,\n            0.77778\n        ],\n        \"8861\": [\n            0.08198,\n            0.58198,\n            0,\n            0,\n            0.77778\n        ],\n        \"8862\": [\n            0,\n            0.675,\n            0,\n            0,\n            0.77778\n        ],\n        \"8863\": [\n            0,\n            0.675,\n            0,\n            0,\n            0.77778\n        ],\n        \"8864\": [\n            0,\n            0.675,\n            0,\n            0,\n            0.77778\n        ],\n        \"8865\": [\n            0,\n            0.675,\n            0,\n            0,\n            0.77778\n        ],\n        \"8872\": [\n            0,\n            0.69224,\n            0,\n            0,\n            0.61111\n        ],\n        \"8873\": [\n            0,\n            0.69224,\n            0,\n            0,\n            0.72222\n        ],\n        \"8874\": [\n            0,\n            0.69224,\n            0,\n            0,\n            0.88889\n        ],\n        \"8876\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.61111\n        ],\n        \"8877\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.61111\n        ],\n        \"8878\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.72222\n        ],\n        \"8879\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.72222\n        ],\n        \"8882\": [\n            0.03517,\n            0.54986,\n            0,\n            0,\n            0.77778\n        ],\n        \"8883\": [\n            0.03517,\n            0.54986,\n            0,\n            0,\n            0.77778\n        ],\n        \"8884\": [\n            0.13667,\n            0.63667,\n            0,\n            0,\n            0.77778\n        ],\n        \"8885\": [\n            0.13667,\n            0.63667,\n            0,\n            0,\n            0.77778\n        ],\n        \"8888\": [\n            0,\n            0.54986,\n            0,\n            0,\n            1.11111\n        ],\n        \"8890\": [\n            0.19444,\n            0.43056,\n            0,\n            0,\n            0.55556\n        ],\n        \"8891\": [\n            0.19444,\n            0.69224,\n            0,\n            0,\n            0.61111\n        ],\n        \"8892\": [\n            0.19444,\n            0.69224,\n            0,\n            0,\n            0.61111\n        ],\n        \"8901\": [\n            0,\n            0.54986,\n            0,\n            0,\n            0.27778\n        ],\n        \"8903\": [\n            0.08167,\n            0.58167,\n            0,\n            0,\n            0.77778\n        ],\n        \"8905\": [\n            0.08167,\n            0.58167,\n            0,\n            0,\n            0.77778\n        ],\n        \"8906\": [\n            0.08167,\n            0.58167,\n            0,\n            0,\n            0.77778\n        ],\n        \"8907\": [\n            0,\n            0.69224,\n            0,\n            0,\n            0.77778\n        ],\n        \"8908\": [\n            0,\n            0.69224,\n            0,\n            0,\n            0.77778\n        ],\n        \"8909\": [\n            -0.03598,\n            0.46402,\n            0,\n            0,\n            0.77778\n        ],\n        \"8910\": [\n            0,\n            0.54986,\n            0,\n            0,\n            0.76042\n        ],\n        \"8911\": [\n            0,\n            0.54986,\n            0,\n            0,\n            0.76042\n        ],\n        \"8912\": [\n            0.03517,\n            0.54986,\n            0,\n            0,\n            0.77778\n        ],\n        \"8913\": [\n            0.03517,\n            0.54986,\n            0,\n            0,\n            0.77778\n        ],\n        \"8914\": [\n            0,\n            0.54986,\n            0,\n            0,\n            0.66667\n        ],\n        \"8915\": [\n            0,\n            0.54986,\n            0,\n            0,\n            0.66667\n        ],\n        \"8916\": [\n            0,\n            0.69224,\n            0,\n            0,\n            0.66667\n        ],\n        \"8918\": [\n            0.0391,\n            0.5391,\n            0,\n            0,\n            0.77778\n        ],\n        \"8919\": [\n            0.0391,\n            0.5391,\n            0,\n            0,\n            0.77778\n        ],\n        \"8920\": [\n            0.03517,\n            0.54986,\n            0,\n            0,\n            1.33334\n        ],\n        \"8921\": [\n            0.03517,\n            0.54986,\n            0,\n            0,\n            1.33334\n        ],\n        \"8922\": [\n            0.38569,\n            0.88569,\n            0,\n            0,\n            0.77778\n        ],\n        \"8923\": [\n            0.38569,\n            0.88569,\n            0,\n            0,\n            0.77778\n        ],\n        \"8926\": [\n            0.13667,\n            0.63667,\n            0,\n            0,\n            0.77778\n        ],\n        \"8927\": [\n            0.13667,\n            0.63667,\n            0,\n            0,\n            0.77778\n        ],\n        \"8928\": [\n            0.30274,\n            0.79383,\n            0,\n            0,\n            0.77778\n        ],\n        \"8929\": [\n            0.30274,\n            0.79383,\n            0,\n            0,\n            0.77778\n        ],\n        \"8934\": [\n            0.23222,\n            0.74111,\n            0,\n            0,\n            0.77778\n        ],\n        \"8935\": [\n            0.23222,\n            0.74111,\n            0,\n            0,\n            0.77778\n        ],\n        \"8936\": [\n            0.23222,\n            0.74111,\n            0,\n            0,\n            0.77778\n        ],\n        \"8937\": [\n            0.23222,\n            0.74111,\n            0,\n            0,\n            0.77778\n        ],\n        \"8938\": [\n            0.20576,\n            0.70576,\n            0,\n            0,\n            0.77778\n        ],\n        \"8939\": [\n            0.20576,\n            0.70576,\n            0,\n            0,\n            0.77778\n        ],\n        \"8940\": [\n            0.30274,\n            0.79383,\n            0,\n            0,\n            0.77778\n        ],\n        \"8941\": [\n            0.30274,\n            0.79383,\n            0,\n            0,\n            0.77778\n        ],\n        \"8994\": [\n            0.19444,\n            0.69224,\n            0,\n            0,\n            0.77778\n        ],\n        \"8995\": [\n            0.19444,\n            0.69224,\n            0,\n            0,\n            0.77778\n        ],\n        \"9416\": [\n            0.15559,\n            0.69224,\n            0,\n            0,\n            0.90222\n        ],\n        \"9484\": [\n            0,\n            0.69224,\n            0,\n            0,\n            0.5\n        ],\n        \"9488\": [\n            0,\n            0.69224,\n            0,\n            0,\n            0.5\n        ],\n        \"9492\": [\n            0,\n            0.37788,\n            0,\n            0,\n            0.5\n        ],\n        \"9496\": [\n            0,\n            0.37788,\n            0,\n            0,\n            0.5\n        ],\n        \"9585\": [\n            0.19444,\n            0.68889,\n            0,\n            0,\n            0.88889\n        ],\n        \"9586\": [\n            0.19444,\n            0.74111,\n            0,\n            0,\n            0.88889\n        ],\n        \"9632\": [\n            0,\n            0.675,\n            0,\n            0,\n            0.77778\n        ],\n        \"9633\": [\n            0,\n            0.675,\n            0,\n            0,\n            0.77778\n        ],\n        \"9650\": [\n            0,\n            0.54986,\n            0,\n            0,\n            0.72222\n        ],\n        \"9651\": [\n            0,\n            0.54986,\n            0,\n            0,\n            0.72222\n        ],\n        \"9654\": [\n            0.03517,\n            0.54986,\n            0,\n            0,\n            0.77778\n        ],\n        \"9660\": [\n            0,\n            0.54986,\n            0,\n            0,\n            0.72222\n        ],\n        \"9661\": [\n            0,\n            0.54986,\n            0,\n            0,\n            0.72222\n        ],\n        \"9664\": [\n            0.03517,\n            0.54986,\n            0,\n            0,\n            0.77778\n        ],\n        \"9674\": [\n            0.11111,\n            0.69224,\n            0,\n            0,\n            0.66667\n        ],\n        \"9733\": [\n            0.19444,\n            0.69224,\n            0,\n            0,\n            0.94445\n        ],\n        \"10003\": [\n            0,\n            0.69224,\n            0,\n            0,\n            0.83334\n        ],\n        \"10016\": [\n            0,\n            0.69224,\n            0,\n            0,\n            0.83334\n        ],\n        \"10731\": [\n            0.11111,\n            0.69224,\n            0,\n            0,\n            0.66667\n        ],\n        \"10846\": [\n            0.19444,\n            0.75583,\n            0,\n            0,\n            0.61111\n        ],\n        \"10877\": [\n            0.13667,\n            0.63667,\n            0,\n            0,\n            0.77778\n        ],\n        \"10878\": [\n            0.13667,\n            0.63667,\n            0,\n            0,\n            0.77778\n        ],\n        \"10885\": [\n            0.25583,\n            0.75583,\n            0,\n            0,\n            0.77778\n        ],\n        \"10886\": [\n            0.25583,\n            0.75583,\n            0,\n            0,\n            0.77778\n        ],\n        \"10887\": [\n            0.13597,\n            0.63597,\n            0,\n            0,\n            0.77778\n        ],\n        \"10888\": [\n            0.13597,\n            0.63597,\n            0,\n            0,\n            0.77778\n        ],\n        \"10889\": [\n            0.26167,\n            0.75726,\n            0,\n            0,\n            0.77778\n        ],\n        \"10890\": [\n            0.26167,\n            0.75726,\n            0,\n            0,\n            0.77778\n        ],\n        \"10891\": [\n            0.48256,\n            0.98256,\n            0,\n            0,\n            0.77778\n        ],\n        \"10892\": [\n            0.48256,\n            0.98256,\n            0,\n            0,\n            0.77778\n        ],\n        \"10901\": [\n            0.13667,\n            0.63667,\n            0,\n            0,\n            0.77778\n        ],\n        \"10902\": [\n            0.13667,\n            0.63667,\n            0,\n            0,\n            0.77778\n        ],\n        \"10933\": [\n            0.25142,\n            0.75726,\n            0,\n            0,\n            0.77778\n        ],\n        \"10934\": [\n            0.25142,\n            0.75726,\n            0,\n            0,\n            0.77778\n        ],\n        \"10935\": [\n            0.26167,\n            0.75726,\n            0,\n            0,\n            0.77778\n        ],\n        \"10936\": [\n            0.26167,\n            0.75726,\n            0,\n            0,\n            0.77778\n        ],\n        \"10937\": [\n            0.26167,\n            0.75726,\n            0,\n            0,\n            0.77778\n        ],\n        \"10938\": [\n            0.26167,\n            0.75726,\n            0,\n            0,\n            0.77778\n        ],\n        \"10949\": [\n            0.25583,\n            0.75583,\n            0,\n            0,\n            0.77778\n        ],\n        \"10950\": [\n            0.25583,\n            0.75583,\n            0,\n            0,\n            0.77778\n        ],\n        \"10955\": [\n            0.28481,\n            0.79383,\n            0,\n            0,\n            0.77778\n        ],\n        \"10956\": [\n            0.28481,\n            0.79383,\n            0,\n            0,\n            0.77778\n        ],\n        \"57350\": [\n            0.08167,\n            0.58167,\n            0,\n            0,\n            0.22222\n        ],\n        \"57351\": [\n            0.08167,\n            0.58167,\n            0,\n            0,\n            0.38889\n        ],\n        \"57352\": [\n            0.08167,\n            0.58167,\n            0,\n            0,\n            0.77778\n        ],\n        \"57353\": [\n            0,\n            0.43056,\n            0.04028,\n            0,\n            0.66667\n        ],\n        \"57356\": [\n            0.25142,\n            0.75726,\n            0,\n            0,\n            0.77778\n        ],\n        \"57357\": [\n            0.25142,\n            0.75726,\n            0,\n            0,\n            0.77778\n        ],\n        \"57358\": [\n            0.41951,\n            0.91951,\n            0,\n            0,\n            0.77778\n        ],\n        \"57359\": [\n            0.30274,\n            0.79383,\n            0,\n            0,\n            0.77778\n        ],\n        \"57360\": [\n            0.30274,\n            0.79383,\n            0,\n            0,\n            0.77778\n        ],\n        \"57361\": [\n            0.41951,\n            0.91951,\n            0,\n            0,\n            0.77778\n        ],\n        \"57366\": [\n            0.25142,\n            0.75726,\n            0,\n            0,\n            0.77778\n        ],\n        \"57367\": [\n            0.25142,\n            0.75726,\n            0,\n            0,\n            0.77778\n        ],\n        \"57368\": [\n            0.25142,\n            0.75726,\n            0,\n            0,\n            0.77778\n        ],\n        \"57369\": [\n            0.25142,\n            0.75726,\n            0,\n            0,\n            0.77778\n        ],\n        \"57370\": [\n            0.13597,\n            0.63597,\n            0,\n            0,\n            0.77778\n        ],\n        \"57371\": [\n            0.13597,\n            0.63597,\n            0,\n            0,\n            0.77778\n        ]\n    },\n    \"Caligraphic-Regular\": {\n        \"32\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"65\": [\n            0,\n            0.68333,\n            0,\n            0.19445,\n            0.79847\n        ],\n        \"66\": [\n            0,\n            0.68333,\n            0.03041,\n            0.13889,\n            0.65681\n        ],\n        \"67\": [\n            0,\n            0.68333,\n            0.05834,\n            0.13889,\n            0.52653\n        ],\n        \"68\": [\n            0,\n            0.68333,\n            0.02778,\n            0.08334,\n            0.77139\n        ],\n        \"69\": [\n            0,\n            0.68333,\n            0.08944,\n            0.11111,\n            0.52778\n        ],\n        \"70\": [\n            0,\n            0.68333,\n            0.09931,\n            0.11111,\n            0.71875\n        ],\n        \"71\": [\n            0.09722,\n            0.68333,\n            0.0593,\n            0.11111,\n            0.59487\n        ],\n        \"72\": [\n            0,\n            0.68333,\n            0.00965,\n            0.11111,\n            0.84452\n        ],\n        \"73\": [\n            0,\n            0.68333,\n            0.07382,\n            0,\n            0.54452\n        ],\n        \"74\": [\n            0.09722,\n            0.68333,\n            0.18472,\n            0.16667,\n            0.67778\n        ],\n        \"75\": [\n            0,\n            0.68333,\n            0.01445,\n            0.05556,\n            0.76195\n        ],\n        \"76\": [\n            0,\n            0.68333,\n            0,\n            0.13889,\n            0.68972\n        ],\n        \"77\": [\n            0,\n            0.68333,\n            0,\n            0.13889,\n            1.2009\n        ],\n        \"78\": [\n            0,\n            0.68333,\n            0.14736,\n            0.08334,\n            0.82049\n        ],\n        \"79\": [\n            0,\n            0.68333,\n            0.02778,\n            0.11111,\n            0.79611\n        ],\n        \"80\": [\n            0,\n            0.68333,\n            0.08222,\n            0.08334,\n            0.69556\n        ],\n        \"81\": [\n            0.09722,\n            0.68333,\n            0,\n            0.11111,\n            0.81667\n        ],\n        \"82\": [\n            0,\n            0.68333,\n            0,\n            0.08334,\n            0.8475\n        ],\n        \"83\": [\n            0,\n            0.68333,\n            0.075,\n            0.13889,\n            0.60556\n        ],\n        \"84\": [\n            0,\n            0.68333,\n            0.25417,\n            0,\n            0.54464\n        ],\n        \"85\": [\n            0,\n            0.68333,\n            0.09931,\n            0.08334,\n            0.62583\n        ],\n        \"86\": [\n            0,\n            0.68333,\n            0.08222,\n            0,\n            0.61278\n        ],\n        \"87\": [\n            0,\n            0.68333,\n            0.08222,\n            0.08334,\n            0.98778\n        ],\n        \"88\": [\n            0,\n            0.68333,\n            0.14643,\n            0.13889,\n            0.7133\n        ],\n        \"89\": [\n            0.09722,\n            0.68333,\n            0.08222,\n            0.08334,\n            0.66834\n        ],\n        \"90\": [\n            0,\n            0.68333,\n            0.07944,\n            0.13889,\n            0.72473\n        ],\n        \"160\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ]\n    },\n    \"Fraktur-Regular\": {\n        \"32\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"33\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.29574\n        ],\n        \"34\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.21471\n        ],\n        \"38\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.73786\n        ],\n        \"39\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.21201\n        ],\n        \"40\": [\n            0.24982,\n            0.74947,\n            0,\n            0,\n            0.38865\n        ],\n        \"41\": [\n            0.24982,\n            0.74947,\n            0,\n            0,\n            0.38865\n        ],\n        \"42\": [\n            0,\n            0.62119,\n            0,\n            0,\n            0.27764\n        ],\n        \"43\": [\n            0.08319,\n            0.58283,\n            0,\n            0,\n            0.75623\n        ],\n        \"44\": [\n            0,\n            0.10803,\n            0,\n            0,\n            0.27764\n        ],\n        \"45\": [\n            0.08319,\n            0.58283,\n            0,\n            0,\n            0.75623\n        ],\n        \"46\": [\n            0,\n            0.10803,\n            0,\n            0,\n            0.27764\n        ],\n        \"47\": [\n            0.24982,\n            0.74947,\n            0,\n            0,\n            0.50181\n        ],\n        \"48\": [\n            0,\n            0.47534,\n            0,\n            0,\n            0.50181\n        ],\n        \"49\": [\n            0,\n            0.47534,\n            0,\n            0,\n            0.50181\n        ],\n        \"50\": [\n            0,\n            0.47534,\n            0,\n            0,\n            0.50181\n        ],\n        \"51\": [\n            0.18906,\n            0.47534,\n            0,\n            0,\n            0.50181\n        ],\n        \"52\": [\n            0.18906,\n            0.47534,\n            0,\n            0,\n            0.50181\n        ],\n        \"53\": [\n            0.18906,\n            0.47534,\n            0,\n            0,\n            0.50181\n        ],\n        \"54\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.50181\n        ],\n        \"55\": [\n            0.18906,\n            0.47534,\n            0,\n            0,\n            0.50181\n        ],\n        \"56\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.50181\n        ],\n        \"57\": [\n            0.18906,\n            0.47534,\n            0,\n            0,\n            0.50181\n        ],\n        \"58\": [\n            0,\n            0.47534,\n            0,\n            0,\n            0.21606\n        ],\n        \"59\": [\n            0.12604,\n            0.47534,\n            0,\n            0,\n            0.21606\n        ],\n        \"61\": [\n            -0.13099,\n            0.36866,\n            0,\n            0,\n            0.75623\n        ],\n        \"63\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.36245\n        ],\n        \"65\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.7176\n        ],\n        \"66\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.88397\n        ],\n        \"67\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.61254\n        ],\n        \"68\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.83158\n        ],\n        \"69\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.66278\n        ],\n        \"70\": [\n            0.12604,\n            0.69141,\n            0,\n            0,\n            0.61119\n        ],\n        \"71\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.78539\n        ],\n        \"72\": [\n            0.06302,\n            0.69141,\n            0,\n            0,\n            0.7203\n        ],\n        \"73\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.55448\n        ],\n        \"74\": [\n            0.12604,\n            0.69141,\n            0,\n            0,\n            0.55231\n        ],\n        \"75\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.66845\n        ],\n        \"76\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.66602\n        ],\n        \"77\": [\n            0,\n            0.69141,\n            0,\n            0,\n            1.04953\n        ],\n        \"78\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.83212\n        ],\n        \"79\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.82699\n        ],\n        \"80\": [\n            0.18906,\n            0.69141,\n            0,\n            0,\n            0.82753\n        ],\n        \"81\": [\n            0.03781,\n            0.69141,\n            0,\n            0,\n            0.82699\n        ],\n        \"82\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.82807\n        ],\n        \"83\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.82861\n        ],\n        \"84\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.66899\n        ],\n        \"85\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.64576\n        ],\n        \"86\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.83131\n        ],\n        \"87\": [\n            0,\n            0.69141,\n            0,\n            0,\n            1.04602\n        ],\n        \"88\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.71922\n        ],\n        \"89\": [\n            0.18906,\n            0.69141,\n            0,\n            0,\n            0.83293\n        ],\n        \"90\": [\n            0.12604,\n            0.69141,\n            0,\n            0,\n            0.60201\n        ],\n        \"91\": [\n            0.24982,\n            0.74947,\n            0,\n            0,\n            0.27764\n        ],\n        \"93\": [\n            0.24982,\n            0.74947,\n            0,\n            0,\n            0.27764\n        ],\n        \"94\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.49965\n        ],\n        \"97\": [\n            0,\n            0.47534,\n            0,\n            0,\n            0.50046\n        ],\n        \"98\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.51315\n        ],\n        \"99\": [\n            0,\n            0.47534,\n            0,\n            0,\n            0.38946\n        ],\n        \"100\": [\n            0,\n            0.62119,\n            0,\n            0,\n            0.49857\n        ],\n        \"101\": [\n            0,\n            0.47534,\n            0,\n            0,\n            0.40053\n        ],\n        \"102\": [\n            0.18906,\n            0.69141,\n            0,\n            0,\n            0.32626\n        ],\n        \"103\": [\n            0.18906,\n            0.47534,\n            0,\n            0,\n            0.5037\n        ],\n        \"104\": [\n            0.18906,\n            0.69141,\n            0,\n            0,\n            0.52126\n        ],\n        \"105\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.27899\n        ],\n        \"106\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.28088\n        ],\n        \"107\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.38946\n        ],\n        \"108\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.27953\n        ],\n        \"109\": [\n            0,\n            0.47534,\n            0,\n            0,\n            0.76676\n        ],\n        \"110\": [\n            0,\n            0.47534,\n            0,\n            0,\n            0.52666\n        ],\n        \"111\": [\n            0,\n            0.47534,\n            0,\n            0,\n            0.48885\n        ],\n        \"112\": [\n            0.18906,\n            0.52396,\n            0,\n            0,\n            0.50046\n        ],\n        \"113\": [\n            0.18906,\n            0.47534,\n            0,\n            0,\n            0.48912\n        ],\n        \"114\": [\n            0,\n            0.47534,\n            0,\n            0,\n            0.38919\n        ],\n        \"115\": [\n            0,\n            0.47534,\n            0,\n            0,\n            0.44266\n        ],\n        \"116\": [\n            0,\n            0.62119,\n            0,\n            0,\n            0.33301\n        ],\n        \"117\": [\n            0,\n            0.47534,\n            0,\n            0,\n            0.5172\n        ],\n        \"118\": [\n            0,\n            0.52396,\n            0,\n            0,\n            0.5118\n        ],\n        \"119\": [\n            0,\n            0.52396,\n            0,\n            0,\n            0.77351\n        ],\n        \"120\": [\n            0.18906,\n            0.47534,\n            0,\n            0,\n            0.38865\n        ],\n        \"121\": [\n            0.18906,\n            0.47534,\n            0,\n            0,\n            0.49884\n        ],\n        \"122\": [\n            0.18906,\n            0.47534,\n            0,\n            0,\n            0.39054\n        ],\n        \"160\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"8216\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.21471\n        ],\n        \"8217\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.21471\n        ],\n        \"58112\": [\n            0,\n            0.62119,\n            0,\n            0,\n            0.49749\n        ],\n        \"58113\": [\n            0,\n            0.62119,\n            0,\n            0,\n            0.4983\n        ],\n        \"58114\": [\n            0.18906,\n            0.69141,\n            0,\n            0,\n            0.33328\n        ],\n        \"58115\": [\n            0.18906,\n            0.69141,\n            0,\n            0,\n            0.32923\n        ],\n        \"58116\": [\n            0.18906,\n            0.47534,\n            0,\n            0,\n            0.50343\n        ],\n        \"58117\": [\n            0,\n            0.69141,\n            0,\n            0,\n            0.33301\n        ],\n        \"58118\": [\n            0,\n            0.62119,\n            0,\n            0,\n            0.33409\n        ],\n        \"58119\": [\n            0,\n            0.47534,\n            0,\n            0,\n            0.50073\n        ]\n    },\n    \"Main-Bold\": {\n        \"32\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"33\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.35\n        ],\n        \"34\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.60278\n        ],\n        \"35\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.95833\n        ],\n        \"36\": [\n            0.05556,\n            0.75,\n            0,\n            0,\n            0.575\n        ],\n        \"37\": [\n            0.05556,\n            0.75,\n            0,\n            0,\n            0.95833\n        ],\n        \"38\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.89444\n        ],\n        \"39\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.31944\n        ],\n        \"40\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.44722\n        ],\n        \"41\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.44722\n        ],\n        \"42\": [\n            0,\n            0.75,\n            0,\n            0,\n            0.575\n        ],\n        \"43\": [\n            0.13333,\n            0.63333,\n            0,\n            0,\n            0.89444\n        ],\n        \"44\": [\n            0.19444,\n            0.15556,\n            0,\n            0,\n            0.31944\n        ],\n        \"45\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.38333\n        ],\n        \"46\": [\n            0,\n            0.15556,\n            0,\n            0,\n            0.31944\n        ],\n        \"47\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.575\n        ],\n        \"48\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.575\n        ],\n        \"49\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.575\n        ],\n        \"50\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.575\n        ],\n        \"51\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.575\n        ],\n        \"52\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.575\n        ],\n        \"53\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.575\n        ],\n        \"54\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.575\n        ],\n        \"55\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.575\n        ],\n        \"56\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.575\n        ],\n        \"57\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.575\n        ],\n        \"58\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.31944\n        ],\n        \"59\": [\n            0.19444,\n            0.44444,\n            0,\n            0,\n            0.31944\n        ],\n        \"60\": [\n            0.08556,\n            0.58556,\n            0,\n            0,\n            0.89444\n        ],\n        \"61\": [\n            -0.10889,\n            0.39111,\n            0,\n            0,\n            0.89444\n        ],\n        \"62\": [\n            0.08556,\n            0.58556,\n            0,\n            0,\n            0.89444\n        ],\n        \"63\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.54305\n        ],\n        \"64\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.89444\n        ],\n        \"65\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.86944\n        ],\n        \"66\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.81805\n        ],\n        \"67\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.83055\n        ],\n        \"68\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.88194\n        ],\n        \"69\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.75555\n        ],\n        \"70\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.72361\n        ],\n        \"71\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.90416\n        ],\n        \"72\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.9\n        ],\n        \"73\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.43611\n        ],\n        \"74\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.59444\n        ],\n        \"75\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.90138\n        ],\n        \"76\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.69166\n        ],\n        \"77\": [\n            0,\n            0.68611,\n            0,\n            0,\n            1.09166\n        ],\n        \"78\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.9\n        ],\n        \"79\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.86388\n        ],\n        \"80\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.78611\n        ],\n        \"81\": [\n            0.19444,\n            0.68611,\n            0,\n            0,\n            0.86388\n        ],\n        \"82\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.8625\n        ],\n        \"83\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.63889\n        ],\n        \"84\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.8\n        ],\n        \"85\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.88472\n        ],\n        \"86\": [\n            0,\n            0.68611,\n            0.01597,\n            0,\n            0.86944\n        ],\n        \"87\": [\n            0,\n            0.68611,\n            0.01597,\n            0,\n            1.18888\n        ],\n        \"88\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.86944\n        ],\n        \"89\": [\n            0,\n            0.68611,\n            0.02875,\n            0,\n            0.86944\n        ],\n        \"90\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.70277\n        ],\n        \"91\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.31944\n        ],\n        \"92\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.575\n        ],\n        \"93\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.31944\n        ],\n        \"94\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.575\n        ],\n        \"95\": [\n            0.31,\n            0.13444,\n            0.03194,\n            0,\n            0.575\n        ],\n        \"97\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.55902\n        ],\n        \"98\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.63889\n        ],\n        \"99\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.51111\n        ],\n        \"100\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.63889\n        ],\n        \"101\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.52708\n        ],\n        \"102\": [\n            0,\n            0.69444,\n            0.10903,\n            0,\n            0.35139\n        ],\n        \"103\": [\n            0.19444,\n            0.44444,\n            0.01597,\n            0,\n            0.575\n        ],\n        \"104\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.63889\n        ],\n        \"105\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.31944\n        ],\n        \"106\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.35139\n        ],\n        \"107\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.60694\n        ],\n        \"108\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.31944\n        ],\n        \"109\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.95833\n        ],\n        \"110\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.63889\n        ],\n        \"111\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.575\n        ],\n        \"112\": [\n            0.19444,\n            0.44444,\n            0,\n            0,\n            0.63889\n        ],\n        \"113\": [\n            0.19444,\n            0.44444,\n            0,\n            0,\n            0.60694\n        ],\n        \"114\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.47361\n        ],\n        \"115\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.45361\n        ],\n        \"116\": [\n            0,\n            0.63492,\n            0,\n            0,\n            0.44722\n        ],\n        \"117\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.63889\n        ],\n        \"118\": [\n            0,\n            0.44444,\n            0.01597,\n            0,\n            0.60694\n        ],\n        \"119\": [\n            0,\n            0.44444,\n            0.01597,\n            0,\n            0.83055\n        ],\n        \"120\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.60694\n        ],\n        \"121\": [\n            0.19444,\n            0.44444,\n            0.01597,\n            0,\n            0.60694\n        ],\n        \"122\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.51111\n        ],\n        \"123\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.575\n        ],\n        \"124\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.31944\n        ],\n        \"125\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.575\n        ],\n        \"126\": [\n            0.35,\n            0.34444,\n            0,\n            0,\n            0.575\n        ],\n        \"160\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"163\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.86853\n        ],\n        \"168\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.575\n        ],\n        \"172\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.76666\n        ],\n        \"176\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.86944\n        ],\n        \"177\": [\n            0.13333,\n            0.63333,\n            0,\n            0,\n            0.89444\n        ],\n        \"184\": [\n            0.17014,\n            0,\n            0,\n            0,\n            0.51111\n        ],\n        \"198\": [\n            0,\n            0.68611,\n            0,\n            0,\n            1.04166\n        ],\n        \"215\": [\n            0.13333,\n            0.63333,\n            0,\n            0,\n            0.89444\n        ],\n        \"216\": [\n            0.04861,\n            0.73472,\n            0,\n            0,\n            0.89444\n        ],\n        \"223\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.59722\n        ],\n        \"230\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.83055\n        ],\n        \"247\": [\n            0.13333,\n            0.63333,\n            0,\n            0,\n            0.89444\n        ],\n        \"248\": [\n            0.09722,\n            0.54167,\n            0,\n            0,\n            0.575\n        ],\n        \"305\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.31944\n        ],\n        \"338\": [\n            0,\n            0.68611,\n            0,\n            0,\n            1.16944\n        ],\n        \"339\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.89444\n        ],\n        \"567\": [\n            0.19444,\n            0.44444,\n            0,\n            0,\n            0.35139\n        ],\n        \"710\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.575\n        ],\n        \"711\": [\n            0,\n            0.63194,\n            0,\n            0,\n            0.575\n        ],\n        \"713\": [\n            0,\n            0.59611,\n            0,\n            0,\n            0.575\n        ],\n        \"714\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.575\n        ],\n        \"715\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.575\n        ],\n        \"728\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.575\n        ],\n        \"729\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.31944\n        ],\n        \"730\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.86944\n        ],\n        \"732\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.575\n        ],\n        \"733\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.575\n        ],\n        \"915\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.69166\n        ],\n        \"916\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.95833\n        ],\n        \"920\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.89444\n        ],\n        \"923\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.80555\n        ],\n        \"926\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.76666\n        ],\n        \"928\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.9\n        ],\n        \"931\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.83055\n        ],\n        \"933\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.89444\n        ],\n        \"934\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.83055\n        ],\n        \"936\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.89444\n        ],\n        \"937\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.83055\n        ],\n        \"8211\": [\n            0,\n            0.44444,\n            0.03194,\n            0,\n            0.575\n        ],\n        \"8212\": [\n            0,\n            0.44444,\n            0.03194,\n            0,\n            1.14999\n        ],\n        \"8216\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.31944\n        ],\n        \"8217\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.31944\n        ],\n        \"8220\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.60278\n        ],\n        \"8221\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.60278\n        ],\n        \"8224\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.51111\n        ],\n        \"8225\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.51111\n        ],\n        \"8242\": [\n            0,\n            0.55556,\n            0,\n            0,\n            0.34444\n        ],\n        \"8407\": [\n            0,\n            0.72444,\n            0.15486,\n            0,\n            0.575\n        ],\n        \"8463\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.66759\n        ],\n        \"8465\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.83055\n        ],\n        \"8467\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.47361\n        ],\n        \"8472\": [\n            0.19444,\n            0.44444,\n            0,\n            0,\n            0.74027\n        ],\n        \"8476\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.83055\n        ],\n        \"8501\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.70277\n        ],\n        \"8592\": [\n            -0.10889,\n            0.39111,\n            0,\n            0,\n            1.14999\n        ],\n        \"8593\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.575\n        ],\n        \"8594\": [\n            -0.10889,\n            0.39111,\n            0,\n            0,\n            1.14999\n        ],\n        \"8595\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.575\n        ],\n        \"8596\": [\n            -0.10889,\n            0.39111,\n            0,\n            0,\n            1.14999\n        ],\n        \"8597\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.575\n        ],\n        \"8598\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            1.14999\n        ],\n        \"8599\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            1.14999\n        ],\n        \"8600\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            1.14999\n        ],\n        \"8601\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            1.14999\n        ],\n        \"8636\": [\n            -0.10889,\n            0.39111,\n            0,\n            0,\n            1.14999\n        ],\n        \"8637\": [\n            -0.10889,\n            0.39111,\n            0,\n            0,\n            1.14999\n        ],\n        \"8640\": [\n            -0.10889,\n            0.39111,\n            0,\n            0,\n            1.14999\n        ],\n        \"8641\": [\n            -0.10889,\n            0.39111,\n            0,\n            0,\n            1.14999\n        ],\n        \"8656\": [\n            -0.10889,\n            0.39111,\n            0,\n            0,\n            1.14999\n        ],\n        \"8657\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.70277\n        ],\n        \"8658\": [\n            -0.10889,\n            0.39111,\n            0,\n            0,\n            1.14999\n        ],\n        \"8659\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.70277\n        ],\n        \"8660\": [\n            -0.10889,\n            0.39111,\n            0,\n            0,\n            1.14999\n        ],\n        \"8661\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.70277\n        ],\n        \"8704\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.63889\n        ],\n        \"8706\": [\n            0,\n            0.69444,\n            0.06389,\n            0,\n            0.62847\n        ],\n        \"8707\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.63889\n        ],\n        \"8709\": [\n            0.05556,\n            0.75,\n            0,\n            0,\n            0.575\n        ],\n        \"8711\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.95833\n        ],\n        \"8712\": [\n            0.08556,\n            0.58556,\n            0,\n            0,\n            0.76666\n        ],\n        \"8715\": [\n            0.08556,\n            0.58556,\n            0,\n            0,\n            0.76666\n        ],\n        \"8722\": [\n            0.13333,\n            0.63333,\n            0,\n            0,\n            0.89444\n        ],\n        \"8723\": [\n            0.13333,\n            0.63333,\n            0,\n            0,\n            0.89444\n        ],\n        \"8725\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.575\n        ],\n        \"8726\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.575\n        ],\n        \"8727\": [\n            -0.02778,\n            0.47222,\n            0,\n            0,\n            0.575\n        ],\n        \"8728\": [\n            -0.02639,\n            0.47361,\n            0,\n            0,\n            0.575\n        ],\n        \"8729\": [\n            -0.02639,\n            0.47361,\n            0,\n            0,\n            0.575\n        ],\n        \"8730\": [\n            0.18,\n            0.82,\n            0,\n            0,\n            0.95833\n        ],\n        \"8733\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.89444\n        ],\n        \"8734\": [\n            0,\n            0.44444,\n            0,\n            0,\n            1.14999\n        ],\n        \"8736\": [\n            0,\n            0.69224,\n            0,\n            0,\n            0.72222\n        ],\n        \"8739\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.31944\n        ],\n        \"8741\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.575\n        ],\n        \"8743\": [\n            0,\n            0.55556,\n            0,\n            0,\n            0.76666\n        ],\n        \"8744\": [\n            0,\n            0.55556,\n            0,\n            0,\n            0.76666\n        ],\n        \"8745\": [\n            0,\n            0.55556,\n            0,\n            0,\n            0.76666\n        ],\n        \"8746\": [\n            0,\n            0.55556,\n            0,\n            0,\n            0.76666\n        ],\n        \"8747\": [\n            0.19444,\n            0.69444,\n            0.12778,\n            0,\n            0.56875\n        ],\n        \"8764\": [\n            -0.10889,\n            0.39111,\n            0,\n            0,\n            0.89444\n        ],\n        \"8768\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.31944\n        ],\n        \"8771\": [\n            0.00222,\n            0.50222,\n            0,\n            0,\n            0.89444\n        ],\n        \"8773\": [\n            0.027,\n            0.638,\n            0,\n            0,\n            0.894\n        ],\n        \"8776\": [\n            0.02444,\n            0.52444,\n            0,\n            0,\n            0.89444\n        ],\n        \"8781\": [\n            0.00222,\n            0.50222,\n            0,\n            0,\n            0.89444\n        ],\n        \"8801\": [\n            0.00222,\n            0.50222,\n            0,\n            0,\n            0.89444\n        ],\n        \"8804\": [\n            0.19667,\n            0.69667,\n            0,\n            0,\n            0.89444\n        ],\n        \"8805\": [\n            0.19667,\n            0.69667,\n            0,\n            0,\n            0.89444\n        ],\n        \"8810\": [\n            0.08556,\n            0.58556,\n            0,\n            0,\n            1.14999\n        ],\n        \"8811\": [\n            0.08556,\n            0.58556,\n            0,\n            0,\n            1.14999\n        ],\n        \"8826\": [\n            0.08556,\n            0.58556,\n            0,\n            0,\n            0.89444\n        ],\n        \"8827\": [\n            0.08556,\n            0.58556,\n            0,\n            0,\n            0.89444\n        ],\n        \"8834\": [\n            0.08556,\n            0.58556,\n            0,\n            0,\n            0.89444\n        ],\n        \"8835\": [\n            0.08556,\n            0.58556,\n            0,\n            0,\n            0.89444\n        ],\n        \"8838\": [\n            0.19667,\n            0.69667,\n            0,\n            0,\n            0.89444\n        ],\n        \"8839\": [\n            0.19667,\n            0.69667,\n            0,\n            0,\n            0.89444\n        ],\n        \"8846\": [\n            0,\n            0.55556,\n            0,\n            0,\n            0.76666\n        ],\n        \"8849\": [\n            0.19667,\n            0.69667,\n            0,\n            0,\n            0.89444\n        ],\n        \"8850\": [\n            0.19667,\n            0.69667,\n            0,\n            0,\n            0.89444\n        ],\n        \"8851\": [\n            0,\n            0.55556,\n            0,\n            0,\n            0.76666\n        ],\n        \"8852\": [\n            0,\n            0.55556,\n            0,\n            0,\n            0.76666\n        ],\n        \"8853\": [\n            0.13333,\n            0.63333,\n            0,\n            0,\n            0.89444\n        ],\n        \"8854\": [\n            0.13333,\n            0.63333,\n            0,\n            0,\n            0.89444\n        ],\n        \"8855\": [\n            0.13333,\n            0.63333,\n            0,\n            0,\n            0.89444\n        ],\n        \"8856\": [\n            0.13333,\n            0.63333,\n            0,\n            0,\n            0.89444\n        ],\n        \"8857\": [\n            0.13333,\n            0.63333,\n            0,\n            0,\n            0.89444\n        ],\n        \"8866\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.70277\n        ],\n        \"8867\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.70277\n        ],\n        \"8868\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.89444\n        ],\n        \"8869\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.89444\n        ],\n        \"8900\": [\n            -0.02639,\n            0.47361,\n            0,\n            0,\n            0.575\n        ],\n        \"8901\": [\n            -0.02639,\n            0.47361,\n            0,\n            0,\n            0.31944\n        ],\n        \"8902\": [\n            -0.02778,\n            0.47222,\n            0,\n            0,\n            0.575\n        ],\n        \"8968\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.51111\n        ],\n        \"8969\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.51111\n        ],\n        \"8970\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.51111\n        ],\n        \"8971\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.51111\n        ],\n        \"8994\": [\n            -0.13889,\n            0.36111,\n            0,\n            0,\n            1.14999\n        ],\n        \"8995\": [\n            -0.13889,\n            0.36111,\n            0,\n            0,\n            1.14999\n        ],\n        \"9651\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            1.02222\n        ],\n        \"9657\": [\n            -0.02778,\n            0.47222,\n            0,\n            0,\n            0.575\n        ],\n        \"9661\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            1.02222\n        ],\n        \"9667\": [\n            -0.02778,\n            0.47222,\n            0,\n            0,\n            0.575\n        ],\n        \"9711\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            1.14999\n        ],\n        \"9824\": [\n            0.12963,\n            0.69444,\n            0,\n            0,\n            0.89444\n        ],\n        \"9825\": [\n            0.12963,\n            0.69444,\n            0,\n            0,\n            0.89444\n        ],\n        \"9826\": [\n            0.12963,\n            0.69444,\n            0,\n            0,\n            0.89444\n        ],\n        \"9827\": [\n            0.12963,\n            0.69444,\n            0,\n            0,\n            0.89444\n        ],\n        \"9837\": [\n            0,\n            0.75,\n            0,\n            0,\n            0.44722\n        ],\n        \"9838\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.44722\n        ],\n        \"9839\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.44722\n        ],\n        \"10216\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.44722\n        ],\n        \"10217\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.44722\n        ],\n        \"10815\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.9\n        ],\n        \"10927\": [\n            0.19667,\n            0.69667,\n            0,\n            0,\n            0.89444\n        ],\n        \"10928\": [\n            0.19667,\n            0.69667,\n            0,\n            0,\n            0.89444\n        ],\n        \"57376\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0\n        ]\n    },\n    \"Main-BoldItalic\": {\n        \"32\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"33\": [\n            0,\n            0.69444,\n            0.11417,\n            0,\n            0.38611\n        ],\n        \"34\": [\n            0,\n            0.69444,\n            0.07939,\n            0,\n            0.62055\n        ],\n        \"35\": [\n            0.19444,\n            0.69444,\n            0.06833,\n            0,\n            0.94444\n        ],\n        \"37\": [\n            0.05556,\n            0.75,\n            0.12861,\n            0,\n            0.94444\n        ],\n        \"38\": [\n            0,\n            0.69444,\n            0.08528,\n            0,\n            0.88555\n        ],\n        \"39\": [\n            0,\n            0.69444,\n            0.12945,\n            0,\n            0.35555\n        ],\n        \"40\": [\n            0.25,\n            0.75,\n            0.15806,\n            0,\n            0.47333\n        ],\n        \"41\": [\n            0.25,\n            0.75,\n            0.03306,\n            0,\n            0.47333\n        ],\n        \"42\": [\n            0,\n            0.75,\n            0.14333,\n            0,\n            0.59111\n        ],\n        \"43\": [\n            0.10333,\n            0.60333,\n            0.03306,\n            0,\n            0.88555\n        ],\n        \"44\": [\n            0.19444,\n            0.14722,\n            0,\n            0,\n            0.35555\n        ],\n        \"45\": [\n            0,\n            0.44444,\n            0.02611,\n            0,\n            0.41444\n        ],\n        \"46\": [\n            0,\n            0.14722,\n            0,\n            0,\n            0.35555\n        ],\n        \"47\": [\n            0.25,\n            0.75,\n            0.15806,\n            0,\n            0.59111\n        ],\n        \"48\": [\n            0,\n            0.64444,\n            0.13167,\n            0,\n            0.59111\n        ],\n        \"49\": [\n            0,\n            0.64444,\n            0.13167,\n            0,\n            0.59111\n        ],\n        \"50\": [\n            0,\n            0.64444,\n            0.13167,\n            0,\n            0.59111\n        ],\n        \"51\": [\n            0,\n            0.64444,\n            0.13167,\n            0,\n            0.59111\n        ],\n        \"52\": [\n            0.19444,\n            0.64444,\n            0.13167,\n            0,\n            0.59111\n        ],\n        \"53\": [\n            0,\n            0.64444,\n            0.13167,\n            0,\n            0.59111\n        ],\n        \"54\": [\n            0,\n            0.64444,\n            0.13167,\n            0,\n            0.59111\n        ],\n        \"55\": [\n            0.19444,\n            0.64444,\n            0.13167,\n            0,\n            0.59111\n        ],\n        \"56\": [\n            0,\n            0.64444,\n            0.13167,\n            0,\n            0.59111\n        ],\n        \"57\": [\n            0,\n            0.64444,\n            0.13167,\n            0,\n            0.59111\n        ],\n        \"58\": [\n            0,\n            0.44444,\n            0.06695,\n            0,\n            0.35555\n        ],\n        \"59\": [\n            0.19444,\n            0.44444,\n            0.06695,\n            0,\n            0.35555\n        ],\n        \"61\": [\n            -0.10889,\n            0.39111,\n            0.06833,\n            0,\n            0.88555\n        ],\n        \"63\": [\n            0,\n            0.69444,\n            0.11472,\n            0,\n            0.59111\n        ],\n        \"64\": [\n            0,\n            0.69444,\n            0.09208,\n            0,\n            0.88555\n        ],\n        \"65\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.86555\n        ],\n        \"66\": [\n            0,\n            0.68611,\n            0.0992,\n            0,\n            0.81666\n        ],\n        \"67\": [\n            0,\n            0.68611,\n            0.14208,\n            0,\n            0.82666\n        ],\n        \"68\": [\n            0,\n            0.68611,\n            0.09062,\n            0,\n            0.87555\n        ],\n        \"69\": [\n            0,\n            0.68611,\n            0.11431,\n            0,\n            0.75666\n        ],\n        \"70\": [\n            0,\n            0.68611,\n            0.12903,\n            0,\n            0.72722\n        ],\n        \"71\": [\n            0,\n            0.68611,\n            0.07347,\n            0,\n            0.89527\n        ],\n        \"72\": [\n            0,\n            0.68611,\n            0.17208,\n            0,\n            0.8961\n        ],\n        \"73\": [\n            0,\n            0.68611,\n            0.15681,\n            0,\n            0.47166\n        ],\n        \"74\": [\n            0,\n            0.68611,\n            0.145,\n            0,\n            0.61055\n        ],\n        \"75\": [\n            0,\n            0.68611,\n            0.14208,\n            0,\n            0.89499\n        ],\n        \"76\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.69777\n        ],\n        \"77\": [\n            0,\n            0.68611,\n            0.17208,\n            0,\n            1.07277\n        ],\n        \"78\": [\n            0,\n            0.68611,\n            0.17208,\n            0,\n            0.8961\n        ],\n        \"79\": [\n            0,\n            0.68611,\n            0.09062,\n            0,\n            0.85499\n        ],\n        \"80\": [\n            0,\n            0.68611,\n            0.0992,\n            0,\n            0.78721\n        ],\n        \"81\": [\n            0.19444,\n            0.68611,\n            0.09062,\n            0,\n            0.85499\n        ],\n        \"82\": [\n            0,\n            0.68611,\n            0.02559,\n            0,\n            0.85944\n        ],\n        \"83\": [\n            0,\n            0.68611,\n            0.11264,\n            0,\n            0.64999\n        ],\n        \"84\": [\n            0,\n            0.68611,\n            0.12903,\n            0,\n            0.7961\n        ],\n        \"85\": [\n            0,\n            0.68611,\n            0.17208,\n            0,\n            0.88083\n        ],\n        \"86\": [\n            0,\n            0.68611,\n            0.18625,\n            0,\n            0.86555\n        ],\n        \"87\": [\n            0,\n            0.68611,\n            0.18625,\n            0,\n            1.15999\n        ],\n        \"88\": [\n            0,\n            0.68611,\n            0.15681,\n            0,\n            0.86555\n        ],\n        \"89\": [\n            0,\n            0.68611,\n            0.19803,\n            0,\n            0.86555\n        ],\n        \"90\": [\n            0,\n            0.68611,\n            0.14208,\n            0,\n            0.70888\n        ],\n        \"91\": [\n            0.25,\n            0.75,\n            0.1875,\n            0,\n            0.35611\n        ],\n        \"93\": [\n            0.25,\n            0.75,\n            0.09972,\n            0,\n            0.35611\n        ],\n        \"94\": [\n            0,\n            0.69444,\n            0.06709,\n            0,\n            0.59111\n        ],\n        \"95\": [\n            0.31,\n            0.13444,\n            0.09811,\n            0,\n            0.59111\n        ],\n        \"97\": [\n            0,\n            0.44444,\n            0.09426,\n            0,\n            0.59111\n        ],\n        \"98\": [\n            0,\n            0.69444,\n            0.07861,\n            0,\n            0.53222\n        ],\n        \"99\": [\n            0,\n            0.44444,\n            0.05222,\n            0,\n            0.53222\n        ],\n        \"100\": [\n            0,\n            0.69444,\n            0.10861,\n            0,\n            0.59111\n        ],\n        \"101\": [\n            0,\n            0.44444,\n            0.085,\n            0,\n            0.53222\n        ],\n        \"102\": [\n            0.19444,\n            0.69444,\n            0.21778,\n            0,\n            0.4\n        ],\n        \"103\": [\n            0.19444,\n            0.44444,\n            0.105,\n            0,\n            0.53222\n        ],\n        \"104\": [\n            0,\n            0.69444,\n            0.09426,\n            0,\n            0.59111\n        ],\n        \"105\": [\n            0,\n            0.69326,\n            0.11387,\n            0,\n            0.35555\n        ],\n        \"106\": [\n            0.19444,\n            0.69326,\n            0.1672,\n            0,\n            0.35555\n        ],\n        \"107\": [\n            0,\n            0.69444,\n            0.11111,\n            0,\n            0.53222\n        ],\n        \"108\": [\n            0,\n            0.69444,\n            0.10861,\n            0,\n            0.29666\n        ],\n        \"109\": [\n            0,\n            0.44444,\n            0.09426,\n            0,\n            0.94444\n        ],\n        \"110\": [\n            0,\n            0.44444,\n            0.09426,\n            0,\n            0.64999\n        ],\n        \"111\": [\n            0,\n            0.44444,\n            0.07861,\n            0,\n            0.59111\n        ],\n        \"112\": [\n            0.19444,\n            0.44444,\n            0.07861,\n            0,\n            0.59111\n        ],\n        \"113\": [\n            0.19444,\n            0.44444,\n            0.105,\n            0,\n            0.53222\n        ],\n        \"114\": [\n            0,\n            0.44444,\n            0.11111,\n            0,\n            0.50167\n        ],\n        \"115\": [\n            0,\n            0.44444,\n            0.08167,\n            0,\n            0.48694\n        ],\n        \"116\": [\n            0,\n            0.63492,\n            0.09639,\n            0,\n            0.385\n        ],\n        \"117\": [\n            0,\n            0.44444,\n            0.09426,\n            0,\n            0.62055\n        ],\n        \"118\": [\n            0,\n            0.44444,\n            0.11111,\n            0,\n            0.53222\n        ],\n        \"119\": [\n            0,\n            0.44444,\n            0.11111,\n            0,\n            0.76777\n        ],\n        \"120\": [\n            0,\n            0.44444,\n            0.12583,\n            0,\n            0.56055\n        ],\n        \"121\": [\n            0.19444,\n            0.44444,\n            0.105,\n            0,\n            0.56166\n        ],\n        \"122\": [\n            0,\n            0.44444,\n            0.13889,\n            0,\n            0.49055\n        ],\n        \"126\": [\n            0.35,\n            0.34444,\n            0.11472,\n            0,\n            0.59111\n        ],\n        \"160\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"168\": [\n            0,\n            0.69444,\n            0.11473,\n            0,\n            0.59111\n        ],\n        \"176\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.94888\n        ],\n        \"184\": [\n            0.17014,\n            0,\n            0,\n            0,\n            0.53222\n        ],\n        \"198\": [\n            0,\n            0.68611,\n            0.11431,\n            0,\n            1.02277\n        ],\n        \"216\": [\n            0.04861,\n            0.73472,\n            0.09062,\n            0,\n            0.88555\n        ],\n        \"223\": [\n            0.19444,\n            0.69444,\n            0.09736,\n            0,\n            0.665\n        ],\n        \"230\": [\n            0,\n            0.44444,\n            0.085,\n            0,\n            0.82666\n        ],\n        \"248\": [\n            0.09722,\n            0.54167,\n            0.09458,\n            0,\n            0.59111\n        ],\n        \"305\": [\n            0,\n            0.44444,\n            0.09426,\n            0,\n            0.35555\n        ],\n        \"338\": [\n            0,\n            0.68611,\n            0.11431,\n            0,\n            1.14054\n        ],\n        \"339\": [\n            0,\n            0.44444,\n            0.085,\n            0,\n            0.82666\n        ],\n        \"567\": [\n            0.19444,\n            0.44444,\n            0.04611,\n            0,\n            0.385\n        ],\n        \"710\": [\n            0,\n            0.69444,\n            0.06709,\n            0,\n            0.59111\n        ],\n        \"711\": [\n            0,\n            0.63194,\n            0.08271,\n            0,\n            0.59111\n        ],\n        \"713\": [\n            0,\n            0.59444,\n            0.10444,\n            0,\n            0.59111\n        ],\n        \"714\": [\n            0,\n            0.69444,\n            0.08528,\n            0,\n            0.59111\n        ],\n        \"715\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.59111\n        ],\n        \"728\": [\n            0,\n            0.69444,\n            0.10333,\n            0,\n            0.59111\n        ],\n        \"729\": [\n            0,\n            0.69444,\n            0.12945,\n            0,\n            0.35555\n        ],\n        \"730\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.94888\n        ],\n        \"732\": [\n            0,\n            0.69444,\n            0.11472,\n            0,\n            0.59111\n        ],\n        \"733\": [\n            0,\n            0.69444,\n            0.11472,\n            0,\n            0.59111\n        ],\n        \"915\": [\n            0,\n            0.68611,\n            0.12903,\n            0,\n            0.69777\n        ],\n        \"916\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.94444\n        ],\n        \"920\": [\n            0,\n            0.68611,\n            0.09062,\n            0,\n            0.88555\n        ],\n        \"923\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.80666\n        ],\n        \"926\": [\n            0,\n            0.68611,\n            0.15092,\n            0,\n            0.76777\n        ],\n        \"928\": [\n            0,\n            0.68611,\n            0.17208,\n            0,\n            0.8961\n        ],\n        \"931\": [\n            0,\n            0.68611,\n            0.11431,\n            0,\n            0.82666\n        ],\n        \"933\": [\n            0,\n            0.68611,\n            0.10778,\n            0,\n            0.88555\n        ],\n        \"934\": [\n            0,\n            0.68611,\n            0.05632,\n            0,\n            0.82666\n        ],\n        \"936\": [\n            0,\n            0.68611,\n            0.10778,\n            0,\n            0.88555\n        ],\n        \"937\": [\n            0,\n            0.68611,\n            0.0992,\n            0,\n            0.82666\n        ],\n        \"8211\": [\n            0,\n            0.44444,\n            0.09811,\n            0,\n            0.59111\n        ],\n        \"8212\": [\n            0,\n            0.44444,\n            0.09811,\n            0,\n            1.18221\n        ],\n        \"8216\": [\n            0,\n            0.69444,\n            0.12945,\n            0,\n            0.35555\n        ],\n        \"8217\": [\n            0,\n            0.69444,\n            0.12945,\n            0,\n            0.35555\n        ],\n        \"8220\": [\n            0,\n            0.69444,\n            0.16772,\n            0,\n            0.62055\n        ],\n        \"8221\": [\n            0,\n            0.69444,\n            0.07939,\n            0,\n            0.62055\n        ]\n    },\n    \"Main-Italic\": {\n        \"32\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"33\": [\n            0,\n            0.69444,\n            0.12417,\n            0,\n            0.30667\n        ],\n        \"34\": [\n            0,\n            0.69444,\n            0.06961,\n            0,\n            0.51444\n        ],\n        \"35\": [\n            0.19444,\n            0.69444,\n            0.06616,\n            0,\n            0.81777\n        ],\n        \"37\": [\n            0.05556,\n            0.75,\n            0.13639,\n            0,\n            0.81777\n        ],\n        \"38\": [\n            0,\n            0.69444,\n            0.09694,\n            0,\n            0.76666\n        ],\n        \"39\": [\n            0,\n            0.69444,\n            0.12417,\n            0,\n            0.30667\n        ],\n        \"40\": [\n            0.25,\n            0.75,\n            0.16194,\n            0,\n            0.40889\n        ],\n        \"41\": [\n            0.25,\n            0.75,\n            0.03694,\n            0,\n            0.40889\n        ],\n        \"42\": [\n            0,\n            0.75,\n            0.14917,\n            0,\n            0.51111\n        ],\n        \"43\": [\n            0.05667,\n            0.56167,\n            0.03694,\n            0,\n            0.76666\n        ],\n        \"44\": [\n            0.19444,\n            0.10556,\n            0,\n            0,\n            0.30667\n        ],\n        \"45\": [\n            0,\n            0.43056,\n            0.02826,\n            0,\n            0.35778\n        ],\n        \"46\": [\n            0,\n            0.10556,\n            0,\n            0,\n            0.30667\n        ],\n        \"47\": [\n            0.25,\n            0.75,\n            0.16194,\n            0,\n            0.51111\n        ],\n        \"48\": [\n            0,\n            0.64444,\n            0.13556,\n            0,\n            0.51111\n        ],\n        \"49\": [\n            0,\n            0.64444,\n            0.13556,\n            0,\n            0.51111\n        ],\n        \"50\": [\n            0,\n            0.64444,\n            0.13556,\n            0,\n            0.51111\n        ],\n        \"51\": [\n            0,\n            0.64444,\n            0.13556,\n            0,\n            0.51111\n        ],\n        \"52\": [\n            0.19444,\n            0.64444,\n            0.13556,\n            0,\n            0.51111\n        ],\n        \"53\": [\n            0,\n            0.64444,\n            0.13556,\n            0,\n            0.51111\n        ],\n        \"54\": [\n            0,\n            0.64444,\n            0.13556,\n            0,\n            0.51111\n        ],\n        \"55\": [\n            0.19444,\n            0.64444,\n            0.13556,\n            0,\n            0.51111\n        ],\n        \"56\": [\n            0,\n            0.64444,\n            0.13556,\n            0,\n            0.51111\n        ],\n        \"57\": [\n            0,\n            0.64444,\n            0.13556,\n            0,\n            0.51111\n        ],\n        \"58\": [\n            0,\n            0.43056,\n            0.0582,\n            0,\n            0.30667\n        ],\n        \"59\": [\n            0.19444,\n            0.43056,\n            0.0582,\n            0,\n            0.30667\n        ],\n        \"61\": [\n            -0.13313,\n            0.36687,\n            0.06616,\n            0,\n            0.76666\n        ],\n        \"63\": [\n            0,\n            0.69444,\n            0.1225,\n            0,\n            0.51111\n        ],\n        \"64\": [\n            0,\n            0.69444,\n            0.09597,\n            0,\n            0.76666\n        ],\n        \"65\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.74333\n        ],\n        \"66\": [\n            0,\n            0.68333,\n            0.10257,\n            0,\n            0.70389\n        ],\n        \"67\": [\n            0,\n            0.68333,\n            0.14528,\n            0,\n            0.71555\n        ],\n        \"68\": [\n            0,\n            0.68333,\n            0.09403,\n            0,\n            0.755\n        ],\n        \"69\": [\n            0,\n            0.68333,\n            0.12028,\n            0,\n            0.67833\n        ],\n        \"70\": [\n            0,\n            0.68333,\n            0.13305,\n            0,\n            0.65277\n        ],\n        \"71\": [\n            0,\n            0.68333,\n            0.08722,\n            0,\n            0.77361\n        ],\n        \"72\": [\n            0,\n            0.68333,\n            0.16389,\n            0,\n            0.74333\n        ],\n        \"73\": [\n            0,\n            0.68333,\n            0.15806,\n            0,\n            0.38555\n        ],\n        \"74\": [\n            0,\n            0.68333,\n            0.14028,\n            0,\n            0.525\n        ],\n        \"75\": [\n            0,\n            0.68333,\n            0.14528,\n            0,\n            0.76888\n        ],\n        \"76\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.62722\n        ],\n        \"77\": [\n            0,\n            0.68333,\n            0.16389,\n            0,\n            0.89666\n        ],\n        \"78\": [\n            0,\n            0.68333,\n            0.16389,\n            0,\n            0.74333\n        ],\n        \"79\": [\n            0,\n            0.68333,\n            0.09403,\n            0,\n            0.76666\n        ],\n        \"80\": [\n            0,\n            0.68333,\n            0.10257,\n            0,\n            0.67833\n        ],\n        \"81\": [\n            0.19444,\n            0.68333,\n            0.09403,\n            0,\n            0.76666\n        ],\n        \"82\": [\n            0,\n            0.68333,\n            0.03868,\n            0,\n            0.72944\n        ],\n        \"83\": [\n            0,\n            0.68333,\n            0.11972,\n            0,\n            0.56222\n        ],\n        \"84\": [\n            0,\n            0.68333,\n            0.13305,\n            0,\n            0.71555\n        ],\n        \"85\": [\n            0,\n            0.68333,\n            0.16389,\n            0,\n            0.74333\n        ],\n        \"86\": [\n            0,\n            0.68333,\n            0.18361,\n            0,\n            0.74333\n        ],\n        \"87\": [\n            0,\n            0.68333,\n            0.18361,\n            0,\n            0.99888\n        ],\n        \"88\": [\n            0,\n            0.68333,\n            0.15806,\n            0,\n            0.74333\n        ],\n        \"89\": [\n            0,\n            0.68333,\n            0.19383,\n            0,\n            0.74333\n        ],\n        \"90\": [\n            0,\n            0.68333,\n            0.14528,\n            0,\n            0.61333\n        ],\n        \"91\": [\n            0.25,\n            0.75,\n            0.1875,\n            0,\n            0.30667\n        ],\n        \"93\": [\n            0.25,\n            0.75,\n            0.10528,\n            0,\n            0.30667\n        ],\n        \"94\": [\n            0,\n            0.69444,\n            0.06646,\n            0,\n            0.51111\n        ],\n        \"95\": [\n            0.31,\n            0.12056,\n            0.09208,\n            0,\n            0.51111\n        ],\n        \"97\": [\n            0,\n            0.43056,\n            0.07671,\n            0,\n            0.51111\n        ],\n        \"98\": [\n            0,\n            0.69444,\n            0.06312,\n            0,\n            0.46\n        ],\n        \"99\": [\n            0,\n            0.43056,\n            0.05653,\n            0,\n            0.46\n        ],\n        \"100\": [\n            0,\n            0.69444,\n            0.10333,\n            0,\n            0.51111\n        ],\n        \"101\": [\n            0,\n            0.43056,\n            0.07514,\n            0,\n            0.46\n        ],\n        \"102\": [\n            0.19444,\n            0.69444,\n            0.21194,\n            0,\n            0.30667\n        ],\n        \"103\": [\n            0.19444,\n            0.43056,\n            0.08847,\n            0,\n            0.46\n        ],\n        \"104\": [\n            0,\n            0.69444,\n            0.07671,\n            0,\n            0.51111\n        ],\n        \"105\": [\n            0,\n            0.65536,\n            0.1019,\n            0,\n            0.30667\n        ],\n        \"106\": [\n            0.19444,\n            0.65536,\n            0.14467,\n            0,\n            0.30667\n        ],\n        \"107\": [\n            0,\n            0.69444,\n            0.10764,\n            0,\n            0.46\n        ],\n        \"108\": [\n            0,\n            0.69444,\n            0.10333,\n            0,\n            0.25555\n        ],\n        \"109\": [\n            0,\n            0.43056,\n            0.07671,\n            0,\n            0.81777\n        ],\n        \"110\": [\n            0,\n            0.43056,\n            0.07671,\n            0,\n            0.56222\n        ],\n        \"111\": [\n            0,\n            0.43056,\n            0.06312,\n            0,\n            0.51111\n        ],\n        \"112\": [\n            0.19444,\n            0.43056,\n            0.06312,\n            0,\n            0.51111\n        ],\n        \"113\": [\n            0.19444,\n            0.43056,\n            0.08847,\n            0,\n            0.46\n        ],\n        \"114\": [\n            0,\n            0.43056,\n            0.10764,\n            0,\n            0.42166\n        ],\n        \"115\": [\n            0,\n            0.43056,\n            0.08208,\n            0,\n            0.40889\n        ],\n        \"116\": [\n            0,\n            0.61508,\n            0.09486,\n            0,\n            0.33222\n        ],\n        \"117\": [\n            0,\n            0.43056,\n            0.07671,\n            0,\n            0.53666\n        ],\n        \"118\": [\n            0,\n            0.43056,\n            0.10764,\n            0,\n            0.46\n        ],\n        \"119\": [\n            0,\n            0.43056,\n            0.10764,\n            0,\n            0.66444\n        ],\n        \"120\": [\n            0,\n            0.43056,\n            0.12042,\n            0,\n            0.46389\n        ],\n        \"121\": [\n            0.19444,\n            0.43056,\n            0.08847,\n            0,\n            0.48555\n        ],\n        \"122\": [\n            0,\n            0.43056,\n            0.12292,\n            0,\n            0.40889\n        ],\n        \"126\": [\n            0.35,\n            0.31786,\n            0.11585,\n            0,\n            0.51111\n        ],\n        \"160\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"168\": [\n            0,\n            0.66786,\n            0.10474,\n            0,\n            0.51111\n        ],\n        \"176\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.83129\n        ],\n        \"184\": [\n            0.17014,\n            0,\n            0,\n            0,\n            0.46\n        ],\n        \"198\": [\n            0,\n            0.68333,\n            0.12028,\n            0,\n            0.88277\n        ],\n        \"216\": [\n            0.04861,\n            0.73194,\n            0.09403,\n            0,\n            0.76666\n        ],\n        \"223\": [\n            0.19444,\n            0.69444,\n            0.10514,\n            0,\n            0.53666\n        ],\n        \"230\": [\n            0,\n            0.43056,\n            0.07514,\n            0,\n            0.71555\n        ],\n        \"248\": [\n            0.09722,\n            0.52778,\n            0.09194,\n            0,\n            0.51111\n        ],\n        \"338\": [\n            0,\n            0.68333,\n            0.12028,\n            0,\n            0.98499\n        ],\n        \"339\": [\n            0,\n            0.43056,\n            0.07514,\n            0,\n            0.71555\n        ],\n        \"710\": [\n            0,\n            0.69444,\n            0.06646,\n            0,\n            0.51111\n        ],\n        \"711\": [\n            0,\n            0.62847,\n            0.08295,\n            0,\n            0.51111\n        ],\n        \"713\": [\n            0,\n            0.56167,\n            0.10333,\n            0,\n            0.51111\n        ],\n        \"714\": [\n            0,\n            0.69444,\n            0.09694,\n            0,\n            0.51111\n        ],\n        \"715\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.51111\n        ],\n        \"728\": [\n            0,\n            0.69444,\n            0.10806,\n            0,\n            0.51111\n        ],\n        \"729\": [\n            0,\n            0.66786,\n            0.11752,\n            0,\n            0.30667\n        ],\n        \"730\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.83129\n        ],\n        \"732\": [\n            0,\n            0.66786,\n            0.11585,\n            0,\n            0.51111\n        ],\n        \"733\": [\n            0,\n            0.69444,\n            0.1225,\n            0,\n            0.51111\n        ],\n        \"915\": [\n            0,\n            0.68333,\n            0.13305,\n            0,\n            0.62722\n        ],\n        \"916\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.81777\n        ],\n        \"920\": [\n            0,\n            0.68333,\n            0.09403,\n            0,\n            0.76666\n        ],\n        \"923\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.69222\n        ],\n        \"926\": [\n            0,\n            0.68333,\n            0.15294,\n            0,\n            0.66444\n        ],\n        \"928\": [\n            0,\n            0.68333,\n            0.16389,\n            0,\n            0.74333\n        ],\n        \"931\": [\n            0,\n            0.68333,\n            0.12028,\n            0,\n            0.71555\n        ],\n        \"933\": [\n            0,\n            0.68333,\n            0.11111,\n            0,\n            0.76666\n        ],\n        \"934\": [\n            0,\n            0.68333,\n            0.05986,\n            0,\n            0.71555\n        ],\n        \"936\": [\n            0,\n            0.68333,\n            0.11111,\n            0,\n            0.76666\n        ],\n        \"937\": [\n            0,\n            0.68333,\n            0.10257,\n            0,\n            0.71555\n        ],\n        \"8211\": [\n            0,\n            0.43056,\n            0.09208,\n            0,\n            0.51111\n        ],\n        \"8212\": [\n            0,\n            0.43056,\n            0.09208,\n            0,\n            1.02222\n        ],\n        \"8216\": [\n            0,\n            0.69444,\n            0.12417,\n            0,\n            0.30667\n        ],\n        \"8217\": [\n            0,\n            0.69444,\n            0.12417,\n            0,\n            0.30667\n        ],\n        \"8220\": [\n            0,\n            0.69444,\n            0.1685,\n            0,\n            0.51444\n        ],\n        \"8221\": [\n            0,\n            0.69444,\n            0.06961,\n            0,\n            0.51444\n        ],\n        \"8463\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.54028\n        ]\n    },\n    \"Main-Regular\": {\n        \"32\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"33\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.27778\n        ],\n        \"34\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"35\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.83334\n        ],\n        \"36\": [\n            0.05556,\n            0.75,\n            0,\n            0,\n            0.5\n        ],\n        \"37\": [\n            0.05556,\n            0.75,\n            0,\n            0,\n            0.83334\n        ],\n        \"38\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.77778\n        ],\n        \"39\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.27778\n        ],\n        \"40\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.38889\n        ],\n        \"41\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.38889\n        ],\n        \"42\": [\n            0,\n            0.75,\n            0,\n            0,\n            0.5\n        ],\n        \"43\": [\n            0.08333,\n            0.58333,\n            0,\n            0,\n            0.77778\n        ],\n        \"44\": [\n            0.19444,\n            0.10556,\n            0,\n            0,\n            0.27778\n        ],\n        \"45\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.33333\n        ],\n        \"46\": [\n            0,\n            0.10556,\n            0,\n            0,\n            0.27778\n        ],\n        \"47\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.5\n        ],\n        \"48\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.5\n        ],\n        \"49\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.5\n        ],\n        \"50\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.5\n        ],\n        \"51\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.5\n        ],\n        \"52\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.5\n        ],\n        \"53\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.5\n        ],\n        \"54\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.5\n        ],\n        \"55\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.5\n        ],\n        \"56\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.5\n        ],\n        \"57\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.5\n        ],\n        \"58\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.27778\n        ],\n        \"59\": [\n            0.19444,\n            0.43056,\n            0,\n            0,\n            0.27778\n        ],\n        \"60\": [\n            0.0391,\n            0.5391,\n            0,\n            0,\n            0.77778\n        ],\n        \"61\": [\n            -0.13313,\n            0.36687,\n            0,\n            0,\n            0.77778\n        ],\n        \"62\": [\n            0.0391,\n            0.5391,\n            0,\n            0,\n            0.77778\n        ],\n        \"63\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.47222\n        ],\n        \"64\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.77778\n        ],\n        \"65\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.75\n        ],\n        \"66\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.70834\n        ],\n        \"67\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.72222\n        ],\n        \"68\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.76389\n        ],\n        \"69\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.68056\n        ],\n        \"70\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.65278\n        ],\n        \"71\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.78472\n        ],\n        \"72\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.75\n        ],\n        \"73\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.36111\n        ],\n        \"74\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.51389\n        ],\n        \"75\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.77778\n        ],\n        \"76\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.625\n        ],\n        \"77\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.91667\n        ],\n        \"78\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.75\n        ],\n        \"79\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.77778\n        ],\n        \"80\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.68056\n        ],\n        \"81\": [\n            0.19444,\n            0.68333,\n            0,\n            0,\n            0.77778\n        ],\n        \"82\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.73611\n        ],\n        \"83\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.55556\n        ],\n        \"84\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.72222\n        ],\n        \"85\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.75\n        ],\n        \"86\": [\n            0,\n            0.68333,\n            0.01389,\n            0,\n            0.75\n        ],\n        \"87\": [\n            0,\n            0.68333,\n            0.01389,\n            0,\n            1.02778\n        ],\n        \"88\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.75\n        ],\n        \"89\": [\n            0,\n            0.68333,\n            0.025,\n            0,\n            0.75\n        ],\n        \"90\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.61111\n        ],\n        \"91\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.27778\n        ],\n        \"92\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.5\n        ],\n        \"93\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.27778\n        ],\n        \"94\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"95\": [\n            0.31,\n            0.12056,\n            0.02778,\n            0,\n            0.5\n        ],\n        \"97\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.5\n        ],\n        \"98\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55556\n        ],\n        \"99\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.44445\n        ],\n        \"100\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55556\n        ],\n        \"101\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.44445\n        ],\n        \"102\": [\n            0,\n            0.69444,\n            0.07778,\n            0,\n            0.30556\n        ],\n        \"103\": [\n            0.19444,\n            0.43056,\n            0.01389,\n            0,\n            0.5\n        ],\n        \"104\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55556\n        ],\n        \"105\": [\n            0,\n            0.66786,\n            0,\n            0,\n            0.27778\n        ],\n        \"106\": [\n            0.19444,\n            0.66786,\n            0,\n            0,\n            0.30556\n        ],\n        \"107\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.52778\n        ],\n        \"108\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.27778\n        ],\n        \"109\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.83334\n        ],\n        \"110\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.55556\n        ],\n        \"111\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.5\n        ],\n        \"112\": [\n            0.19444,\n            0.43056,\n            0,\n            0,\n            0.55556\n        ],\n        \"113\": [\n            0.19444,\n            0.43056,\n            0,\n            0,\n            0.52778\n        ],\n        \"114\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.39167\n        ],\n        \"115\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.39445\n        ],\n        \"116\": [\n            0,\n            0.61508,\n            0,\n            0,\n            0.38889\n        ],\n        \"117\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.55556\n        ],\n        \"118\": [\n            0,\n            0.43056,\n            0.01389,\n            0,\n            0.52778\n        ],\n        \"119\": [\n            0,\n            0.43056,\n            0.01389,\n            0,\n            0.72222\n        ],\n        \"120\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.52778\n        ],\n        \"121\": [\n            0.19444,\n            0.43056,\n            0.01389,\n            0,\n            0.52778\n        ],\n        \"122\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.44445\n        ],\n        \"123\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.5\n        ],\n        \"124\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.27778\n        ],\n        \"125\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.5\n        ],\n        \"126\": [\n            0.35,\n            0.31786,\n            0,\n            0,\n            0.5\n        ],\n        \"160\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"163\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.76909\n        ],\n        \"167\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.44445\n        ],\n        \"168\": [\n            0,\n            0.66786,\n            0,\n            0,\n            0.5\n        ],\n        \"172\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.66667\n        ],\n        \"176\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.75\n        ],\n        \"177\": [\n            0.08333,\n            0.58333,\n            0,\n            0,\n            0.77778\n        ],\n        \"182\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.61111\n        ],\n        \"184\": [\n            0.17014,\n            0,\n            0,\n            0,\n            0.44445\n        ],\n        \"198\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.90278\n        ],\n        \"215\": [\n            0.08333,\n            0.58333,\n            0,\n            0,\n            0.77778\n        ],\n        \"216\": [\n            0.04861,\n            0.73194,\n            0,\n            0,\n            0.77778\n        ],\n        \"223\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"230\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.72222\n        ],\n        \"247\": [\n            0.08333,\n            0.58333,\n            0,\n            0,\n            0.77778\n        ],\n        \"248\": [\n            0.09722,\n            0.52778,\n            0,\n            0,\n            0.5\n        ],\n        \"305\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.27778\n        ],\n        \"338\": [\n            0,\n            0.68333,\n            0,\n            0,\n            1.01389\n        ],\n        \"339\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.77778\n        ],\n        \"567\": [\n            0.19444,\n            0.43056,\n            0,\n            0,\n            0.30556\n        ],\n        \"710\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"711\": [\n            0,\n            0.62847,\n            0,\n            0,\n            0.5\n        ],\n        \"713\": [\n            0,\n            0.56778,\n            0,\n            0,\n            0.5\n        ],\n        \"714\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"715\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"728\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"729\": [\n            0,\n            0.66786,\n            0,\n            0,\n            0.27778\n        ],\n        \"730\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.75\n        ],\n        \"732\": [\n            0,\n            0.66786,\n            0,\n            0,\n            0.5\n        ],\n        \"733\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"915\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.625\n        ],\n        \"916\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.83334\n        ],\n        \"920\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.77778\n        ],\n        \"923\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.69445\n        ],\n        \"926\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.66667\n        ],\n        \"928\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.75\n        ],\n        \"931\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.72222\n        ],\n        \"933\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.77778\n        ],\n        \"934\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.72222\n        ],\n        \"936\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.77778\n        ],\n        \"937\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.72222\n        ],\n        \"8211\": [\n            0,\n            0.43056,\n            0.02778,\n            0,\n            0.5\n        ],\n        \"8212\": [\n            0,\n            0.43056,\n            0.02778,\n            0,\n            1.0\n        ],\n        \"8216\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.27778\n        ],\n        \"8217\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.27778\n        ],\n        \"8220\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"8221\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"8224\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.44445\n        ],\n        \"8225\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.44445\n        ],\n        \"8230\": [\n            0,\n            0.123,\n            0,\n            0,\n            1.172\n        ],\n        \"8242\": [\n            0,\n            0.55556,\n            0,\n            0,\n            0.275\n        ],\n        \"8407\": [\n            0,\n            0.71444,\n            0.15382,\n            0,\n            0.5\n        ],\n        \"8463\": [\n            0,\n            0.68889,\n            0,\n            0,\n            0.54028\n        ],\n        \"8465\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.72222\n        ],\n        \"8467\": [\n            0,\n            0.69444,\n            0,\n            0.11111,\n            0.41667\n        ],\n        \"8472\": [\n            0.19444,\n            0.43056,\n            0,\n            0.11111,\n            0.63646\n        ],\n        \"8476\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.72222\n        ],\n        \"8501\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.61111\n        ],\n        \"8592\": [\n            -0.13313,\n            0.36687,\n            0,\n            0,\n            1.0\n        ],\n        \"8593\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"8594\": [\n            -0.13313,\n            0.36687,\n            0,\n            0,\n            1.0\n        ],\n        \"8595\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"8596\": [\n            -0.13313,\n            0.36687,\n            0,\n            0,\n            1.0\n        ],\n        \"8597\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.5\n        ],\n        \"8598\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            1.0\n        ],\n        \"8599\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            1.0\n        ],\n        \"8600\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            1.0\n        ],\n        \"8601\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            1.0\n        ],\n        \"8614\": [\n            0.011,\n            0.511,\n            0,\n            0,\n            1.0\n        ],\n        \"8617\": [\n            0.011,\n            0.511,\n            0,\n            0,\n            1.126\n        ],\n        \"8618\": [\n            0.011,\n            0.511,\n            0,\n            0,\n            1.126\n        ],\n        \"8636\": [\n            -0.13313,\n            0.36687,\n            0,\n            0,\n            1.0\n        ],\n        \"8637\": [\n            -0.13313,\n            0.36687,\n            0,\n            0,\n            1.0\n        ],\n        \"8640\": [\n            -0.13313,\n            0.36687,\n            0,\n            0,\n            1.0\n        ],\n        \"8641\": [\n            -0.13313,\n            0.36687,\n            0,\n            0,\n            1.0\n        ],\n        \"8652\": [\n            0.011,\n            0.671,\n            0,\n            0,\n            1.0\n        ],\n        \"8656\": [\n            -0.13313,\n            0.36687,\n            0,\n            0,\n            1.0\n        ],\n        \"8657\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.61111\n        ],\n        \"8658\": [\n            -0.13313,\n            0.36687,\n            0,\n            0,\n            1.0\n        ],\n        \"8659\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.61111\n        ],\n        \"8660\": [\n            -0.13313,\n            0.36687,\n            0,\n            0,\n            1.0\n        ],\n        \"8661\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.61111\n        ],\n        \"8704\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55556\n        ],\n        \"8706\": [\n            0,\n            0.69444,\n            0.05556,\n            0.08334,\n            0.5309\n        ],\n        \"8707\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55556\n        ],\n        \"8709\": [\n            0.05556,\n            0.75,\n            0,\n            0,\n            0.5\n        ],\n        \"8711\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.83334\n        ],\n        \"8712\": [\n            0.0391,\n            0.5391,\n            0,\n            0,\n            0.66667\n        ],\n        \"8715\": [\n            0.0391,\n            0.5391,\n            0,\n            0,\n            0.66667\n        ],\n        \"8722\": [\n            0.08333,\n            0.58333,\n            0,\n            0,\n            0.77778\n        ],\n        \"8723\": [\n            0.08333,\n            0.58333,\n            0,\n            0,\n            0.77778\n        ],\n        \"8725\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.5\n        ],\n        \"8726\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.5\n        ],\n        \"8727\": [\n            -0.03472,\n            0.46528,\n            0,\n            0,\n            0.5\n        ],\n        \"8728\": [\n            -0.05555,\n            0.44445,\n            0,\n            0,\n            0.5\n        ],\n        \"8729\": [\n            -0.05555,\n            0.44445,\n            0,\n            0,\n            0.5\n        ],\n        \"8730\": [\n            0.2,\n            0.8,\n            0,\n            0,\n            0.83334\n        ],\n        \"8733\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.77778\n        ],\n        \"8734\": [\n            0,\n            0.43056,\n            0,\n            0,\n            1.0\n        ],\n        \"8736\": [\n            0,\n            0.69224,\n            0,\n            0,\n            0.72222\n        ],\n        \"8739\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.27778\n        ],\n        \"8741\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.5\n        ],\n        \"8743\": [\n            0,\n            0.55556,\n            0,\n            0,\n            0.66667\n        ],\n        \"8744\": [\n            0,\n            0.55556,\n            0,\n            0,\n            0.66667\n        ],\n        \"8745\": [\n            0,\n            0.55556,\n            0,\n            0,\n            0.66667\n        ],\n        \"8746\": [\n            0,\n            0.55556,\n            0,\n            0,\n            0.66667\n        ],\n        \"8747\": [\n            0.19444,\n            0.69444,\n            0.11111,\n            0,\n            0.41667\n        ],\n        \"8764\": [\n            -0.13313,\n            0.36687,\n            0,\n            0,\n            0.77778\n        ],\n        \"8768\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.27778\n        ],\n        \"8771\": [\n            -0.03625,\n            0.46375,\n            0,\n            0,\n            0.77778\n        ],\n        \"8773\": [\n            -0.022,\n            0.589,\n            0,\n            0,\n            0.778\n        ],\n        \"8776\": [\n            -0.01688,\n            0.48312,\n            0,\n            0,\n            0.77778\n        ],\n        \"8781\": [\n            -0.03625,\n            0.46375,\n            0,\n            0,\n            0.77778\n        ],\n        \"8784\": [\n            -0.133,\n            0.673,\n            0,\n            0,\n            0.778\n        ],\n        \"8801\": [\n            -0.03625,\n            0.46375,\n            0,\n            0,\n            0.77778\n        ],\n        \"8804\": [\n            0.13597,\n            0.63597,\n            0,\n            0,\n            0.77778\n        ],\n        \"8805\": [\n            0.13597,\n            0.63597,\n            0,\n            0,\n            0.77778\n        ],\n        \"8810\": [\n            0.0391,\n            0.5391,\n            0,\n            0,\n            1.0\n        ],\n        \"8811\": [\n            0.0391,\n            0.5391,\n            0,\n            0,\n            1.0\n        ],\n        \"8826\": [\n            0.0391,\n            0.5391,\n            0,\n            0,\n            0.77778\n        ],\n        \"8827\": [\n            0.0391,\n            0.5391,\n            0,\n            0,\n            0.77778\n        ],\n        \"8834\": [\n            0.0391,\n            0.5391,\n            0,\n            0,\n            0.77778\n        ],\n        \"8835\": [\n            0.0391,\n            0.5391,\n            0,\n            0,\n            0.77778\n        ],\n        \"8838\": [\n            0.13597,\n            0.63597,\n            0,\n            0,\n            0.77778\n        ],\n        \"8839\": [\n            0.13597,\n            0.63597,\n            0,\n            0,\n            0.77778\n        ],\n        \"8846\": [\n            0,\n            0.55556,\n            0,\n            0,\n            0.66667\n        ],\n        \"8849\": [\n            0.13597,\n            0.63597,\n            0,\n            0,\n            0.77778\n        ],\n        \"8850\": [\n            0.13597,\n            0.63597,\n            0,\n            0,\n            0.77778\n        ],\n        \"8851\": [\n            0,\n            0.55556,\n            0,\n            0,\n            0.66667\n        ],\n        \"8852\": [\n            0,\n            0.55556,\n            0,\n            0,\n            0.66667\n        ],\n        \"8853\": [\n            0.08333,\n            0.58333,\n            0,\n            0,\n            0.77778\n        ],\n        \"8854\": [\n            0.08333,\n            0.58333,\n            0,\n            0,\n            0.77778\n        ],\n        \"8855\": [\n            0.08333,\n            0.58333,\n            0,\n            0,\n            0.77778\n        ],\n        \"8856\": [\n            0.08333,\n            0.58333,\n            0,\n            0,\n            0.77778\n        ],\n        \"8857\": [\n            0.08333,\n            0.58333,\n            0,\n            0,\n            0.77778\n        ],\n        \"8866\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.61111\n        ],\n        \"8867\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.61111\n        ],\n        \"8868\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.77778\n        ],\n        \"8869\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.77778\n        ],\n        \"8872\": [\n            0.249,\n            0.75,\n            0,\n            0,\n            0.867\n        ],\n        \"8900\": [\n            -0.05555,\n            0.44445,\n            0,\n            0,\n            0.5\n        ],\n        \"8901\": [\n            -0.05555,\n            0.44445,\n            0,\n            0,\n            0.27778\n        ],\n        \"8902\": [\n            -0.03472,\n            0.46528,\n            0,\n            0,\n            0.5\n        ],\n        \"8904\": [\n            0.005,\n            0.505,\n            0,\n            0,\n            0.9\n        ],\n        \"8942\": [\n            0.03,\n            0.903,\n            0,\n            0,\n            0.278\n        ],\n        \"8943\": [\n            -0.19,\n            0.313,\n            0,\n            0,\n            1.172\n        ],\n        \"8945\": [\n            -0.1,\n            0.823,\n            0,\n            0,\n            1.282\n        ],\n        \"8968\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.44445\n        ],\n        \"8969\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.44445\n        ],\n        \"8970\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.44445\n        ],\n        \"8971\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.44445\n        ],\n        \"8994\": [\n            -0.14236,\n            0.35764,\n            0,\n            0,\n            1.0\n        ],\n        \"8995\": [\n            -0.14236,\n            0.35764,\n            0,\n            0,\n            1.0\n        ],\n        \"9136\": [\n            0.244,\n            0.744,\n            0,\n            0,\n            0.412\n        ],\n        \"9137\": [\n            0.244,\n            0.745,\n            0,\n            0,\n            0.412\n        ],\n        \"9651\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.88889\n        ],\n        \"9657\": [\n            -0.03472,\n            0.46528,\n            0,\n            0,\n            0.5\n        ],\n        \"9661\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.88889\n        ],\n        \"9667\": [\n            -0.03472,\n            0.46528,\n            0,\n            0,\n            0.5\n        ],\n        \"9711\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            1.0\n        ],\n        \"9824\": [\n            0.12963,\n            0.69444,\n            0,\n            0,\n            0.77778\n        ],\n        \"9825\": [\n            0.12963,\n            0.69444,\n            0,\n            0,\n            0.77778\n        ],\n        \"9826\": [\n            0.12963,\n            0.69444,\n            0,\n            0,\n            0.77778\n        ],\n        \"9827\": [\n            0.12963,\n            0.69444,\n            0,\n            0,\n            0.77778\n        ],\n        \"9837\": [\n            0,\n            0.75,\n            0,\n            0,\n            0.38889\n        ],\n        \"9838\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.38889\n        ],\n        \"9839\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.38889\n        ],\n        \"10216\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.38889\n        ],\n        \"10217\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.38889\n        ],\n        \"10222\": [\n            0.244,\n            0.744,\n            0,\n            0,\n            0.412\n        ],\n        \"10223\": [\n            0.244,\n            0.745,\n            0,\n            0,\n            0.412\n        ],\n        \"10229\": [\n            0.011,\n            0.511,\n            0,\n            0,\n            1.609\n        ],\n        \"10230\": [\n            0.011,\n            0.511,\n            0,\n            0,\n            1.638\n        ],\n        \"10231\": [\n            0.011,\n            0.511,\n            0,\n            0,\n            1.859\n        ],\n        \"10232\": [\n            0.024,\n            0.525,\n            0,\n            0,\n            1.609\n        ],\n        \"10233\": [\n            0.024,\n            0.525,\n            0,\n            0,\n            1.638\n        ],\n        \"10234\": [\n            0.024,\n            0.525,\n            0,\n            0,\n            1.858\n        ],\n        \"10236\": [\n            0.011,\n            0.511,\n            0,\n            0,\n            1.638\n        ],\n        \"10815\": [\n            0,\n            0.68333,\n            0,\n            0,\n            0.75\n        ],\n        \"10927\": [\n            0.13597,\n            0.63597,\n            0,\n            0,\n            0.77778\n        ],\n        \"10928\": [\n            0.13597,\n            0.63597,\n            0,\n            0,\n            0.77778\n        ],\n        \"57376\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0\n        ]\n    },\n    \"Math-BoldItalic\": {\n        \"32\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"48\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.575\n        ],\n        \"49\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.575\n        ],\n        \"50\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.575\n        ],\n        \"51\": [\n            0.19444,\n            0.44444,\n            0,\n            0,\n            0.575\n        ],\n        \"52\": [\n            0.19444,\n            0.44444,\n            0,\n            0,\n            0.575\n        ],\n        \"53\": [\n            0.19444,\n            0.44444,\n            0,\n            0,\n            0.575\n        ],\n        \"54\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.575\n        ],\n        \"55\": [\n            0.19444,\n            0.44444,\n            0,\n            0,\n            0.575\n        ],\n        \"56\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.575\n        ],\n        \"57\": [\n            0.19444,\n            0.44444,\n            0,\n            0,\n            0.575\n        ],\n        \"65\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.86944\n        ],\n        \"66\": [\n            0,\n            0.68611,\n            0.04835,\n            0,\n            0.8664\n        ],\n        \"67\": [\n            0,\n            0.68611,\n            0.06979,\n            0,\n            0.81694\n        ],\n        \"68\": [\n            0,\n            0.68611,\n            0.03194,\n            0,\n            0.93812\n        ],\n        \"69\": [\n            0,\n            0.68611,\n            0.05451,\n            0,\n            0.81007\n        ],\n        \"70\": [\n            0,\n            0.68611,\n            0.15972,\n            0,\n            0.68889\n        ],\n        \"71\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.88673\n        ],\n        \"72\": [\n            0,\n            0.68611,\n            0.08229,\n            0,\n            0.98229\n        ],\n        \"73\": [\n            0,\n            0.68611,\n            0.07778,\n            0,\n            0.51111\n        ],\n        \"74\": [\n            0,\n            0.68611,\n            0.10069,\n            0,\n            0.63125\n        ],\n        \"75\": [\n            0,\n            0.68611,\n            0.06979,\n            0,\n            0.97118\n        ],\n        \"76\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.75555\n        ],\n        \"77\": [\n            0,\n            0.68611,\n            0.11424,\n            0,\n            1.14201\n        ],\n        \"78\": [\n            0,\n            0.68611,\n            0.11424,\n            0,\n            0.95034\n        ],\n        \"79\": [\n            0,\n            0.68611,\n            0.03194,\n            0,\n            0.83666\n        ],\n        \"80\": [\n            0,\n            0.68611,\n            0.15972,\n            0,\n            0.72309\n        ],\n        \"81\": [\n            0.19444,\n            0.68611,\n            0,\n            0,\n            0.86861\n        ],\n        \"82\": [\n            0,\n            0.68611,\n            0.00421,\n            0,\n            0.87235\n        ],\n        \"83\": [\n            0,\n            0.68611,\n            0.05382,\n            0,\n            0.69271\n        ],\n        \"84\": [\n            0,\n            0.68611,\n            0.15972,\n            0,\n            0.63663\n        ],\n        \"85\": [\n            0,\n            0.68611,\n            0.11424,\n            0,\n            0.80027\n        ],\n        \"86\": [\n            0,\n            0.68611,\n            0.25555,\n            0,\n            0.67778\n        ],\n        \"87\": [\n            0,\n            0.68611,\n            0.15972,\n            0,\n            1.09305\n        ],\n        \"88\": [\n            0,\n            0.68611,\n            0.07778,\n            0,\n            0.94722\n        ],\n        \"89\": [\n            0,\n            0.68611,\n            0.25555,\n            0,\n            0.67458\n        ],\n        \"90\": [\n            0,\n            0.68611,\n            0.06979,\n            0,\n            0.77257\n        ],\n        \"97\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.63287\n        ],\n        \"98\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.52083\n        ],\n        \"99\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.51342\n        ],\n        \"100\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.60972\n        ],\n        \"101\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.55361\n        ],\n        \"102\": [\n            0.19444,\n            0.69444,\n            0.11042,\n            0,\n            0.56806\n        ],\n        \"103\": [\n            0.19444,\n            0.44444,\n            0.03704,\n            0,\n            0.5449\n        ],\n        \"104\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.66759\n        ],\n        \"105\": [\n            0,\n            0.69326,\n            0,\n            0,\n            0.4048\n        ],\n        \"106\": [\n            0.19444,\n            0.69326,\n            0.0622,\n            0,\n            0.47083\n        ],\n        \"107\": [\n            0,\n            0.69444,\n            0.01852,\n            0,\n            0.6037\n        ],\n        \"108\": [\n            0,\n            0.69444,\n            0.0088,\n            0,\n            0.34815\n        ],\n        \"109\": [\n            0,\n            0.44444,\n            0,\n            0,\n            1.0324\n        ],\n        \"110\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.71296\n        ],\n        \"111\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.58472\n        ],\n        \"112\": [\n            0.19444,\n            0.44444,\n            0,\n            0,\n            0.60092\n        ],\n        \"113\": [\n            0.19444,\n            0.44444,\n            0.03704,\n            0,\n            0.54213\n        ],\n        \"114\": [\n            0,\n            0.44444,\n            0.03194,\n            0,\n            0.5287\n        ],\n        \"115\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.53125\n        ],\n        \"116\": [\n            0,\n            0.63492,\n            0,\n            0,\n            0.41528\n        ],\n        \"117\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.68102\n        ],\n        \"118\": [\n            0,\n            0.44444,\n            0.03704,\n            0,\n            0.56666\n        ],\n        \"119\": [\n            0,\n            0.44444,\n            0.02778,\n            0,\n            0.83148\n        ],\n        \"120\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.65903\n        ],\n        \"121\": [\n            0.19444,\n            0.44444,\n            0.03704,\n            0,\n            0.59028\n        ],\n        \"122\": [\n            0,\n            0.44444,\n            0.04213,\n            0,\n            0.55509\n        ],\n        \"160\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"915\": [\n            0,\n            0.68611,\n            0.15972,\n            0,\n            0.65694\n        ],\n        \"916\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.95833\n        ],\n        \"920\": [\n            0,\n            0.68611,\n            0.03194,\n            0,\n            0.86722\n        ],\n        \"923\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.80555\n        ],\n        \"926\": [\n            0,\n            0.68611,\n            0.07458,\n            0,\n            0.84125\n        ],\n        \"928\": [\n            0,\n            0.68611,\n            0.08229,\n            0,\n            0.98229\n        ],\n        \"931\": [\n            0,\n            0.68611,\n            0.05451,\n            0,\n            0.88507\n        ],\n        \"933\": [\n            0,\n            0.68611,\n            0.15972,\n            0,\n            0.67083\n        ],\n        \"934\": [\n            0,\n            0.68611,\n            0,\n            0,\n            0.76666\n        ],\n        \"936\": [\n            0,\n            0.68611,\n            0.11653,\n            0,\n            0.71402\n        ],\n        \"937\": [\n            0,\n            0.68611,\n            0.04835,\n            0,\n            0.8789\n        ],\n        \"945\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.76064\n        ],\n        \"946\": [\n            0.19444,\n            0.69444,\n            0.03403,\n            0,\n            0.65972\n        ],\n        \"947\": [\n            0.19444,\n            0.44444,\n            0.06389,\n            0,\n            0.59003\n        ],\n        \"948\": [\n            0,\n            0.69444,\n            0.03819,\n            0,\n            0.52222\n        ],\n        \"949\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.52882\n        ],\n        \"950\": [\n            0.19444,\n            0.69444,\n            0.06215,\n            0,\n            0.50833\n        ],\n        \"951\": [\n            0.19444,\n            0.44444,\n            0.03704,\n            0,\n            0.6\n        ],\n        \"952\": [\n            0,\n            0.69444,\n            0.03194,\n            0,\n            0.5618\n        ],\n        \"953\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.41204\n        ],\n        \"954\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.66759\n        ],\n        \"955\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.67083\n        ],\n        \"956\": [\n            0.19444,\n            0.44444,\n            0,\n            0,\n            0.70787\n        ],\n        \"957\": [\n            0,\n            0.44444,\n            0.06898,\n            0,\n            0.57685\n        ],\n        \"958\": [\n            0.19444,\n            0.69444,\n            0.03021,\n            0,\n            0.50833\n        ],\n        \"959\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.58472\n        ],\n        \"960\": [\n            0,\n            0.44444,\n            0.03704,\n            0,\n            0.68241\n        ],\n        \"961\": [\n            0.19444,\n            0.44444,\n            0,\n            0,\n            0.6118\n        ],\n        \"962\": [\n            0.09722,\n            0.44444,\n            0.07917,\n            0,\n            0.42361\n        ],\n        \"963\": [\n            0,\n            0.44444,\n            0.03704,\n            0,\n            0.68588\n        ],\n        \"964\": [\n            0,\n            0.44444,\n            0.13472,\n            0,\n            0.52083\n        ],\n        \"965\": [\n            0,\n            0.44444,\n            0.03704,\n            0,\n            0.63055\n        ],\n        \"966\": [\n            0.19444,\n            0.44444,\n            0,\n            0,\n            0.74722\n        ],\n        \"967\": [\n            0.19444,\n            0.44444,\n            0,\n            0,\n            0.71805\n        ],\n        \"968\": [\n            0.19444,\n            0.69444,\n            0.03704,\n            0,\n            0.75833\n        ],\n        \"969\": [\n            0,\n            0.44444,\n            0.03704,\n            0,\n            0.71782\n        ],\n        \"977\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.69155\n        ],\n        \"981\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.7125\n        ],\n        \"982\": [\n            0,\n            0.44444,\n            0.03194,\n            0,\n            0.975\n        ],\n        \"1009\": [\n            0.19444,\n            0.44444,\n            0,\n            0,\n            0.6118\n        ],\n        \"1013\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.48333\n        ],\n        \"57649\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.39352\n        ],\n        \"57911\": [\n            0.19444,\n            0.44444,\n            0,\n            0,\n            0.43889\n        ]\n    },\n    \"Math-Italic\": {\n        \"32\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"48\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.5\n        ],\n        \"49\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.5\n        ],\n        \"50\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.5\n        ],\n        \"51\": [\n            0.19444,\n            0.43056,\n            0,\n            0,\n            0.5\n        ],\n        \"52\": [\n            0.19444,\n            0.43056,\n            0,\n            0,\n            0.5\n        ],\n        \"53\": [\n            0.19444,\n            0.43056,\n            0,\n            0,\n            0.5\n        ],\n        \"54\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.5\n        ],\n        \"55\": [\n            0.19444,\n            0.43056,\n            0,\n            0,\n            0.5\n        ],\n        \"56\": [\n            0,\n            0.64444,\n            0,\n            0,\n            0.5\n        ],\n        \"57\": [\n            0.19444,\n            0.43056,\n            0,\n            0,\n            0.5\n        ],\n        \"65\": [\n            0,\n            0.68333,\n            0,\n            0.13889,\n            0.75\n        ],\n        \"66\": [\n            0,\n            0.68333,\n            0.05017,\n            0.08334,\n            0.75851\n        ],\n        \"67\": [\n            0,\n            0.68333,\n            0.07153,\n            0.08334,\n            0.71472\n        ],\n        \"68\": [\n            0,\n            0.68333,\n            0.02778,\n            0.05556,\n            0.82792\n        ],\n        \"69\": [\n            0,\n            0.68333,\n            0.05764,\n            0.08334,\n            0.7382\n        ],\n        \"70\": [\n            0,\n            0.68333,\n            0.13889,\n            0.08334,\n            0.64306\n        ],\n        \"71\": [\n            0,\n            0.68333,\n            0,\n            0.08334,\n            0.78625\n        ],\n        \"72\": [\n            0,\n            0.68333,\n            0.08125,\n            0.05556,\n            0.83125\n        ],\n        \"73\": [\n            0,\n            0.68333,\n            0.07847,\n            0.11111,\n            0.43958\n        ],\n        \"74\": [\n            0,\n            0.68333,\n            0.09618,\n            0.16667,\n            0.55451\n        ],\n        \"75\": [\n            0,\n            0.68333,\n            0.07153,\n            0.05556,\n            0.84931\n        ],\n        \"76\": [\n            0,\n            0.68333,\n            0,\n            0.02778,\n            0.68056\n        ],\n        \"77\": [\n            0,\n            0.68333,\n            0.10903,\n            0.08334,\n            0.97014\n        ],\n        \"78\": [\n            0,\n            0.68333,\n            0.10903,\n            0.08334,\n            0.80347\n        ],\n        \"79\": [\n            0,\n            0.68333,\n            0.02778,\n            0.08334,\n            0.76278\n        ],\n        \"80\": [\n            0,\n            0.68333,\n            0.13889,\n            0.08334,\n            0.64201\n        ],\n        \"81\": [\n            0.19444,\n            0.68333,\n            0,\n            0.08334,\n            0.79056\n        ],\n        \"82\": [\n            0,\n            0.68333,\n            0.00773,\n            0.08334,\n            0.75929\n        ],\n        \"83\": [\n            0,\n            0.68333,\n            0.05764,\n            0.08334,\n            0.6132\n        ],\n        \"84\": [\n            0,\n            0.68333,\n            0.13889,\n            0.08334,\n            0.58438\n        ],\n        \"85\": [\n            0,\n            0.68333,\n            0.10903,\n            0.02778,\n            0.68278\n        ],\n        \"86\": [\n            0,\n            0.68333,\n            0.22222,\n            0,\n            0.58333\n        ],\n        \"87\": [\n            0,\n            0.68333,\n            0.13889,\n            0,\n            0.94445\n        ],\n        \"88\": [\n            0,\n            0.68333,\n            0.07847,\n            0.08334,\n            0.82847\n        ],\n        \"89\": [\n            0,\n            0.68333,\n            0.22222,\n            0,\n            0.58056\n        ],\n        \"90\": [\n            0,\n            0.68333,\n            0.07153,\n            0.08334,\n            0.68264\n        ],\n        \"97\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.52859\n        ],\n        \"98\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.42917\n        ],\n        \"99\": [\n            0,\n            0.43056,\n            0,\n            0.05556,\n            0.43276\n        ],\n        \"100\": [\n            0,\n            0.69444,\n            0,\n            0.16667,\n            0.52049\n        ],\n        \"101\": [\n            0,\n            0.43056,\n            0,\n            0.05556,\n            0.46563\n        ],\n        \"102\": [\n            0.19444,\n            0.69444,\n            0.10764,\n            0.16667,\n            0.48959\n        ],\n        \"103\": [\n            0.19444,\n            0.43056,\n            0.03588,\n            0.02778,\n            0.47697\n        ],\n        \"104\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.57616\n        ],\n        \"105\": [\n            0,\n            0.65952,\n            0,\n            0,\n            0.34451\n        ],\n        \"106\": [\n            0.19444,\n            0.65952,\n            0.05724,\n            0,\n            0.41181\n        ],\n        \"107\": [\n            0,\n            0.69444,\n            0.03148,\n            0,\n            0.5206\n        ],\n        \"108\": [\n            0,\n            0.69444,\n            0.01968,\n            0.08334,\n            0.29838\n        ],\n        \"109\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.87801\n        ],\n        \"110\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.60023\n        ],\n        \"111\": [\n            0,\n            0.43056,\n            0,\n            0.05556,\n            0.48472\n        ],\n        \"112\": [\n            0.19444,\n            0.43056,\n            0,\n            0.08334,\n            0.50313\n        ],\n        \"113\": [\n            0.19444,\n            0.43056,\n            0.03588,\n            0.08334,\n            0.44641\n        ],\n        \"114\": [\n            0,\n            0.43056,\n            0.02778,\n            0.05556,\n            0.45116\n        ],\n        \"115\": [\n            0,\n            0.43056,\n            0,\n            0.05556,\n            0.46875\n        ],\n        \"116\": [\n            0,\n            0.61508,\n            0,\n            0.08334,\n            0.36111\n        ],\n        \"117\": [\n            0,\n            0.43056,\n            0,\n            0.02778,\n            0.57246\n        ],\n        \"118\": [\n            0,\n            0.43056,\n            0.03588,\n            0.02778,\n            0.48472\n        ],\n        \"119\": [\n            0,\n            0.43056,\n            0.02691,\n            0.08334,\n            0.71592\n        ],\n        \"120\": [\n            0,\n            0.43056,\n            0,\n            0.02778,\n            0.57153\n        ],\n        \"121\": [\n            0.19444,\n            0.43056,\n            0.03588,\n            0.05556,\n            0.49028\n        ],\n        \"122\": [\n            0,\n            0.43056,\n            0.04398,\n            0.05556,\n            0.46505\n        ],\n        \"160\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"915\": [\n            0,\n            0.68333,\n            0.13889,\n            0.08334,\n            0.61528\n        ],\n        \"916\": [\n            0,\n            0.68333,\n            0,\n            0.16667,\n            0.83334\n        ],\n        \"920\": [\n            0,\n            0.68333,\n            0.02778,\n            0.08334,\n            0.76278\n        ],\n        \"923\": [\n            0,\n            0.68333,\n            0,\n            0.16667,\n            0.69445\n        ],\n        \"926\": [\n            0,\n            0.68333,\n            0.07569,\n            0.08334,\n            0.74236\n        ],\n        \"928\": [\n            0,\n            0.68333,\n            0.08125,\n            0.05556,\n            0.83125\n        ],\n        \"931\": [\n            0,\n            0.68333,\n            0.05764,\n            0.08334,\n            0.77986\n        ],\n        \"933\": [\n            0,\n            0.68333,\n            0.13889,\n            0.05556,\n            0.58333\n        ],\n        \"934\": [\n            0,\n            0.68333,\n            0,\n            0.08334,\n            0.66667\n        ],\n        \"936\": [\n            0,\n            0.68333,\n            0.11,\n            0.05556,\n            0.61222\n        ],\n        \"937\": [\n            0,\n            0.68333,\n            0.05017,\n            0.08334,\n            0.7724\n        ],\n        \"945\": [\n            0,\n            0.43056,\n            0.0037,\n            0.02778,\n            0.6397\n        ],\n        \"946\": [\n            0.19444,\n            0.69444,\n            0.05278,\n            0.08334,\n            0.56563\n        ],\n        \"947\": [\n            0.19444,\n            0.43056,\n            0.05556,\n            0,\n            0.51773\n        ],\n        \"948\": [\n            0,\n            0.69444,\n            0.03785,\n            0.05556,\n            0.44444\n        ],\n        \"949\": [\n            0,\n            0.43056,\n            0,\n            0.08334,\n            0.46632\n        ],\n        \"950\": [\n            0.19444,\n            0.69444,\n            0.07378,\n            0.08334,\n            0.4375\n        ],\n        \"951\": [\n            0.19444,\n            0.43056,\n            0.03588,\n            0.05556,\n            0.49653\n        ],\n        \"952\": [\n            0,\n            0.69444,\n            0.02778,\n            0.08334,\n            0.46944\n        ],\n        \"953\": [\n            0,\n            0.43056,\n            0,\n            0.05556,\n            0.35394\n        ],\n        \"954\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.57616\n        ],\n        \"955\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.58334\n        ],\n        \"956\": [\n            0.19444,\n            0.43056,\n            0,\n            0.02778,\n            0.60255\n        ],\n        \"957\": [\n            0,\n            0.43056,\n            0.06366,\n            0.02778,\n            0.49398\n        ],\n        \"958\": [\n            0.19444,\n            0.69444,\n            0.04601,\n            0.11111,\n            0.4375\n        ],\n        \"959\": [\n            0,\n            0.43056,\n            0,\n            0.05556,\n            0.48472\n        ],\n        \"960\": [\n            0,\n            0.43056,\n            0.03588,\n            0,\n            0.57003\n        ],\n        \"961\": [\n            0.19444,\n            0.43056,\n            0,\n            0.08334,\n            0.51702\n        ],\n        \"962\": [\n            0.09722,\n            0.43056,\n            0.07986,\n            0.08334,\n            0.36285\n        ],\n        \"963\": [\n            0,\n            0.43056,\n            0.03588,\n            0,\n            0.57141\n        ],\n        \"964\": [\n            0,\n            0.43056,\n            0.1132,\n            0.02778,\n            0.43715\n        ],\n        \"965\": [\n            0,\n            0.43056,\n            0.03588,\n            0.02778,\n            0.54028\n        ],\n        \"966\": [\n            0.19444,\n            0.43056,\n            0,\n            0.08334,\n            0.65417\n        ],\n        \"967\": [\n            0.19444,\n            0.43056,\n            0,\n            0.05556,\n            0.62569\n        ],\n        \"968\": [\n            0.19444,\n            0.69444,\n            0.03588,\n            0.11111,\n            0.65139\n        ],\n        \"969\": [\n            0,\n            0.43056,\n            0.03588,\n            0,\n            0.62245\n        ],\n        \"977\": [\n            0,\n            0.69444,\n            0,\n            0.08334,\n            0.59144\n        ],\n        \"981\": [\n            0.19444,\n            0.69444,\n            0,\n            0.08334,\n            0.59583\n        ],\n        \"982\": [\n            0,\n            0.43056,\n            0.02778,\n            0,\n            0.82813\n        ],\n        \"1009\": [\n            0.19444,\n            0.43056,\n            0,\n            0.08334,\n            0.51702\n        ],\n        \"1013\": [\n            0,\n            0.43056,\n            0,\n            0.05556,\n            0.4059\n        ],\n        \"57649\": [\n            0,\n            0.43056,\n            0,\n            0.02778,\n            0.32246\n        ],\n        \"57911\": [\n            0.19444,\n            0.43056,\n            0,\n            0.08334,\n            0.38403\n        ]\n    },\n    \"SansSerif-Bold\": {\n        \"32\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"33\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.36667\n        ],\n        \"34\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55834\n        ],\n        \"35\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.91667\n        ],\n        \"36\": [\n            0.05556,\n            0.75,\n            0,\n            0,\n            0.55\n        ],\n        \"37\": [\n            0.05556,\n            0.75,\n            0,\n            0,\n            1.02912\n        ],\n        \"38\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.83056\n        ],\n        \"39\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.30556\n        ],\n        \"40\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.42778\n        ],\n        \"41\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.42778\n        ],\n        \"42\": [\n            0,\n            0.75,\n            0,\n            0,\n            0.55\n        ],\n        \"43\": [\n            0.11667,\n            0.61667,\n            0,\n            0,\n            0.85556\n        ],\n        \"44\": [\n            0.10556,\n            0.13056,\n            0,\n            0,\n            0.30556\n        ],\n        \"45\": [\n            0,\n            0.45833,\n            0,\n            0,\n            0.36667\n        ],\n        \"46\": [\n            0,\n            0.13056,\n            0,\n            0,\n            0.30556\n        ],\n        \"47\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.55\n        ],\n        \"48\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55\n        ],\n        \"49\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55\n        ],\n        \"50\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55\n        ],\n        \"51\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55\n        ],\n        \"52\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55\n        ],\n        \"53\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55\n        ],\n        \"54\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55\n        ],\n        \"55\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55\n        ],\n        \"56\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55\n        ],\n        \"57\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55\n        ],\n        \"58\": [\n            0,\n            0.45833,\n            0,\n            0,\n            0.30556\n        ],\n        \"59\": [\n            0.10556,\n            0.45833,\n            0,\n            0,\n            0.30556\n        ],\n        \"61\": [\n            -0.09375,\n            0.40625,\n            0,\n            0,\n            0.85556\n        ],\n        \"63\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.51945\n        ],\n        \"64\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.73334\n        ],\n        \"65\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.73334\n        ],\n        \"66\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.73334\n        ],\n        \"67\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.70278\n        ],\n        \"68\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.79445\n        ],\n        \"69\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.64167\n        ],\n        \"70\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.61111\n        ],\n        \"71\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.73334\n        ],\n        \"72\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.79445\n        ],\n        \"73\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.33056\n        ],\n        \"74\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.51945\n        ],\n        \"75\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.76389\n        ],\n        \"76\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.58056\n        ],\n        \"77\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.97778\n        ],\n        \"78\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.79445\n        ],\n        \"79\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.79445\n        ],\n        \"80\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.70278\n        ],\n        \"81\": [\n            0.10556,\n            0.69444,\n            0,\n            0,\n            0.79445\n        ],\n        \"82\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.70278\n        ],\n        \"83\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.61111\n        ],\n        \"84\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.73334\n        ],\n        \"85\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.76389\n        ],\n        \"86\": [\n            0,\n            0.69444,\n            0.01528,\n            0,\n            0.73334\n        ],\n        \"87\": [\n            0,\n            0.69444,\n            0.01528,\n            0,\n            1.03889\n        ],\n        \"88\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.73334\n        ],\n        \"89\": [\n            0,\n            0.69444,\n            0.0275,\n            0,\n            0.73334\n        ],\n        \"90\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.67223\n        ],\n        \"91\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.34306\n        ],\n        \"93\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.34306\n        ],\n        \"94\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55\n        ],\n        \"95\": [\n            0.35,\n            0.10833,\n            0.03056,\n            0,\n            0.55\n        ],\n        \"97\": [\n            0,\n            0.45833,\n            0,\n            0,\n            0.525\n        ],\n        \"98\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.56111\n        ],\n        \"99\": [\n            0,\n            0.45833,\n            0,\n            0,\n            0.48889\n        ],\n        \"100\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.56111\n        ],\n        \"101\": [\n            0,\n            0.45833,\n            0,\n            0,\n            0.51111\n        ],\n        \"102\": [\n            0,\n            0.69444,\n            0.07639,\n            0,\n            0.33611\n        ],\n        \"103\": [\n            0.19444,\n            0.45833,\n            0.01528,\n            0,\n            0.55\n        ],\n        \"104\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.56111\n        ],\n        \"105\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.25556\n        ],\n        \"106\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.28611\n        ],\n        \"107\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.53056\n        ],\n        \"108\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.25556\n        ],\n        \"109\": [\n            0,\n            0.45833,\n            0,\n            0,\n            0.86667\n        ],\n        \"110\": [\n            0,\n            0.45833,\n            0,\n            0,\n            0.56111\n        ],\n        \"111\": [\n            0,\n            0.45833,\n            0,\n            0,\n            0.55\n        ],\n        \"112\": [\n            0.19444,\n            0.45833,\n            0,\n            0,\n            0.56111\n        ],\n        \"113\": [\n            0.19444,\n            0.45833,\n            0,\n            0,\n            0.56111\n        ],\n        \"114\": [\n            0,\n            0.45833,\n            0.01528,\n            0,\n            0.37222\n        ],\n        \"115\": [\n            0,\n            0.45833,\n            0,\n            0,\n            0.42167\n        ],\n        \"116\": [\n            0,\n            0.58929,\n            0,\n            0,\n            0.40417\n        ],\n        \"117\": [\n            0,\n            0.45833,\n            0,\n            0,\n            0.56111\n        ],\n        \"118\": [\n            0,\n            0.45833,\n            0.01528,\n            0,\n            0.5\n        ],\n        \"119\": [\n            0,\n            0.45833,\n            0.01528,\n            0,\n            0.74445\n        ],\n        \"120\": [\n            0,\n            0.45833,\n            0,\n            0,\n            0.5\n        ],\n        \"121\": [\n            0.19444,\n            0.45833,\n            0.01528,\n            0,\n            0.5\n        ],\n        \"122\": [\n            0,\n            0.45833,\n            0,\n            0,\n            0.47639\n        ],\n        \"126\": [\n            0.35,\n            0.34444,\n            0,\n            0,\n            0.55\n        ],\n        \"160\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"168\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55\n        ],\n        \"176\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.73334\n        ],\n        \"180\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55\n        ],\n        \"184\": [\n            0.17014,\n            0,\n            0,\n            0,\n            0.48889\n        ],\n        \"305\": [\n            0,\n            0.45833,\n            0,\n            0,\n            0.25556\n        ],\n        \"567\": [\n            0.19444,\n            0.45833,\n            0,\n            0,\n            0.28611\n        ],\n        \"710\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55\n        ],\n        \"711\": [\n            0,\n            0.63542,\n            0,\n            0,\n            0.55\n        ],\n        \"713\": [\n            0,\n            0.63778,\n            0,\n            0,\n            0.55\n        ],\n        \"728\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55\n        ],\n        \"729\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.30556\n        ],\n        \"730\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.73334\n        ],\n        \"732\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55\n        ],\n        \"733\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55\n        ],\n        \"915\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.58056\n        ],\n        \"916\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.91667\n        ],\n        \"920\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.85556\n        ],\n        \"923\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.67223\n        ],\n        \"926\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.73334\n        ],\n        \"928\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.79445\n        ],\n        \"931\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.79445\n        ],\n        \"933\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.85556\n        ],\n        \"934\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.79445\n        ],\n        \"936\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.85556\n        ],\n        \"937\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.79445\n        ],\n        \"8211\": [\n            0,\n            0.45833,\n            0.03056,\n            0,\n            0.55\n        ],\n        \"8212\": [\n            0,\n            0.45833,\n            0.03056,\n            0,\n            1.10001\n        ],\n        \"8216\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.30556\n        ],\n        \"8217\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.30556\n        ],\n        \"8220\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55834\n        ],\n        \"8221\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55834\n        ]\n    },\n    \"SansSerif-Italic\": {\n        \"32\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"33\": [\n            0,\n            0.69444,\n            0.05733,\n            0,\n            0.31945\n        ],\n        \"34\": [\n            0,\n            0.69444,\n            0.00316,\n            0,\n            0.5\n        ],\n        \"35\": [\n            0.19444,\n            0.69444,\n            0.05087,\n            0,\n            0.83334\n        ],\n        \"36\": [\n            0.05556,\n            0.75,\n            0.11156,\n            0,\n            0.5\n        ],\n        \"37\": [\n            0.05556,\n            0.75,\n            0.03126,\n            0,\n            0.83334\n        ],\n        \"38\": [\n            0,\n            0.69444,\n            0.03058,\n            0,\n            0.75834\n        ],\n        \"39\": [\n            0,\n            0.69444,\n            0.07816,\n            0,\n            0.27778\n        ],\n        \"40\": [\n            0.25,\n            0.75,\n            0.13164,\n            0,\n            0.38889\n        ],\n        \"41\": [\n            0.25,\n            0.75,\n            0.02536,\n            0,\n            0.38889\n        ],\n        \"42\": [\n            0,\n            0.75,\n            0.11775,\n            0,\n            0.5\n        ],\n        \"43\": [\n            0.08333,\n            0.58333,\n            0.02536,\n            0,\n            0.77778\n        ],\n        \"44\": [\n            0.125,\n            0.08333,\n            0,\n            0,\n            0.27778\n        ],\n        \"45\": [\n            0,\n            0.44444,\n            0.01946,\n            0,\n            0.33333\n        ],\n        \"46\": [\n            0,\n            0.08333,\n            0,\n            0,\n            0.27778\n        ],\n        \"47\": [\n            0.25,\n            0.75,\n            0.13164,\n            0,\n            0.5\n        ],\n        \"48\": [\n            0,\n            0.65556,\n            0.11156,\n            0,\n            0.5\n        ],\n        \"49\": [\n            0,\n            0.65556,\n            0.11156,\n            0,\n            0.5\n        ],\n        \"50\": [\n            0,\n            0.65556,\n            0.11156,\n            0,\n            0.5\n        ],\n        \"51\": [\n            0,\n            0.65556,\n            0.11156,\n            0,\n            0.5\n        ],\n        \"52\": [\n            0,\n            0.65556,\n            0.11156,\n            0,\n            0.5\n        ],\n        \"53\": [\n            0,\n            0.65556,\n            0.11156,\n            0,\n            0.5\n        ],\n        \"54\": [\n            0,\n            0.65556,\n            0.11156,\n            0,\n            0.5\n        ],\n        \"55\": [\n            0,\n            0.65556,\n            0.11156,\n            0,\n            0.5\n        ],\n        \"56\": [\n            0,\n            0.65556,\n            0.11156,\n            0,\n            0.5\n        ],\n        \"57\": [\n            0,\n            0.65556,\n            0.11156,\n            0,\n            0.5\n        ],\n        \"58\": [\n            0,\n            0.44444,\n            0.02502,\n            0,\n            0.27778\n        ],\n        \"59\": [\n            0.125,\n            0.44444,\n            0.02502,\n            0,\n            0.27778\n        ],\n        \"61\": [\n            -0.13,\n            0.37,\n            0.05087,\n            0,\n            0.77778\n        ],\n        \"63\": [\n            0,\n            0.69444,\n            0.11809,\n            0,\n            0.47222\n        ],\n        \"64\": [\n            0,\n            0.69444,\n            0.07555,\n            0,\n            0.66667\n        ],\n        \"65\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.66667\n        ],\n        \"66\": [\n            0,\n            0.69444,\n            0.08293,\n            0,\n            0.66667\n        ],\n        \"67\": [\n            0,\n            0.69444,\n            0.11983,\n            0,\n            0.63889\n        ],\n        \"68\": [\n            0,\n            0.69444,\n            0.07555,\n            0,\n            0.72223\n        ],\n        \"69\": [\n            0,\n            0.69444,\n            0.11983,\n            0,\n            0.59722\n        ],\n        \"70\": [\n            0,\n            0.69444,\n            0.13372,\n            0,\n            0.56945\n        ],\n        \"71\": [\n            0,\n            0.69444,\n            0.11983,\n            0,\n            0.66667\n        ],\n        \"72\": [\n            0,\n            0.69444,\n            0.08094,\n            0,\n            0.70834\n        ],\n        \"73\": [\n            0,\n            0.69444,\n            0.13372,\n            0,\n            0.27778\n        ],\n        \"74\": [\n            0,\n            0.69444,\n            0.08094,\n            0,\n            0.47222\n        ],\n        \"75\": [\n            0,\n            0.69444,\n            0.11983,\n            0,\n            0.69445\n        ],\n        \"76\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.54167\n        ],\n        \"77\": [\n            0,\n            0.69444,\n            0.08094,\n            0,\n            0.875\n        ],\n        \"78\": [\n            0,\n            0.69444,\n            0.08094,\n            0,\n            0.70834\n        ],\n        \"79\": [\n            0,\n            0.69444,\n            0.07555,\n            0,\n            0.73611\n        ],\n        \"80\": [\n            0,\n            0.69444,\n            0.08293,\n            0,\n            0.63889\n        ],\n        \"81\": [\n            0.125,\n            0.69444,\n            0.07555,\n            0,\n            0.73611\n        ],\n        \"82\": [\n            0,\n            0.69444,\n            0.08293,\n            0,\n            0.64584\n        ],\n        \"83\": [\n            0,\n            0.69444,\n            0.09205,\n            0,\n            0.55556\n        ],\n        \"84\": [\n            0,\n            0.69444,\n            0.13372,\n            0,\n            0.68056\n        ],\n        \"85\": [\n            0,\n            0.69444,\n            0.08094,\n            0,\n            0.6875\n        ],\n        \"86\": [\n            0,\n            0.69444,\n            0.1615,\n            0,\n            0.66667\n        ],\n        \"87\": [\n            0,\n            0.69444,\n            0.1615,\n            0,\n            0.94445\n        ],\n        \"88\": [\n            0,\n            0.69444,\n            0.13372,\n            0,\n            0.66667\n        ],\n        \"89\": [\n            0,\n            0.69444,\n            0.17261,\n            0,\n            0.66667\n        ],\n        \"90\": [\n            0,\n            0.69444,\n            0.11983,\n            0,\n            0.61111\n        ],\n        \"91\": [\n            0.25,\n            0.75,\n            0.15942,\n            0,\n            0.28889\n        ],\n        \"93\": [\n            0.25,\n            0.75,\n            0.08719,\n            0,\n            0.28889\n        ],\n        \"94\": [\n            0,\n            0.69444,\n            0.0799,\n            0,\n            0.5\n        ],\n        \"95\": [\n            0.35,\n            0.09444,\n            0.08616,\n            0,\n            0.5\n        ],\n        \"97\": [\n            0,\n            0.44444,\n            0.00981,\n            0,\n            0.48056\n        ],\n        \"98\": [\n            0,\n            0.69444,\n            0.03057,\n            0,\n            0.51667\n        ],\n        \"99\": [\n            0,\n            0.44444,\n            0.08336,\n            0,\n            0.44445\n        ],\n        \"100\": [\n            0,\n            0.69444,\n            0.09483,\n            0,\n            0.51667\n        ],\n        \"101\": [\n            0,\n            0.44444,\n            0.06778,\n            0,\n            0.44445\n        ],\n        \"102\": [\n            0,\n            0.69444,\n            0.21705,\n            0,\n            0.30556\n        ],\n        \"103\": [\n            0.19444,\n            0.44444,\n            0.10836,\n            0,\n            0.5\n        ],\n        \"104\": [\n            0,\n            0.69444,\n            0.01778,\n            0,\n            0.51667\n        ],\n        \"105\": [\n            0,\n            0.67937,\n            0.09718,\n            0,\n            0.23889\n        ],\n        \"106\": [\n            0.19444,\n            0.67937,\n            0.09162,\n            0,\n            0.26667\n        ],\n        \"107\": [\n            0,\n            0.69444,\n            0.08336,\n            0,\n            0.48889\n        ],\n        \"108\": [\n            0,\n            0.69444,\n            0.09483,\n            0,\n            0.23889\n        ],\n        \"109\": [\n            0,\n            0.44444,\n            0.01778,\n            0,\n            0.79445\n        ],\n        \"110\": [\n            0,\n            0.44444,\n            0.01778,\n            0,\n            0.51667\n        ],\n        \"111\": [\n            0,\n            0.44444,\n            0.06613,\n            0,\n            0.5\n        ],\n        \"112\": [\n            0.19444,\n            0.44444,\n            0.0389,\n            0,\n            0.51667\n        ],\n        \"113\": [\n            0.19444,\n            0.44444,\n            0.04169,\n            0,\n            0.51667\n        ],\n        \"114\": [\n            0,\n            0.44444,\n            0.10836,\n            0,\n            0.34167\n        ],\n        \"115\": [\n            0,\n            0.44444,\n            0.0778,\n            0,\n            0.38333\n        ],\n        \"116\": [\n            0,\n            0.57143,\n            0.07225,\n            0,\n            0.36111\n        ],\n        \"117\": [\n            0,\n            0.44444,\n            0.04169,\n            0,\n            0.51667\n        ],\n        \"118\": [\n            0,\n            0.44444,\n            0.10836,\n            0,\n            0.46111\n        ],\n        \"119\": [\n            0,\n            0.44444,\n            0.10836,\n            0,\n            0.68334\n        ],\n        \"120\": [\n            0,\n            0.44444,\n            0.09169,\n            0,\n            0.46111\n        ],\n        \"121\": [\n            0.19444,\n            0.44444,\n            0.10836,\n            0,\n            0.46111\n        ],\n        \"122\": [\n            0,\n            0.44444,\n            0.08752,\n            0,\n            0.43472\n        ],\n        \"126\": [\n            0.35,\n            0.32659,\n            0.08826,\n            0,\n            0.5\n        ],\n        \"160\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"168\": [\n            0,\n            0.67937,\n            0.06385,\n            0,\n            0.5\n        ],\n        \"176\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.73752\n        ],\n        \"184\": [\n            0.17014,\n            0,\n            0,\n            0,\n            0.44445\n        ],\n        \"305\": [\n            0,\n            0.44444,\n            0.04169,\n            0,\n            0.23889\n        ],\n        \"567\": [\n            0.19444,\n            0.44444,\n            0.04169,\n            0,\n            0.26667\n        ],\n        \"710\": [\n            0,\n            0.69444,\n            0.0799,\n            0,\n            0.5\n        ],\n        \"711\": [\n            0,\n            0.63194,\n            0.08432,\n            0,\n            0.5\n        ],\n        \"713\": [\n            0,\n            0.60889,\n            0.08776,\n            0,\n            0.5\n        ],\n        \"714\": [\n            0,\n            0.69444,\n            0.09205,\n            0,\n            0.5\n        ],\n        \"715\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"728\": [\n            0,\n            0.69444,\n            0.09483,\n            0,\n            0.5\n        ],\n        \"729\": [\n            0,\n            0.67937,\n            0.07774,\n            0,\n            0.27778\n        ],\n        \"730\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.73752\n        ],\n        \"732\": [\n            0,\n            0.67659,\n            0.08826,\n            0,\n            0.5\n        ],\n        \"733\": [\n            0,\n            0.69444,\n            0.09205,\n            0,\n            0.5\n        ],\n        \"915\": [\n            0,\n            0.69444,\n            0.13372,\n            0,\n            0.54167\n        ],\n        \"916\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.83334\n        ],\n        \"920\": [\n            0,\n            0.69444,\n            0.07555,\n            0,\n            0.77778\n        ],\n        \"923\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.61111\n        ],\n        \"926\": [\n            0,\n            0.69444,\n            0.12816,\n            0,\n            0.66667\n        ],\n        \"928\": [\n            0,\n            0.69444,\n            0.08094,\n            0,\n            0.70834\n        ],\n        \"931\": [\n            0,\n            0.69444,\n            0.11983,\n            0,\n            0.72222\n        ],\n        \"933\": [\n            0,\n            0.69444,\n            0.09031,\n            0,\n            0.77778\n        ],\n        \"934\": [\n            0,\n            0.69444,\n            0.04603,\n            0,\n            0.72222\n        ],\n        \"936\": [\n            0,\n            0.69444,\n            0.09031,\n            0,\n            0.77778\n        ],\n        \"937\": [\n            0,\n            0.69444,\n            0.08293,\n            0,\n            0.72222\n        ],\n        \"8211\": [\n            0,\n            0.44444,\n            0.08616,\n            0,\n            0.5\n        ],\n        \"8212\": [\n            0,\n            0.44444,\n            0.08616,\n            0,\n            1.0\n        ],\n        \"8216\": [\n            0,\n            0.69444,\n            0.07816,\n            0,\n            0.27778\n        ],\n        \"8217\": [\n            0,\n            0.69444,\n            0.07816,\n            0,\n            0.27778\n        ],\n        \"8220\": [\n            0,\n            0.69444,\n            0.14205,\n            0,\n            0.5\n        ],\n        \"8221\": [\n            0,\n            0.69444,\n            0.00316,\n            0,\n            0.5\n        ]\n    },\n    \"SansSerif-Regular\": {\n        \"32\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"33\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.31945\n        ],\n        \"34\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"35\": [\n            0.19444,\n            0.69444,\n            0,\n            0,\n            0.83334\n        ],\n        \"36\": [\n            0.05556,\n            0.75,\n            0,\n            0,\n            0.5\n        ],\n        \"37\": [\n            0.05556,\n            0.75,\n            0,\n            0,\n            0.83334\n        ],\n        \"38\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.75834\n        ],\n        \"39\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.27778\n        ],\n        \"40\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.38889\n        ],\n        \"41\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.38889\n        ],\n        \"42\": [\n            0,\n            0.75,\n            0,\n            0,\n            0.5\n        ],\n        \"43\": [\n            0.08333,\n            0.58333,\n            0,\n            0,\n            0.77778\n        ],\n        \"44\": [\n            0.125,\n            0.08333,\n            0,\n            0,\n            0.27778\n        ],\n        \"45\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.33333\n        ],\n        \"46\": [\n            0,\n            0.08333,\n            0,\n            0,\n            0.27778\n        ],\n        \"47\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.5\n        ],\n        \"48\": [\n            0,\n            0.65556,\n            0,\n            0,\n            0.5\n        ],\n        \"49\": [\n            0,\n            0.65556,\n            0,\n            0,\n            0.5\n        ],\n        \"50\": [\n            0,\n            0.65556,\n            0,\n            0,\n            0.5\n        ],\n        \"51\": [\n            0,\n            0.65556,\n            0,\n            0,\n            0.5\n        ],\n        \"52\": [\n            0,\n            0.65556,\n            0,\n            0,\n            0.5\n        ],\n        \"53\": [\n            0,\n            0.65556,\n            0,\n            0,\n            0.5\n        ],\n        \"54\": [\n            0,\n            0.65556,\n            0,\n            0,\n            0.5\n        ],\n        \"55\": [\n            0,\n            0.65556,\n            0,\n            0,\n            0.5\n        ],\n        \"56\": [\n            0,\n            0.65556,\n            0,\n            0,\n            0.5\n        ],\n        \"57\": [\n            0,\n            0.65556,\n            0,\n            0,\n            0.5\n        ],\n        \"58\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.27778\n        ],\n        \"59\": [\n            0.125,\n            0.44444,\n            0,\n            0,\n            0.27778\n        ],\n        \"61\": [\n            -0.13,\n            0.37,\n            0,\n            0,\n            0.77778\n        ],\n        \"63\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.47222\n        ],\n        \"64\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.66667\n        ],\n        \"65\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.66667\n        ],\n        \"66\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.66667\n        ],\n        \"67\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.63889\n        ],\n        \"68\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.72223\n        ],\n        \"69\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.59722\n        ],\n        \"70\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.56945\n        ],\n        \"71\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.66667\n        ],\n        \"72\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.70834\n        ],\n        \"73\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.27778\n        ],\n        \"74\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.47222\n        ],\n        \"75\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.69445\n        ],\n        \"76\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.54167\n        ],\n        \"77\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.875\n        ],\n        \"78\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.70834\n        ],\n        \"79\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.73611\n        ],\n        \"80\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.63889\n        ],\n        \"81\": [\n            0.125,\n            0.69444,\n            0,\n            0,\n            0.73611\n        ],\n        \"82\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.64584\n        ],\n        \"83\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.55556\n        ],\n        \"84\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.68056\n        ],\n        \"85\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.6875\n        ],\n        \"86\": [\n            0,\n            0.69444,\n            0.01389,\n            0,\n            0.66667\n        ],\n        \"87\": [\n            0,\n            0.69444,\n            0.01389,\n            0,\n            0.94445\n        ],\n        \"88\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.66667\n        ],\n        \"89\": [\n            0,\n            0.69444,\n            0.025,\n            0,\n            0.66667\n        ],\n        \"90\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.61111\n        ],\n        \"91\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.28889\n        ],\n        \"93\": [\n            0.25,\n            0.75,\n            0,\n            0,\n            0.28889\n        ],\n        \"94\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"95\": [\n            0.35,\n            0.09444,\n            0.02778,\n            0,\n            0.5\n        ],\n        \"97\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.48056\n        ],\n        \"98\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.51667\n        ],\n        \"99\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.44445\n        ],\n        \"100\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.51667\n        ],\n        \"101\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.44445\n        ],\n        \"102\": [\n            0,\n            0.69444,\n            0.06944,\n            0,\n            0.30556\n        ],\n        \"103\": [\n            0.19444,\n            0.44444,\n            0.01389,\n            0,\n            0.5\n        ],\n        \"104\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.51667\n        ],\n        \"105\": [\n            0,\n            0.67937,\n            0,\n            0,\n            0.23889\n        ],\n        \"106\": [\n            0.19444,\n            0.67937,\n            0,\n            0,\n            0.26667\n        ],\n        \"107\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.48889\n        ],\n        \"108\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.23889\n        ],\n        \"109\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.79445\n        ],\n        \"110\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.51667\n        ],\n        \"111\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.5\n        ],\n        \"112\": [\n            0.19444,\n            0.44444,\n            0,\n            0,\n            0.51667\n        ],\n        \"113\": [\n            0.19444,\n            0.44444,\n            0,\n            0,\n            0.51667\n        ],\n        \"114\": [\n            0,\n            0.44444,\n            0.01389,\n            0,\n            0.34167\n        ],\n        \"115\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.38333\n        ],\n        \"116\": [\n            0,\n            0.57143,\n            0,\n            0,\n            0.36111\n        ],\n        \"117\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.51667\n        ],\n        \"118\": [\n            0,\n            0.44444,\n            0.01389,\n            0,\n            0.46111\n        ],\n        \"119\": [\n            0,\n            0.44444,\n            0.01389,\n            0,\n            0.68334\n        ],\n        \"120\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.46111\n        ],\n        \"121\": [\n            0.19444,\n            0.44444,\n            0.01389,\n            0,\n            0.46111\n        ],\n        \"122\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.43472\n        ],\n        \"126\": [\n            0.35,\n            0.32659,\n            0,\n            0,\n            0.5\n        ],\n        \"160\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"168\": [\n            0,\n            0.67937,\n            0,\n            0,\n            0.5\n        ],\n        \"176\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.66667\n        ],\n        \"184\": [\n            0.17014,\n            0,\n            0,\n            0,\n            0.44445\n        ],\n        \"305\": [\n            0,\n            0.44444,\n            0,\n            0,\n            0.23889\n        ],\n        \"567\": [\n            0.19444,\n            0.44444,\n            0,\n            0,\n            0.26667\n        ],\n        \"710\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"711\": [\n            0,\n            0.63194,\n            0,\n            0,\n            0.5\n        ],\n        \"713\": [\n            0,\n            0.60889,\n            0,\n            0,\n            0.5\n        ],\n        \"714\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"715\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"728\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"729\": [\n            0,\n            0.67937,\n            0,\n            0,\n            0.27778\n        ],\n        \"730\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.66667\n        ],\n        \"732\": [\n            0,\n            0.67659,\n            0,\n            0,\n            0.5\n        ],\n        \"733\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"915\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.54167\n        ],\n        \"916\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.83334\n        ],\n        \"920\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.77778\n        ],\n        \"923\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.61111\n        ],\n        \"926\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.66667\n        ],\n        \"928\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.70834\n        ],\n        \"931\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.72222\n        ],\n        \"933\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.77778\n        ],\n        \"934\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.72222\n        ],\n        \"936\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.77778\n        ],\n        \"937\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.72222\n        ],\n        \"8211\": [\n            0,\n            0.44444,\n            0.02778,\n            0,\n            0.5\n        ],\n        \"8212\": [\n            0,\n            0.44444,\n            0.02778,\n            0,\n            1.0\n        ],\n        \"8216\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.27778\n        ],\n        \"8217\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.27778\n        ],\n        \"8220\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.5\n        ],\n        \"8221\": [\n            0,\n            0.69444,\n            0,\n            0,\n            0.5\n        ]\n    },\n    \"Script-Regular\": {\n        \"32\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"65\": [\n            0,\n            0.7,\n            0.22925,\n            0,\n            0.80253\n        ],\n        \"66\": [\n            0,\n            0.7,\n            0.04087,\n            0,\n            0.90757\n        ],\n        \"67\": [\n            0,\n            0.7,\n            0.1689,\n            0,\n            0.66619\n        ],\n        \"68\": [\n            0,\n            0.7,\n            0.09371,\n            0,\n            0.77443\n        ],\n        \"69\": [\n            0,\n            0.7,\n            0.18583,\n            0,\n            0.56162\n        ],\n        \"70\": [\n            0,\n            0.7,\n            0.13634,\n            0,\n            0.89544\n        ],\n        \"71\": [\n            0,\n            0.7,\n            0.17322,\n            0,\n            0.60961\n        ],\n        \"72\": [\n            0,\n            0.7,\n            0.29694,\n            0,\n            0.96919\n        ],\n        \"73\": [\n            0,\n            0.7,\n            0.19189,\n            0,\n            0.80907\n        ],\n        \"74\": [\n            0.27778,\n            0.7,\n            0.19189,\n            0,\n            1.05159\n        ],\n        \"75\": [\n            0,\n            0.7,\n            0.31259,\n            0,\n            0.91364\n        ],\n        \"76\": [\n            0,\n            0.7,\n            0.19189,\n            0,\n            0.87373\n        ],\n        \"77\": [\n            0,\n            0.7,\n            0.15981,\n            0,\n            1.08031\n        ],\n        \"78\": [\n            0,\n            0.7,\n            0.3525,\n            0,\n            0.9015\n        ],\n        \"79\": [\n            0,\n            0.7,\n            0.08078,\n            0,\n            0.73787\n        ],\n        \"80\": [\n            0,\n            0.7,\n            0.08078,\n            0,\n            1.01262\n        ],\n        \"81\": [\n            0,\n            0.7,\n            0.03305,\n            0,\n            0.88282\n        ],\n        \"82\": [\n            0,\n            0.7,\n            0.06259,\n            0,\n            0.85\n        ],\n        \"83\": [\n            0,\n            0.7,\n            0.19189,\n            0,\n            0.86767\n        ],\n        \"84\": [\n            0,\n            0.7,\n            0.29087,\n            0,\n            0.74697\n        ],\n        \"85\": [\n            0,\n            0.7,\n            0.25815,\n            0,\n            0.79996\n        ],\n        \"86\": [\n            0,\n            0.7,\n            0.27523,\n            0,\n            0.62204\n        ],\n        \"87\": [\n            0,\n            0.7,\n            0.27523,\n            0,\n            0.80532\n        ],\n        \"88\": [\n            0,\n            0.7,\n            0.26006,\n            0,\n            0.94445\n        ],\n        \"89\": [\n            0,\n            0.7,\n            0.2939,\n            0,\n            0.70961\n        ],\n        \"90\": [\n            0,\n            0.7,\n            0.24037,\n            0,\n            0.8212\n        ],\n        \"160\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ]\n    },\n    \"Size1-Regular\": {\n        \"32\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"40\": [\n            0.35001,\n            0.85,\n            0,\n            0,\n            0.45834\n        ],\n        \"41\": [\n            0.35001,\n            0.85,\n            0,\n            0,\n            0.45834\n        ],\n        \"47\": [\n            0.35001,\n            0.85,\n            0,\n            0,\n            0.57778\n        ],\n        \"91\": [\n            0.35001,\n            0.85,\n            0,\n            0,\n            0.41667\n        ],\n        \"92\": [\n            0.35001,\n            0.85,\n            0,\n            0,\n            0.57778\n        ],\n        \"93\": [\n            0.35001,\n            0.85,\n            0,\n            0,\n            0.41667\n        ],\n        \"123\": [\n            0.35001,\n            0.85,\n            0,\n            0,\n            0.58334\n        ],\n        \"125\": [\n            0.35001,\n            0.85,\n            0,\n            0,\n            0.58334\n        ],\n        \"160\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"710\": [\n            0,\n            0.72222,\n            0,\n            0,\n            0.55556\n        ],\n        \"732\": [\n            0,\n            0.72222,\n            0,\n            0,\n            0.55556\n        ],\n        \"770\": [\n            0,\n            0.72222,\n            0,\n            0,\n            0.55556\n        ],\n        \"771\": [\n            0,\n            0.72222,\n            0,\n            0,\n            0.55556\n        ],\n        \"8214\": [\n            -0.00099,\n            0.601,\n            0,\n            0,\n            0.77778\n        ],\n        \"8593\": [\n            1e-05,\n            0.6,\n            0,\n            0,\n            0.66667\n        ],\n        \"8595\": [\n            1e-05,\n            0.6,\n            0,\n            0,\n            0.66667\n        ],\n        \"8657\": [\n            1e-05,\n            0.6,\n            0,\n            0,\n            0.77778\n        ],\n        \"8659\": [\n            1e-05,\n            0.6,\n            0,\n            0,\n            0.77778\n        ],\n        \"8719\": [\n            0.25001,\n            0.75,\n            0,\n            0,\n            0.94445\n        ],\n        \"8720\": [\n            0.25001,\n            0.75,\n            0,\n            0,\n            0.94445\n        ],\n        \"8721\": [\n            0.25001,\n            0.75,\n            0,\n            0,\n            1.05556\n        ],\n        \"8730\": [\n            0.35001,\n            0.85,\n            0,\n            0,\n            1.0\n        ],\n        \"8739\": [\n            -0.00599,\n            0.606,\n            0,\n            0,\n            0.33333\n        ],\n        \"8741\": [\n            -0.00599,\n            0.606,\n            0,\n            0,\n            0.55556\n        ],\n        \"8747\": [\n            0.30612,\n            0.805,\n            0.19445,\n            0,\n            0.47222\n        ],\n        \"8748\": [\n            0.306,\n            0.805,\n            0.19445,\n            0,\n            0.47222\n        ],\n        \"8749\": [\n            0.306,\n            0.805,\n            0.19445,\n            0,\n            0.47222\n        ],\n        \"8750\": [\n            0.30612,\n            0.805,\n            0.19445,\n            0,\n            0.47222\n        ],\n        \"8896\": [\n            0.25001,\n            0.75,\n            0,\n            0,\n            0.83334\n        ],\n        \"8897\": [\n            0.25001,\n            0.75,\n            0,\n            0,\n            0.83334\n        ],\n        \"8898\": [\n            0.25001,\n            0.75,\n            0,\n            0,\n            0.83334\n        ],\n        \"8899\": [\n            0.25001,\n            0.75,\n            0,\n            0,\n            0.83334\n        ],\n        \"8968\": [\n            0.35001,\n            0.85,\n            0,\n            0,\n            0.47222\n        ],\n        \"8969\": [\n            0.35001,\n            0.85,\n            0,\n            0,\n            0.47222\n        ],\n        \"8970\": [\n            0.35001,\n            0.85,\n            0,\n            0,\n            0.47222\n        ],\n        \"8971\": [\n            0.35001,\n            0.85,\n            0,\n            0,\n            0.47222\n        ],\n        \"9168\": [\n            -0.00099,\n            0.601,\n            0,\n            0,\n            0.66667\n        ],\n        \"10216\": [\n            0.35001,\n            0.85,\n            0,\n            0,\n            0.47222\n        ],\n        \"10217\": [\n            0.35001,\n            0.85,\n            0,\n            0,\n            0.47222\n        ],\n        \"10752\": [\n            0.25001,\n            0.75,\n            0,\n            0,\n            1.11111\n        ],\n        \"10753\": [\n            0.25001,\n            0.75,\n            0,\n            0,\n            1.11111\n        ],\n        \"10754\": [\n            0.25001,\n            0.75,\n            0,\n            0,\n            1.11111\n        ],\n        \"10756\": [\n            0.25001,\n            0.75,\n            0,\n            0,\n            0.83334\n        ],\n        \"10758\": [\n            0.25001,\n            0.75,\n            0,\n            0,\n            0.83334\n        ]\n    },\n    \"Size2-Regular\": {\n        \"32\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"40\": [\n            0.65002,\n            1.15,\n            0,\n            0,\n            0.59722\n        ],\n        \"41\": [\n            0.65002,\n            1.15,\n            0,\n            0,\n            0.59722\n        ],\n        \"47\": [\n            0.65002,\n            1.15,\n            0,\n            0,\n            0.81111\n        ],\n        \"91\": [\n            0.65002,\n            1.15,\n            0,\n            0,\n            0.47222\n        ],\n        \"92\": [\n            0.65002,\n            1.15,\n            0,\n            0,\n            0.81111\n        ],\n        \"93\": [\n            0.65002,\n            1.15,\n            0,\n            0,\n            0.47222\n        ],\n        \"123\": [\n            0.65002,\n            1.15,\n            0,\n            0,\n            0.66667\n        ],\n        \"125\": [\n            0.65002,\n            1.15,\n            0,\n            0,\n            0.66667\n        ],\n        \"160\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"710\": [\n            0,\n            0.75,\n            0,\n            0,\n            1.0\n        ],\n        \"732\": [\n            0,\n            0.75,\n            0,\n            0,\n            1.0\n        ],\n        \"770\": [\n            0,\n            0.75,\n            0,\n            0,\n            1.0\n        ],\n        \"771\": [\n            0,\n            0.75,\n            0,\n            0,\n            1.0\n        ],\n        \"8719\": [\n            0.55001,\n            1.05,\n            0,\n            0,\n            1.27778\n        ],\n        \"8720\": [\n            0.55001,\n            1.05,\n            0,\n            0,\n            1.27778\n        ],\n        \"8721\": [\n            0.55001,\n            1.05,\n            0,\n            0,\n            1.44445\n        ],\n        \"8730\": [\n            0.65002,\n            1.15,\n            0,\n            0,\n            1.0\n        ],\n        \"8747\": [\n            0.86225,\n            1.36,\n            0.44445,\n            0,\n            0.55556\n        ],\n        \"8748\": [\n            0.862,\n            1.36,\n            0.44445,\n            0,\n            0.55556\n        ],\n        \"8749\": [\n            0.862,\n            1.36,\n            0.44445,\n            0,\n            0.55556\n        ],\n        \"8750\": [\n            0.86225,\n            1.36,\n            0.44445,\n            0,\n            0.55556\n        ],\n        \"8896\": [\n            0.55001,\n            1.05,\n            0,\n            0,\n            1.11111\n        ],\n        \"8897\": [\n            0.55001,\n            1.05,\n            0,\n            0,\n            1.11111\n        ],\n        \"8898\": [\n            0.55001,\n            1.05,\n            0,\n            0,\n            1.11111\n        ],\n        \"8899\": [\n            0.55001,\n            1.05,\n            0,\n            0,\n            1.11111\n        ],\n        \"8968\": [\n            0.65002,\n            1.15,\n            0,\n            0,\n            0.52778\n        ],\n        \"8969\": [\n            0.65002,\n            1.15,\n            0,\n            0,\n            0.52778\n        ],\n        \"8970\": [\n            0.65002,\n            1.15,\n            0,\n            0,\n            0.52778\n        ],\n        \"8971\": [\n            0.65002,\n            1.15,\n            0,\n            0,\n            0.52778\n        ],\n        \"10216\": [\n            0.65002,\n            1.15,\n            0,\n            0,\n            0.61111\n        ],\n        \"10217\": [\n            0.65002,\n            1.15,\n            0,\n            0,\n            0.61111\n        ],\n        \"10752\": [\n            0.55001,\n            1.05,\n            0,\n            0,\n            1.51112\n        ],\n        \"10753\": [\n            0.55001,\n            1.05,\n            0,\n            0,\n            1.51112\n        ],\n        \"10754\": [\n            0.55001,\n            1.05,\n            0,\n            0,\n            1.51112\n        ],\n        \"10756\": [\n            0.55001,\n            1.05,\n            0,\n            0,\n            1.11111\n        ],\n        \"10758\": [\n            0.55001,\n            1.05,\n            0,\n            0,\n            1.11111\n        ]\n    },\n    \"Size3-Regular\": {\n        \"32\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"40\": [\n            0.95003,\n            1.45,\n            0,\n            0,\n            0.73611\n        ],\n        \"41\": [\n            0.95003,\n            1.45,\n            0,\n            0,\n            0.73611\n        ],\n        \"47\": [\n            0.95003,\n            1.45,\n            0,\n            0,\n            1.04445\n        ],\n        \"91\": [\n            0.95003,\n            1.45,\n            0,\n            0,\n            0.52778\n        ],\n        \"92\": [\n            0.95003,\n            1.45,\n            0,\n            0,\n            1.04445\n        ],\n        \"93\": [\n            0.95003,\n            1.45,\n            0,\n            0,\n            0.52778\n        ],\n        \"123\": [\n            0.95003,\n            1.45,\n            0,\n            0,\n            0.75\n        ],\n        \"125\": [\n            0.95003,\n            1.45,\n            0,\n            0,\n            0.75\n        ],\n        \"160\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"710\": [\n            0,\n            0.75,\n            0,\n            0,\n            1.44445\n        ],\n        \"732\": [\n            0,\n            0.75,\n            0,\n            0,\n            1.44445\n        ],\n        \"770\": [\n            0,\n            0.75,\n            0,\n            0,\n            1.44445\n        ],\n        \"771\": [\n            0,\n            0.75,\n            0,\n            0,\n            1.44445\n        ],\n        \"8730\": [\n            0.95003,\n            1.45,\n            0,\n            0,\n            1.0\n        ],\n        \"8968\": [\n            0.95003,\n            1.45,\n            0,\n            0,\n            0.58334\n        ],\n        \"8969\": [\n            0.95003,\n            1.45,\n            0,\n            0,\n            0.58334\n        ],\n        \"8970\": [\n            0.95003,\n            1.45,\n            0,\n            0,\n            0.58334\n        ],\n        \"8971\": [\n            0.95003,\n            1.45,\n            0,\n            0,\n            0.58334\n        ],\n        \"10216\": [\n            0.95003,\n            1.45,\n            0,\n            0,\n            0.75\n        ],\n        \"10217\": [\n            0.95003,\n            1.45,\n            0,\n            0,\n            0.75\n        ]\n    },\n    \"Size4-Regular\": {\n        \"32\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"40\": [\n            1.25003,\n            1.75,\n            0,\n            0,\n            0.79167\n        ],\n        \"41\": [\n            1.25003,\n            1.75,\n            0,\n            0,\n            0.79167\n        ],\n        \"47\": [\n            1.25003,\n            1.75,\n            0,\n            0,\n            1.27778\n        ],\n        \"91\": [\n            1.25003,\n            1.75,\n            0,\n            0,\n            0.58334\n        ],\n        \"92\": [\n            1.25003,\n            1.75,\n            0,\n            0,\n            1.27778\n        ],\n        \"93\": [\n            1.25003,\n            1.75,\n            0,\n            0,\n            0.58334\n        ],\n        \"123\": [\n            1.25003,\n            1.75,\n            0,\n            0,\n            0.80556\n        ],\n        \"125\": [\n            1.25003,\n            1.75,\n            0,\n            0,\n            0.80556\n        ],\n        \"160\": [\n            0,\n            0,\n            0,\n            0,\n            0.25\n        ],\n        \"710\": [\n            0,\n            0.825,\n            0,\n            0,\n            1.8889\n        ],\n        \"732\": [\n            0,\n            0.825,\n            0,\n            0,\n            1.8889\n        ],\n        \"770\": [\n            0,\n            0.825,\n            0,\n            0,\n            1.8889\n        ],\n        \"771\": [\n            0,\n            0.825,\n            0,\n            0,\n            1.8889\n        ],\n        \"8730\": [\n            1.25003,\n            1.75,\n            0,\n            0,\n            1.0\n        ],\n        \"8968\": [\n            1.25003,\n            1.75,\n            0,\n            0,\n            0.63889\n        ],\n        \"8969\": [\n            1.25003,\n            1.75,\n            0,\n            0,\n            0.63889\n        ],\n        \"8970\": [\n            1.25003,\n            1.75,\n            0,\n            0,\n            0.63889\n        ],\n        \"8971\": [\n            1.25003,\n            1.75,\n            0,\n            0,\n            0.63889\n        ],\n        \"9115\": [\n            0.64502,\n            1.155,\n            0,\n            0,\n            0.875\n        ],\n        \"9116\": [\n            1e-05,\n            0.6,\n            0,\n            0,\n            0.875\n        ],\n        \"9117\": [\n            0.64502,\n            1.155,\n            0,\n            0,\n            0.875\n        ],\n        \"9118\": [\n            0.64502,\n            1.155,\n            0,\n            0,\n            0.875\n        ],\n        \"9119\": [\n            1e-05,\n            0.6,\n            0,\n            0,\n            0.875\n        ],\n        \"9120\": [\n            0.64502,\n            1.155,\n            0,\n            0,\n            0.875\n        ],\n        \"9121\": [\n            0.64502,\n            1.155,\n            0,\n            0,\n            0.66667\n        ],\n        \"9122\": [\n            -0.00099,\n            0.601,\n            0,\n            0,\n            0.66667\n        ],\n        \"9123\": [\n            0.64502,\n            1.155,\n            0,\n            0,\n            0.66667\n        ],\n        \"9124\": [\n            0.64502,\n            1.155,\n            0,\n            0,\n            0.66667\n        ],\n        \"9125\": [\n            -0.00099,\n            0.601,\n            0,\n            0,\n            0.66667\n        ],\n        \"9126\": [\n            0.64502,\n            1.155,\n            0,\n            0,\n            0.66667\n        ],\n        \"9127\": [\n            1e-05,\n            0.9,\n            0,\n            0,\n            0.88889\n        ],\n        \"9128\": [\n            0.65002,\n            1.15,\n            0,\n            0,\n            0.88889\n        ],\n        \"9129\": [\n            0.90001,\n            0,\n            0,\n            0,\n            0.88889\n        ],\n        \"9130\": [\n            0,\n            0.3,\n            0,\n            0,\n            0.88889\n        ],\n        \"9131\": [\n            1e-05,\n            0.9,\n            0,\n            0,\n            0.88889\n        ],\n        \"9132\": [\n            0.65002,\n            1.15,\n            0,\n            0,\n            0.88889\n        ],\n        \"9133\": [\n            0.90001,\n            0,\n            0,\n            0,\n            0.88889\n        ],\n        \"9143\": [\n            0.88502,\n            0.915,\n            0,\n            0,\n            1.05556\n        ],\n        \"10216\": [\n            1.25003,\n            1.75,\n            0,\n            0,\n            0.80556\n        ],\n        \"10217\": [\n            1.25003,\n            1.75,\n            0,\n            0,\n            0.80556\n        ],\n        \"57344\": [\n            -0.00499,\n            0.605,\n            0,\n            0,\n            1.05556\n        ],\n        \"57345\": [\n            -0.00499,\n            0.605,\n            0,\n            0,\n            1.05556\n        ],\n        \"57680\": [\n            0,\n            0.12,\n            0,\n            0,\n            0.45\n        ],\n        \"57681\": [\n            0,\n            0.12,\n            0,\n            0,\n            0.45\n        ],\n        \"57682\": [\n            0,\n            0.12,\n            0,\n            0,\n            0.45\n        ],\n        \"57683\": [\n            0,\n            0.12,\n            0,\n            0,\n            0.45\n        ]\n    },\n    \"Typewriter-Regular\": {\n        \"32\": [\n            0,\n            0,\n            0,\n            0,\n            0.525\n        ],\n        \"33\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"34\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"35\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"36\": [\n            0.08333,\n            0.69444,\n            0,\n            0,\n            0.525\n        ],\n        \"37\": [\n            0.08333,\n            0.69444,\n            0,\n            0,\n            0.525\n        ],\n        \"38\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"39\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"40\": [\n            0.08333,\n            0.69444,\n            0,\n            0,\n            0.525\n        ],\n        \"41\": [\n            0.08333,\n            0.69444,\n            0,\n            0,\n            0.525\n        ],\n        \"42\": [\n            0,\n            0.52083,\n            0,\n            0,\n            0.525\n        ],\n        \"43\": [\n            -0.08056,\n            0.53055,\n            0,\n            0,\n            0.525\n        ],\n        \"44\": [\n            0.13889,\n            0.125,\n            0,\n            0,\n            0.525\n        ],\n        \"45\": [\n            -0.08056,\n            0.53055,\n            0,\n            0,\n            0.525\n        ],\n        \"46\": [\n            0,\n            0.125,\n            0,\n            0,\n            0.525\n        ],\n        \"47\": [\n            0.08333,\n            0.69444,\n            0,\n            0,\n            0.525\n        ],\n        \"48\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"49\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"50\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"51\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"52\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"53\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"54\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"55\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"56\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"57\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"58\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"59\": [\n            0.13889,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"60\": [\n            -0.05556,\n            0.55556,\n            0,\n            0,\n            0.525\n        ],\n        \"61\": [\n            -0.19549,\n            0.41562,\n            0,\n            0,\n            0.525\n        ],\n        \"62\": [\n            -0.05556,\n            0.55556,\n            0,\n            0,\n            0.525\n        ],\n        \"63\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"64\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"65\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"66\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"67\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"68\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"69\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"70\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"71\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"72\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"73\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"74\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"75\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"76\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"77\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"78\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"79\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"80\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"81\": [\n            0.13889,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"82\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"83\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"84\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"85\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"86\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"87\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"88\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"89\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"90\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"91\": [\n            0.08333,\n            0.69444,\n            0,\n            0,\n            0.525\n        ],\n        \"92\": [\n            0.08333,\n            0.69444,\n            0,\n            0,\n            0.525\n        ],\n        \"93\": [\n            0.08333,\n            0.69444,\n            0,\n            0,\n            0.525\n        ],\n        \"94\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"95\": [\n            0.09514,\n            0,\n            0,\n            0,\n            0.525\n        ],\n        \"96\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"97\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"98\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"99\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"100\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"101\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"102\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"103\": [\n            0.22222,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"104\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"105\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"106\": [\n            0.22222,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"107\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"108\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"109\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"110\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"111\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"112\": [\n            0.22222,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"113\": [\n            0.22222,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"114\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"115\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"116\": [\n            0,\n            0.55358,\n            0,\n            0,\n            0.525\n        ],\n        \"117\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"118\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"119\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"120\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"121\": [\n            0.22222,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"122\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"123\": [\n            0.08333,\n            0.69444,\n            0,\n            0,\n            0.525\n        ],\n        \"124\": [\n            0.08333,\n            0.69444,\n            0,\n            0,\n            0.525\n        ],\n        \"125\": [\n            0.08333,\n            0.69444,\n            0,\n            0,\n            0.525\n        ],\n        \"126\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"127\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"160\": [\n            0,\n            0,\n            0,\n            0,\n            0.525\n        ],\n        \"176\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"184\": [\n            0.19445,\n            0,\n            0,\n            0,\n            0.525\n        ],\n        \"305\": [\n            0,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"567\": [\n            0.22222,\n            0.43056,\n            0,\n            0,\n            0.525\n        ],\n        \"711\": [\n            0,\n            0.56597,\n            0,\n            0,\n            0.525\n        ],\n        \"713\": [\n            0,\n            0.56555,\n            0,\n            0,\n            0.525\n        ],\n        \"714\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"715\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"728\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"730\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"770\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"771\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"776\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"915\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"916\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"920\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"923\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"926\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"928\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"931\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"933\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"934\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"936\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"937\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"8216\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"8217\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"8242\": [\n            0,\n            0.61111,\n            0,\n            0,\n            0.525\n        ],\n        \"9251\": [\n            0.11111,\n            0.21944,\n            0,\n            0,\n            0.525\n        ]\n    }\n};\n/**\n * This file contains metrics regarding fonts and individual symbols. The sigma\n * and xi variables, as well as the metricMap map contain data extracted from\n * TeX, TeX font metrics, and the TTF files. These data are then exposed via the\n * `metrics` variable and the getCharacterMetrics function.\n */ // In TeX, there are actually three sets of dimensions, one for each of\n// textstyle (size index 5 and higher: >=9pt), scriptstyle (size index 3 and 4:\n// 7-8pt), and scriptscriptstyle (size index 1 and 2: 5-6pt).  These are\n// provided in the arrays below, in that order.\n//\n// The font metrics are stored in fonts cmsy10, cmsy7, and cmsy5 respectively.\n// This was determined by running the following script:\n//\n//     latex -interaction=nonstopmode \\\n//     '\\documentclass{article}\\usepackage{amsmath}\\begin{document}' \\\n//     '$a$ \\expandafter\\show\\the\\textfont2' \\\n//     '\\expandafter\\show\\the\\scriptfont2' \\\n//     '\\expandafter\\show\\the\\scriptscriptfont2' \\\n//     '\\stop'\n//\n// The metrics themselves were retrieved using the following commands:\n//\n//     tftopl cmsy10\n//     tftopl cmsy7\n//     tftopl cmsy5\n//\n// The output of each of these commands is quite lengthy.  The only part we\n// care about is the FONTDIMEN section. Each value is measured in EMs.\nvar sigmasAndXis = {\n    slant: [\n        0.250,\n        0.250,\n        0.250\n    ],\n    // sigma1\n    space: [\n        0.000,\n        0.000,\n        0.000\n    ],\n    // sigma2\n    stretch: [\n        0.000,\n        0.000,\n        0.000\n    ],\n    // sigma3\n    shrink: [\n        0.000,\n        0.000,\n        0.000\n    ],\n    // sigma4\n    xHeight: [\n        0.431,\n        0.431,\n        0.431\n    ],\n    // sigma5\n    quad: [\n        1.000,\n        1.171,\n        1.472\n    ],\n    // sigma6\n    extraSpace: [\n        0.000,\n        0.000,\n        0.000\n    ],\n    // sigma7\n    num1: [\n        0.677,\n        0.732,\n        0.925\n    ],\n    // sigma8\n    num2: [\n        0.394,\n        0.384,\n        0.387\n    ],\n    // sigma9\n    num3: [\n        0.444,\n        0.471,\n        0.504\n    ],\n    // sigma10\n    denom1: [\n        0.686,\n        0.752,\n        1.025\n    ],\n    // sigma11\n    denom2: [\n        0.345,\n        0.344,\n        0.532\n    ],\n    // sigma12\n    sup1: [\n        0.413,\n        0.503,\n        0.504\n    ],\n    // sigma13\n    sup2: [\n        0.363,\n        0.431,\n        0.404\n    ],\n    // sigma14\n    sup3: [\n        0.289,\n        0.286,\n        0.294\n    ],\n    // sigma15\n    sub1: [\n        0.150,\n        0.143,\n        0.200\n    ],\n    // sigma16\n    sub2: [\n        0.247,\n        0.286,\n        0.400\n    ],\n    // sigma17\n    supDrop: [\n        0.386,\n        0.353,\n        0.494\n    ],\n    // sigma18\n    subDrop: [\n        0.050,\n        0.071,\n        0.100\n    ],\n    // sigma19\n    delim1: [\n        2.390,\n        1.700,\n        1.980\n    ],\n    // sigma20\n    delim2: [\n        1.010,\n        1.157,\n        1.420\n    ],\n    // sigma21\n    axisHeight: [\n        0.250,\n        0.250,\n        0.250\n    ],\n    // sigma22\n    // These font metrics are extracted from TeX by using tftopl on cmex10.tfm;\n    // they correspond to the font parameters of the extension fonts (family 3).\n    // See the TeXbook, page 441. In AMSTeX, the extension fonts scale; to\n    // match cmex7, we'd use cmex7.tfm values for script and scriptscript\n    // values.\n    defaultRuleThickness: [\n        0.04,\n        0.049,\n        0.049\n    ],\n    // xi8; cmex7: 0.049\n    bigOpSpacing1: [\n        0.111,\n        0.111,\n        0.111\n    ],\n    // xi9\n    bigOpSpacing2: [\n        0.166,\n        0.166,\n        0.166\n    ],\n    // xi10\n    bigOpSpacing3: [\n        0.2,\n        0.2,\n        0.2\n    ],\n    // xi11\n    bigOpSpacing4: [\n        0.6,\n        0.611,\n        0.611\n    ],\n    // xi12; cmex7: 0.611\n    bigOpSpacing5: [\n        0.1,\n        0.143,\n        0.143\n    ],\n    // xi13; cmex7: 0.143\n    // The \\sqrt rule width is taken from the height of the surd character.\n    // Since we use the same font at all sizes, this thickness doesn't scale.\n    sqrtRuleThickness: [\n        0.04,\n        0.04,\n        0.04\n    ],\n    // This value determines how large a pt is, for metrics which are defined\n    // in terms of pts.\n    // This value is also used in katex.less; if you change it make sure the\n    // values match.\n    ptPerEm: [\n        10.0,\n        10.0,\n        10.0\n    ],\n    // The space between adjacent `|` columns in an array definition. From\n    // `\\showthe\\doublerulesep` in LaTeX. Equals 2.0 / ptPerEm.\n    doubleRuleSep: [\n        0.2,\n        0.2,\n        0.2\n    ],\n    // The width of separator lines in {array} environments. From\n    // `\\showthe\\arrayrulewidth` in LaTeX. Equals 0.4 / ptPerEm.\n    arrayRuleWidth: [\n        0.04,\n        0.04,\n        0.04\n    ],\n    // Two values from LaTeX source2e:\n    fboxsep: [\n        0.3,\n        0.3,\n        0.3\n    ],\n    //        3 pt / ptPerEm\n    fboxrule: [\n        0.04,\n        0.04,\n        0.04\n    ] // 0.4 pt / ptPerEm\n}; // This map contains a mapping from font name and character code to character\n// should have Latin-1 and Cyrillic characters, but may not depending on the\n// operating system.  The metrics do not account for extra height from the\n// accents.  In the case of Cyrillic characters which have both ascenders and\n// descenders we prefer approximations with ascenders, primarily to prevent\n// the fraction bar or root line from intersecting the glyph.\n// TODO(kevinb) allow union of multiple glyph metrics for better accuracy.\nvar extraCharacterMap = {\n    // Latin-1\n    \"\\xc5\": \"A\",\n    \"\\xd0\": \"D\",\n    \"\\xde\": \"o\",\n    \"\\xe5\": \"a\",\n    \"\\xf0\": \"d\",\n    \"\\xfe\": \"o\",\n    // Cyrillic\n    \"А\": \"A\",\n    \"Б\": \"B\",\n    \"В\": \"B\",\n    \"Г\": \"F\",\n    \"Д\": \"A\",\n    \"Е\": \"E\",\n    \"Ж\": \"K\",\n    \"З\": \"3\",\n    \"И\": \"N\",\n    \"Й\": \"N\",\n    \"К\": \"K\",\n    \"Л\": \"N\",\n    \"М\": \"M\",\n    \"Н\": \"H\",\n    \"О\": \"O\",\n    \"П\": \"N\",\n    \"Р\": \"P\",\n    \"С\": \"C\",\n    \"Т\": \"T\",\n    \"У\": \"y\",\n    \"Ф\": \"O\",\n    \"Х\": \"X\",\n    \"Ц\": \"U\",\n    \"Ч\": \"h\",\n    \"Ш\": \"W\",\n    \"Щ\": \"W\",\n    \"Ъ\": \"B\",\n    \"Ы\": \"X\",\n    \"Ь\": \"B\",\n    \"Э\": \"3\",\n    \"Ю\": \"X\",\n    \"Я\": \"R\",\n    \"а\": \"a\",\n    \"б\": \"b\",\n    \"в\": \"a\",\n    \"г\": \"r\",\n    \"д\": \"y\",\n    \"е\": \"e\",\n    \"ж\": \"m\",\n    \"з\": \"e\",\n    \"и\": \"n\",\n    \"й\": \"n\",\n    \"к\": \"n\",\n    \"л\": \"n\",\n    \"м\": \"m\",\n    \"н\": \"n\",\n    \"о\": \"o\",\n    \"п\": \"n\",\n    \"р\": \"p\",\n    \"с\": \"c\",\n    \"т\": \"o\",\n    \"у\": \"y\",\n    \"ф\": \"b\",\n    \"х\": \"x\",\n    \"ц\": \"n\",\n    \"ч\": \"n\",\n    \"ш\": \"w\",\n    \"щ\": \"w\",\n    \"ъ\": \"a\",\n    \"ы\": \"m\",\n    \"ь\": \"a\",\n    \"э\": \"e\",\n    \"ю\": \"m\",\n    \"я\": \"r\"\n};\n/**\n * This function adds new font metrics to default metricMap\n * It can also override existing metrics\n */ function setFontMetrics(fontName, metrics) {\n    fontMetricsData[fontName] = metrics;\n}\n/**\n * This function is a convenience function for looking up information in the\n * metricMap table. It takes a character as a string, and a font.\n *\n * Note: the `width` property may be undefined if fontMetricsData.js wasn't\n * built using `Make extended_metrics`.\n */ function getCharacterMetrics(character, font, mode) {\n    if (!fontMetricsData[font]) {\n        throw new Error(\"Font metrics not found for font: \" + font + \".\");\n    }\n    var ch = character.charCodeAt(0);\n    var metrics = fontMetricsData[font][ch];\n    if (!metrics && character[0] in extraCharacterMap) {\n        ch = extraCharacterMap[character[0]].charCodeAt(0);\n        metrics = fontMetricsData[font][ch];\n    }\n    if (!metrics && mode === \"text\") {\n        // We don't typically have font metrics for Asian scripts.\n        // But since we support them in text mode, we need to return\n        // some sort of metrics.\n        // So if the character is in a script we support but we\n        // don't have metrics for it, just use the metrics for\n        // the Latin capital letter M. This is close enough because\n        // we (currently) only care about the height of the glyph\n        // not its width.\n        if (supportedCodepoint(ch)) {\n            metrics = fontMetricsData[font][77]; // 77 is the charcode for 'M'\n        }\n    }\n    if (metrics) {\n        return {\n            depth: metrics[0],\n            height: metrics[1],\n            italic: metrics[2],\n            skew: metrics[3],\n            width: metrics[4]\n        };\n    }\n}\nvar fontMetricsBySizeIndex = {};\n/**\n * Get the font metrics for a given size.\n */ function getGlobalMetrics(size) {\n    var sizeIndex;\n    if (size >= 5) {\n        sizeIndex = 0;\n    } else if (size >= 3) {\n        sizeIndex = 1;\n    } else {\n        sizeIndex = 2;\n    }\n    if (!fontMetricsBySizeIndex[sizeIndex]) {\n        var metrics = fontMetricsBySizeIndex[sizeIndex] = {\n            cssEmPerMu: sigmasAndXis.quad[sizeIndex] / 18\n        };\n        for(var key in sigmasAndXis){\n            if (sigmasAndXis.hasOwnProperty(key)) {\n                metrics[key] = sigmasAndXis[key][sizeIndex];\n            }\n        }\n    }\n    return fontMetricsBySizeIndex[sizeIndex];\n}\n/**\n * This file contains information about the options that the Parser carries\n * around with it while parsing. Data is held in an `Options` object, and when\n * recursing, a new `Options` object can be created with the `.with*` and\n * `.reset` functions.\n */ var sizeStyleMap = [\n    // The size mappings are taken from TeX with \\normalsize=10pt.\n    [\n        1,\n        1,\n        1\n    ],\n    [\n        2,\n        1,\n        1\n    ],\n    [\n        3,\n        1,\n        1\n    ],\n    [\n        4,\n        2,\n        1\n    ],\n    [\n        5,\n        2,\n        1\n    ],\n    [\n        6,\n        3,\n        1\n    ],\n    [\n        7,\n        4,\n        2\n    ],\n    [\n        8,\n        6,\n        3\n    ],\n    [\n        9,\n        7,\n        6\n    ],\n    [\n        10,\n        8,\n        7\n    ],\n    [\n        11,\n        10,\n        9\n    ] // size11: [24.88, 20.74, 17.28] \\HUGE\n];\nvar sizeMultipliers = [\n    // you change size indexes, change that function.\n    0.5,\n    0.6,\n    0.7,\n    0.8,\n    0.9,\n    1.0,\n    1.2,\n    1.44,\n    1.728,\n    2.074,\n    2.488\n];\nvar sizeAtStyle = function sizeAtStyle(size, style) {\n    return style.size < 2 ? size : sizeStyleMap[size - 1][style.size - 1];\n}; // In these types, \"\" (empty string) means \"no change\".\n/**\n * This is the main options class. It contains the current style, size, color,\n * and font.\n *\n * Options objects should not be modified. To create a new Options with\n * different properties, call a `.having*` method.\n */ class Options {\n    // A font family applies to a group of fonts (i.e. SansSerif), while a font\n    // represents a specific font (i.e. SansSerif Bold).\n    // See: https://tex.stackexchange.com/questions/22350/difference-between-textrm-and-mathrm\n    /**\n   * The base size index.\n   */ constructor(data){\n        this.style = void 0;\n        this.color = void 0;\n        this.size = void 0;\n        this.textSize = void 0;\n        this.phantom = void 0;\n        this.font = void 0;\n        this.fontFamily = void 0;\n        this.fontWeight = void 0;\n        this.fontShape = void 0;\n        this.sizeMultiplier = void 0;\n        this.maxSize = void 0;\n        this.minRuleThickness = void 0;\n        this._fontMetrics = void 0;\n        this.style = data.style;\n        this.color = data.color;\n        this.size = data.size || Options.BASESIZE;\n        this.textSize = data.textSize || this.size;\n        this.phantom = !!data.phantom;\n        this.font = data.font || \"\";\n        this.fontFamily = data.fontFamily || \"\";\n        this.fontWeight = data.fontWeight || \"\";\n        this.fontShape = data.fontShape || \"\";\n        this.sizeMultiplier = sizeMultipliers[this.size - 1];\n        this.maxSize = data.maxSize;\n        this.minRuleThickness = data.minRuleThickness;\n        this._fontMetrics = undefined;\n    }\n    /**\n   * Returns a new options object with the same properties as \"this\".  Properties\n   * from \"extension\" will be copied to the new options object.\n   */ extend(extension) {\n        var data = {\n            style: this.style,\n            size: this.size,\n            textSize: this.textSize,\n            color: this.color,\n            phantom: this.phantom,\n            font: this.font,\n            fontFamily: this.fontFamily,\n            fontWeight: this.fontWeight,\n            fontShape: this.fontShape,\n            maxSize: this.maxSize,\n            minRuleThickness: this.minRuleThickness\n        };\n        for(var key in extension){\n            if (extension.hasOwnProperty(key)) {\n                data[key] = extension[key];\n            }\n        }\n        return new Options(data);\n    }\n    /**\n   * Return an options object with the given style. If `this.style === style`,\n   * returns `this`.\n   */ havingStyle(style) {\n        if (this.style === style) {\n            return this;\n        } else {\n            return this.extend({\n                style: style,\n                size: sizeAtStyle(this.textSize, style)\n            });\n        }\n    }\n    /**\n   * Return an options object with a cramped version of the current style. If\n   * the current style is cramped, returns `this`.\n   */ havingCrampedStyle() {\n        return this.havingStyle(this.style.cramp());\n    }\n    /**\n   * Return an options object with the given size and in at least `\\textstyle`.\n   * Returns `this` if appropriate.\n   */ havingSize(size) {\n        if (this.size === size && this.textSize === size) {\n            return this;\n        } else {\n            return this.extend({\n                style: this.style.text(),\n                size: size,\n                textSize: size,\n                sizeMultiplier: sizeMultipliers[size - 1]\n            });\n        }\n    }\n    /**\n   * Like `this.havingSize(BASESIZE).havingStyle(style)`. If `style` is omitted,\n   * changes to at least `\\textstyle`.\n   */ havingBaseStyle(style) {\n        style = style || this.style.text();\n        var wantSize = sizeAtStyle(Options.BASESIZE, style);\n        if (this.size === wantSize && this.textSize === Options.BASESIZE && this.style === style) {\n            return this;\n        } else {\n            return this.extend({\n                style: style,\n                size: wantSize\n            });\n        }\n    }\n    /**\n   * Remove the effect of sizing changes such as \\Huge.\n   * Keep the effect of the current style, such as \\scriptstyle.\n   */ havingBaseSizing() {\n        var size;\n        switch(this.style.id){\n            case 4:\n            case 5:\n                size = 3; // normalsize in scriptstyle\n                break;\n            case 6:\n            case 7:\n                size = 1; // normalsize in scriptscriptstyle\n                break;\n            default:\n                size = 6;\n        }\n        return this.extend({\n            style: this.style.text(),\n            size: size\n        });\n    }\n    /**\n   * Create a new options object with the given color.\n   */ withColor(color) {\n        return this.extend({\n            color: color\n        });\n    }\n    /**\n   * Create a new options object with \"phantom\" set to true.\n   */ withPhantom() {\n        return this.extend({\n            phantom: true\n        });\n    }\n    /**\n   * Creates a new options object with the given math font or old text font.\n   * @type {[type]}\n   */ withFont(font) {\n        return this.extend({\n            font\n        });\n    }\n    /**\n   * Create a new options objects with the given fontFamily.\n   */ withTextFontFamily(fontFamily) {\n        return this.extend({\n            fontFamily,\n            font: \"\"\n        });\n    }\n    /**\n   * Creates a new options object with the given font weight\n   */ withTextFontWeight(fontWeight) {\n        return this.extend({\n            fontWeight,\n            font: \"\"\n        });\n    }\n    /**\n   * Creates a new options object with the given font weight\n   */ withTextFontShape(fontShape) {\n        return this.extend({\n            fontShape,\n            font: \"\"\n        });\n    }\n    /**\n   * Return the CSS sizing classes required to switch from enclosing options\n   * `oldOptions` to `this`. Returns an array of classes.\n   */ sizingClasses(oldOptions) {\n        if (oldOptions.size !== this.size) {\n            return [\n                \"sizing\",\n                \"reset-size\" + oldOptions.size,\n                \"size\" + this.size\n            ];\n        } else {\n            return [];\n        }\n    }\n    /**\n   * Return the CSS sizing classes required to switch to the base size. Like\n   * `this.havingSize(BASESIZE).sizingClasses(this)`.\n   */ baseSizingClasses() {\n        if (this.size !== Options.BASESIZE) {\n            return [\n                \"sizing\",\n                \"reset-size\" + this.size,\n                \"size\" + Options.BASESIZE\n            ];\n        } else {\n            return [];\n        }\n    }\n    /**\n   * Return the font metrics for this size.\n   */ fontMetrics() {\n        if (!this._fontMetrics) {\n            this._fontMetrics = getGlobalMetrics(this.size);\n        }\n        return this._fontMetrics;\n    }\n    /**\n   * Gets the CSS color of the current options object\n   */ getColor() {\n        if (this.phantom) {\n            return \"transparent\";\n        } else {\n            return this.color;\n        }\n    }\n}\nOptions.BASESIZE = 6;\n/**\n * This file does conversion between units.  In particular, it provides\n * calculateSize to convert other units into ems.\n */ // Thus, multiplying a length by this number converts the length from units\n// into pts.  Dividing the result by ptPerEm gives the number of ems\n// *assuming* a font size of ptPerEm (normal size, normal style).\nvar ptPerUnit = {\n    // https://en.wikibooks.org/wiki/LaTeX/Lengths and\n    // https://tex.stackexchange.com/a/8263\n    \"pt\": 1,\n    // TeX point\n    \"mm\": 7227 / 2540,\n    // millimeter\n    \"cm\": 7227 / 254,\n    // centimeter\n    \"in\": 72.27,\n    // inch\n    \"bp\": 803 / 800,\n    // big (PostScript) points\n    \"pc\": 12,\n    // pica\n    \"dd\": 1238 / 1157,\n    // didot\n    \"cc\": 14856 / 1157,\n    // cicero (12 didot)\n    \"nd\": 685 / 642,\n    // new didot\n    \"nc\": 1370 / 107,\n    // new cicero (12 new didot)\n    \"sp\": 1 / 65536,\n    // scaled point (TeX's internal smallest unit)\n    // https://tex.stackexchange.com/a/41371\n    \"px\": 803 / 800 // \\pdfpxdimen defaults to 1 bp in pdfTeX and LuaTeX\n}; // Dictionary of relative units, for fast validity testing.\nvar relativeUnit = {\n    \"ex\": true,\n    \"em\": true,\n    \"mu\": true\n};\n/**\n * Determine whether the specified unit (either a string defining the unit\n * or a \"size\" parse node containing a unit field) is valid.\n */ var validUnit = function validUnit(unit) {\n    if (typeof unit !== \"string\") {\n        unit = unit.unit;\n    }\n    return unit in ptPerUnit || unit in relativeUnit || unit === \"ex\";\n};\n/*\n * Convert a \"size\" parse node (with numeric \"number\" and string \"unit\" fields,\n * as parsed by functions.js argType \"size\") into a CSS em value for the\n * current style/scale.  `options` gives the current options.\n */ var calculateSize = function calculateSize(sizeValue, options) {\n    var scale;\n    if (sizeValue.unit in ptPerUnit) {\n        // Absolute units\n        scale = ptPerUnit[sizeValue.unit] // Convert unit to pt\n         / options.fontMetrics().ptPerEm // Convert pt to CSS em\n         / options.sizeMultiplier; // Unscale to make absolute units\n    } else if (sizeValue.unit === \"mu\") {\n        // `mu` units scale with scriptstyle/scriptscriptstyle.\n        scale = options.fontMetrics().cssEmPerMu;\n    } else {\n        // Other relative units always refer to the *textstyle* font\n        // in the current size.\n        var unitOptions;\n        if (options.style.isTight()) {\n            // isTight() means current style is script/scriptscript.\n            unitOptions = options.havingStyle(options.style.text());\n        } else {\n            unitOptions = options;\n        } // TODO: In TeX these units are relative to the quad of the current\n        // *text* font, e.g. cmr10. KaTeX instead uses values from the\n        // comparably-sized *Computer Modern symbol* font. At 10pt, these\n        // match. At 7pt and 5pt, they differ: cmr7=1.138894, cmsy7=1.170641;\n        // cmr5=1.361133, cmsy5=1.472241. Consider $\\scriptsize a\\kern1emb$.\n        // TeX \\showlists shows a kern of 1.13889 * fontsize;\n        // KaTeX shows a kern of 1.171 * fontsize.\n        if (sizeValue.unit === \"ex\") {\n            scale = unitOptions.fontMetrics().xHeight;\n        } else if (sizeValue.unit === \"em\") {\n            scale = unitOptions.fontMetrics().quad;\n        } else {\n            throw new ParseError(\"Invalid unit: '\" + sizeValue.unit + \"'\");\n        }\n        if (unitOptions !== options) {\n            scale *= unitOptions.sizeMultiplier / options.sizeMultiplier;\n        }\n    }\n    return Math.min(sizeValue.number * scale, options.maxSize);\n};\n/**\n * Round `n` to 4 decimal places, or to the nearest 1/10,000th em. See\n * https://github.com/KaTeX/KaTeX/pull/2460.\n */ var makeEm = function makeEm(n) {\n    return +n.toFixed(4) + \"em\";\n};\n/**\n * These objects store the data about the DOM nodes we create, as well as some\n * extra data. They can then be transformed into real DOM nodes with the\n * `toNode` function or HTML markup using `toMarkup`. They are useful for both\n * storing extra properties on the nodes, as well as providing a way to easily\n * work with the DOM.\n *\n * Similar functions for working with MathML nodes exist in mathMLTree.js.\n *\n * TODO: refactor `span` and `anchor` into common superclass when\n * target environments support class inheritance\n */ /**\n * Create an HTML className based on a list of classes. In addition to joining\n * with spaces, we also remove empty classes.\n */ var createClass = function createClass(classes) {\n    return classes.filter((cls)=>cls).join(\" \");\n};\nvar initNode = function initNode(classes, options, style) {\n    this.classes = classes || [];\n    this.attributes = {};\n    this.height = 0;\n    this.depth = 0;\n    this.maxFontSize = 0;\n    this.style = style || {};\n    if (options) {\n        if (options.style.isTight()) {\n            this.classes.push(\"mtight\");\n        }\n        var color = options.getColor();\n        if (color) {\n            this.style.color = color;\n        }\n    }\n};\n/**\n * Convert into an HTML node\n */ var toNode = function toNode(tagName) {\n    var node = document.createElement(tagName); // Apply the class\n    node.className = createClass(this.classes); // Apply inline styles\n    for(var style in this.style){\n        if (this.style.hasOwnProperty(style)) {\n            // $FlowFixMe Flow doesn't seem to understand span.style's type.\n            node.style[style] = this.style[style];\n        }\n    } // Apply attributes\n    for(var attr in this.attributes){\n        if (this.attributes.hasOwnProperty(attr)) {\n            node.setAttribute(attr, this.attributes[attr]);\n        }\n    } // Append the children, also as HTML nodes\n    for(var i = 0; i < this.children.length; i++){\n        node.appendChild(this.children[i].toNode());\n    }\n    return node;\n};\n/**\n * Convert into an HTML markup string\n */ var toMarkup = function toMarkup(tagName) {\n    var markup = \"<\" + tagName; // Add the class\n    if (this.classes.length) {\n        markup += ' class=\"' + utils.escape(createClass(this.classes)) + '\"';\n    }\n    var styles = \"\"; // Add the styles, after hyphenation\n    for(var style in this.style){\n        if (this.style.hasOwnProperty(style)) {\n            styles += utils.hyphenate(style) + \":\" + this.style[style] + \";\";\n        }\n    }\n    if (styles) {\n        markup += ' style=\"' + utils.escape(styles) + '\"';\n    } // Add the attributes\n    for(var attr in this.attributes){\n        if (this.attributes.hasOwnProperty(attr)) {\n            markup += \" \" + attr + '=\"' + utils.escape(this.attributes[attr]) + '\"';\n        }\n    }\n    markup += \">\"; // Add the markup of the children, also as markup\n    for(var i = 0; i < this.children.length; i++){\n        markup += this.children[i].toMarkup();\n    }\n    markup += \"</\" + tagName + \">\";\n    return markup;\n}; // Making the type below exact with all optional fields doesn't work due to\n// - https://github.com/facebook/flow/issues/4582\n// - https://github.com/facebook/flow/issues/5688\n// However, since *all* fields are optional, $Shape<> works as suggested in 5688\n// above.\n// This type does not include all CSS properties. Additional properties should\n// be added as needed.\n/**\n * This node represents a span node, with a className, a list of children, and\n * an inline style. It also contains information about its height, depth, and\n * maxFontSize.\n *\n * Represents two types with different uses: SvgSpan to wrap an SVG and DomSpan\n * otherwise. This typesafety is important when HTML builders access a span's\n * children.\n */ class Span {\n    constructor(classes, children, options, style){\n        this.children = void 0;\n        this.attributes = void 0;\n        this.classes = void 0;\n        this.height = void 0;\n        this.depth = void 0;\n        this.width = void 0;\n        this.maxFontSize = void 0;\n        this.style = void 0;\n        initNode.call(this, classes, options, style);\n        this.children = children || [];\n    }\n    /**\n   * Sets an arbitrary attribute on the span. Warning: use this wisely. Not\n   * all browsers support attributes the same, and having too many custom\n   * attributes is probably bad.\n   */ setAttribute(attribute, value) {\n        this.attributes[attribute] = value;\n    }\n    hasClass(className) {\n        return utils.contains(this.classes, className);\n    }\n    toNode() {\n        return toNode.call(this, \"span\");\n    }\n    toMarkup() {\n        return toMarkup.call(this, \"span\");\n    }\n}\n/**\n * This node represents an anchor (<a>) element with a hyperlink.  See `span`\n * for further details.\n */ class Anchor {\n    constructor(href, classes, children, options){\n        this.children = void 0;\n        this.attributes = void 0;\n        this.classes = void 0;\n        this.height = void 0;\n        this.depth = void 0;\n        this.maxFontSize = void 0;\n        this.style = void 0;\n        initNode.call(this, classes, options);\n        this.children = children || [];\n        this.setAttribute(\"href\", href);\n    }\n    setAttribute(attribute, value) {\n        this.attributes[attribute] = value;\n    }\n    hasClass(className) {\n        return utils.contains(this.classes, className);\n    }\n    toNode() {\n        return toNode.call(this, \"a\");\n    }\n    toMarkup() {\n        return toMarkup.call(this, \"a\");\n    }\n}\n/**\n * This node represents an image embed (<img>) element.\n */ class Img {\n    constructor(src, alt, style){\n        this.src = void 0;\n        this.alt = void 0;\n        this.classes = void 0;\n        this.height = void 0;\n        this.depth = void 0;\n        this.maxFontSize = void 0;\n        this.style = void 0;\n        this.alt = alt;\n        this.src = src;\n        this.classes = [\n            \"mord\"\n        ];\n        this.style = style;\n    }\n    hasClass(className) {\n        return utils.contains(this.classes, className);\n    }\n    toNode() {\n        var node = document.createElement(\"img\");\n        node.src = this.src;\n        node.alt = this.alt;\n        node.className = \"mord\"; // Apply inline styles\n        for(var style in this.style){\n            if (this.style.hasOwnProperty(style)) {\n                // $FlowFixMe\n                node.style[style] = this.style[style];\n            }\n        }\n        return node;\n    }\n    toMarkup() {\n        var markup = \"<img  src='\" + this.src + \" 'alt='\" + this.alt + \"' \"; // Add the styles, after hyphenation\n        var styles = \"\";\n        for(var style in this.style){\n            if (this.style.hasOwnProperty(style)) {\n                styles += utils.hyphenate(style) + \":\" + this.style[style] + \";\";\n            }\n        }\n        if (styles) {\n            markup += ' style=\"' + utils.escape(styles) + '\"';\n        }\n        markup += \"'/>\";\n        return markup;\n    }\n}\nvar iCombinations = {\n    \"\\xee\": \"ı̂\",\n    \"\\xef\": \"ı̈\",\n    \"\\xed\": \"ı́\",\n    // 'ī': '\\u0131\\u0304', // enable when we add Extended Latin\n    \"\\xec\": \"ı̀\"\n};\n/**\n * A symbol node contains information about a single symbol. It either renders\n * to a single text node, or a span with a single text node in it, depending on\n * whether it has CSS classes, styles, or needs italic correction.\n */ class SymbolNode {\n    constructor(text, height, depth, italic, skew, width, classes, style){\n        this.text = void 0;\n        this.height = void 0;\n        this.depth = void 0;\n        this.italic = void 0;\n        this.skew = void 0;\n        this.width = void 0;\n        this.maxFontSize = void 0;\n        this.classes = void 0;\n        this.style = void 0;\n        this.text = text;\n        this.height = height || 0;\n        this.depth = depth || 0;\n        this.italic = italic || 0;\n        this.skew = skew || 0;\n        this.width = width || 0;\n        this.classes = classes || [];\n        this.style = style || {};\n        this.maxFontSize = 0; // Mark text from non-Latin scripts with specific classes so that we\n        // can specify which fonts to use.  This allows us to render these\n        // characters with a serif font in situations where the browser would\n        // either default to a sans serif or render a placeholder character.\n        // We use CSS class names like cjk_fallback, hangul_fallback and\n        // brahmic_fallback. See ./unicodeScripts.js for the set of possible\n        // script names\n        var script = scriptFromCodepoint(this.text.charCodeAt(0));\n        if (script) {\n            this.classes.push(script + \"_fallback\");\n        }\n        if (/[îïíì]/.test(this.text)) {\n            // add ī when we add Extended Latin\n            this.text = iCombinations[this.text];\n        }\n    }\n    hasClass(className) {\n        return utils.contains(this.classes, className);\n    }\n    /**\n   * Creates a text node or span from a symbol node. Note that a span is only\n   * created if it is needed.\n   */ toNode() {\n        var node = document.createTextNode(this.text);\n        var span = null;\n        if (this.italic > 0) {\n            span = document.createElement(\"span\");\n            span.style.marginRight = makeEm(this.italic);\n        }\n        if (this.classes.length > 0) {\n            span = span || document.createElement(\"span\");\n            span.className = createClass(this.classes);\n        }\n        for(var style in this.style){\n            if (this.style.hasOwnProperty(style)) {\n                span = span || document.createElement(\"span\"); // $FlowFixMe Flow doesn't seem to understand span.style's type.\n                span.style[style] = this.style[style];\n            }\n        }\n        if (span) {\n            span.appendChild(node);\n            return span;\n        } else {\n            return node;\n        }\n    }\n    /**\n   * Creates markup for a symbol node.\n   */ toMarkup() {\n        // TODO(alpert): More duplication than I'd like from\n        // span.prototype.toMarkup and symbolNode.prototype.toNode...\n        var needsSpan = false;\n        var markup = \"<span\";\n        if (this.classes.length) {\n            needsSpan = true;\n            markup += ' class=\"';\n            markup += utils.escape(createClass(this.classes));\n            markup += '\"';\n        }\n        var styles = \"\";\n        if (this.italic > 0) {\n            styles += \"margin-right:\" + this.italic + \"em;\";\n        }\n        for(var style in this.style){\n            if (this.style.hasOwnProperty(style)) {\n                styles += utils.hyphenate(style) + \":\" + this.style[style] + \";\";\n            }\n        }\n        if (styles) {\n            needsSpan = true;\n            markup += ' style=\"' + utils.escape(styles) + '\"';\n        }\n        var escaped = utils.escape(this.text);\n        if (needsSpan) {\n            markup += \">\";\n            markup += escaped;\n            markup += \"</span>\";\n            return markup;\n        } else {\n            return escaped;\n        }\n    }\n}\n/**\n * SVG nodes are used to render stretchy wide elements.\n */ class SvgNode {\n    constructor(children, attributes){\n        this.children = void 0;\n        this.attributes = void 0;\n        this.children = children || [];\n        this.attributes = attributes || {};\n    }\n    toNode() {\n        var svgNS = \"http://www.w3.org/2000/svg\";\n        var node = document.createElementNS(svgNS, \"svg\"); // Apply attributes\n        for(var attr in this.attributes){\n            if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {\n                node.setAttribute(attr, this.attributes[attr]);\n            }\n        }\n        for(var i = 0; i < this.children.length; i++){\n            node.appendChild(this.children[i].toNode());\n        }\n        return node;\n    }\n    toMarkup() {\n        var markup = '<svg xmlns=\"http://www.w3.org/2000/svg\"'; // Apply attributes\n        for(var attr in this.attributes){\n            if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {\n                markup += \" \" + attr + \"='\" + this.attributes[attr] + \"'\";\n            }\n        }\n        markup += \">\";\n        for(var i = 0; i < this.children.length; i++){\n            markup += this.children[i].toMarkup();\n        }\n        markup += \"</svg>\";\n        return markup;\n    }\n}\nclass PathNode {\n    constructor(pathName, alternate){\n        this.pathName = void 0;\n        this.alternate = void 0;\n        this.pathName = pathName;\n        this.alternate = alternate; // Used only for \\sqrt, \\phase, & tall delims\n    }\n    toNode() {\n        var svgNS = \"http://www.w3.org/2000/svg\";\n        var node = document.createElementNS(svgNS, \"path\");\n        if (this.alternate) {\n            node.setAttribute(\"d\", this.alternate);\n        } else {\n            node.setAttribute(\"d\", path[this.pathName]);\n        }\n        return node;\n    }\n    toMarkup() {\n        if (this.alternate) {\n            return \"<path d='\" + this.alternate + \"'/>\";\n        } else {\n            return \"<path d='\" + path[this.pathName] + \"'/>\";\n        }\n    }\n}\nclass LineNode {\n    constructor(attributes){\n        this.attributes = void 0;\n        this.attributes = attributes || {};\n    }\n    toNode() {\n        var svgNS = \"http://www.w3.org/2000/svg\";\n        var node = document.createElementNS(svgNS, \"line\"); // Apply attributes\n        for(var attr in this.attributes){\n            if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {\n                node.setAttribute(attr, this.attributes[attr]);\n            }\n        }\n        return node;\n    }\n    toMarkup() {\n        var markup = \"<line\";\n        for(var attr in this.attributes){\n            if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {\n                markup += \" \" + attr + \"='\" + this.attributes[attr] + \"'\";\n            }\n        }\n        markup += \"/>\";\n        return markup;\n    }\n}\nfunction assertSymbolDomNode(group) {\n    if (group instanceof SymbolNode) {\n        return group;\n    } else {\n        throw new Error(\"Expected symbolNode but got \" + String(group) + \".\");\n    }\n}\nfunction assertSpan(group) {\n    if (group instanceof Span) {\n        return group;\n    } else {\n        throw new Error(\"Expected span<HtmlDomNode> but got \" + String(group) + \".\");\n    }\n}\n/**\n * This file holds a list of all no-argument functions and single-character\n * symbols (like 'a' or ';').\n *\n * For each of the symbols, there are three properties they can have:\n * - font (required): the font to be used for this symbol. Either \"main\" (the\n     normal font), or \"ams\" (the ams fonts).\n * - group (required): the ParseNode group type the symbol should have (i.e.\n     \"textord\", \"mathord\", etc).\n     See https://github.com/KaTeX/KaTeX/wiki/Examining-TeX#group-types\n * - replace: the character that this symbol or function should be\n *   replaced with (i.e. \"\\phi\" has a replace value of \"\\u03d5\", the phi\n *   character in the main font).\n *\n * The outermost map in the table indicates what mode the symbols should be\n * accepted in (e.g. \"math\" or \"text\").\n */ // Some of these have a \"-token\" suffix since these are also used as `ParseNode`\n// types for raw text tokens, and we want to avoid conflicts with higher-level\n// `ParseNode` types. These `ParseNode`s are constructed within `Parser` by\n// looking up the `symbols` map.\nvar ATOMS = {\n    \"bin\": 1,\n    \"close\": 1,\n    \"inner\": 1,\n    \"open\": 1,\n    \"punct\": 1,\n    \"rel\": 1\n};\nvar NON_ATOMS = {\n    \"accent-token\": 1,\n    \"mathord\": 1,\n    \"op-token\": 1,\n    \"spacing\": 1,\n    \"textord\": 1\n};\nvar symbols = {\n    \"math\": {},\n    \"text\": {}\n};\n/** `acceptUnicodeChar = true` is only applicable if `replace` is set. */ function defineSymbol(mode, font, group, replace, name, acceptUnicodeChar) {\n    symbols[mode][name] = {\n        font,\n        group,\n        replace\n    };\n    if (acceptUnicodeChar && replace) {\n        symbols[mode][replace] = symbols[mode][name];\n    }\n} // Some abbreviations for commonly used strings.\n// This helps minify the code, and also spotting typos using jshint.\n// modes:\nvar math = \"math\";\nvar text = \"text\"; // fonts:\nvar main = \"main\";\nvar ams = \"ams\"; // groups:\nvar accent = \"accent-token\";\nvar bin = \"bin\";\nvar close = \"close\";\nvar inner = \"inner\";\nvar mathord = \"mathord\";\nvar op = \"op-token\";\nvar open = \"open\";\nvar punct = \"punct\";\nvar rel = \"rel\";\nvar spacing = \"spacing\";\nvar textord = \"textord\"; // Now comes the symbol table\n// Relation Symbols\ndefineSymbol(math, main, rel, \"≡\", \"\\\\equiv\", true);\ndefineSymbol(math, main, rel, \"≺\", \"\\\\prec\", true);\ndefineSymbol(math, main, rel, \"≻\", \"\\\\succ\", true);\ndefineSymbol(math, main, rel, \"∼\", \"\\\\sim\", true);\ndefineSymbol(math, main, rel, \"⊥\", \"\\\\perp\");\ndefineSymbol(math, main, rel, \"⪯\", \"\\\\preceq\", true);\ndefineSymbol(math, main, rel, \"⪰\", \"\\\\succeq\", true);\ndefineSymbol(math, main, rel, \"≃\", \"\\\\simeq\", true);\ndefineSymbol(math, main, rel, \"∣\", \"\\\\mid\", true);\ndefineSymbol(math, main, rel, \"≪\", \"\\\\ll\", true);\ndefineSymbol(math, main, rel, \"≫\", \"\\\\gg\", true);\ndefineSymbol(math, main, rel, \"≍\", \"\\\\asymp\", true);\ndefineSymbol(math, main, rel, \"∥\", \"\\\\parallel\");\ndefineSymbol(math, main, rel, \"⋈\", \"\\\\bowtie\", true);\ndefineSymbol(math, main, rel, \"⌣\", \"\\\\smile\", true);\ndefineSymbol(math, main, rel, \"⊑\", \"\\\\sqsubseteq\", true);\ndefineSymbol(math, main, rel, \"⊒\", \"\\\\sqsupseteq\", true);\ndefineSymbol(math, main, rel, \"≐\", \"\\\\doteq\", true);\ndefineSymbol(math, main, rel, \"⌢\", \"\\\\frown\", true);\ndefineSymbol(math, main, rel, \"∋\", \"\\\\ni\", true);\ndefineSymbol(math, main, rel, \"∝\", \"\\\\propto\", true);\ndefineSymbol(math, main, rel, \"⊢\", \"\\\\vdash\", true);\ndefineSymbol(math, main, rel, \"⊣\", \"\\\\dashv\", true);\ndefineSymbol(math, main, rel, \"∋\", \"\\\\owns\"); // Punctuation\ndefineSymbol(math, main, punct, \".\", \"\\\\ldotp\");\ndefineSymbol(math, main, punct, \"⋅\", \"\\\\cdotp\"); // Misc Symbols\ndefineSymbol(math, main, textord, \"#\", \"\\\\#\");\ndefineSymbol(text, main, textord, \"#\", \"\\\\#\");\ndefineSymbol(math, main, textord, \"&\", \"\\\\&\");\ndefineSymbol(text, main, textord, \"&\", \"\\\\&\");\ndefineSymbol(math, main, textord, \"ℵ\", \"\\\\aleph\", true);\ndefineSymbol(math, main, textord, \"∀\", \"\\\\forall\", true);\ndefineSymbol(math, main, textord, \"ℏ\", \"\\\\hbar\", true);\ndefineSymbol(math, main, textord, \"∃\", \"\\\\exists\", true);\ndefineSymbol(math, main, textord, \"∇\", \"\\\\nabla\", true);\ndefineSymbol(math, main, textord, \"♭\", \"\\\\flat\", true);\ndefineSymbol(math, main, textord, \"ℓ\", \"\\\\ell\", true);\ndefineSymbol(math, main, textord, \"♮\", \"\\\\natural\", true);\ndefineSymbol(math, main, textord, \"♣\", \"\\\\clubsuit\", true);\ndefineSymbol(math, main, textord, \"℘\", \"\\\\wp\", true);\ndefineSymbol(math, main, textord, \"♯\", \"\\\\sharp\", true);\ndefineSymbol(math, main, textord, \"♢\", \"\\\\diamondsuit\", true);\ndefineSymbol(math, main, textord, \"ℜ\", \"\\\\Re\", true);\ndefineSymbol(math, main, textord, \"♡\", \"\\\\heartsuit\", true);\ndefineSymbol(math, main, textord, \"ℑ\", \"\\\\Im\", true);\ndefineSymbol(math, main, textord, \"♠\", \"\\\\spadesuit\", true);\ndefineSymbol(math, main, textord, \"\\xa7\", \"\\\\S\", true);\ndefineSymbol(text, main, textord, \"\\xa7\", \"\\\\S\");\ndefineSymbol(math, main, textord, \"\\xb6\", \"\\\\P\", true);\ndefineSymbol(text, main, textord, \"\\xb6\", \"\\\\P\"); // Math and Text\ndefineSymbol(math, main, textord, \"†\", \"\\\\dag\");\ndefineSymbol(text, main, textord, \"†\", \"\\\\dag\");\ndefineSymbol(text, main, textord, \"†\", \"\\\\textdagger\");\ndefineSymbol(math, main, textord, \"‡\", \"\\\\ddag\");\ndefineSymbol(text, main, textord, \"‡\", \"\\\\ddag\");\ndefineSymbol(text, main, textord, \"‡\", \"\\\\textdaggerdbl\"); // Large Delimiters\ndefineSymbol(math, main, close, \"⎱\", \"\\\\rmoustache\", true);\ndefineSymbol(math, main, open, \"⎰\", \"\\\\lmoustache\", true);\ndefineSymbol(math, main, close, \"⟯\", \"\\\\rgroup\", true);\ndefineSymbol(math, main, open, \"⟮\", \"\\\\lgroup\", true); // Binary Operators\ndefineSymbol(math, main, bin, \"∓\", \"\\\\mp\", true);\ndefineSymbol(math, main, bin, \"⊖\", \"\\\\ominus\", true);\ndefineSymbol(math, main, bin, \"⊎\", \"\\\\uplus\", true);\ndefineSymbol(math, main, bin, \"⊓\", \"\\\\sqcap\", true);\ndefineSymbol(math, main, bin, \"∗\", \"\\\\ast\");\ndefineSymbol(math, main, bin, \"⊔\", \"\\\\sqcup\", true);\ndefineSymbol(math, main, bin, \"◯\", \"\\\\bigcirc\", true);\ndefineSymbol(math, main, bin, \"∙\", \"\\\\bullet\", true);\ndefineSymbol(math, main, bin, \"‡\", \"\\\\ddagger\");\ndefineSymbol(math, main, bin, \"≀\", \"\\\\wr\", true);\ndefineSymbol(math, main, bin, \"⨿\", \"\\\\amalg\");\ndefineSymbol(math, main, bin, \"&\", \"\\\\And\"); // from amsmath\n// Arrow Symbols\ndefineSymbol(math, main, rel, \"⟵\", \"\\\\longleftarrow\", true);\ndefineSymbol(math, main, rel, \"⇐\", \"\\\\Leftarrow\", true);\ndefineSymbol(math, main, rel, \"⟸\", \"\\\\Longleftarrow\", true);\ndefineSymbol(math, main, rel, \"⟶\", \"\\\\longrightarrow\", true);\ndefineSymbol(math, main, rel, \"⇒\", \"\\\\Rightarrow\", true);\ndefineSymbol(math, main, rel, \"⟹\", \"\\\\Longrightarrow\", true);\ndefineSymbol(math, main, rel, \"↔\", \"\\\\leftrightarrow\", true);\ndefineSymbol(math, main, rel, \"⟷\", \"\\\\longleftrightarrow\", true);\ndefineSymbol(math, main, rel, \"⇔\", \"\\\\Leftrightarrow\", true);\ndefineSymbol(math, main, rel, \"⟺\", \"\\\\Longleftrightarrow\", true);\ndefineSymbol(math, main, rel, \"↦\", \"\\\\mapsto\", true);\ndefineSymbol(math, main, rel, \"⟼\", \"\\\\longmapsto\", true);\ndefineSymbol(math, main, rel, \"↗\", \"\\\\nearrow\", true);\ndefineSymbol(math, main, rel, \"↩\", \"\\\\hookleftarrow\", true);\ndefineSymbol(math, main, rel, \"↪\", \"\\\\hookrightarrow\", true);\ndefineSymbol(math, main, rel, \"↘\", \"\\\\searrow\", true);\ndefineSymbol(math, main, rel, \"↼\", \"\\\\leftharpoonup\", true);\ndefineSymbol(math, main, rel, \"⇀\", \"\\\\rightharpoonup\", true);\ndefineSymbol(math, main, rel, \"↙\", \"\\\\swarrow\", true);\ndefineSymbol(math, main, rel, \"↽\", \"\\\\leftharpoondown\", true);\ndefineSymbol(math, main, rel, \"⇁\", \"\\\\rightharpoondown\", true);\ndefineSymbol(math, main, rel, \"↖\", \"\\\\nwarrow\", true);\ndefineSymbol(math, main, rel, \"⇌\", \"\\\\rightleftharpoons\", true); // AMS Negated Binary Relations\ndefineSymbol(math, ams, rel, \"≮\", \"\\\\nless\", true); // Symbol names preceeded by \"@\" each have a corresponding macro.\ndefineSymbol(math, ams, rel, \"\", \"\\\\@nleqslant\");\ndefineSymbol(math, ams, rel, \"\", \"\\\\@nleqq\");\ndefineSymbol(math, ams, rel, \"⪇\", \"\\\\lneq\", true);\ndefineSymbol(math, ams, rel, \"≨\", \"\\\\lneqq\", true);\ndefineSymbol(math, ams, rel, \"\", \"\\\\@lvertneqq\");\ndefineSymbol(math, ams, rel, \"⋦\", \"\\\\lnsim\", true);\ndefineSymbol(math, ams, rel, \"⪉\", \"\\\\lnapprox\", true);\ndefineSymbol(math, ams, rel, \"⊀\", \"\\\\nprec\", true); // unicode-math maps \\u22e0 to \\npreccurlyeq. We'll use the AMS synonym.\ndefineSymbol(math, ams, rel, \"⋠\", \"\\\\npreceq\", true);\ndefineSymbol(math, ams, rel, \"⋨\", \"\\\\precnsim\", true);\ndefineSymbol(math, ams, rel, \"⪹\", \"\\\\precnapprox\", true);\ndefineSymbol(math, ams, rel, \"≁\", \"\\\\nsim\", true);\ndefineSymbol(math, ams, rel, \"\", \"\\\\@nshortmid\");\ndefineSymbol(math, ams, rel, \"∤\", \"\\\\nmid\", true);\ndefineSymbol(math, ams, rel, \"⊬\", \"\\\\nvdash\", true);\ndefineSymbol(math, ams, rel, \"⊭\", \"\\\\nvDash\", true);\ndefineSymbol(math, ams, rel, \"⋪\", \"\\\\ntriangleleft\");\ndefineSymbol(math, ams, rel, \"⋬\", \"\\\\ntrianglelefteq\", true);\ndefineSymbol(math, ams, rel, \"⊊\", \"\\\\subsetneq\", true);\ndefineSymbol(math, ams, rel, \"\", \"\\\\@varsubsetneq\");\ndefineSymbol(math, ams, rel, \"⫋\", \"\\\\subsetneqq\", true);\ndefineSymbol(math, ams, rel, \"\", \"\\\\@varsubsetneqq\");\ndefineSymbol(math, ams, rel, \"≯\", \"\\\\ngtr\", true);\ndefineSymbol(math, ams, rel, \"\", \"\\\\@ngeqslant\");\ndefineSymbol(math, ams, rel, \"\", \"\\\\@ngeqq\");\ndefineSymbol(math, ams, rel, \"⪈\", \"\\\\gneq\", true);\ndefineSymbol(math, ams, rel, \"≩\", \"\\\\gneqq\", true);\ndefineSymbol(math, ams, rel, \"\", \"\\\\@gvertneqq\");\ndefineSymbol(math, ams, rel, \"⋧\", \"\\\\gnsim\", true);\ndefineSymbol(math, ams, rel, \"⪊\", \"\\\\gnapprox\", true);\ndefineSymbol(math, ams, rel, \"⊁\", \"\\\\nsucc\", true); // unicode-math maps \\u22e1 to \\nsucccurlyeq. We'll use the AMS synonym.\ndefineSymbol(math, ams, rel, \"⋡\", \"\\\\nsucceq\", true);\ndefineSymbol(math, ams, rel, \"⋩\", \"\\\\succnsim\", true);\ndefineSymbol(math, ams, rel, \"⪺\", \"\\\\succnapprox\", true); // unicode-math maps \\u2246 to \\simneqq. We'll use the AMS synonym.\ndefineSymbol(math, ams, rel, \"≆\", \"\\\\ncong\", true);\ndefineSymbol(math, ams, rel, \"\", \"\\\\@nshortparallel\");\ndefineSymbol(math, ams, rel, \"∦\", \"\\\\nparallel\", true);\ndefineSymbol(math, ams, rel, \"⊯\", \"\\\\nVDash\", true);\ndefineSymbol(math, ams, rel, \"⋫\", \"\\\\ntriangleright\");\ndefineSymbol(math, ams, rel, \"⋭\", \"\\\\ntrianglerighteq\", true);\ndefineSymbol(math, ams, rel, \"\", \"\\\\@nsupseteqq\");\ndefineSymbol(math, ams, rel, \"⊋\", \"\\\\supsetneq\", true);\ndefineSymbol(math, ams, rel, \"\", \"\\\\@varsupsetneq\");\ndefineSymbol(math, ams, rel, \"⫌\", \"\\\\supsetneqq\", true);\ndefineSymbol(math, ams, rel, \"\", \"\\\\@varsupsetneqq\");\ndefineSymbol(math, ams, rel, \"⊮\", \"\\\\nVdash\", true);\ndefineSymbol(math, ams, rel, \"⪵\", \"\\\\precneqq\", true);\ndefineSymbol(math, ams, rel, \"⪶\", \"\\\\succneqq\", true);\ndefineSymbol(math, ams, rel, \"\", \"\\\\@nsubseteqq\");\ndefineSymbol(math, ams, bin, \"⊴\", \"\\\\unlhd\");\ndefineSymbol(math, ams, bin, \"⊵\", \"\\\\unrhd\"); // AMS Negated Arrows\ndefineSymbol(math, ams, rel, \"↚\", \"\\\\nleftarrow\", true);\ndefineSymbol(math, ams, rel, \"↛\", \"\\\\nrightarrow\", true);\ndefineSymbol(math, ams, rel, \"⇍\", \"\\\\nLeftarrow\", true);\ndefineSymbol(math, ams, rel, \"⇏\", \"\\\\nRightarrow\", true);\ndefineSymbol(math, ams, rel, \"↮\", \"\\\\nleftrightarrow\", true);\ndefineSymbol(math, ams, rel, \"⇎\", \"\\\\nLeftrightarrow\", true); // AMS Misc\ndefineSymbol(math, ams, rel, \"△\", \"\\\\vartriangle\");\ndefineSymbol(math, ams, textord, \"ℏ\", \"\\\\hslash\");\ndefineSymbol(math, ams, textord, \"▽\", \"\\\\triangledown\");\ndefineSymbol(math, ams, textord, \"◊\", \"\\\\lozenge\");\ndefineSymbol(math, ams, textord, \"Ⓢ\", \"\\\\circledS\");\ndefineSymbol(math, ams, textord, \"\\xae\", \"\\\\circledR\");\ndefineSymbol(text, ams, textord, \"\\xae\", \"\\\\circledR\");\ndefineSymbol(math, ams, textord, \"∡\", \"\\\\measuredangle\", true);\ndefineSymbol(math, ams, textord, \"∄\", \"\\\\nexists\");\ndefineSymbol(math, ams, textord, \"℧\", \"\\\\mho\");\ndefineSymbol(math, ams, textord, \"Ⅎ\", \"\\\\Finv\", true);\ndefineSymbol(math, ams, textord, \"⅁\", \"\\\\Game\", true);\ndefineSymbol(math, ams, textord, \"‵\", \"\\\\backprime\");\ndefineSymbol(math, ams, textord, \"▲\", \"\\\\blacktriangle\");\ndefineSymbol(math, ams, textord, \"▼\", \"\\\\blacktriangledown\");\ndefineSymbol(math, ams, textord, \"■\", \"\\\\blacksquare\");\ndefineSymbol(math, ams, textord, \"⧫\", \"\\\\blacklozenge\");\ndefineSymbol(math, ams, textord, \"★\", \"\\\\bigstar\");\ndefineSymbol(math, ams, textord, \"∢\", \"\\\\sphericalangle\", true);\ndefineSymbol(math, ams, textord, \"∁\", \"\\\\complement\", true); // unicode-math maps U+F0 to \\matheth. We map to AMS function \\eth\ndefineSymbol(math, ams, textord, \"\\xf0\", \"\\\\eth\", true);\ndefineSymbol(text, main, textord, \"\\xf0\", \"\\xf0\");\ndefineSymbol(math, ams, textord, \"╱\", \"\\\\diagup\");\ndefineSymbol(math, ams, textord, \"╲\", \"\\\\diagdown\");\ndefineSymbol(math, ams, textord, \"□\", \"\\\\square\");\ndefineSymbol(math, ams, textord, \"□\", \"\\\\Box\");\ndefineSymbol(math, ams, textord, \"◊\", \"\\\\Diamond\"); // unicode-math maps U+A5 to \\mathyen. We map to AMS function \\yen\ndefineSymbol(math, ams, textord, \"\\xa5\", \"\\\\yen\", true);\ndefineSymbol(text, ams, textord, \"\\xa5\", \"\\\\yen\", true);\ndefineSymbol(math, ams, textord, \"✓\", \"\\\\checkmark\", true);\ndefineSymbol(text, ams, textord, \"✓\", \"\\\\checkmark\"); // AMS Hebrew\ndefineSymbol(math, ams, textord, \"ℶ\", \"\\\\beth\", true);\ndefineSymbol(math, ams, textord, \"ℸ\", \"\\\\daleth\", true);\ndefineSymbol(math, ams, textord, \"ℷ\", \"\\\\gimel\", true); // AMS Greek\ndefineSymbol(math, ams, textord, \"ϝ\", \"\\\\digamma\", true);\ndefineSymbol(math, ams, textord, \"ϰ\", \"\\\\varkappa\"); // AMS Delimiters\ndefineSymbol(math, ams, open, \"┌\", \"\\\\@ulcorner\", true);\ndefineSymbol(math, ams, close, \"┐\", \"\\\\@urcorner\", true);\ndefineSymbol(math, ams, open, \"└\", \"\\\\@llcorner\", true);\ndefineSymbol(math, ams, close, \"┘\", \"\\\\@lrcorner\", true); // AMS Binary Relations\ndefineSymbol(math, ams, rel, \"≦\", \"\\\\leqq\", true);\ndefineSymbol(math, ams, rel, \"⩽\", \"\\\\leqslant\", true);\ndefineSymbol(math, ams, rel, \"⪕\", \"\\\\eqslantless\", true);\ndefineSymbol(math, ams, rel, \"≲\", \"\\\\lesssim\", true);\ndefineSymbol(math, ams, rel, \"⪅\", \"\\\\lessapprox\", true);\ndefineSymbol(math, ams, rel, \"≊\", \"\\\\approxeq\", true);\ndefineSymbol(math, ams, bin, \"⋖\", \"\\\\lessdot\");\ndefineSymbol(math, ams, rel, \"⋘\", \"\\\\lll\", true);\ndefineSymbol(math, ams, rel, \"≶\", \"\\\\lessgtr\", true);\ndefineSymbol(math, ams, rel, \"⋚\", \"\\\\lesseqgtr\", true);\ndefineSymbol(math, ams, rel, \"⪋\", \"\\\\lesseqqgtr\", true);\ndefineSymbol(math, ams, rel, \"≑\", \"\\\\doteqdot\");\ndefineSymbol(math, ams, rel, \"≓\", \"\\\\risingdotseq\", true);\ndefineSymbol(math, ams, rel, \"≒\", \"\\\\fallingdotseq\", true);\ndefineSymbol(math, ams, rel, \"∽\", \"\\\\backsim\", true);\ndefineSymbol(math, ams, rel, \"⋍\", \"\\\\backsimeq\", true);\ndefineSymbol(math, ams, rel, \"⫅\", \"\\\\subseteqq\", true);\ndefineSymbol(math, ams, rel, \"⋐\", \"\\\\Subset\", true);\ndefineSymbol(math, ams, rel, \"⊏\", \"\\\\sqsubset\", true);\ndefineSymbol(math, ams, rel, \"≼\", \"\\\\preccurlyeq\", true);\ndefineSymbol(math, ams, rel, \"⋞\", \"\\\\curlyeqprec\", true);\ndefineSymbol(math, ams, rel, \"≾\", \"\\\\precsim\", true);\ndefineSymbol(math, ams, rel, \"⪷\", \"\\\\precapprox\", true);\ndefineSymbol(math, ams, rel, \"⊲\", \"\\\\vartriangleleft\");\ndefineSymbol(math, ams, rel, \"⊴\", \"\\\\trianglelefteq\");\ndefineSymbol(math, ams, rel, \"⊨\", \"\\\\vDash\", true);\ndefineSymbol(math, ams, rel, \"⊪\", \"\\\\Vvdash\", true);\ndefineSymbol(math, ams, rel, \"⌣\", \"\\\\smallsmile\");\ndefineSymbol(math, ams, rel, \"⌢\", \"\\\\smallfrown\");\ndefineSymbol(math, ams, rel, \"≏\", \"\\\\bumpeq\", true);\ndefineSymbol(math, ams, rel, \"≎\", \"\\\\Bumpeq\", true);\ndefineSymbol(math, ams, rel, \"≧\", \"\\\\geqq\", true);\ndefineSymbol(math, ams, rel, \"⩾\", \"\\\\geqslant\", true);\ndefineSymbol(math, ams, rel, \"⪖\", \"\\\\eqslantgtr\", true);\ndefineSymbol(math, ams, rel, \"≳\", \"\\\\gtrsim\", true);\ndefineSymbol(math, ams, rel, \"⪆\", \"\\\\gtrapprox\", true);\ndefineSymbol(math, ams, bin, \"⋗\", \"\\\\gtrdot\");\ndefineSymbol(math, ams, rel, \"⋙\", \"\\\\ggg\", true);\ndefineSymbol(math, ams, rel, \"≷\", \"\\\\gtrless\", true);\ndefineSymbol(math, ams, rel, \"⋛\", \"\\\\gtreqless\", true);\ndefineSymbol(math, ams, rel, \"⪌\", \"\\\\gtreqqless\", true);\ndefineSymbol(math, ams, rel, \"≖\", \"\\\\eqcirc\", true);\ndefineSymbol(math, ams, rel, \"≗\", \"\\\\circeq\", true);\ndefineSymbol(math, ams, rel, \"≜\", \"\\\\triangleq\", true);\ndefineSymbol(math, ams, rel, \"∼\", \"\\\\thicksim\");\ndefineSymbol(math, ams, rel, \"≈\", \"\\\\thickapprox\");\ndefineSymbol(math, ams, rel, \"⫆\", \"\\\\supseteqq\", true);\ndefineSymbol(math, ams, rel, \"⋑\", \"\\\\Supset\", true);\ndefineSymbol(math, ams, rel, \"⊐\", \"\\\\sqsupset\", true);\ndefineSymbol(math, ams, rel, \"≽\", \"\\\\succcurlyeq\", true);\ndefineSymbol(math, ams, rel, \"⋟\", \"\\\\curlyeqsucc\", true);\ndefineSymbol(math, ams, rel, \"≿\", \"\\\\succsim\", true);\ndefineSymbol(math, ams, rel, \"⪸\", \"\\\\succapprox\", true);\ndefineSymbol(math, ams, rel, \"⊳\", \"\\\\vartriangleright\");\ndefineSymbol(math, ams, rel, \"⊵\", \"\\\\trianglerighteq\");\ndefineSymbol(math, ams, rel, \"⊩\", \"\\\\Vdash\", true);\ndefineSymbol(math, ams, rel, \"∣\", \"\\\\shortmid\");\ndefineSymbol(math, ams, rel, \"∥\", \"\\\\shortparallel\");\ndefineSymbol(math, ams, rel, \"≬\", \"\\\\between\", true);\ndefineSymbol(math, ams, rel, \"⋔\", \"\\\\pitchfork\", true);\ndefineSymbol(math, ams, rel, \"∝\", \"\\\\varpropto\");\ndefineSymbol(math, ams, rel, \"◀\", \"\\\\blacktriangleleft\"); // unicode-math says that \\therefore is a mathord atom.\n// We kept the amssymb atom type, which is rel.\ndefineSymbol(math, ams, rel, \"∴\", \"\\\\therefore\", true);\ndefineSymbol(math, ams, rel, \"∍\", \"\\\\backepsilon\");\ndefineSymbol(math, ams, rel, \"▶\", \"\\\\blacktriangleright\"); // unicode-math says that \\because is a mathord atom.\n// We kept the amssymb atom type, which is rel.\ndefineSymbol(math, ams, rel, \"∵\", \"\\\\because\", true);\ndefineSymbol(math, ams, rel, \"⋘\", \"\\\\llless\");\ndefineSymbol(math, ams, rel, \"⋙\", \"\\\\gggtr\");\ndefineSymbol(math, ams, bin, \"⊲\", \"\\\\lhd\");\ndefineSymbol(math, ams, bin, \"⊳\", \"\\\\rhd\");\ndefineSymbol(math, ams, rel, \"≂\", \"\\\\eqsim\", true);\ndefineSymbol(math, main, rel, \"⋈\", \"\\\\Join\");\ndefineSymbol(math, ams, rel, \"≑\", \"\\\\Doteq\", true); // AMS Binary Operators\ndefineSymbol(math, ams, bin, \"∔\", \"\\\\dotplus\", true);\ndefineSymbol(math, ams, bin, \"∖\", \"\\\\smallsetminus\");\ndefineSymbol(math, ams, bin, \"⋒\", \"\\\\Cap\", true);\ndefineSymbol(math, ams, bin, \"⋓\", \"\\\\Cup\", true);\ndefineSymbol(math, ams, bin, \"⩞\", \"\\\\doublebarwedge\", true);\ndefineSymbol(math, ams, bin, \"⊟\", \"\\\\boxminus\", true);\ndefineSymbol(math, ams, bin, \"⊞\", \"\\\\boxplus\", true);\ndefineSymbol(math, ams, bin, \"⋇\", \"\\\\divideontimes\", true);\ndefineSymbol(math, ams, bin, \"⋉\", \"\\\\ltimes\", true);\ndefineSymbol(math, ams, bin, \"⋊\", \"\\\\rtimes\", true);\ndefineSymbol(math, ams, bin, \"⋋\", \"\\\\leftthreetimes\", true);\ndefineSymbol(math, ams, bin, \"⋌\", \"\\\\rightthreetimes\", true);\ndefineSymbol(math, ams, bin, \"⋏\", \"\\\\curlywedge\", true);\ndefineSymbol(math, ams, bin, \"⋎\", \"\\\\curlyvee\", true);\ndefineSymbol(math, ams, bin, \"⊝\", \"\\\\circleddash\", true);\ndefineSymbol(math, ams, bin, \"⊛\", \"\\\\circledast\", true);\ndefineSymbol(math, ams, bin, \"⋅\", \"\\\\centerdot\");\ndefineSymbol(math, ams, bin, \"⊺\", \"\\\\intercal\", true);\ndefineSymbol(math, ams, bin, \"⋒\", \"\\\\doublecap\");\ndefineSymbol(math, ams, bin, \"⋓\", \"\\\\doublecup\");\ndefineSymbol(math, ams, bin, \"⊠\", \"\\\\boxtimes\", true); // AMS Arrows\n// Note: unicode-math maps \\u21e2 to their own function \\rightdasharrow.\n// We'll map it to AMS function \\dashrightarrow. It produces the same atom.\ndefineSymbol(math, ams, rel, \"⇢\", \"\\\\dashrightarrow\", true); // unicode-math maps \\u21e0 to \\leftdasharrow. We'll use the AMS synonym.\ndefineSymbol(math, ams, rel, \"⇠\", \"\\\\dashleftarrow\", true);\ndefineSymbol(math, ams, rel, \"⇇\", \"\\\\leftleftarrows\", true);\ndefineSymbol(math, ams, rel, \"⇆\", \"\\\\leftrightarrows\", true);\ndefineSymbol(math, ams, rel, \"⇚\", \"\\\\Lleftarrow\", true);\ndefineSymbol(math, ams, rel, \"↞\", \"\\\\twoheadleftarrow\", true);\ndefineSymbol(math, ams, rel, \"↢\", \"\\\\leftarrowtail\", true);\ndefineSymbol(math, ams, rel, \"↫\", \"\\\\looparrowleft\", true);\ndefineSymbol(math, ams, rel, \"⇋\", \"\\\\leftrightharpoons\", true);\ndefineSymbol(math, ams, rel, \"↶\", \"\\\\curvearrowleft\", true); // unicode-math maps \\u21ba to \\acwopencirclearrow. We'll use the AMS synonym.\ndefineSymbol(math, ams, rel, \"↺\", \"\\\\circlearrowleft\", true);\ndefineSymbol(math, ams, rel, \"↰\", \"\\\\Lsh\", true);\ndefineSymbol(math, ams, rel, \"⇈\", \"\\\\upuparrows\", true);\ndefineSymbol(math, ams, rel, \"↿\", \"\\\\upharpoonleft\", true);\ndefineSymbol(math, ams, rel, \"⇃\", \"\\\\downharpoonleft\", true);\ndefineSymbol(math, main, rel, \"⊶\", \"\\\\origof\", true); // not in font\ndefineSymbol(math, main, rel, \"⊷\", \"\\\\imageof\", true); // not in font\ndefineSymbol(math, ams, rel, \"⊸\", \"\\\\multimap\", true);\ndefineSymbol(math, ams, rel, \"↭\", \"\\\\leftrightsquigarrow\", true);\ndefineSymbol(math, ams, rel, \"⇉\", \"\\\\rightrightarrows\", true);\ndefineSymbol(math, ams, rel, \"⇄\", \"\\\\rightleftarrows\", true);\ndefineSymbol(math, ams, rel, \"↠\", \"\\\\twoheadrightarrow\", true);\ndefineSymbol(math, ams, rel, \"↣\", \"\\\\rightarrowtail\", true);\ndefineSymbol(math, ams, rel, \"↬\", \"\\\\looparrowright\", true);\ndefineSymbol(math, ams, rel, \"↷\", \"\\\\curvearrowright\", true); // unicode-math maps \\u21bb to \\cwopencirclearrow. We'll use the AMS synonym.\ndefineSymbol(math, ams, rel, \"↻\", \"\\\\circlearrowright\", true);\ndefineSymbol(math, ams, rel, \"↱\", \"\\\\Rsh\", true);\ndefineSymbol(math, ams, rel, \"⇊\", \"\\\\downdownarrows\", true);\ndefineSymbol(math, ams, rel, \"↾\", \"\\\\upharpoonright\", true);\ndefineSymbol(math, ams, rel, \"⇂\", \"\\\\downharpoonright\", true);\ndefineSymbol(math, ams, rel, \"⇝\", \"\\\\rightsquigarrow\", true);\ndefineSymbol(math, ams, rel, \"⇝\", \"\\\\leadsto\");\ndefineSymbol(math, ams, rel, \"⇛\", \"\\\\Rrightarrow\", true);\ndefineSymbol(math, ams, rel, \"↾\", \"\\\\restriction\");\ndefineSymbol(math, main, textord, \"‘\", \"`\");\ndefineSymbol(math, main, textord, \"$\", \"\\\\$\");\ndefineSymbol(text, main, textord, \"$\", \"\\\\$\");\ndefineSymbol(text, main, textord, \"$\", \"\\\\textdollar\");\ndefineSymbol(math, main, textord, \"%\", \"\\\\%\");\ndefineSymbol(text, main, textord, \"%\", \"\\\\%\");\ndefineSymbol(math, main, textord, \"_\", \"\\\\_\");\ndefineSymbol(text, main, textord, \"_\", \"\\\\_\");\ndefineSymbol(text, main, textord, \"_\", \"\\\\textunderscore\");\ndefineSymbol(math, main, textord, \"∠\", \"\\\\angle\", true);\ndefineSymbol(math, main, textord, \"∞\", \"\\\\infty\", true);\ndefineSymbol(math, main, textord, \"′\", \"\\\\prime\");\ndefineSymbol(math, main, textord, \"△\", \"\\\\triangle\");\ndefineSymbol(math, main, textord, \"Γ\", \"\\\\Gamma\", true);\ndefineSymbol(math, main, textord, \"Δ\", \"\\\\Delta\", true);\ndefineSymbol(math, main, textord, \"Θ\", \"\\\\Theta\", true);\ndefineSymbol(math, main, textord, \"Λ\", \"\\\\Lambda\", true);\ndefineSymbol(math, main, textord, \"Ξ\", \"\\\\Xi\", true);\ndefineSymbol(math, main, textord, \"Π\", \"\\\\Pi\", true);\ndefineSymbol(math, main, textord, \"Σ\", \"\\\\Sigma\", true);\ndefineSymbol(math, main, textord, \"Υ\", \"\\\\Upsilon\", true);\ndefineSymbol(math, main, textord, \"Φ\", \"\\\\Phi\", true);\ndefineSymbol(math, main, textord, \"Ψ\", \"\\\\Psi\", true);\ndefineSymbol(math, main, textord, \"Ω\", \"\\\\Omega\", true);\ndefineSymbol(math, main, textord, \"A\", \"Α\");\ndefineSymbol(math, main, textord, \"B\", \"Β\");\ndefineSymbol(math, main, textord, \"E\", \"Ε\");\ndefineSymbol(math, main, textord, \"Z\", \"Ζ\");\ndefineSymbol(math, main, textord, \"H\", \"Η\");\ndefineSymbol(math, main, textord, \"I\", \"Ι\");\ndefineSymbol(math, main, textord, \"K\", \"Κ\");\ndefineSymbol(math, main, textord, \"M\", \"Μ\");\ndefineSymbol(math, main, textord, \"N\", \"Ν\");\ndefineSymbol(math, main, textord, \"O\", \"Ο\");\ndefineSymbol(math, main, textord, \"P\", \"Ρ\");\ndefineSymbol(math, main, textord, \"T\", \"Τ\");\ndefineSymbol(math, main, textord, \"X\", \"Χ\");\ndefineSymbol(math, main, textord, \"\\xac\", \"\\\\neg\", true);\ndefineSymbol(math, main, textord, \"\\xac\", \"\\\\lnot\");\ndefineSymbol(math, main, textord, \"⊤\", \"\\\\top\");\ndefineSymbol(math, main, textord, \"⊥\", \"\\\\bot\");\ndefineSymbol(math, main, textord, \"∅\", \"\\\\emptyset\");\ndefineSymbol(math, ams, textord, \"∅\", \"\\\\varnothing\");\ndefineSymbol(math, main, mathord, \"α\", \"\\\\alpha\", true);\ndefineSymbol(math, main, mathord, \"β\", \"\\\\beta\", true);\ndefineSymbol(math, main, mathord, \"γ\", \"\\\\gamma\", true);\ndefineSymbol(math, main, mathord, \"δ\", \"\\\\delta\", true);\ndefineSymbol(math, main, mathord, \"ϵ\", \"\\\\epsilon\", true);\ndefineSymbol(math, main, mathord, \"ζ\", \"\\\\zeta\", true);\ndefineSymbol(math, main, mathord, \"η\", \"\\\\eta\", true);\ndefineSymbol(math, main, mathord, \"θ\", \"\\\\theta\", true);\ndefineSymbol(math, main, mathord, \"ι\", \"\\\\iota\", true);\ndefineSymbol(math, main, mathord, \"κ\", \"\\\\kappa\", true);\ndefineSymbol(math, main, mathord, \"λ\", \"\\\\lambda\", true);\ndefineSymbol(math, main, mathord, \"μ\", \"\\\\mu\", true);\ndefineSymbol(math, main, mathord, \"ν\", \"\\\\nu\", true);\ndefineSymbol(math, main, mathord, \"ξ\", \"\\\\xi\", true);\ndefineSymbol(math, main, mathord, \"ο\", \"\\\\omicron\", true);\ndefineSymbol(math, main, mathord, \"π\", \"\\\\pi\", true);\ndefineSymbol(math, main, mathord, \"ρ\", \"\\\\rho\", true);\ndefineSymbol(math, main, mathord, \"σ\", \"\\\\sigma\", true);\ndefineSymbol(math, main, mathord, \"τ\", \"\\\\tau\", true);\ndefineSymbol(math, main, mathord, \"υ\", \"\\\\upsilon\", true);\ndefineSymbol(math, main, mathord, \"ϕ\", \"\\\\phi\", true);\ndefineSymbol(math, main, mathord, \"χ\", \"\\\\chi\", true);\ndefineSymbol(math, main, mathord, \"ψ\", \"\\\\psi\", true);\ndefineSymbol(math, main, mathord, \"ω\", \"\\\\omega\", true);\ndefineSymbol(math, main, mathord, \"ε\", \"\\\\varepsilon\", true);\ndefineSymbol(math, main, mathord, \"ϑ\", \"\\\\vartheta\", true);\ndefineSymbol(math, main, mathord, \"ϖ\", \"\\\\varpi\", true);\ndefineSymbol(math, main, mathord, \"ϱ\", \"\\\\varrho\", true);\ndefineSymbol(math, main, mathord, \"ς\", \"\\\\varsigma\", true);\ndefineSymbol(math, main, mathord, \"φ\", \"\\\\varphi\", true);\ndefineSymbol(math, main, bin, \"∗\", \"*\", true);\ndefineSymbol(math, main, bin, \"+\", \"+\");\ndefineSymbol(math, main, bin, \"−\", \"-\", true);\ndefineSymbol(math, main, bin, \"⋅\", \"\\\\cdot\", true);\ndefineSymbol(math, main, bin, \"∘\", \"\\\\circ\", true);\ndefineSymbol(math, main, bin, \"\\xf7\", \"\\\\div\", true);\ndefineSymbol(math, main, bin, \"\\xb1\", \"\\\\pm\", true);\ndefineSymbol(math, main, bin, \"\\xd7\", \"\\\\times\", true);\ndefineSymbol(math, main, bin, \"∩\", \"\\\\cap\", true);\ndefineSymbol(math, main, bin, \"∪\", \"\\\\cup\", true);\ndefineSymbol(math, main, bin, \"∖\", \"\\\\setminus\", true);\ndefineSymbol(math, main, bin, \"∧\", \"\\\\land\");\ndefineSymbol(math, main, bin, \"∨\", \"\\\\lor\");\ndefineSymbol(math, main, bin, \"∧\", \"\\\\wedge\", true);\ndefineSymbol(math, main, bin, \"∨\", \"\\\\vee\", true);\ndefineSymbol(math, main, textord, \"√\", \"\\\\surd\");\ndefineSymbol(math, main, open, \"⟨\", \"\\\\langle\", true);\ndefineSymbol(math, main, open, \"∣\", \"\\\\lvert\");\ndefineSymbol(math, main, open, \"∥\", \"\\\\lVert\");\ndefineSymbol(math, main, close, \"?\", \"?\");\ndefineSymbol(math, main, close, \"!\", \"!\");\ndefineSymbol(math, main, close, \"⟩\", \"\\\\rangle\", true);\ndefineSymbol(math, main, close, \"∣\", \"\\\\rvert\");\ndefineSymbol(math, main, close, \"∥\", \"\\\\rVert\");\ndefineSymbol(math, main, rel, \"=\", \"=\");\ndefineSymbol(math, main, rel, \":\", \":\");\ndefineSymbol(math, main, rel, \"≈\", \"\\\\approx\", true);\ndefineSymbol(math, main, rel, \"≅\", \"\\\\cong\", true);\ndefineSymbol(math, main, rel, \"≥\", \"\\\\ge\");\ndefineSymbol(math, main, rel, \"≥\", \"\\\\geq\", true);\ndefineSymbol(math, main, rel, \"←\", \"\\\\gets\");\ndefineSymbol(math, main, rel, \">\", \"\\\\gt\", true);\ndefineSymbol(math, main, rel, \"∈\", \"\\\\in\", true);\ndefineSymbol(math, main, rel, \"\", \"\\\\@not\");\ndefineSymbol(math, main, rel, \"⊂\", \"\\\\subset\", true);\ndefineSymbol(math, main, rel, \"⊃\", \"\\\\supset\", true);\ndefineSymbol(math, main, rel, \"⊆\", \"\\\\subseteq\", true);\ndefineSymbol(math, main, rel, \"⊇\", \"\\\\supseteq\", true);\ndefineSymbol(math, ams, rel, \"⊈\", \"\\\\nsubseteq\", true);\ndefineSymbol(math, ams, rel, \"⊉\", \"\\\\nsupseteq\", true);\ndefineSymbol(math, main, rel, \"⊨\", \"\\\\models\");\ndefineSymbol(math, main, rel, \"←\", \"\\\\leftarrow\", true);\ndefineSymbol(math, main, rel, \"≤\", \"\\\\le\");\ndefineSymbol(math, main, rel, \"≤\", \"\\\\leq\", true);\ndefineSymbol(math, main, rel, \"<\", \"\\\\lt\", true);\ndefineSymbol(math, main, rel, \"→\", \"\\\\rightarrow\", true);\ndefineSymbol(math, main, rel, \"→\", \"\\\\to\");\ndefineSymbol(math, ams, rel, \"≱\", \"\\\\ngeq\", true);\ndefineSymbol(math, ams, rel, \"≰\", \"\\\\nleq\", true);\ndefineSymbol(math, main, spacing, \"\\xa0\", \"\\\\ \");\ndefineSymbol(math, main, spacing, \"\\xa0\", \"\\\\space\"); // Ref: LaTeX Source 2e: \\DeclareRobustCommand{\\nobreakspace}{%\ndefineSymbol(math, main, spacing, \"\\xa0\", \"\\\\nobreakspace\");\ndefineSymbol(text, main, spacing, \"\\xa0\", \"\\\\ \");\ndefineSymbol(text, main, spacing, \"\\xa0\", \" \");\ndefineSymbol(text, main, spacing, \"\\xa0\", \"\\\\space\");\ndefineSymbol(text, main, spacing, \"\\xa0\", \"\\\\nobreakspace\");\ndefineSymbol(math, main, spacing, null, \"\\\\nobreak\");\ndefineSymbol(math, main, spacing, null, \"\\\\allowbreak\");\ndefineSymbol(math, main, punct, \",\", \",\");\ndefineSymbol(math, main, punct, \";\", \";\");\ndefineSymbol(math, ams, bin, \"⊼\", \"\\\\barwedge\", true);\ndefineSymbol(math, ams, bin, \"⊻\", \"\\\\veebar\", true);\ndefineSymbol(math, main, bin, \"⊙\", \"\\\\odot\", true);\ndefineSymbol(math, main, bin, \"⊕\", \"\\\\oplus\", true);\ndefineSymbol(math, main, bin, \"⊗\", \"\\\\otimes\", true);\ndefineSymbol(math, main, textord, \"∂\", \"\\\\partial\", true);\ndefineSymbol(math, main, bin, \"⊘\", \"\\\\oslash\", true);\ndefineSymbol(math, ams, bin, \"⊚\", \"\\\\circledcirc\", true);\ndefineSymbol(math, ams, bin, \"⊡\", \"\\\\boxdot\", true);\ndefineSymbol(math, main, bin, \"△\", \"\\\\bigtriangleup\");\ndefineSymbol(math, main, bin, \"▽\", \"\\\\bigtriangledown\");\ndefineSymbol(math, main, bin, \"†\", \"\\\\dagger\");\ndefineSymbol(math, main, bin, \"⋄\", \"\\\\diamond\");\ndefineSymbol(math, main, bin, \"⋆\", \"\\\\star\");\ndefineSymbol(math, main, bin, \"◃\", \"\\\\triangleleft\");\ndefineSymbol(math, main, bin, \"▹\", \"\\\\triangleright\");\ndefineSymbol(math, main, open, \"{\", \"\\\\{\");\ndefineSymbol(text, main, textord, \"{\", \"\\\\{\");\ndefineSymbol(text, main, textord, \"{\", \"\\\\textbraceleft\");\ndefineSymbol(math, main, close, \"}\", \"\\\\}\");\ndefineSymbol(text, main, textord, \"}\", \"\\\\}\");\ndefineSymbol(text, main, textord, \"}\", \"\\\\textbraceright\");\ndefineSymbol(math, main, open, \"{\", \"\\\\lbrace\");\ndefineSymbol(math, main, close, \"}\", \"\\\\rbrace\");\ndefineSymbol(math, main, open, \"[\", \"\\\\lbrack\", true);\ndefineSymbol(text, main, textord, \"[\", \"\\\\lbrack\", true);\ndefineSymbol(math, main, close, \"]\", \"\\\\rbrack\", true);\ndefineSymbol(text, main, textord, \"]\", \"\\\\rbrack\", true);\ndefineSymbol(math, main, open, \"(\", \"\\\\lparen\", true);\ndefineSymbol(math, main, close, \")\", \"\\\\rparen\", true);\ndefineSymbol(text, main, textord, \"<\", \"\\\\textless\", true); // in T1 fontenc\ndefineSymbol(text, main, textord, \">\", \"\\\\textgreater\", true); // in T1 fontenc\ndefineSymbol(math, main, open, \"⌊\", \"\\\\lfloor\", true);\ndefineSymbol(math, main, close, \"⌋\", \"\\\\rfloor\", true);\ndefineSymbol(math, main, open, \"⌈\", \"\\\\lceil\", true);\ndefineSymbol(math, main, close, \"⌉\", \"\\\\rceil\", true);\ndefineSymbol(math, main, textord, \"\\\\\", \"\\\\backslash\");\ndefineSymbol(math, main, textord, \"∣\", \"|\");\ndefineSymbol(math, main, textord, \"∣\", \"\\\\vert\");\ndefineSymbol(text, main, textord, \"|\", \"\\\\textbar\", true); // in T1 fontenc\ndefineSymbol(math, main, textord, \"∥\", \"\\\\|\");\ndefineSymbol(math, main, textord, \"∥\", \"\\\\Vert\");\ndefineSymbol(text, main, textord, \"∥\", \"\\\\textbardbl\");\ndefineSymbol(text, main, textord, \"~\", \"\\\\textasciitilde\");\ndefineSymbol(text, main, textord, \"\\\\\", \"\\\\textbackslash\");\ndefineSymbol(text, main, textord, \"^\", \"\\\\textasciicircum\");\ndefineSymbol(math, main, rel, \"↑\", \"\\\\uparrow\", true);\ndefineSymbol(math, main, rel, \"⇑\", \"\\\\Uparrow\", true);\ndefineSymbol(math, main, rel, \"↓\", \"\\\\downarrow\", true);\ndefineSymbol(math, main, rel, \"⇓\", \"\\\\Downarrow\", true);\ndefineSymbol(math, main, rel, \"↕\", \"\\\\updownarrow\", true);\ndefineSymbol(math, main, rel, \"⇕\", \"\\\\Updownarrow\", true);\ndefineSymbol(math, main, op, \"∐\", \"\\\\coprod\");\ndefineSymbol(math, main, op, \"⋁\", \"\\\\bigvee\");\ndefineSymbol(math, main, op, \"⋀\", \"\\\\bigwedge\");\ndefineSymbol(math, main, op, \"⨄\", \"\\\\biguplus\");\ndefineSymbol(math, main, op, \"⋂\", \"\\\\bigcap\");\ndefineSymbol(math, main, op, \"⋃\", \"\\\\bigcup\");\ndefineSymbol(math, main, op, \"∫\", \"\\\\int\");\ndefineSymbol(math, main, op, \"∫\", \"\\\\intop\");\ndefineSymbol(math, main, op, \"∬\", \"\\\\iint\");\ndefineSymbol(math, main, op, \"∭\", \"\\\\iiint\");\ndefineSymbol(math, main, op, \"∏\", \"\\\\prod\");\ndefineSymbol(math, main, op, \"∑\", \"\\\\sum\");\ndefineSymbol(math, main, op, \"⨂\", \"\\\\bigotimes\");\ndefineSymbol(math, main, op, \"⨁\", \"\\\\bigoplus\");\ndefineSymbol(math, main, op, \"⨀\", \"\\\\bigodot\");\ndefineSymbol(math, main, op, \"∮\", \"\\\\oint\");\ndefineSymbol(math, main, op, \"∯\", \"\\\\oiint\");\ndefineSymbol(math, main, op, \"∰\", \"\\\\oiiint\");\ndefineSymbol(math, main, op, \"⨆\", \"\\\\bigsqcup\");\ndefineSymbol(math, main, op, \"∫\", \"\\\\smallint\");\ndefineSymbol(text, main, inner, \"…\", \"\\\\textellipsis\");\ndefineSymbol(math, main, inner, \"…\", \"\\\\mathellipsis\");\ndefineSymbol(text, main, inner, \"…\", \"\\\\ldots\", true);\ndefineSymbol(math, main, inner, \"…\", \"\\\\ldots\", true);\ndefineSymbol(math, main, inner, \"⋯\", \"\\\\@cdots\", true);\ndefineSymbol(math, main, inner, \"⋱\", \"\\\\ddots\", true);\ndefineSymbol(math, main, textord, \"⋮\", \"\\\\varvdots\"); // \\vdots is a macro\ndefineSymbol(math, main, accent, \"ˊ\", \"\\\\acute\");\ndefineSymbol(math, main, accent, \"ˋ\", \"\\\\grave\");\ndefineSymbol(math, main, accent, \"\\xa8\", \"\\\\ddot\");\ndefineSymbol(math, main, accent, \"~\", \"\\\\tilde\");\ndefineSymbol(math, main, accent, \"ˉ\", \"\\\\bar\");\ndefineSymbol(math, main, accent, \"˘\", \"\\\\breve\");\ndefineSymbol(math, main, accent, \"ˇ\", \"\\\\check\");\ndefineSymbol(math, main, accent, \"^\", \"\\\\hat\");\ndefineSymbol(math, main, accent, \"⃗\", \"\\\\vec\");\ndefineSymbol(math, main, accent, \"˙\", \"\\\\dot\");\ndefineSymbol(math, main, accent, \"˚\", \"\\\\mathring\"); // \\imath and \\jmath should be invariant to \\mathrm, \\mathbf, etc., so use PUA\ndefineSymbol(math, main, mathord, \"\", \"\\\\@imath\");\ndefineSymbol(math, main, mathord, \"\", \"\\\\@jmath\");\ndefineSymbol(math, main, textord, \"ı\", \"ı\");\ndefineSymbol(math, main, textord, \"ȷ\", \"ȷ\");\ndefineSymbol(text, main, textord, \"ı\", \"\\\\i\", true);\ndefineSymbol(text, main, textord, \"ȷ\", \"\\\\j\", true);\ndefineSymbol(text, main, textord, \"\\xdf\", \"\\\\ss\", true);\ndefineSymbol(text, main, textord, \"\\xe6\", \"\\\\ae\", true);\ndefineSymbol(text, main, textord, \"œ\", \"\\\\oe\", true);\ndefineSymbol(text, main, textord, \"\\xf8\", \"\\\\o\", true);\ndefineSymbol(text, main, textord, \"\\xc6\", \"\\\\AE\", true);\ndefineSymbol(text, main, textord, \"Œ\", \"\\\\OE\", true);\ndefineSymbol(text, main, textord, \"\\xd8\", \"\\\\O\", true);\ndefineSymbol(text, main, accent, \"ˊ\", \"\\\\'\"); // acute\ndefineSymbol(text, main, accent, \"ˋ\", \"\\\\`\"); // grave\ndefineSymbol(text, main, accent, \"ˆ\", \"\\\\^\"); // circumflex\ndefineSymbol(text, main, accent, \"˜\", \"\\\\~\"); // tilde\ndefineSymbol(text, main, accent, \"ˉ\", \"\\\\=\"); // macron\ndefineSymbol(text, main, accent, \"˘\", \"\\\\u\"); // breve\ndefineSymbol(text, main, accent, \"˙\", \"\\\\.\"); // dot above\ndefineSymbol(text, main, accent, \"\\xb8\", \"\\\\c\"); // cedilla\ndefineSymbol(text, main, accent, \"˚\", \"\\\\r\"); // ring above\ndefineSymbol(text, main, accent, \"ˇ\", \"\\\\v\"); // caron\ndefineSymbol(text, main, accent, \"\\xa8\", '\\\\\"'); // diaresis\ndefineSymbol(text, main, accent, \"˝\", \"\\\\H\"); // double acute\ndefineSymbol(text, main, accent, \"◯\", \"\\\\textcircled\"); // \\bigcirc glyph\n// These ligatures are detected and created in Parser.js's `formLigatures`.\nvar ligatures = {\n    \"--\": true,\n    \"---\": true,\n    \"``\": true,\n    \"''\": true\n};\ndefineSymbol(text, main, textord, \"–\", \"--\", true);\ndefineSymbol(text, main, textord, \"–\", \"\\\\textendash\");\ndefineSymbol(text, main, textord, \"—\", \"---\", true);\ndefineSymbol(text, main, textord, \"—\", \"\\\\textemdash\");\ndefineSymbol(text, main, textord, \"‘\", \"`\", true);\ndefineSymbol(text, main, textord, \"‘\", \"\\\\textquoteleft\");\ndefineSymbol(text, main, textord, \"’\", \"'\", true);\ndefineSymbol(text, main, textord, \"’\", \"\\\\textquoteright\");\ndefineSymbol(text, main, textord, \"“\", \"``\", true);\ndefineSymbol(text, main, textord, \"“\", \"\\\\textquotedblleft\");\ndefineSymbol(text, main, textord, \"”\", \"''\", true);\ndefineSymbol(text, main, textord, \"”\", \"\\\\textquotedblright\"); //  \\degree from gensymb package\ndefineSymbol(math, main, textord, \"\\xb0\", \"\\\\degree\", true);\ndefineSymbol(text, main, textord, \"\\xb0\", \"\\\\degree\"); // \\textdegree from inputenc package\ndefineSymbol(text, main, textord, \"\\xb0\", \"\\\\textdegree\", true); // TODO: In LaTeX, \\pounds can generate a different character in text and math\n// mode, but among our fonts, only Main-Regular defines this character \"163\".\ndefineSymbol(math, main, textord, \"\\xa3\", \"\\\\pounds\");\ndefineSymbol(math, main, textord, \"\\xa3\", \"\\\\mathsterling\", true);\ndefineSymbol(text, main, textord, \"\\xa3\", \"\\\\pounds\");\ndefineSymbol(text, main, textord, \"\\xa3\", \"\\\\textsterling\", true);\ndefineSymbol(math, ams, textord, \"✠\", \"\\\\maltese\");\ndefineSymbol(text, ams, textord, \"✠\", \"\\\\maltese\"); // There are lots of symbols which are the same, so we add them in afterwards.\n// All of these are textords in math mode\nvar mathTextSymbols = '0123456789/@.\"';\nfor(var i = 0; i < mathTextSymbols.length; i++){\n    var ch = mathTextSymbols.charAt(i);\n    defineSymbol(math, main, textord, ch, ch);\n} // All of these are textords in text mode\nvar textSymbols = '0123456789!@*()-=+\";:?/.,';\nfor(var _i = 0; _i < textSymbols.length; _i++){\n    var _ch = textSymbols.charAt(_i);\n    defineSymbol(text, main, textord, _ch, _ch);\n} // All of these are textords in text mode, and mathords in math mode\nvar letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\nfor(var _i2 = 0; _i2 < letters.length; _i2++){\n    var _ch2 = letters.charAt(_i2);\n    defineSymbol(math, main, mathord, _ch2, _ch2);\n    defineSymbol(text, main, textord, _ch2, _ch2);\n} // Blackboard bold and script letters in Unicode range\ndefineSymbol(math, ams, textord, \"C\", \"ℂ\"); // blackboard bold\ndefineSymbol(text, ams, textord, \"C\", \"ℂ\");\ndefineSymbol(math, ams, textord, \"H\", \"ℍ\");\ndefineSymbol(text, ams, textord, \"H\", \"ℍ\");\ndefineSymbol(math, ams, textord, \"N\", \"ℕ\");\ndefineSymbol(text, ams, textord, \"N\", \"ℕ\");\ndefineSymbol(math, ams, textord, \"P\", \"ℙ\");\ndefineSymbol(text, ams, textord, \"P\", \"ℙ\");\ndefineSymbol(math, ams, textord, \"Q\", \"ℚ\");\ndefineSymbol(text, ams, textord, \"Q\", \"ℚ\");\ndefineSymbol(math, ams, textord, \"R\", \"ℝ\");\ndefineSymbol(text, ams, textord, \"R\", \"ℝ\");\ndefineSymbol(math, ams, textord, \"Z\", \"ℤ\");\ndefineSymbol(text, ams, textord, \"Z\", \"ℤ\");\ndefineSymbol(math, main, mathord, \"h\", \"ℎ\"); // italic h, Planck constant\ndefineSymbol(text, main, mathord, \"h\", \"ℎ\"); // The next loop loads wide (surrogate pair) characters.\n// We support some letters in the Unicode range U+1D400 to U+1D7FF,\n// Mathematical Alphanumeric Symbols.\n// Some editors do not deal well with wide characters. So don't write the\n// string into this file. Instead, create the string from the surrogate pair.\nvar wideChar = \"\";\nfor(var _i3 = 0; _i3 < letters.length; _i3++){\n    var _ch3 = letters.charAt(_i3); // The hex numbers in the next line are a surrogate pair.\n    // 0xD835 is the high surrogate for all letters in the range we support.\n    // 0xDC00 is the low surrogate for bold A.\n    wideChar = String.fromCharCode(0xD835, 0xDC00 + _i3); // A-Z a-z bold\n    defineSymbol(math, main, mathord, _ch3, wideChar);\n    defineSymbol(text, main, textord, _ch3, wideChar);\n    wideChar = String.fromCharCode(0xD835, 0xDC34 + _i3); // A-Z a-z italic\n    defineSymbol(math, main, mathord, _ch3, wideChar);\n    defineSymbol(text, main, textord, _ch3, wideChar);\n    wideChar = String.fromCharCode(0xD835, 0xDC68 + _i3); // A-Z a-z bold italic\n    defineSymbol(math, main, mathord, _ch3, wideChar);\n    defineSymbol(text, main, textord, _ch3, wideChar);\n    wideChar = String.fromCharCode(0xD835, 0xDD04 + _i3); // A-Z a-z Fractur\n    defineSymbol(math, main, mathord, _ch3, wideChar);\n    defineSymbol(text, main, textord, _ch3, wideChar);\n    wideChar = String.fromCharCode(0xD835, 0xDDA0 + _i3); // A-Z a-z sans-serif\n    defineSymbol(math, main, mathord, _ch3, wideChar);\n    defineSymbol(text, main, textord, _ch3, wideChar);\n    wideChar = String.fromCharCode(0xD835, 0xDDD4 + _i3); // A-Z a-z sans bold\n    defineSymbol(math, main, mathord, _ch3, wideChar);\n    defineSymbol(text, main, textord, _ch3, wideChar);\n    wideChar = String.fromCharCode(0xD835, 0xDE08 + _i3); // A-Z a-z sans italic\n    defineSymbol(math, main, mathord, _ch3, wideChar);\n    defineSymbol(text, main, textord, _ch3, wideChar);\n    wideChar = String.fromCharCode(0xD835, 0xDE70 + _i3); // A-Z a-z monospace\n    defineSymbol(math, main, mathord, _ch3, wideChar);\n    defineSymbol(text, main, textord, _ch3, wideChar);\n    if (_i3 < 26) {\n        // KaTeX fonts have only capital letters for blackboard bold and script.\n        // See exception for k below.\n        wideChar = String.fromCharCode(0xD835, 0xDD38 + _i3); // A-Z double struck\n        defineSymbol(math, main, mathord, _ch3, wideChar);\n        defineSymbol(text, main, textord, _ch3, wideChar);\n        wideChar = String.fromCharCode(0xD835, 0xDC9C + _i3); // A-Z script\n        defineSymbol(math, main, mathord, _ch3, wideChar);\n        defineSymbol(text, main, textord, _ch3, wideChar);\n    } // TODO: Add bold script when it is supported by a KaTeX font.\n} // \"k\" is the only double struck lower case letter in the KaTeX fonts.\nwideChar = String.fromCharCode(0xD835, 0xDD5C); // k double struck\ndefineSymbol(math, main, mathord, \"k\", wideChar);\ndefineSymbol(text, main, textord, \"k\", wideChar); // Next, some wide character numerals\nfor(var _i4 = 0; _i4 < 10; _i4++){\n    var _ch4 = _i4.toString();\n    wideChar = String.fromCharCode(0xD835, 0xDFCE + _i4); // 0-9 bold\n    defineSymbol(math, main, mathord, _ch4, wideChar);\n    defineSymbol(text, main, textord, _ch4, wideChar);\n    wideChar = String.fromCharCode(0xD835, 0xDFE2 + _i4); // 0-9 sans serif\n    defineSymbol(math, main, mathord, _ch4, wideChar);\n    defineSymbol(text, main, textord, _ch4, wideChar);\n    wideChar = String.fromCharCode(0xD835, 0xDFEC + _i4); // 0-9 bold sans\n    defineSymbol(math, main, mathord, _ch4, wideChar);\n    defineSymbol(text, main, textord, _ch4, wideChar);\n    wideChar = String.fromCharCode(0xD835, 0xDFF6 + _i4); // 0-9 monospace\n    defineSymbol(math, main, mathord, _ch4, wideChar);\n    defineSymbol(text, main, textord, _ch4, wideChar);\n} // We add these Latin-1 letters as symbols for backwards-compatibility,\n// but they are not actually in the font, nor are they supported by the\n// Unicode accent mechanism, so they fall back to Times font and look ugly.\n// TODO(edemaine): Fix this.\nvar extraLatin = \"\\xd0\\xde\\xfe\";\nfor(var _i5 = 0; _i5 < extraLatin.length; _i5++){\n    var _ch5 = extraLatin.charAt(_i5);\n    defineSymbol(math, main, mathord, _ch5, _ch5);\n    defineSymbol(text, main, textord, _ch5, _ch5);\n}\n/**\n * This file provides support for Unicode range U+1D400 to U+1D7FF,\n * Mathematical Alphanumeric Symbols.\n *\n * Function wideCharacterFont takes a wide character as input and returns\n * the font information necessary to render it properly.\n */ /**\n * Data below is from https://www.unicode.org/charts/PDF/U1D400.pdf\n * That document sorts characters into groups by font type, say bold or italic.\n *\n * In the arrays below, each subarray consists three elements:\n *      * The CSS class of that group when in math mode.\n *      * The CSS class of that group when in text mode.\n *      * The font name, so that KaTeX can get font metrics.\n */ var wideLatinLetterData = [\n    [\n        \"mathbf\",\n        \"textbf\",\n        \"Main-Bold\"\n    ],\n    [\n        \"mathbf\",\n        \"textbf\",\n        \"Main-Bold\"\n    ],\n    [\n        \"mathnormal\",\n        \"textit\",\n        \"Math-Italic\"\n    ],\n    [\n        \"mathnormal\",\n        \"textit\",\n        \"Math-Italic\"\n    ],\n    [\n        \"boldsymbol\",\n        \"boldsymbol\",\n        \"Main-BoldItalic\"\n    ],\n    [\n        \"boldsymbol\",\n        \"boldsymbol\",\n        \"Main-BoldItalic\"\n    ],\n    // Map fancy A-Z letters to script, not calligraphic.\n    // This aligns with unicode-math and math fonts (except Cambria Math).\n    [\n        \"mathscr\",\n        \"textscr\",\n        \"Script-Regular\"\n    ],\n    [\n        \"\",\n        \"\",\n        \"\"\n    ],\n    [\n        \"\",\n        \"\",\n        \"\"\n    ],\n    [\n        \"\",\n        \"\",\n        \"\"\n    ],\n    [\n        \"mathfrak\",\n        \"textfrak\",\n        \"Fraktur-Regular\"\n    ],\n    [\n        \"mathfrak\",\n        \"textfrak\",\n        \"Fraktur-Regular\"\n    ],\n    [\n        \"mathbb\",\n        \"textbb\",\n        \"AMS-Regular\"\n    ],\n    [\n        \"mathbb\",\n        \"textbb\",\n        \"AMS-Regular\"\n    ],\n    [\n        \"\",\n        \"\",\n        \"\"\n    ],\n    [\n        \"\",\n        \"\",\n        \"\"\n    ],\n    [\n        \"mathsf\",\n        \"textsf\",\n        \"SansSerif-Regular\"\n    ],\n    [\n        \"mathsf\",\n        \"textsf\",\n        \"SansSerif-Regular\"\n    ],\n    [\n        \"mathboldsf\",\n        \"textboldsf\",\n        \"SansSerif-Bold\"\n    ],\n    [\n        \"mathboldsf\",\n        \"textboldsf\",\n        \"SansSerif-Bold\"\n    ],\n    [\n        \"mathitsf\",\n        \"textitsf\",\n        \"SansSerif-Italic\"\n    ],\n    [\n        \"mathitsf\",\n        \"textitsf\",\n        \"SansSerif-Italic\"\n    ],\n    [\n        \"\",\n        \"\",\n        \"\"\n    ],\n    [\n        \"\",\n        \"\",\n        \"\"\n    ],\n    [\n        \"mathtt\",\n        \"texttt\",\n        \"Typewriter-Regular\"\n    ],\n    [\n        \"mathtt\",\n        \"texttt\",\n        \"Typewriter-Regular\"\n    ] // a-z monospace\n];\nvar wideNumeralData = [\n    [\n        \"mathbf\",\n        \"textbf\",\n        \"Main-Bold\"\n    ],\n    [\n        \"\",\n        \"\",\n        \"\"\n    ],\n    [\n        \"mathsf\",\n        \"textsf\",\n        \"SansSerif-Regular\"\n    ],\n    [\n        \"mathboldsf\",\n        \"textboldsf\",\n        \"SansSerif-Bold\"\n    ],\n    [\n        \"mathtt\",\n        \"texttt\",\n        \"Typewriter-Regular\"\n    ] // 0-9 monospace\n];\nvar wideCharacterFont = function wideCharacterFont(wideChar, mode) {\n    // IE doesn't support codePointAt(). So work with the surrogate pair.\n    var H = wideChar.charCodeAt(0); // high surrogate\n    var L = wideChar.charCodeAt(1); // low surrogate\n    var codePoint = (H - 0xD800) * 0x400 + (L - 0xDC00) + 0x10000;\n    var j = mode === \"math\" ? 0 : 1; // column index for CSS class.\n    if (0x1D400 <= codePoint && codePoint < 0x1D6A4) {\n        // wideLatinLetterData contains exactly 26 chars on each row.\n        // So we can calculate the relevant row. No traverse necessary.\n        var i = Math.floor((codePoint - 0x1D400) / 26);\n        return [\n            wideLatinLetterData[i][2],\n            wideLatinLetterData[i][j]\n        ];\n    } else if (0x1D7CE <= codePoint && codePoint <= 0x1D7FF) {\n        // Numerals, ten per row.\n        var _i = Math.floor((codePoint - 0x1D7CE) / 10);\n        return [\n            wideNumeralData[_i][2],\n            wideNumeralData[_i][j]\n        ];\n    } else if (codePoint === 0x1D6A5 || codePoint === 0x1D6A6) {\n        // dotless i or j\n        return [\n            wideLatinLetterData[0][2],\n            wideLatinLetterData[0][j]\n        ];\n    } else if (0x1D6A6 < codePoint && codePoint < 0x1D7CE) {\n        // Greek letters. Not supported, yet.\n        return [\n            \"\",\n            \"\"\n        ];\n    } else {\n        // We don't support any wide characters outside 1D400–1D7FF.\n        throw new ParseError(\"Unsupported character: \" + wideChar);\n    }\n};\n/* eslint no-console:0 */ /**\n * Looks up the given symbol in fontMetrics, after applying any symbol\n * replacements defined in symbol.js\n */ var lookupSymbol = function lookupSymbol(value, fontName, mode) {\n    // Replace the value with its replaced value from symbol.js\n    if (symbols[mode][value] && symbols[mode][value].replace) {\n        value = symbols[mode][value].replace;\n    }\n    return {\n        value: value,\n        metrics: getCharacterMetrics(value, fontName, mode)\n    };\n};\n/**\n * Makes a symbolNode after translation via the list of symbols in symbols.js.\n * Correctly pulls out metrics for the character, and optionally takes a list of\n * classes to be attached to the node.\n *\n * TODO: make argument order closer to makeSpan\n * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which\n * should if present come first in `classes`.\n * TODO(#953): Make `options` mandatory and always pass it in.\n */ var makeSymbol = function makeSymbol(value, fontName, mode, options, classes) {\n    var lookup = lookupSymbol(value, fontName, mode);\n    var metrics = lookup.metrics;\n    value = lookup.value;\n    var symbolNode;\n    if (metrics) {\n        var italic = metrics.italic;\n        if (mode === \"text\" || options && options.font === \"mathit\") {\n            italic = 0;\n        }\n        symbolNode = new SymbolNode(value, metrics.height, metrics.depth, italic, metrics.skew, metrics.width, classes);\n    } else {\n        // TODO(emily): Figure out a good way to only print this in development\n        typeof console !== \"undefined\" && console.warn(\"No character metrics \" + (\"for '\" + value + \"' in style '\" + fontName + \"' and mode '\" + mode + \"'\"));\n        symbolNode = new SymbolNode(value, 0, 0, 0, 0, 0, classes);\n    }\n    if (options) {\n        symbolNode.maxFontSize = options.sizeMultiplier;\n        if (options.style.isTight()) {\n            symbolNode.classes.push(\"mtight\");\n        }\n        var color = options.getColor();\n        if (color) {\n            symbolNode.style.color = color;\n        }\n    }\n    return symbolNode;\n};\n/**\n * Makes a symbol in Main-Regular or AMS-Regular.\n * Used for rel, bin, open, close, inner, and punct.\n */ var mathsym = function mathsym(value, mode, options, classes) {\n    if (classes === void 0) {\n        classes = [];\n    }\n    // Decide what font to render the symbol in by its entry in the symbols\n    // table.\n    // Have a special case for when the value = \\ because the \\ is used as a\n    // textord in unsupported command errors but cannot be parsed as a regular\n    // text ordinal and is therefore not present as a symbol in the symbols\n    // table for text, as well as a special case for boldsymbol because it\n    // can be used for bold + and -\n    if (options.font === \"boldsymbol\" && lookupSymbol(value, \"Main-Bold\", mode).metrics) {\n        return makeSymbol(value, \"Main-Bold\", mode, options, classes.concat([\n            \"mathbf\"\n        ]));\n    } else if (value === \"\\\\\" || symbols[mode][value].font === \"main\") {\n        return makeSymbol(value, \"Main-Regular\", mode, options, classes);\n    } else {\n        return makeSymbol(value, \"AMS-Regular\", mode, options, classes.concat([\n            \"amsrm\"\n        ]));\n    }\n};\n/**\n * Determines which of the two font names (Main-Bold and Math-BoldItalic) and\n * corresponding style tags (mathbf or boldsymbol) to use for font \"boldsymbol\",\n * depending on the symbol.  Use this function instead of fontMap for font\n * \"boldsymbol\".\n */ var boldsymbol = function boldsymbol(value, mode, options, classes, type) {\n    if (type !== \"textord\" && lookupSymbol(value, \"Math-BoldItalic\", mode).metrics) {\n        return {\n            fontName: \"Math-BoldItalic\",\n            fontClass: \"boldsymbol\"\n        };\n    } else {\n        // Some glyphs do not exist in Math-BoldItalic so we need to use\n        // Main-Bold instead.\n        return {\n            fontName: \"Main-Bold\",\n            fontClass: \"mathbf\"\n        };\n    }\n};\n/**\n * Makes either a mathord or textord in the correct font and color.\n */ var makeOrd = function makeOrd(group, options, type) {\n    var mode = group.mode;\n    var text = group.text;\n    var classes = [\n        \"mord\"\n    ]; // Math mode or Old font (i.e. \\rm)\n    var isFont = mode === \"math\" || mode === \"text\" && options.font;\n    var fontOrFamily = isFont ? options.font : options.fontFamily;\n    if (text.charCodeAt(0) === 0xD835) {\n        // surrogate pairs get special treatment\n        var [wideFontName, wideFontClass] = wideCharacterFont(text, mode);\n        return makeSymbol(text, wideFontName, mode, options, classes.concat(wideFontClass));\n    } else if (fontOrFamily) {\n        var fontName;\n        var fontClasses;\n        if (fontOrFamily === \"boldsymbol\") {\n            var fontData = boldsymbol(text, mode, options, classes, type);\n            fontName = fontData.fontName;\n            fontClasses = [\n                fontData.fontClass\n            ];\n        } else if (isFont) {\n            fontName = fontMap[fontOrFamily].fontName;\n            fontClasses = [\n                fontOrFamily\n            ];\n        } else {\n            fontName = retrieveTextFontName(fontOrFamily, options.fontWeight, options.fontShape);\n            fontClasses = [\n                fontOrFamily,\n                options.fontWeight,\n                options.fontShape\n            ];\n        }\n        if (lookupSymbol(text, fontName, mode).metrics) {\n            return makeSymbol(text, fontName, mode, options, classes.concat(fontClasses));\n        } else if (ligatures.hasOwnProperty(text) && fontName.slice(0, 10) === \"Typewriter\") {\n            // Deconstruct ligatures in monospace fonts (\\texttt, \\tt).\n            var parts = [];\n            for(var i = 0; i < text.length; i++){\n                parts.push(makeSymbol(text[i], fontName, mode, options, classes.concat(fontClasses)));\n            }\n            return makeFragment(parts);\n        }\n    } // Makes a symbol in the default font for mathords and textords.\n    if (type === \"mathord\") {\n        return makeSymbol(text, \"Math-Italic\", mode, options, classes.concat([\n            \"mathnormal\"\n        ]));\n    } else if (type === \"textord\") {\n        var font = symbols[mode][text] && symbols[mode][text].font;\n        if (font === \"ams\") {\n            var _fontName = retrieveTextFontName(\"amsrm\", options.fontWeight, options.fontShape);\n            return makeSymbol(text, _fontName, mode, options, classes.concat(\"amsrm\", options.fontWeight, options.fontShape));\n        } else if (font === \"main\" || !font) {\n            var _fontName2 = retrieveTextFontName(\"textrm\", options.fontWeight, options.fontShape);\n            return makeSymbol(text, _fontName2, mode, options, classes.concat(options.fontWeight, options.fontShape));\n        } else {\n            // fonts added by plugins\n            var _fontName3 = retrieveTextFontName(font, options.fontWeight, options.fontShape); // We add font name as a css class\n            return makeSymbol(text, _fontName3, mode, options, classes.concat(_fontName3, options.fontWeight, options.fontShape));\n        }\n    } else {\n        throw new Error(\"unexpected type: \" + type + \" in makeOrd\");\n    }\n};\n/**\n * Returns true if subsequent symbolNodes have the same classes, skew, maxFont,\n * and styles.\n */ var canCombine = (prev, next)=>{\n    if (createClass(prev.classes) !== createClass(next.classes) || prev.skew !== next.skew || prev.maxFontSize !== next.maxFontSize) {\n        return false;\n    } // If prev and next both are just \"mbin\"s or \"mord\"s we don't combine them\n    // so that the proper spacing can be preserved.\n    if (prev.classes.length === 1) {\n        var cls = prev.classes[0];\n        if (cls === \"mbin\" || cls === \"mord\") {\n            return false;\n        }\n    }\n    for(var style in prev.style){\n        if (prev.style.hasOwnProperty(style) && prev.style[style] !== next.style[style]) {\n            return false;\n        }\n    }\n    for(var _style in next.style){\n        if (next.style.hasOwnProperty(_style) && prev.style[_style] !== next.style[_style]) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * Combine consecutive domTree.symbolNodes into a single symbolNode.\n * Note: this function mutates the argument.\n */ var tryCombineChars = (chars)=>{\n    for(var i = 0; i < chars.length - 1; i++){\n        var prev = chars[i];\n        var next = chars[i + 1];\n        if (prev instanceof SymbolNode && next instanceof SymbolNode && canCombine(prev, next)) {\n            prev.text += next.text;\n            prev.height = Math.max(prev.height, next.height);\n            prev.depth = Math.max(prev.depth, next.depth); // Use the last character's italic correction since we use\n            // it to add padding to the right of the span created from\n            // the combined characters.\n            prev.italic = next.italic;\n            chars.splice(i + 1, 1);\n            i--;\n        }\n    }\n    return chars;\n};\n/**\n * Calculate the height, depth, and maxFontSize of an element based on its\n * children.\n */ var sizeElementFromChildren = function sizeElementFromChildren(elem) {\n    var height = 0;\n    var depth = 0;\n    var maxFontSize = 0;\n    for(var i = 0; i < elem.children.length; i++){\n        var child = elem.children[i];\n        if (child.height > height) {\n            height = child.height;\n        }\n        if (child.depth > depth) {\n            depth = child.depth;\n        }\n        if (child.maxFontSize > maxFontSize) {\n            maxFontSize = child.maxFontSize;\n        }\n    }\n    elem.height = height;\n    elem.depth = depth;\n    elem.maxFontSize = maxFontSize;\n};\n/**\n * Makes a span with the given list of classes, list of children, and options.\n *\n * TODO(#953): Ensure that `options` is always provided (currently some call\n * sites don't pass it) and make the type below mandatory.\n * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which\n * should if present come first in `classes`.\n */ var makeSpan$2 = function makeSpan(classes, children, options, style) {\n    var span = new Span(classes, children, options, style);\n    sizeElementFromChildren(span);\n    return span;\n}; // SVG one is simpler -- doesn't require height, depth, max-font setting.\n// This is also a separate method for typesafety.\nvar makeSvgSpan = (classes, children, options, style)=>new Span(classes, children, options, style);\nvar makeLineSpan = function makeLineSpan(className, options, thickness) {\n    var line = makeSpan$2([\n        className\n    ], [], options);\n    line.height = Math.max(thickness || options.fontMetrics().defaultRuleThickness, options.minRuleThickness);\n    line.style.borderBottomWidth = makeEm(line.height);\n    line.maxFontSize = 1.0;\n    return line;\n};\n/**\n * Makes an anchor with the given href, list of classes, list of children,\n * and options.\n */ var makeAnchor = function makeAnchor(href, classes, children, options) {\n    var anchor = new Anchor(href, classes, children, options);\n    sizeElementFromChildren(anchor);\n    return anchor;\n};\n/**\n * Makes a document fragment with the given list of children.\n */ var makeFragment = function makeFragment(children) {\n    var fragment = new DocumentFragment(children);\n    sizeElementFromChildren(fragment);\n    return fragment;\n};\n/**\n * Wraps group in a span if it's a document fragment, allowing to apply classes\n * and styles\n */ var wrapFragment = function wrapFragment(group, options) {\n    if (group instanceof DocumentFragment) {\n        return makeSpan$2([], [\n            group\n        ], options);\n    }\n    return group;\n}; // These are exact object types to catch typos in the names of the optional fields.\n// Computes the updated `children` list and the overall depth.\n//\n// This helper function for makeVList makes it easier to enforce type safety by\n// allowing early exits (returns) in the logic.\nvar getVListChildrenAndDepth = function getVListChildrenAndDepth(params) {\n    if (params.positionType === \"individualShift\") {\n        var oldChildren = params.children;\n        var children = [\n            oldChildren[0]\n        ]; // Add in kerns to the list of params.children to get each element to be\n        // shifted to the correct specified shift\n        var _depth = -oldChildren[0].shift - oldChildren[0].elem.depth;\n        var currPos = _depth;\n        for(var i = 1; i < oldChildren.length; i++){\n            var diff = -oldChildren[i].shift - currPos - oldChildren[i].elem.depth;\n            var size = diff - (oldChildren[i - 1].elem.height + oldChildren[i - 1].elem.depth);\n            currPos = currPos + diff;\n            children.push({\n                type: \"kern\",\n                size\n            });\n            children.push(oldChildren[i]);\n        }\n        return {\n            children,\n            depth: _depth\n        };\n    }\n    var depth;\n    if (params.positionType === \"top\") {\n        // We always start at the bottom, so calculate the bottom by adding up\n        // all the sizes\n        var bottom = params.positionData;\n        for(var _i = 0; _i < params.children.length; _i++){\n            var child = params.children[_i];\n            bottom -= child.type === \"kern\" ? child.size : child.elem.height + child.elem.depth;\n        }\n        depth = bottom;\n    } else if (params.positionType === \"bottom\") {\n        depth = -params.positionData;\n    } else {\n        var firstChild = params.children[0];\n        if (firstChild.type !== \"elem\") {\n            throw new Error('First child must have type \"elem\".');\n        }\n        if (params.positionType === \"shift\") {\n            depth = -firstChild.elem.depth - params.positionData;\n        } else if (params.positionType === \"firstBaseline\") {\n            depth = -firstChild.elem.depth;\n        } else {\n            throw new Error(\"Invalid positionType \" + params.positionType + \".\");\n        }\n    }\n    return {\n        children: params.children,\n        depth\n    };\n};\n/**\n * Makes a vertical list by stacking elements and kerns on top of each other.\n * Allows for many different ways of specifying the positioning method.\n *\n * See VListParam documentation above.\n */ var makeVList = function makeVList(params, options) {\n    var { children, depth } = getVListChildrenAndDepth(params); // Create a strut that is taller than any list item. The strut is added to\n    // each item, where it will determine the item's baseline. Since it has\n    // `overflow:hidden`, the strut's top edge will sit on the item's line box's\n    // top edge and the strut's bottom edge will sit on the item's baseline,\n    // with no additional line-height spacing. This allows the item baseline to\n    // be positioned precisely without worrying about font ascent and\n    // line-height.\n    var pstrutSize = 0;\n    for(var i = 0; i < children.length; i++){\n        var child = children[i];\n        if (child.type === \"elem\") {\n            var elem = child.elem;\n            pstrutSize = Math.max(pstrutSize, elem.maxFontSize, elem.height);\n        }\n    }\n    pstrutSize += 2;\n    var pstrut = makeSpan$2([\n        \"pstrut\"\n    ], []);\n    pstrut.style.height = makeEm(pstrutSize); // Create a new list of actual children at the correct offsets\n    var realChildren = [];\n    var minPos = depth;\n    var maxPos = depth;\n    var currPos = depth;\n    for(var _i2 = 0; _i2 < children.length; _i2++){\n        var _child = children[_i2];\n        if (_child.type === \"kern\") {\n            currPos += _child.size;\n        } else {\n            var _elem = _child.elem;\n            var classes = _child.wrapperClasses || [];\n            var style = _child.wrapperStyle || {};\n            var childWrap = makeSpan$2(classes, [\n                pstrut,\n                _elem\n            ], undefined, style);\n            childWrap.style.top = makeEm(-pstrutSize - currPos - _elem.depth);\n            if (_child.marginLeft) {\n                childWrap.style.marginLeft = _child.marginLeft;\n            }\n            if (_child.marginRight) {\n                childWrap.style.marginRight = _child.marginRight;\n            }\n            realChildren.push(childWrap);\n            currPos += _elem.height + _elem.depth;\n        }\n        minPos = Math.min(minPos, currPos);\n        maxPos = Math.max(maxPos, currPos);\n    } // The vlist contents go in a table-cell with `vertical-align:bottom`.\n    // This cell's bottom edge will determine the containing table's baseline\n    // without overly expanding the containing line-box.\n    var vlist = makeSpan$2([\n        \"vlist\"\n    ], realChildren);\n    vlist.style.height = makeEm(maxPos); // A second row is used if necessary to represent the vlist's depth.\n    var rows;\n    if (minPos < 0) {\n        // We will define depth in an empty span with display: table-cell.\n        // It should render with the height that we define. But Chrome, in\n        // contenteditable mode only, treats that span as if it contains some\n        // text content. And that min-height over-rides our desired height.\n        // So we put another empty span inside the depth strut span.\n        var emptySpan = makeSpan$2([], []);\n        var depthStrut = makeSpan$2([\n            \"vlist\"\n        ], [\n            emptySpan\n        ]);\n        depthStrut.style.height = makeEm(-minPos); // Safari wants the first row to have inline content; otherwise it\n        // puts the bottom of the *second* row on the baseline.\n        var topStrut = makeSpan$2([\n            \"vlist-s\"\n        ], [\n            new SymbolNode(\"​\")\n        ]);\n        rows = [\n            makeSpan$2([\n                \"vlist-r\"\n            ], [\n                vlist,\n                topStrut\n            ]),\n            makeSpan$2([\n                \"vlist-r\"\n            ], [\n                depthStrut\n            ])\n        ];\n    } else {\n        rows = [\n            makeSpan$2([\n                \"vlist-r\"\n            ], [\n                vlist\n            ])\n        ];\n    }\n    var vtable = makeSpan$2([\n        \"vlist-t\"\n    ], rows);\n    if (rows.length === 2) {\n        vtable.classes.push(\"vlist-t2\");\n    }\n    vtable.height = maxPos;\n    vtable.depth = -minPos;\n    return vtable;\n}; // Glue is a concept from TeX which is a flexible space between elements in\n// either a vertical or horizontal list. In KaTeX, at least for now, it's\n// static space between elements in a horizontal layout.\nvar makeGlue = (measurement, options)=>{\n    // Make an empty span for the space\n    var rule = makeSpan$2([\n        \"mspace\"\n    ], [], options);\n    var size = calculateSize(measurement, options);\n    rule.style.marginRight = makeEm(size);\n    return rule;\n}; // Takes font options, and returns the appropriate fontLookup name\nvar retrieveTextFontName = function retrieveTextFontName(fontFamily, fontWeight, fontShape) {\n    var baseFontName = \"\";\n    switch(fontFamily){\n        case \"amsrm\":\n            baseFontName = \"AMS\";\n            break;\n        case \"textrm\":\n            baseFontName = \"Main\";\n            break;\n        case \"textsf\":\n            baseFontName = \"SansSerif\";\n            break;\n        case \"texttt\":\n            baseFontName = \"Typewriter\";\n            break;\n        default:\n            baseFontName = fontFamily;\n    }\n    var fontStylesName;\n    if (fontWeight === \"textbf\" && fontShape === \"textit\") {\n        fontStylesName = \"BoldItalic\";\n    } else if (fontWeight === \"textbf\") {\n        fontStylesName = \"Bold\";\n    } else if (fontWeight === \"textit\") {\n        fontStylesName = \"Italic\";\n    } else {\n        fontStylesName = \"Regular\";\n    }\n    return baseFontName + \"-\" + fontStylesName;\n};\n/**\n * Maps TeX font commands to objects containing:\n * - variant: string used for \"mathvariant\" attribute in buildMathML.js\n * - fontName: the \"style\" parameter to fontMetrics.getCharacterMetrics\n */ // A map between tex font commands an MathML mathvariant attribute values\nvar fontMap = {\n    // styles\n    \"mathbf\": {\n        variant: \"bold\",\n        fontName: \"Main-Bold\"\n    },\n    \"mathrm\": {\n        variant: \"normal\",\n        fontName: \"Main-Regular\"\n    },\n    \"textit\": {\n        variant: \"italic\",\n        fontName: \"Main-Italic\"\n    },\n    \"mathit\": {\n        variant: \"italic\",\n        fontName: \"Main-Italic\"\n    },\n    \"mathnormal\": {\n        variant: \"italic\",\n        fontName: \"Math-Italic\"\n    },\n    // \"boldsymbol\" is missing because they require the use of multiple fonts:\n    // Math-BoldItalic and Main-Bold.  This is handled by a special case in\n    // makeOrd which ends up calling boldsymbol.\n    // families\n    \"mathbb\": {\n        variant: \"double-struck\",\n        fontName: \"AMS-Regular\"\n    },\n    \"mathcal\": {\n        variant: \"script\",\n        fontName: \"Caligraphic-Regular\"\n    },\n    \"mathfrak\": {\n        variant: \"fraktur\",\n        fontName: \"Fraktur-Regular\"\n    },\n    \"mathscr\": {\n        variant: \"script\",\n        fontName: \"Script-Regular\"\n    },\n    \"mathsf\": {\n        variant: \"sans-serif\",\n        fontName: \"SansSerif-Regular\"\n    },\n    \"mathtt\": {\n        variant: \"monospace\",\n        fontName: \"Typewriter-Regular\"\n    }\n};\nvar svgData = {\n    //   path, width, height\n    vec: [\n        \"vec\",\n        0.471,\n        0.714\n    ],\n    // values from the font glyph\n    oiintSize1: [\n        \"oiintSize1\",\n        0.957,\n        0.499\n    ],\n    // oval to overlay the integrand\n    oiintSize2: [\n        \"oiintSize2\",\n        1.472,\n        0.659\n    ],\n    oiiintSize1: [\n        \"oiiintSize1\",\n        1.304,\n        0.499\n    ],\n    oiiintSize2: [\n        \"oiiintSize2\",\n        1.98,\n        0.659\n    ]\n};\nvar staticSvg = function staticSvg(value, options) {\n    // Create a span with inline SVG for the element.\n    var [pathName, width, height] = svgData[value];\n    var path = new PathNode(pathName);\n    var svgNode = new SvgNode([\n        path\n    ], {\n        \"width\": makeEm(width),\n        \"height\": makeEm(height),\n        // Override CSS rule `.katex svg { width: 100% }`\n        \"style\": \"width:\" + makeEm(width),\n        \"viewBox\": \"0 0 \" + 1000 * width + \" \" + 1000 * height,\n        \"preserveAspectRatio\": \"xMinYMin\"\n    });\n    var span = makeSvgSpan([\n        \"overlay\"\n    ], [\n        svgNode\n    ], options);\n    span.height = height;\n    span.style.height = makeEm(height);\n    span.style.width = makeEm(width);\n    return span;\n};\nvar buildCommon = {\n    fontMap,\n    makeSymbol,\n    mathsym,\n    makeSpan: makeSpan$2,\n    makeSvgSpan,\n    makeLineSpan,\n    makeAnchor,\n    makeFragment,\n    wrapFragment,\n    makeVList,\n    makeOrd,\n    makeGlue,\n    staticSvg,\n    svgData,\n    tryCombineChars\n};\n/**\n * Describes spaces between different classes of atoms.\n */ var thinspace = {\n    number: 3,\n    unit: \"mu\"\n};\nvar mediumspace = {\n    number: 4,\n    unit: \"mu\"\n};\nvar thickspace = {\n    number: 5,\n    unit: \"mu\"\n}; // Making the type below exact with all optional fields doesn't work due to\n// - https://github.com/facebook/flow/issues/4582\n// - https://github.com/facebook/flow/issues/5688\n// However, since *all* fields are optional, $Shape<> works as suggested in 5688\n// above.\n// Spacing relationships for display and text styles\nvar spacings = {\n    mord: {\n        mop: thinspace,\n        mbin: mediumspace,\n        mrel: thickspace,\n        minner: thinspace\n    },\n    mop: {\n        mord: thinspace,\n        mop: thinspace,\n        mrel: thickspace,\n        minner: thinspace\n    },\n    mbin: {\n        mord: mediumspace,\n        mop: mediumspace,\n        mopen: mediumspace,\n        minner: mediumspace\n    },\n    mrel: {\n        mord: thickspace,\n        mop: thickspace,\n        mopen: thickspace,\n        minner: thickspace\n    },\n    mopen: {},\n    mclose: {\n        mop: thinspace,\n        mbin: mediumspace,\n        mrel: thickspace,\n        minner: thinspace\n    },\n    mpunct: {\n        mord: thinspace,\n        mop: thinspace,\n        mrel: thickspace,\n        mopen: thinspace,\n        mclose: thinspace,\n        mpunct: thinspace,\n        minner: thinspace\n    },\n    minner: {\n        mord: thinspace,\n        mop: thinspace,\n        mbin: mediumspace,\n        mrel: thickspace,\n        mopen: thinspace,\n        mpunct: thinspace,\n        minner: thinspace\n    }\n}; // Spacing relationships for script and scriptscript styles\nvar tightSpacings = {\n    mord: {\n        mop: thinspace\n    },\n    mop: {\n        mord: thinspace,\n        mop: thinspace\n    },\n    mbin: {},\n    mrel: {},\n    mopen: {},\n    mclose: {\n        mop: thinspace\n    },\n    mpunct: {},\n    minner: {\n        mop: thinspace\n    }\n};\n/** Context provided to function handlers for error messages. */ // Note: reverse the order of the return type union will cause a flow error.\n// See https://github.com/facebook/flow/issues/3663.\n// More general version of `HtmlBuilder` for nodes (e.g. \\sum, accent types)\n// whose presence impacts super/subscripting. In this case, ParseNode<\"supsub\">\n// delegates its HTML building to the HtmlBuilder corresponding to these nodes.\n/**\n * Final function spec for use at parse time.\n * This is almost identical to `FunctionPropSpec`, except it\n * 1. includes the function handler, and\n * 2. requires all arguments except argTypes.\n * It is generated by `defineFunction()` below.\n */ /**\n * All registered functions.\n * `functions.js` just exports this same dictionary again and makes it public.\n * `Parser.js` requires this dictionary.\n */ var _functions = {};\n/**\n * All HTML builders. Should be only used in the `define*` and the `build*ML`\n * functions.\n */ var _htmlGroupBuilders = {};\n/**\n * All MathML builders. Should be only used in the `define*` and the `build*ML`\n * functions.\n */ var _mathmlGroupBuilders = {};\nfunction defineFunction(_ref) {\n    var { type, names, props, handler, htmlBuilder, mathmlBuilder } = _ref;\n    // Set default values of functions\n    var data = {\n        type,\n        numArgs: props.numArgs,\n        argTypes: props.argTypes,\n        allowedInArgument: !!props.allowedInArgument,\n        allowedInText: !!props.allowedInText,\n        allowedInMath: props.allowedInMath === undefined ? true : props.allowedInMath,\n        numOptionalArgs: props.numOptionalArgs || 0,\n        infix: !!props.infix,\n        primitive: !!props.primitive,\n        handler: handler\n    };\n    for(var i = 0; i < names.length; ++i){\n        _functions[names[i]] = data;\n    }\n    if (type) {\n        if (htmlBuilder) {\n            _htmlGroupBuilders[type] = htmlBuilder;\n        }\n        if (mathmlBuilder) {\n            _mathmlGroupBuilders[type] = mathmlBuilder;\n        }\n    }\n}\n/**\n * Use this to register only the HTML and MathML builders for a function (e.g.\n * if the function's ParseNode is generated in Parser.js rather than via a\n * stand-alone handler provided to `defineFunction`).\n */ function defineFunctionBuilders(_ref2) {\n    var { type, htmlBuilder, mathmlBuilder } = _ref2;\n    defineFunction({\n        type,\n        names: [],\n        props: {\n            numArgs: 0\n        },\n        handler () {\n            throw new Error(\"Should never be called.\");\n        },\n        htmlBuilder,\n        mathmlBuilder\n    });\n}\nvar normalizeArgument = function normalizeArgument(arg) {\n    return arg.type === \"ordgroup\" && arg.body.length === 1 ? arg.body[0] : arg;\n}; // Since the corresponding buildHTML/buildMathML function expects a\n// list of elements, we normalize for different kinds of arguments\nvar ordargument = function ordargument(arg) {\n    return arg.type === \"ordgroup\" ? arg.body : [\n        arg\n    ];\n};\n/**\n * This file does the main work of building a domTree structure from a parse\n * tree. The entry point is the `buildHTML` function, which takes a parse tree.\n * Then, the buildExpression, buildGroup, and various groupBuilders functions\n * are called, to produce a final HTML tree.\n */ var makeSpan$1 = buildCommon.makeSpan; // Binary atoms (first class `mbin`) change into ordinary atoms (`mord`)\n// depending on their surroundings. See TeXbook pg. 442-446, Rules 5 and 6,\n// and the text before Rule 19.\nvar binLeftCanceller = [\n    \"leftmost\",\n    \"mbin\",\n    \"mopen\",\n    \"mrel\",\n    \"mop\",\n    \"mpunct\"\n];\nvar binRightCanceller = [\n    \"rightmost\",\n    \"mrel\",\n    \"mclose\",\n    \"mpunct\"\n];\nvar styleMap$1 = {\n    \"display\": Style$1.DISPLAY,\n    \"text\": Style$1.TEXT,\n    \"script\": Style$1.SCRIPT,\n    \"scriptscript\": Style$1.SCRIPTSCRIPT\n};\nvar DomEnum = {\n    mord: \"mord\",\n    mop: \"mop\",\n    mbin: \"mbin\",\n    mrel: \"mrel\",\n    mopen: \"mopen\",\n    mclose: \"mclose\",\n    mpunct: \"mpunct\",\n    minner: \"minner\"\n};\n/**\n * Take a list of nodes, build them in order, and return a list of the built\n * nodes. documentFragments are flattened into their contents, so the\n * returned list contains no fragments. `isRealGroup` is true if `expression`\n * is a real group (no atoms will be added on either side), as opposed to\n * a partial group (e.g. one created by \\color). `surrounding` is an array\n * consisting type of nodes that will be added to the left and right.\n */ var buildExpression$1 = function buildExpression(expression, options, isRealGroup, surrounding) {\n    if (surrounding === void 0) {\n        surrounding = [\n            null,\n            null\n        ];\n    }\n    // Parse expressions into `groups`.\n    var groups = [];\n    for(var i = 0; i < expression.length; i++){\n        var output = buildGroup$1(expression[i], options);\n        if (output instanceof DocumentFragment) {\n            var children = output.children;\n            groups.push(...children);\n        } else {\n            groups.push(output);\n        }\n    } // Combine consecutive domTree.symbolNodes into a single symbolNode.\n    buildCommon.tryCombineChars(groups); // If `expression` is a partial group, let the parent handle spacings\n    // to avoid processing groups multiple times.\n    if (!isRealGroup) {\n        return groups;\n    }\n    var glueOptions = options;\n    if (expression.length === 1) {\n        var node = expression[0];\n        if (node.type === \"sizing\") {\n            glueOptions = options.havingSize(node.size);\n        } else if (node.type === \"styling\") {\n            glueOptions = options.havingStyle(styleMap$1[node.style]);\n        }\n    } // Dummy spans for determining spacings between surrounding atoms.\n    // If `expression` has no atoms on the left or right, class \"leftmost\"\n    // or \"rightmost\", respectively, is used to indicate it.\n    var dummyPrev = makeSpan$1([\n        surrounding[0] || \"leftmost\"\n    ], [], options);\n    var dummyNext = makeSpan$1([\n        surrounding[1] || \"rightmost\"\n    ], [], options); // TODO: These code assumes that a node's math class is the first element\n    // of its `classes` array. A later cleanup should ensure this, for\n    // instance by changing the signature of `makeSpan`.\n    // Before determining what spaces to insert, perform bin cancellation.\n    // Binary operators change to ordinary symbols in some contexts.\n    var isRoot = isRealGroup === \"root\";\n    traverseNonSpaceNodes(groups, (node, prev)=>{\n        var prevType = prev.classes[0];\n        var type = node.classes[0];\n        if (prevType === \"mbin\" && utils.contains(binRightCanceller, type)) {\n            prev.classes[0] = \"mord\";\n        } else if (type === \"mbin\" && utils.contains(binLeftCanceller, prevType)) {\n            node.classes[0] = \"mord\";\n        }\n    }, {\n        node: dummyPrev\n    }, dummyNext, isRoot);\n    traverseNonSpaceNodes(groups, (node, prev)=>{\n        var prevType = getTypeOfDomTree(prev);\n        var type = getTypeOfDomTree(node); // 'mtight' indicates that the node is script or scriptscript style.\n        var space = prevType && type ? node.hasClass(\"mtight\") ? tightSpacings[prevType][type] : spacings[prevType][type] : null;\n        if (space) {\n            // Insert glue (spacing) after the `prev`.\n            return buildCommon.makeGlue(space, glueOptions);\n        }\n    }, {\n        node: dummyPrev\n    }, dummyNext, isRoot);\n    return groups;\n}; // Depth-first traverse non-space `nodes`, calling `callback` with the current and\n// previous node as arguments, optionally returning a node to insert after the\n// previous node. `prev` is an object with the previous node and `insertAfter`\n// function to insert after it. `next` is a node that will be added to the right.\n// Used for bin cancellation and inserting spacings.\nvar traverseNonSpaceNodes = function traverseNonSpaceNodes(nodes, callback, prev, next, isRoot) {\n    if (next) {\n        // temporarily append the right node, if exists\n        nodes.push(next);\n    }\n    var i = 0;\n    for(; i < nodes.length; i++){\n        var node = nodes[i];\n        var partialGroup = checkPartialGroup(node);\n        if (partialGroup) {\n            // Recursive DFS\n            // $FlowFixMe: make nodes a $ReadOnlyArray by returning a new array\n            traverseNonSpaceNodes(partialGroup.children, callback, prev, null, isRoot);\n            continue;\n        } // Ignore explicit spaces (e.g., \\;, \\,) when determining what implicit\n        // spacing should go between atoms of different classes\n        var nonspace = !node.hasClass(\"mspace\");\n        if (nonspace) {\n            var result = callback(node, prev.node);\n            if (result) {\n                if (prev.insertAfter) {\n                    prev.insertAfter(result);\n                } else {\n                    // insert at front\n                    nodes.unshift(result);\n                    i++;\n                }\n            }\n        }\n        if (nonspace) {\n            prev.node = node;\n        } else if (isRoot && node.hasClass(\"newline\")) {\n            prev.node = makeSpan$1([\n                \"leftmost\"\n            ]); // treat like beginning of line\n        }\n        prev.insertAfter = ((index)=>(n)=>{\n                nodes.splice(index + 1, 0, n);\n                i++;\n            })(i);\n    }\n    if (next) {\n        nodes.pop();\n    }\n}; // Check if given node is a partial group, i.e., does not affect spacing around.\nvar checkPartialGroup = function checkPartialGroup(node) {\n    if (node instanceof DocumentFragment || node instanceof Anchor || node instanceof Span && node.hasClass(\"enclosing\")) {\n        return node;\n    }\n    return null;\n}; // Return the outermost node of a domTree.\nvar getOutermostNode = function getOutermostNode(node, side) {\n    var partialGroup = checkPartialGroup(node);\n    if (partialGroup) {\n        var children = partialGroup.children;\n        if (children.length) {\n            if (side === \"right\") {\n                return getOutermostNode(children[children.length - 1], \"right\");\n            } else if (side === \"left\") {\n                return getOutermostNode(children[0], \"left\");\n            }\n        }\n    }\n    return node;\n}; // Return math atom class (mclass) of a domTree.\n// If `side` is given, it will get the type of the outermost node at given side.\nvar getTypeOfDomTree = function getTypeOfDomTree(node, side) {\n    if (!node) {\n        return null;\n    }\n    if (side) {\n        node = getOutermostNode(node, side);\n    } // This makes a lot of assumptions as to where the type of atom\n    // appears.  We should do a better job of enforcing this.\n    return DomEnum[node.classes[0]] || null;\n};\nvar makeNullDelimiter = function makeNullDelimiter(options, classes) {\n    var moreClasses = [\n        \"nulldelimiter\"\n    ].concat(options.baseSizingClasses());\n    return makeSpan$1(classes.concat(moreClasses));\n};\n/**\n * buildGroup is the function that takes a group and calls the correct groupType\n * function for it. It also handles the interaction of size and style changes\n * between parents and children.\n */ var buildGroup$1 = function buildGroup(group, options, baseOptions) {\n    if (!group) {\n        return makeSpan$1();\n    }\n    if (_htmlGroupBuilders[group.type]) {\n        // Call the groupBuilders function\n        // $FlowFixMe\n        var groupNode = _htmlGroupBuilders[group.type](group, options); // If the size changed between the parent and the current group, account\n        // for that size difference.\n        if (baseOptions && options.size !== baseOptions.size) {\n            groupNode = makeSpan$1(options.sizingClasses(baseOptions), [\n                groupNode\n            ], options);\n            var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier;\n            groupNode.height *= multiplier;\n            groupNode.depth *= multiplier;\n        }\n        return groupNode;\n    } else {\n        throw new ParseError(\"Got group of unknown type: '\" + group.type + \"'\");\n    }\n};\n/**\n * Combine an array of HTML DOM nodes (e.g., the output of `buildExpression`)\n * into an unbreakable HTML node of class .base, with proper struts to\n * guarantee correct vertical extent.  `buildHTML` calls this repeatedly to\n * make up the entire expression as a sequence of unbreakable units.\n */ function buildHTMLUnbreakable(children, options) {\n    // Compute height and depth of this chunk.\n    var body = makeSpan$1([\n        \"base\"\n    ], children, options); // Add strut, which ensures that the top of the HTML element falls at\n    // the height of the expression, and the bottom of the HTML element\n    // falls at the depth of the expression.\n    var strut = makeSpan$1([\n        \"strut\"\n    ]);\n    strut.style.height = makeEm(body.height + body.depth);\n    if (body.depth) {\n        strut.style.verticalAlign = makeEm(-body.depth);\n    }\n    body.children.unshift(strut);\n    return body;\n}\n/**\n * Take an entire parse tree, and build it into an appropriate set of HTML\n * nodes.\n */ function buildHTML(tree, options) {\n    // Strip off outer tag wrapper for processing below.\n    var tag = null;\n    if (tree.length === 1 && tree[0].type === \"tag\") {\n        tag = tree[0].tag;\n        tree = tree[0].body;\n    } // Build the expression contained in the tree\n    var expression = buildExpression$1(tree, options, \"root\");\n    var eqnNum;\n    if (expression.length === 2 && expression[1].hasClass(\"tag\")) {\n        // An environment with automatic equation numbers, e.g. {gather}.\n        eqnNum = expression.pop();\n    }\n    var children = []; // Create one base node for each chunk between potential line breaks.\n    // The TeXBook [p.173] says \"A formula will be broken only after a\n    // relation symbol like $=$ or $<$ or $\\rightarrow$, or after a binary\n    // operation symbol like $+$ or $-$ or $\\times$, where the relation or\n    // binary operation is on the ``outer level'' of the formula (i.e., not\n    // enclosed in {...} and not part of an \\over construction).\"\n    var parts = [];\n    for(var i = 0; i < expression.length; i++){\n        parts.push(expression[i]);\n        if (expression[i].hasClass(\"mbin\") || expression[i].hasClass(\"mrel\") || expression[i].hasClass(\"allowbreak\")) {\n            // Put any post-operator glue on same line as operator.\n            // Watch for \\nobreak along the way, and stop at \\newline.\n            var nobreak = false;\n            while(i < expression.length - 1 && expression[i + 1].hasClass(\"mspace\") && !expression[i + 1].hasClass(\"newline\")){\n                i++;\n                parts.push(expression[i]);\n                if (expression[i].hasClass(\"nobreak\")) {\n                    nobreak = true;\n                }\n            } // Don't allow break if \\nobreak among the post-operator glue.\n            if (!nobreak) {\n                children.push(buildHTMLUnbreakable(parts, options));\n                parts = [];\n            }\n        } else if (expression[i].hasClass(\"newline\")) {\n            // Write the line except the newline\n            parts.pop();\n            if (parts.length > 0) {\n                children.push(buildHTMLUnbreakable(parts, options));\n                parts = [];\n            } // Put the newline at the top level\n            children.push(expression[i]);\n        }\n    }\n    if (parts.length > 0) {\n        children.push(buildHTMLUnbreakable(parts, options));\n    } // Now, if there was a tag, build it too and append it as a final child.\n    var tagChild;\n    if (tag) {\n        tagChild = buildHTMLUnbreakable(buildExpression$1(tag, options, true));\n        tagChild.classes = [\n            \"tag\"\n        ];\n        children.push(tagChild);\n    } else if (eqnNum) {\n        children.push(eqnNum);\n    }\n    var htmlNode = makeSpan$1([\n        \"katex-html\"\n    ], children);\n    htmlNode.setAttribute(\"aria-hidden\", \"true\"); // Adjust the strut of the tag to be the maximum height of all children\n    // (the height of the enclosing htmlNode) for proper vertical alignment.\n    if (tagChild) {\n        var strut = tagChild.children[0];\n        strut.style.height = makeEm(htmlNode.height + htmlNode.depth);\n        if (htmlNode.depth) {\n            strut.style.verticalAlign = makeEm(-htmlNode.depth);\n        }\n    }\n    return htmlNode;\n}\n/**\n * These objects store data about MathML nodes. This is the MathML equivalent\n * of the types in domTree.js. Since MathML handles its own rendering, and\n * since we're mainly using MathML to improve accessibility, we don't manage\n * any of the styling state that the plain DOM nodes do.\n *\n * The `toNode` and `toMarkup` functions work similarly to how they do in\n * domTree.js, creating namespaced DOM nodes and HTML text markup respectively.\n */ function newDocumentFragment(children) {\n    return new DocumentFragment(children);\n}\n/**\n * This node represents a general purpose MathML node of any type. The\n * constructor requires the type of node to create (for example, `\"mo\"` or\n * `\"mspace\"`, corresponding to `<mo>` and `<mspace>` tags).\n */ class MathNode {\n    constructor(type, children, classes){\n        this.type = void 0;\n        this.attributes = void 0;\n        this.children = void 0;\n        this.classes = void 0;\n        this.type = type;\n        this.attributes = {};\n        this.children = children || [];\n        this.classes = classes || [];\n    }\n    /**\n   * Sets an attribute on a MathML node. MathML depends on attributes to convey a\n   * semantic content, so this is used heavily.\n   */ setAttribute(name, value) {\n        this.attributes[name] = value;\n    }\n    /**\n   * Gets an attribute on a MathML node.\n   */ getAttribute(name) {\n        return this.attributes[name];\n    }\n    /**\n   * Converts the math node into a MathML-namespaced DOM element.\n   */ toNode() {\n        var node = document.createElementNS(\"http://www.w3.org/1998/Math/MathML\", this.type);\n        for(var attr in this.attributes){\n            if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {\n                node.setAttribute(attr, this.attributes[attr]);\n            }\n        }\n        if (this.classes.length > 0) {\n            node.className = createClass(this.classes);\n        }\n        for(var i = 0; i < this.children.length; i++){\n            node.appendChild(this.children[i].toNode());\n        }\n        return node;\n    }\n    /**\n   * Converts the math node into an HTML markup string.\n   */ toMarkup() {\n        var markup = \"<\" + this.type; // Add the attributes\n        for(var attr in this.attributes){\n            if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {\n                markup += \" \" + attr + '=\"';\n                markup += utils.escape(this.attributes[attr]);\n                markup += '\"';\n            }\n        }\n        if (this.classes.length > 0) {\n            markup += ' class =\"' + utils.escape(createClass(this.classes)) + '\"';\n        }\n        markup += \">\";\n        for(var i = 0; i < this.children.length; i++){\n            markup += this.children[i].toMarkup();\n        }\n        markup += \"</\" + this.type + \">\";\n        return markup;\n    }\n    /**\n   * Converts the math node into a string, similar to innerText, but escaped.\n   */ toText() {\n        return this.children.map((child)=>child.toText()).join(\"\");\n    }\n}\n/**\n * This node represents a piece of text.\n */ class TextNode {\n    constructor(text){\n        this.text = void 0;\n        this.text = text;\n    }\n    /**\n   * Converts the text node into a DOM text node.\n   */ toNode() {\n        return document.createTextNode(this.text);\n    }\n    /**\n   * Converts the text node into escaped HTML markup\n   * (representing the text itself).\n   */ toMarkup() {\n        return utils.escape(this.toText());\n    }\n    /**\n   * Converts the text node into a string\n   * (representing the text itself).\n   */ toText() {\n        return this.text;\n    }\n}\n/**\n * This node represents a space, but may render as <mspace.../> or as text,\n * depending on the width.\n */ class SpaceNode {\n    /**\n   * Create a Space node with width given in CSS ems.\n   */ constructor(width){\n        this.width = void 0;\n        this.character = void 0;\n        this.width = width; // See https://www.w3.org/TR/2000/WD-MathML2-20000328/chapter6.html\n        // for a table of space-like characters.  We use Unicode\n        // representations instead of &LongNames; as it's not clear how to\n        // make the latter via document.createTextNode.\n        if (width >= 0.05555 && width <= 0.05556) {\n            this.character = \" \"; // &VeryThinSpace;\n        } else if (width >= 0.1666 && width <= 0.1667) {\n            this.character = \" \"; // &ThinSpace;\n        } else if (width >= 0.2222 && width <= 0.2223) {\n            this.character = \" \"; // &MediumSpace;\n        } else if (width >= 0.2777 && width <= 0.2778) {\n            this.character = \"  \"; // &ThickSpace;\n        } else if (width >= -0.05556 && width <= -0.05555) {\n            this.character = \" ⁣\"; // &NegativeVeryThinSpace;\n        } else if (width >= -0.1667 && width <= -0.1666) {\n            this.character = \" ⁣\"; // &NegativeThinSpace;\n        } else if (width >= -0.2223 && width <= -0.2222) {\n            this.character = \" ⁣\"; // &NegativeMediumSpace;\n        } else if (width >= -0.2778 && width <= -0.2777) {\n            this.character = \" ⁣\"; // &NegativeThickSpace;\n        } else {\n            this.character = null;\n        }\n    }\n    /**\n   * Converts the math node into a MathML-namespaced DOM element.\n   */ toNode() {\n        if (this.character) {\n            return document.createTextNode(this.character);\n        } else {\n            var node = document.createElementNS(\"http://www.w3.org/1998/Math/MathML\", \"mspace\");\n            node.setAttribute(\"width\", makeEm(this.width));\n            return node;\n        }\n    }\n    /**\n   * Converts the math node into an HTML markup string.\n   */ toMarkup() {\n        if (this.character) {\n            return \"<mtext>\" + this.character + \"</mtext>\";\n        } else {\n            return '<mspace width=\"' + makeEm(this.width) + '\"/>';\n        }\n    }\n    /**\n   * Converts the math node into a string, similar to innerText.\n   */ toText() {\n        if (this.character) {\n            return this.character;\n        } else {\n            return \" \";\n        }\n    }\n}\nvar mathMLTree = {\n    MathNode,\n    TextNode,\n    SpaceNode,\n    newDocumentFragment\n};\n/**\n * This file converts a parse tree into a corresponding MathML tree. The main\n * entry point is the `buildMathML` function, which takes a parse tree from the\n * parser.\n */ /**\n * Takes a symbol and converts it into a MathML text node after performing\n * optional replacement from symbols.js.\n */ var makeText = function makeText(text, mode, options) {\n    if (symbols[mode][text] && symbols[mode][text].replace && text.charCodeAt(0) !== 0xD835 && !(ligatures.hasOwnProperty(text) && options && (options.fontFamily && options.fontFamily.slice(4, 6) === \"tt\" || options.font && options.font.slice(4, 6) === \"tt\"))) {\n        text = symbols[mode][text].replace;\n    }\n    return new mathMLTree.TextNode(text);\n};\n/**\n * Wrap the given array of nodes in an <mrow> node if needed, i.e.,\n * unless the array has length 1.  Always returns a single node.\n */ var makeRow = function makeRow(body) {\n    if (body.length === 1) {\n        return body[0];\n    } else {\n        return new mathMLTree.MathNode(\"mrow\", body);\n    }\n};\n/**\n * Returns the math variant as a string or null if none is required.\n */ var getVariant = function getVariant(group, options) {\n    // Handle \\text... font specifiers as best we can.\n    // MathML has a limited list of allowable mathvariant specifiers; see\n    // https://www.w3.org/TR/MathML3/chapter3.html#presm.commatt\n    if (options.fontFamily === \"texttt\") {\n        return \"monospace\";\n    } else if (options.fontFamily === \"textsf\") {\n        if (options.fontShape === \"textit\" && options.fontWeight === \"textbf\") {\n            return \"sans-serif-bold-italic\";\n        } else if (options.fontShape === \"textit\") {\n            return \"sans-serif-italic\";\n        } else if (options.fontWeight === \"textbf\") {\n            return \"bold-sans-serif\";\n        } else {\n            return \"sans-serif\";\n        }\n    } else if (options.fontShape === \"textit\" && options.fontWeight === \"textbf\") {\n        return \"bold-italic\";\n    } else if (options.fontShape === \"textit\") {\n        return \"italic\";\n    } else if (options.fontWeight === \"textbf\") {\n        return \"bold\";\n    }\n    var font = options.font;\n    if (!font || font === \"mathnormal\") {\n        return null;\n    }\n    var mode = group.mode;\n    if (font === \"mathit\") {\n        return \"italic\";\n    } else if (font === \"boldsymbol\") {\n        return group.type === \"textord\" ? \"bold\" : \"bold-italic\";\n    } else if (font === \"mathbf\") {\n        return \"bold\";\n    } else if (font === \"mathbb\") {\n        return \"double-struck\";\n    } else if (font === \"mathfrak\") {\n        return \"fraktur\";\n    } else if (font === \"mathscr\" || font === \"mathcal\") {\n        // MathML makes no distinction between script and calligraphic\n        return \"script\";\n    } else if (font === \"mathsf\") {\n        return \"sans-serif\";\n    } else if (font === \"mathtt\") {\n        return \"monospace\";\n    }\n    var text = group.text;\n    if (utils.contains([\n        \"\\\\imath\",\n        \"\\\\jmath\"\n    ], text)) {\n        return null;\n    }\n    if (symbols[mode][text] && symbols[mode][text].replace) {\n        text = symbols[mode][text].replace;\n    }\n    var fontName = buildCommon.fontMap[font].fontName;\n    if (getCharacterMetrics(text, fontName, mode)) {\n        return buildCommon.fontMap[font].variant;\n    }\n    return null;\n};\n/**\n * Takes a list of nodes, builds them, and returns a list of the generated\n * MathML nodes.  Also combine consecutive <mtext> outputs into a single\n * <mtext> tag.\n */ var buildExpression = function buildExpression(expression, options, isOrdgroup) {\n    if (expression.length === 1) {\n        var group = buildGroup(expression[0], options);\n        if (isOrdgroup && group instanceof MathNode && group.type === \"mo\") {\n            // When TeX writers want to suppress spacing on an operator,\n            // they often put the operator by itself inside braces.\n            group.setAttribute(\"lspace\", \"0em\");\n            group.setAttribute(\"rspace\", \"0em\");\n        }\n        return [\n            group\n        ];\n    }\n    var groups = [];\n    var lastGroup;\n    for(var i = 0; i < expression.length; i++){\n        var _group = buildGroup(expression[i], options);\n        if (_group instanceof MathNode && lastGroup instanceof MathNode) {\n            // Concatenate adjacent <mtext>s\n            if (_group.type === \"mtext\" && lastGroup.type === \"mtext\" && _group.getAttribute(\"mathvariant\") === lastGroup.getAttribute(\"mathvariant\")) {\n                lastGroup.children.push(..._group.children);\n                continue; // Concatenate adjacent <mn>s\n            } else if (_group.type === \"mn\" && lastGroup.type === \"mn\") {\n                lastGroup.children.push(..._group.children);\n                continue; // Concatenate <mn>...</mn> followed by <mi>.</mi>\n            } else if (_group.type === \"mi\" && _group.children.length === 1 && lastGroup.type === \"mn\") {\n                var child = _group.children[0];\n                if (child instanceof TextNode && child.text === \".\") {\n                    lastGroup.children.push(..._group.children);\n                    continue;\n                }\n            } else if (lastGroup.type === \"mi\" && lastGroup.children.length === 1) {\n                var lastChild = lastGroup.children[0];\n                if (lastChild instanceof TextNode && lastChild.text === \"̸\" && (_group.type === \"mo\" || _group.type === \"mi\" || _group.type === \"mn\")) {\n                    var _child = _group.children[0];\n                    if (_child instanceof TextNode && _child.text.length > 0) {\n                        // Overlay with combining character long solidus\n                        _child.text = _child.text.slice(0, 1) + \"̸\" + _child.text.slice(1);\n                        groups.pop();\n                    }\n                }\n            }\n        }\n        groups.push(_group);\n        lastGroup = _group;\n    }\n    return groups;\n};\n/**\n * Equivalent to buildExpression, but wraps the elements in an <mrow>\n * if there's more than one.  Returns a single node instead of an array.\n */ var buildExpressionRow = function buildExpressionRow(expression, options, isOrdgroup) {\n    return makeRow(buildExpression(expression, options, isOrdgroup));\n};\n/**\n * Takes a group from the parser and calls the appropriate groupBuilders function\n * on it to produce a MathML node.\n */ var buildGroup = function buildGroup(group, options) {\n    if (!group) {\n        return new mathMLTree.MathNode(\"mrow\");\n    }\n    if (_mathmlGroupBuilders[group.type]) {\n        // Call the groupBuilders function\n        // $FlowFixMe\n        var result = _mathmlGroupBuilders[group.type](group, options); // $FlowFixMe\n        return result;\n    } else {\n        throw new ParseError(\"Got group of unknown type: '\" + group.type + \"'\");\n    }\n};\n/**\n * Takes a full parse tree and settings and builds a MathML representation of\n * it. In particular, we put the elements from building the parse tree into a\n * <semantics> tag so we can also include that TeX source as an annotation.\n *\n * Note that we actually return a domTree element with a `<math>` inside it so\n * we can do appropriate styling.\n */ function buildMathML(tree, texExpression, options, isDisplayMode, forMathmlOnly) {\n    var expression = buildExpression(tree, options); // TODO: Make a pass thru the MathML similar to buildHTML.traverseNonSpaceNodes\n    // and add spacing nodes. This is necessary only adjacent to math operators\n    // like \\sin or \\lim or to subsup elements that contain math operators.\n    // MathML takes care of the other spacing issues.\n    // Wrap up the expression in an mrow so it is presented in the semantics\n    // tag correctly, unless it's a single <mrow> or <mtable>.\n    var wrapper;\n    if (expression.length === 1 && expression[0] instanceof MathNode && utils.contains([\n        \"mrow\",\n        \"mtable\"\n    ], expression[0].type)) {\n        wrapper = expression[0];\n    } else {\n        wrapper = new mathMLTree.MathNode(\"mrow\", expression);\n    } // Build a TeX annotation of the source\n    var annotation = new mathMLTree.MathNode(\"annotation\", [\n        new mathMLTree.TextNode(texExpression)\n    ]);\n    annotation.setAttribute(\"encoding\", \"application/x-tex\");\n    var semantics = new mathMLTree.MathNode(\"semantics\", [\n        wrapper,\n        annotation\n    ]);\n    var math = new mathMLTree.MathNode(\"math\", [\n        semantics\n    ]);\n    math.setAttribute(\"xmlns\", \"http://www.w3.org/1998/Math/MathML\");\n    if (isDisplayMode) {\n        math.setAttribute(\"display\", \"block\");\n    } // You can't style <math> nodes, so we wrap the node in a span.\n    // NOTE: The span class is not typed to have <math> nodes as children, and\n    // we don't want to make the children type more generic since the children\n    // of span are expected to have more fields in `buildHtml` contexts.\n    var wrapperClass = forMathmlOnly ? \"katex\" : \"katex-mathml\"; // $FlowFixMe\n    return buildCommon.makeSpan([\n        wrapperClass\n    ], [\n        math\n    ]);\n}\nvar optionsFromSettings = function optionsFromSettings(settings) {\n    return new Options({\n        style: settings.displayMode ? Style$1.DISPLAY : Style$1.TEXT,\n        maxSize: settings.maxSize,\n        minRuleThickness: settings.minRuleThickness\n    });\n};\nvar displayWrap = function displayWrap(node, settings) {\n    if (settings.displayMode) {\n        var classes = [\n            \"katex-display\"\n        ];\n        if (settings.leqno) {\n            classes.push(\"leqno\");\n        }\n        if (settings.fleqn) {\n            classes.push(\"fleqn\");\n        }\n        node = buildCommon.makeSpan(classes, [\n            node\n        ]);\n    }\n    return node;\n};\nvar buildTree = function buildTree(tree, expression, settings) {\n    var options = optionsFromSettings(settings);\n    var katexNode;\n    if (settings.output === \"mathml\") {\n        return buildMathML(tree, expression, options, settings.displayMode, true);\n    } else if (settings.output === \"html\") {\n        var htmlNode = buildHTML(tree, options);\n        katexNode = buildCommon.makeSpan([\n            \"katex\"\n        ], [\n            htmlNode\n        ]);\n    } else {\n        var mathMLNode = buildMathML(tree, expression, options, settings.displayMode, false);\n        var _htmlNode = buildHTML(tree, options);\n        katexNode = buildCommon.makeSpan([\n            \"katex\"\n        ], [\n            mathMLNode,\n            _htmlNode\n        ]);\n    }\n    return displayWrap(katexNode, settings);\n};\nvar buildHTMLTree = function buildHTMLTree(tree, expression, settings) {\n    var options = optionsFromSettings(settings);\n    var htmlNode = buildHTML(tree, options);\n    var katexNode = buildCommon.makeSpan([\n        \"katex\"\n    ], [\n        htmlNode\n    ]);\n    return displayWrap(katexNode, settings);\n};\n/**\n * This file provides support to buildMathML.js and buildHTML.js\n * for stretchy wide elements rendered from SVG files\n * and other CSS trickery.\n */ var stretchyCodePoint = {\n    widehat: \"^\",\n    widecheck: \"ˇ\",\n    widetilde: \"~\",\n    utilde: \"~\",\n    overleftarrow: \"←\",\n    underleftarrow: \"←\",\n    xleftarrow: \"←\",\n    overrightarrow: \"→\",\n    underrightarrow: \"→\",\n    xrightarrow: \"→\",\n    underbrace: \"⏟\",\n    overbrace: \"⏞\",\n    overgroup: \"⏠\",\n    undergroup: \"⏡\",\n    overleftrightarrow: \"↔\",\n    underleftrightarrow: \"↔\",\n    xleftrightarrow: \"↔\",\n    Overrightarrow: \"⇒\",\n    xRightarrow: \"⇒\",\n    overleftharpoon: \"↼\",\n    xleftharpoonup: \"↼\",\n    overrightharpoon: \"⇀\",\n    xrightharpoonup: \"⇀\",\n    xLeftarrow: \"⇐\",\n    xLeftrightarrow: \"⇔\",\n    xhookleftarrow: \"↩\",\n    xhookrightarrow: \"↪\",\n    xmapsto: \"↦\",\n    xrightharpoondown: \"⇁\",\n    xleftharpoondown: \"↽\",\n    xrightleftharpoons: \"⇌\",\n    xleftrightharpoons: \"⇋\",\n    xtwoheadleftarrow: \"↞\",\n    xtwoheadrightarrow: \"↠\",\n    xlongequal: \"=\",\n    xtofrom: \"⇄\",\n    xrightleftarrows: \"⇄\",\n    xrightequilibrium: \"⇌\",\n    // Not a perfect match.\n    xleftequilibrium: \"⇋\",\n    // None better available.\n    \"\\\\cdrightarrow\": \"→\",\n    \"\\\\cdleftarrow\": \"←\",\n    \"\\\\cdlongequal\": \"=\"\n};\nvar mathMLnode = function mathMLnode(label) {\n    var node = new mathMLTree.MathNode(\"mo\", [\n        new mathMLTree.TextNode(stretchyCodePoint[label.replace(/^\\\\/, \"\")])\n    ]);\n    node.setAttribute(\"stretchy\", \"true\");\n    return node;\n}; // Many of the KaTeX SVG images have been adapted from glyphs in KaTeX fonts.\n// Copyright (c) 2009-2010, Design Science, Inc. (<www.mathjax.org>)\n// Copyright (c) 2014-2017 Khan Academy (<www.khanacademy.org>)\n// Licensed under the SIL Open Font License, Version 1.1.\n// See \\nhttp://scripts.sil.org/OFL\n// Very Long SVGs\n//    Many of the KaTeX stretchy wide elements use a long SVG image and an\n//    overflow: hidden tactic to achieve a stretchy image while avoiding\n//    distortion of arrowheads or brace corners.\n//    The SVG typically contains a very long (400 em) arrow.\n//    The SVG is in a container span that has overflow: hidden, so the span\n//    acts like a window that exposes only part of the  SVG.\n//    The SVG always has a longer, thinner aspect ratio than the container span.\n//    After the SVG fills 100% of the height of the container span,\n//    there is a long arrow shaft left over. That left-over shaft is not shown.\n//    Instead, it is sliced off because the span's CSS has overflow: hidden.\n//    Thus, the reader sees an arrow that matches the subject matter width\n//    without distortion.\n//    Some functions, such as \\cancel, need to vary their aspect ratio. These\n//    functions do not get the overflow SVG treatment.\n// Second Brush Stroke\n//    Low resolution monitors struggle to display images in fine detail.\n//    So browsers apply anti-aliasing. A long straight arrow shaft therefore\n//    will sometimes appear as if it has a blurred edge.\n//    To mitigate this, these SVG files contain a second \"brush-stroke\" on the\n//    arrow shafts. That is, a second long thin rectangular SVG path has been\n//    written directly on top of each arrow shaft. This reinforcement causes\n//    some of the screen pixels to display as black instead of the anti-aliased\n//    gray pixel that a  single path would generate. So we get arrow shafts\n//    whose edges appear to be sharper.\n// In the katexImagesData object just below, the dimensions all\n// correspond to path geometry inside the relevant SVG.\n// For example, \\overrightarrow uses the same arrowhead as glyph U+2192\n// from the KaTeX Main font. The scaling factor is 1000.\n// That is, inside the font, that arrowhead is 522 units tall, which\n// corresponds to 0.522 em inside the document.\nvar katexImagesData = {\n    //   path(s), minWidth, height, align\n    overrightarrow: [\n        [\n            \"rightarrow\"\n        ],\n        0.888,\n        522,\n        \"xMaxYMin\"\n    ],\n    overleftarrow: [\n        [\n            \"leftarrow\"\n        ],\n        0.888,\n        522,\n        \"xMinYMin\"\n    ],\n    underrightarrow: [\n        [\n            \"rightarrow\"\n        ],\n        0.888,\n        522,\n        \"xMaxYMin\"\n    ],\n    underleftarrow: [\n        [\n            \"leftarrow\"\n        ],\n        0.888,\n        522,\n        \"xMinYMin\"\n    ],\n    xrightarrow: [\n        [\n            \"rightarrow\"\n        ],\n        1.469,\n        522,\n        \"xMaxYMin\"\n    ],\n    \"\\\\cdrightarrow\": [\n        [\n            \"rightarrow\"\n        ],\n        3.0,\n        522,\n        \"xMaxYMin\"\n    ],\n    // CD minwwidth2.5pc\n    xleftarrow: [\n        [\n            \"leftarrow\"\n        ],\n        1.469,\n        522,\n        \"xMinYMin\"\n    ],\n    \"\\\\cdleftarrow\": [\n        [\n            \"leftarrow\"\n        ],\n        3.0,\n        522,\n        \"xMinYMin\"\n    ],\n    Overrightarrow: [\n        [\n            \"doublerightarrow\"\n        ],\n        0.888,\n        560,\n        \"xMaxYMin\"\n    ],\n    xRightarrow: [\n        [\n            \"doublerightarrow\"\n        ],\n        1.526,\n        560,\n        \"xMaxYMin\"\n    ],\n    xLeftarrow: [\n        [\n            \"doubleleftarrow\"\n        ],\n        1.526,\n        560,\n        \"xMinYMin\"\n    ],\n    overleftharpoon: [\n        [\n            \"leftharpoon\"\n        ],\n        0.888,\n        522,\n        \"xMinYMin\"\n    ],\n    xleftharpoonup: [\n        [\n            \"leftharpoon\"\n        ],\n        0.888,\n        522,\n        \"xMinYMin\"\n    ],\n    xleftharpoondown: [\n        [\n            \"leftharpoondown\"\n        ],\n        0.888,\n        522,\n        \"xMinYMin\"\n    ],\n    overrightharpoon: [\n        [\n            \"rightharpoon\"\n        ],\n        0.888,\n        522,\n        \"xMaxYMin\"\n    ],\n    xrightharpoonup: [\n        [\n            \"rightharpoon\"\n        ],\n        0.888,\n        522,\n        \"xMaxYMin\"\n    ],\n    xrightharpoondown: [\n        [\n            \"rightharpoondown\"\n        ],\n        0.888,\n        522,\n        \"xMaxYMin\"\n    ],\n    xlongequal: [\n        [\n            \"longequal\"\n        ],\n        0.888,\n        334,\n        \"xMinYMin\"\n    ],\n    \"\\\\cdlongequal\": [\n        [\n            \"longequal\"\n        ],\n        3.0,\n        334,\n        \"xMinYMin\"\n    ],\n    xtwoheadleftarrow: [\n        [\n            \"twoheadleftarrow\"\n        ],\n        0.888,\n        334,\n        \"xMinYMin\"\n    ],\n    xtwoheadrightarrow: [\n        [\n            \"twoheadrightarrow\"\n        ],\n        0.888,\n        334,\n        \"xMaxYMin\"\n    ],\n    overleftrightarrow: [\n        [\n            \"leftarrow\",\n            \"rightarrow\"\n        ],\n        0.888,\n        522\n    ],\n    overbrace: [\n        [\n            \"leftbrace\",\n            \"midbrace\",\n            \"rightbrace\"\n        ],\n        1.6,\n        548\n    ],\n    underbrace: [\n        [\n            \"leftbraceunder\",\n            \"midbraceunder\",\n            \"rightbraceunder\"\n        ],\n        1.6,\n        548\n    ],\n    underleftrightarrow: [\n        [\n            \"leftarrow\",\n            \"rightarrow\"\n        ],\n        0.888,\n        522\n    ],\n    xleftrightarrow: [\n        [\n            \"leftarrow\",\n            \"rightarrow\"\n        ],\n        1.75,\n        522\n    ],\n    xLeftrightarrow: [\n        [\n            \"doubleleftarrow\",\n            \"doublerightarrow\"\n        ],\n        1.75,\n        560\n    ],\n    xrightleftharpoons: [\n        [\n            \"leftharpoondownplus\",\n            \"rightharpoonplus\"\n        ],\n        1.75,\n        716\n    ],\n    xleftrightharpoons: [\n        [\n            \"leftharpoonplus\",\n            \"rightharpoondownplus\"\n        ],\n        1.75,\n        716\n    ],\n    xhookleftarrow: [\n        [\n            \"leftarrow\",\n            \"righthook\"\n        ],\n        1.08,\n        522\n    ],\n    xhookrightarrow: [\n        [\n            \"lefthook\",\n            \"rightarrow\"\n        ],\n        1.08,\n        522\n    ],\n    overlinesegment: [\n        [\n            \"leftlinesegment\",\n            \"rightlinesegment\"\n        ],\n        0.888,\n        522\n    ],\n    underlinesegment: [\n        [\n            \"leftlinesegment\",\n            \"rightlinesegment\"\n        ],\n        0.888,\n        522\n    ],\n    overgroup: [\n        [\n            \"leftgroup\",\n            \"rightgroup\"\n        ],\n        0.888,\n        342\n    ],\n    undergroup: [\n        [\n            \"leftgroupunder\",\n            \"rightgroupunder\"\n        ],\n        0.888,\n        342\n    ],\n    xmapsto: [\n        [\n            \"leftmapsto\",\n            \"rightarrow\"\n        ],\n        1.5,\n        522\n    ],\n    xtofrom: [\n        [\n            \"leftToFrom\",\n            \"rightToFrom\"\n        ],\n        1.75,\n        528\n    ],\n    // The next three arrows are from the mhchem package.\n    // In mhchem.sty, min-length is 2.0em. But these arrows might appear in the\n    // document as \\xrightarrow or \\xrightleftharpoons. Those have\n    // min-length = 1.75em, so we set min-length on these next three to match.\n    xrightleftarrows: [\n        [\n            \"baraboveleftarrow\",\n            \"rightarrowabovebar\"\n        ],\n        1.75,\n        901\n    ],\n    xrightequilibrium: [\n        [\n            \"baraboveshortleftharpoon\",\n            \"rightharpoonaboveshortbar\"\n        ],\n        1.75,\n        716\n    ],\n    xleftequilibrium: [\n        [\n            \"shortbaraboveleftharpoon\",\n            \"shortrightharpoonabovebar\"\n        ],\n        1.75,\n        716\n    ]\n};\nvar groupLength = function groupLength(arg) {\n    if (arg.type === \"ordgroup\") {\n        return arg.body.length;\n    } else {\n        return 1;\n    }\n};\nvar svgSpan = function svgSpan(group, options) {\n    // Create a span with inline SVG for the element.\n    function buildSvgSpan_() {\n        var viewBoxWidth = 400000; // default\n        var label = group.label.slice(1);\n        if (utils.contains([\n            \"widehat\",\n            \"widecheck\",\n            \"widetilde\",\n            \"utilde\"\n        ], label)) {\n            // Each type in the `if` statement corresponds to one of the ParseNode\n            // types below. This narrowing is required to access `grp.base`.\n            // $FlowFixMe\n            var grp = group; // There are four SVG images available for each function.\n            // Choose a taller image when there are more characters.\n            var numChars = groupLength(grp.base);\n            var viewBoxHeight;\n            var pathName;\n            var _height;\n            if (numChars > 5) {\n                if (label === \"widehat\" || label === \"widecheck\") {\n                    viewBoxHeight = 420;\n                    viewBoxWidth = 2364;\n                    _height = 0.42;\n                    pathName = label + \"4\";\n                } else {\n                    viewBoxHeight = 312;\n                    viewBoxWidth = 2340;\n                    _height = 0.34;\n                    pathName = \"tilde4\";\n                }\n            } else {\n                var imgIndex = [\n                    1,\n                    1,\n                    2,\n                    2,\n                    3,\n                    3\n                ][numChars];\n                if (label === \"widehat\" || label === \"widecheck\") {\n                    viewBoxWidth = [\n                        0,\n                        1062,\n                        2364,\n                        2364,\n                        2364\n                    ][imgIndex];\n                    viewBoxHeight = [\n                        0,\n                        239,\n                        300,\n                        360,\n                        420\n                    ][imgIndex];\n                    _height = [\n                        0,\n                        0.24,\n                        0.3,\n                        0.3,\n                        0.36,\n                        0.42\n                    ][imgIndex];\n                    pathName = label + imgIndex;\n                } else {\n                    viewBoxWidth = [\n                        0,\n                        600,\n                        1033,\n                        2339,\n                        2340\n                    ][imgIndex];\n                    viewBoxHeight = [\n                        0,\n                        260,\n                        286,\n                        306,\n                        312\n                    ][imgIndex];\n                    _height = [\n                        0,\n                        0.26,\n                        0.286,\n                        0.3,\n                        0.306,\n                        0.34\n                    ][imgIndex];\n                    pathName = \"tilde\" + imgIndex;\n                }\n            }\n            var path = new PathNode(pathName);\n            var svgNode = new SvgNode([\n                path\n            ], {\n                \"width\": \"100%\",\n                \"height\": makeEm(_height),\n                \"viewBox\": \"0 0 \" + viewBoxWidth + \" \" + viewBoxHeight,\n                \"preserveAspectRatio\": \"none\"\n            });\n            return {\n                span: buildCommon.makeSvgSpan([], [\n                    svgNode\n                ], options),\n                minWidth: 0,\n                height: _height\n            };\n        } else {\n            var spans = [];\n            var data = katexImagesData[label];\n            var [paths, _minWidth, _viewBoxHeight] = data;\n            var _height2 = _viewBoxHeight / 1000;\n            var numSvgChildren = paths.length;\n            var widthClasses;\n            var aligns;\n            if (numSvgChildren === 1) {\n                // $FlowFixMe: All these cases must be of the 4-tuple type.\n                var align1 = data[3];\n                widthClasses = [\n                    \"hide-tail\"\n                ];\n                aligns = [\n                    align1\n                ];\n            } else if (numSvgChildren === 2) {\n                widthClasses = [\n                    \"halfarrow-left\",\n                    \"halfarrow-right\"\n                ];\n                aligns = [\n                    \"xMinYMin\",\n                    \"xMaxYMin\"\n                ];\n            } else if (numSvgChildren === 3) {\n                widthClasses = [\n                    \"brace-left\",\n                    \"brace-center\",\n                    \"brace-right\"\n                ];\n                aligns = [\n                    \"xMinYMin\",\n                    \"xMidYMin\",\n                    \"xMaxYMin\"\n                ];\n            } else {\n                throw new Error(\"Correct katexImagesData or update code here to support\\n                    \" + numSvgChildren + \" children.\");\n            }\n            for(var i = 0; i < numSvgChildren; i++){\n                var _path = new PathNode(paths[i]);\n                var _svgNode = new SvgNode([\n                    _path\n                ], {\n                    \"width\": \"400em\",\n                    \"height\": makeEm(_height2),\n                    \"viewBox\": \"0 0 \" + viewBoxWidth + \" \" + _viewBoxHeight,\n                    \"preserveAspectRatio\": aligns[i] + \" slice\"\n                });\n                var _span = buildCommon.makeSvgSpan([\n                    widthClasses[i]\n                ], [\n                    _svgNode\n                ], options);\n                if (numSvgChildren === 1) {\n                    return {\n                        span: _span,\n                        minWidth: _minWidth,\n                        height: _height2\n                    };\n                } else {\n                    _span.style.height = makeEm(_height2);\n                    spans.push(_span);\n                }\n            }\n            return {\n                span: buildCommon.makeSpan([\n                    \"stretchy\"\n                ], spans, options),\n                minWidth: _minWidth,\n                height: _height2\n            };\n        }\n    } // buildSvgSpan_()\n    var { span, minWidth, height } = buildSvgSpan_(); // Note that we are returning span.depth = 0.\n    // Any adjustments relative to the baseline must be done in buildHTML.\n    span.height = height;\n    span.style.height = makeEm(height);\n    if (minWidth > 0) {\n        span.style.minWidth = makeEm(minWidth);\n    }\n    return span;\n};\nvar encloseSpan = function encloseSpan(inner, label, topPad, bottomPad, options) {\n    // Return an image span for \\cancel, \\bcancel, \\xcancel, \\fbox, or \\angl\n    var img;\n    var totalHeight = inner.height + inner.depth + topPad + bottomPad;\n    if (/fbox|color|angl/.test(label)) {\n        img = buildCommon.makeSpan([\n            \"stretchy\",\n            label\n        ], [], options);\n        if (label === \"fbox\") {\n            var color = options.color && options.getColor();\n            if (color) {\n                img.style.borderColor = color;\n            }\n        }\n    } else {\n        // \\cancel, \\bcancel, or \\xcancel\n        // Since \\cancel's SVG is inline and it omits the viewBox attribute,\n        // its stroke-width will not vary with span area.\n        var lines = [];\n        if (/^[bx]cancel$/.test(label)) {\n            lines.push(new LineNode({\n                \"x1\": \"0\",\n                \"y1\": \"0\",\n                \"x2\": \"100%\",\n                \"y2\": \"100%\",\n                \"stroke-width\": \"0.046em\"\n            }));\n        }\n        if (/^x?cancel$/.test(label)) {\n            lines.push(new LineNode({\n                \"x1\": \"0\",\n                \"y1\": \"100%\",\n                \"x2\": \"100%\",\n                \"y2\": \"0\",\n                \"stroke-width\": \"0.046em\"\n            }));\n        }\n        var svgNode = new SvgNode(lines, {\n            \"width\": \"100%\",\n            \"height\": makeEm(totalHeight)\n        });\n        img = buildCommon.makeSvgSpan([], [\n            svgNode\n        ], options);\n    }\n    img.height = totalHeight;\n    img.style.height = makeEm(totalHeight);\n    return img;\n};\nvar stretchy = {\n    encloseSpan,\n    mathMLnode,\n    svgSpan\n};\n/**\n * Asserts that the node is of the given type and returns it with stricter\n * typing. Throws if the node's type does not match.\n */ function assertNodeType(node, type) {\n    if (!node || node.type !== type) {\n        throw new Error(\"Expected node of type \" + type + \", but got \" + (node ? \"node of type \" + node.type : String(node)));\n    } // $FlowFixMe, >=0.125\n    return node;\n}\n/**\n * Returns the node more strictly typed iff it is of the given type. Otherwise,\n * returns null.\n */ function assertSymbolNodeType(node) {\n    var typedNode = checkSymbolNodeType(node);\n    if (!typedNode) {\n        throw new Error(\"Expected node of symbol group type, but got \" + (node ? \"node of type \" + node.type : String(node)));\n    }\n    return typedNode;\n}\n/**\n * Returns the node more strictly typed iff it is of the given type. Otherwise,\n * returns null.\n */ function checkSymbolNodeType(node) {\n    if (node && (node.type === \"atom\" || NON_ATOMS.hasOwnProperty(node.type))) {\n        // $FlowFixMe\n        return node;\n    }\n    return null;\n}\n// NOTE: Unlike most `htmlBuilder`s, this one handles not only \"accent\", but\n// also \"supsub\" since an accent can affect super/subscripting.\nvar htmlBuilder$a = (grp, options)=>{\n    // Accents are handled in the TeXbook pg. 443, rule 12.\n    var base;\n    var group;\n    var supSubGroup;\n    if (grp && grp.type === \"supsub\") {\n        // If our base is a character box, and we have superscripts and\n        // subscripts, the supsub will defer to us. In particular, we want\n        // to attach the superscripts and subscripts to the inner body (so\n        // that the position of the superscripts and subscripts won't be\n        // affected by the height of the accent). We accomplish this by\n        // sticking the base of the accent into the base of the supsub, and\n        // rendering that, while keeping track of where the accent is.\n        // The real accent group is the base of the supsub group\n        group = assertNodeType(grp.base, \"accent\"); // The character box is the base of the accent group\n        base = group.base; // Stick the character box into the base of the supsub group\n        grp.base = base; // Rerender the supsub group with its new base, and store that\n        // result.\n        supSubGroup = assertSpan(buildGroup$1(grp, options)); // reset original base\n        grp.base = group;\n    } else {\n        group = assertNodeType(grp, \"accent\");\n        base = group.base;\n    } // Build the base group\n    var body = buildGroup$1(base, options.havingCrampedStyle()); // Does the accent need to shift for the skew of a character?\n    var mustShift = group.isShifty && utils.isCharacterBox(base); // Calculate the skew of the accent. This is based on the line \"If the\n    // nucleus is not a single character, let s = 0; otherwise set s to the\n    // kern amount for the nucleus followed by the \\skewchar of its font.\"\n    // Note that our skew metrics are just the kern between each character\n    // and the skewchar.\n    var skew = 0;\n    if (mustShift) {\n        // If the base is a character box, then we want the skew of the\n        // innermost character. To do that, we find the innermost character:\n        var baseChar = utils.getBaseElem(base); // Then, we render its group to get the symbol inside it\n        var baseGroup = buildGroup$1(baseChar, options.havingCrampedStyle()); // Finally, we pull the skew off of the symbol.\n        skew = assertSymbolDomNode(baseGroup).skew; // Note that we now throw away baseGroup, because the layers we\n    // removed with getBaseElem might contain things like \\color which\n    // we can't get rid of.\n    // TODO(emily): Find a better way to get the skew\n    }\n    var accentBelow = group.label === \"\\\\c\"; // calculate the amount of space between the body and the accent\n    var clearance = accentBelow ? body.height + body.depth : Math.min(body.height, options.fontMetrics().xHeight); // Build the accent\n    var accentBody;\n    if (!group.isStretchy) {\n        var accent;\n        var width;\n        if (group.label === \"\\\\vec\") {\n            // Before version 0.9, \\vec used the combining font glyph U+20D7.\n            // But browsers, especially Safari, are not consistent in how they\n            // render combining characters when not preceded by a character.\n            // So now we use an SVG.\n            // If Safari reforms, we should consider reverting to the glyph.\n            accent = buildCommon.staticSvg(\"vec\", options);\n            width = buildCommon.svgData.vec[1];\n        } else {\n            accent = buildCommon.makeOrd({\n                mode: group.mode,\n                text: group.label\n            }, options, \"textord\");\n            accent = assertSymbolDomNode(accent); // Remove the italic correction of the accent, because it only serves to\n            // shift the accent over to a place we don't want.\n            accent.italic = 0;\n            width = accent.width;\n            if (accentBelow) {\n                clearance += accent.depth;\n            }\n        }\n        accentBody = buildCommon.makeSpan([\n            \"accent-body\"\n        ], [\n            accent\n        ]); // \"Full\" accents expand the width of the resulting symbol to be\n        // at least the width of the accent, and overlap directly onto the\n        // character without any vertical offset.\n        var accentFull = group.label === \"\\\\textcircled\";\n        if (accentFull) {\n            accentBody.classes.push(\"accent-full\");\n            clearance = body.height;\n        } // Shift the accent over by the skew.\n        var left = skew; // CSS defines `.katex .accent .accent-body:not(.accent-full) { width: 0 }`\n        // so that the accent doesn't contribute to the bounding box.\n        // We need to shift the character by its width (effectively half\n        // its width) to compensate.\n        if (!accentFull) {\n            left -= width / 2;\n        }\n        accentBody.style.left = makeEm(left); // \\textcircled uses the \\bigcirc glyph, so it needs some\n        // vertical adjustment to match LaTeX.\n        if (group.label === \"\\\\textcircled\") {\n            accentBody.style.top = \".2em\";\n        }\n        accentBody = buildCommon.makeVList({\n            positionType: \"firstBaseline\",\n            children: [\n                {\n                    type: \"elem\",\n                    elem: body\n                },\n                {\n                    type: \"kern\",\n                    size: -clearance\n                },\n                {\n                    type: \"elem\",\n                    elem: accentBody\n                }\n            ]\n        }, options);\n    } else {\n        accentBody = stretchy.svgSpan(group, options);\n        accentBody = buildCommon.makeVList({\n            positionType: \"firstBaseline\",\n            children: [\n                {\n                    type: \"elem\",\n                    elem: body\n                },\n                {\n                    type: \"elem\",\n                    elem: accentBody,\n                    wrapperClasses: [\n                        \"svg-align\"\n                    ],\n                    wrapperStyle: skew > 0 ? {\n                        width: \"calc(100% - \" + makeEm(2 * skew) + \")\",\n                        marginLeft: makeEm(2 * skew)\n                    } : undefined\n                }\n            ]\n        }, options);\n    }\n    var accentWrap = buildCommon.makeSpan([\n        \"mord\",\n        \"accent\"\n    ], [\n        accentBody\n    ], options);\n    if (supSubGroup) {\n        // Here, we replace the \"base\" child of the supsub with our newly\n        // generated accent.\n        supSubGroup.children[0] = accentWrap; // Since we don't rerun the height calculation after replacing the\n        // accent, we manually recalculate height.\n        supSubGroup.height = Math.max(accentWrap.height, supSubGroup.height); // Accents should always be ords, even when their innards are not.\n        supSubGroup.classes[0] = \"mord\";\n        return supSubGroup;\n    } else {\n        return accentWrap;\n    }\n};\nvar mathmlBuilder$9 = (group, options)=>{\n    var accentNode = group.isStretchy ? stretchy.mathMLnode(group.label) : new mathMLTree.MathNode(\"mo\", [\n        makeText(group.label, group.mode)\n    ]);\n    var node = new mathMLTree.MathNode(\"mover\", [\n        buildGroup(group.base, options),\n        accentNode\n    ]);\n    node.setAttribute(\"accent\", \"true\");\n    return node;\n};\nvar NON_STRETCHY_ACCENT_REGEX = new RegExp([\n    \"\\\\acute\",\n    \"\\\\grave\",\n    \"\\\\ddot\",\n    \"\\\\tilde\",\n    \"\\\\bar\",\n    \"\\\\breve\",\n    \"\\\\check\",\n    \"\\\\hat\",\n    \"\\\\vec\",\n    \"\\\\dot\",\n    \"\\\\mathring\"\n].map((accent)=>\"\\\\\" + accent).join(\"|\")); // Accents\ndefineFunction({\n    type: \"accent\",\n    names: [\n        \"\\\\acute\",\n        \"\\\\grave\",\n        \"\\\\ddot\",\n        \"\\\\tilde\",\n        \"\\\\bar\",\n        \"\\\\breve\",\n        \"\\\\check\",\n        \"\\\\hat\",\n        \"\\\\vec\",\n        \"\\\\dot\",\n        \"\\\\mathring\",\n        \"\\\\widecheck\",\n        \"\\\\widehat\",\n        \"\\\\widetilde\",\n        \"\\\\overrightarrow\",\n        \"\\\\overleftarrow\",\n        \"\\\\Overrightarrow\",\n        \"\\\\overleftrightarrow\",\n        \"\\\\overgroup\",\n        \"\\\\overlinesegment\",\n        \"\\\\overleftharpoon\",\n        \"\\\\overrightharpoon\"\n    ],\n    props: {\n        numArgs: 1\n    },\n    handler: (context, args)=>{\n        var base = normalizeArgument(args[0]);\n        var isStretchy = !NON_STRETCHY_ACCENT_REGEX.test(context.funcName);\n        var isShifty = !isStretchy || context.funcName === \"\\\\widehat\" || context.funcName === \"\\\\widetilde\" || context.funcName === \"\\\\widecheck\";\n        return {\n            type: \"accent\",\n            mode: context.parser.mode,\n            label: context.funcName,\n            isStretchy: isStretchy,\n            isShifty: isShifty,\n            base: base\n        };\n    },\n    htmlBuilder: htmlBuilder$a,\n    mathmlBuilder: mathmlBuilder$9\n}); // Text-mode accents\ndefineFunction({\n    type: \"accent\",\n    names: [\n        \"\\\\'\",\n        \"\\\\`\",\n        \"\\\\^\",\n        \"\\\\~\",\n        \"\\\\=\",\n        \"\\\\u\",\n        \"\\\\.\",\n        '\\\\\"',\n        \"\\\\c\",\n        \"\\\\r\",\n        \"\\\\H\",\n        \"\\\\v\",\n        \"\\\\textcircled\"\n    ],\n    props: {\n        numArgs: 1,\n        allowedInText: true,\n        allowedInMath: true,\n        // unless in strict mode\n        argTypes: [\n            \"primitive\"\n        ]\n    },\n    handler: (context, args)=>{\n        var base = args[0];\n        var mode = context.parser.mode;\n        if (mode === \"math\") {\n            context.parser.settings.reportNonstrict(\"mathVsTextAccents\", \"LaTeX's accent \" + context.funcName + \" works only in text mode\");\n            mode = \"text\";\n        }\n        return {\n            type: \"accent\",\n            mode: mode,\n            label: context.funcName,\n            isStretchy: false,\n            isShifty: true,\n            base: base\n        };\n    },\n    htmlBuilder: htmlBuilder$a,\n    mathmlBuilder: mathmlBuilder$9\n});\n// Horizontal overlap functions\ndefineFunction({\n    type: \"accentUnder\",\n    names: [\n        \"\\\\underleftarrow\",\n        \"\\\\underrightarrow\",\n        \"\\\\underleftrightarrow\",\n        \"\\\\undergroup\",\n        \"\\\\underlinesegment\",\n        \"\\\\utilde\"\n    ],\n    props: {\n        numArgs: 1\n    },\n    handler: (_ref, args)=>{\n        var { parser, funcName } = _ref;\n        var base = args[0];\n        return {\n            type: \"accentUnder\",\n            mode: parser.mode,\n            label: funcName,\n            base: base\n        };\n    },\n    htmlBuilder: (group, options)=>{\n        // Treat under accents much like underlines.\n        var innerGroup = buildGroup$1(group.base, options);\n        var accentBody = stretchy.svgSpan(group, options);\n        var kern = group.label === \"\\\\utilde\" ? 0.12 : 0; // Generate the vlist, with the appropriate kerns\n        var vlist = buildCommon.makeVList({\n            positionType: \"top\",\n            positionData: innerGroup.height,\n            children: [\n                {\n                    type: \"elem\",\n                    elem: accentBody,\n                    wrapperClasses: [\n                        \"svg-align\"\n                    ]\n                },\n                {\n                    type: \"kern\",\n                    size: kern\n                },\n                {\n                    type: \"elem\",\n                    elem: innerGroup\n                }\n            ]\n        }, options);\n        return buildCommon.makeSpan([\n            \"mord\",\n            \"accentunder\"\n        ], [\n            vlist\n        ], options);\n    },\n    mathmlBuilder: (group, options)=>{\n        var accentNode = stretchy.mathMLnode(group.label);\n        var node = new mathMLTree.MathNode(\"munder\", [\n            buildGroup(group.base, options),\n            accentNode\n        ]);\n        node.setAttribute(\"accentunder\", \"true\");\n        return node;\n    }\n});\n// Helper function\nvar paddedNode = (group)=>{\n    var node = new mathMLTree.MathNode(\"mpadded\", group ? [\n        group\n    ] : []);\n    node.setAttribute(\"width\", \"+0.6em\");\n    node.setAttribute(\"lspace\", \"0.3em\");\n    return node;\n}; // Stretchy arrows with an optional argument\ndefineFunction({\n    type: \"xArrow\",\n    names: [\n        \"\\\\xleftarrow\",\n        \"\\\\xrightarrow\",\n        \"\\\\xLeftarrow\",\n        \"\\\\xRightarrow\",\n        \"\\\\xleftrightarrow\",\n        \"\\\\xLeftrightarrow\",\n        \"\\\\xhookleftarrow\",\n        \"\\\\xhookrightarrow\",\n        \"\\\\xmapsto\",\n        \"\\\\xrightharpoondown\",\n        \"\\\\xrightharpoonup\",\n        \"\\\\xleftharpoondown\",\n        \"\\\\xleftharpoonup\",\n        \"\\\\xrightleftharpoons\",\n        \"\\\\xleftrightharpoons\",\n        \"\\\\xlongequal\",\n        \"\\\\xtwoheadrightarrow\",\n        \"\\\\xtwoheadleftarrow\",\n        \"\\\\xtofrom\",\n        // Direct use of these functions is discouraged and may break someday.\n        \"\\\\xrightleftarrows\",\n        \"\\\\xrightequilibrium\",\n        \"\\\\xleftequilibrium\",\n        \"\\\\\\\\cdrightarrow\",\n        \"\\\\\\\\cdleftarrow\",\n        \"\\\\\\\\cdlongequal\"\n    ],\n    props: {\n        numArgs: 1,\n        numOptionalArgs: 1\n    },\n    handler (_ref, args, optArgs) {\n        var { parser, funcName } = _ref;\n        return {\n            type: \"xArrow\",\n            mode: parser.mode,\n            label: funcName,\n            body: args[0],\n            below: optArgs[0]\n        };\n    },\n    // Flow is unable to correctly infer the type of `group`, even though it's\n    // unambiguously determined from the passed-in `type` above.\n    htmlBuilder (group, options) {\n        var style = options.style; // Build the argument groups in the appropriate style.\n        // Ref: amsmath.dtx:   \\hbox{$\\scriptstyle\\mkern#3mu{#6}\\mkern#4mu$}%\n        // Some groups can return document fragments.  Handle those by wrapping\n        // them in a span.\n        var newOptions = options.havingStyle(style.sup());\n        var upperGroup = buildCommon.wrapFragment(buildGroup$1(group.body, newOptions, options), options);\n        var arrowPrefix = group.label.slice(0, 2) === \"\\\\x\" ? \"x\" : \"cd\";\n        upperGroup.classes.push(arrowPrefix + \"-arrow-pad\");\n        var lowerGroup;\n        if (group.below) {\n            // Build the lower group\n            newOptions = options.havingStyle(style.sub());\n            lowerGroup = buildCommon.wrapFragment(buildGroup$1(group.below, newOptions, options), options);\n            lowerGroup.classes.push(arrowPrefix + \"-arrow-pad\");\n        }\n        var arrowBody = stretchy.svgSpan(group, options); // Re shift: Note that stretchy.svgSpan returned arrowBody.depth = 0.\n        // The point we want on the math axis is at 0.5 * arrowBody.height.\n        var arrowShift = -options.fontMetrics().axisHeight + 0.5 * arrowBody.height; // 2 mu kern. Ref: amsmath.dtx: #7\\if0#2\\else\\mkern#2mu\\fi\n        var upperShift = -options.fontMetrics().axisHeight - 0.5 * arrowBody.height - 0.111; // 0.111 em = 2 mu\n        if (upperGroup.depth > 0.25 || group.label === \"\\\\xleftequilibrium\") {\n            upperShift -= upperGroup.depth; // shift up if depth encroaches\n        } // Generate the vlist\n        var vlist;\n        if (lowerGroup) {\n            var lowerShift = -options.fontMetrics().axisHeight + lowerGroup.height + 0.5 * arrowBody.height + 0.111;\n            vlist = buildCommon.makeVList({\n                positionType: \"individualShift\",\n                children: [\n                    {\n                        type: \"elem\",\n                        elem: upperGroup,\n                        shift: upperShift\n                    },\n                    {\n                        type: \"elem\",\n                        elem: arrowBody,\n                        shift: arrowShift\n                    },\n                    {\n                        type: \"elem\",\n                        elem: lowerGroup,\n                        shift: lowerShift\n                    }\n                ]\n            }, options);\n        } else {\n            vlist = buildCommon.makeVList({\n                positionType: \"individualShift\",\n                children: [\n                    {\n                        type: \"elem\",\n                        elem: upperGroup,\n                        shift: upperShift\n                    },\n                    {\n                        type: \"elem\",\n                        elem: arrowBody,\n                        shift: arrowShift\n                    }\n                ]\n            }, options);\n        } // $FlowFixMe: Replace this with passing \"svg-align\" into makeVList.\n        vlist.children[0].children[0].children[1].classes.push(\"svg-align\");\n        return buildCommon.makeSpan([\n            \"mrel\",\n            \"x-arrow\"\n        ], [\n            vlist\n        ], options);\n    },\n    mathmlBuilder (group, options) {\n        var arrowNode = stretchy.mathMLnode(group.label);\n        arrowNode.setAttribute(\"minsize\", group.label.charAt(0) === \"x\" ? \"1.75em\" : \"3.0em\");\n        var node;\n        if (group.body) {\n            var upperNode = paddedNode(buildGroup(group.body, options));\n            if (group.below) {\n                var lowerNode = paddedNode(buildGroup(group.below, options));\n                node = new mathMLTree.MathNode(\"munderover\", [\n                    arrowNode,\n                    lowerNode,\n                    upperNode\n                ]);\n            } else {\n                node = new mathMLTree.MathNode(\"mover\", [\n                    arrowNode,\n                    upperNode\n                ]);\n            }\n        } else if (group.below) {\n            var _lowerNode = paddedNode(buildGroup(group.below, options));\n            node = new mathMLTree.MathNode(\"munder\", [\n                arrowNode,\n                _lowerNode\n            ]);\n        } else {\n            // This should never happen.\n            // Parser.js throws an error if there is no argument.\n            node = paddedNode();\n            node = new mathMLTree.MathNode(\"mover\", [\n                arrowNode,\n                node\n            ]);\n        }\n        return node;\n    }\n});\nvar makeSpan = buildCommon.makeSpan;\nfunction htmlBuilder$9(group, options) {\n    var elements = buildExpression$1(group.body, options, true);\n    return makeSpan([\n        group.mclass\n    ], elements, options);\n}\nfunction mathmlBuilder$8(group, options) {\n    var node;\n    var inner = buildExpression(group.body, options);\n    if (group.mclass === \"minner\") {\n        node = new mathMLTree.MathNode(\"mpadded\", inner);\n    } else if (group.mclass === \"mord\") {\n        if (group.isCharacterBox) {\n            node = inner[0];\n            node.type = \"mi\";\n        } else {\n            node = new mathMLTree.MathNode(\"mi\", inner);\n        }\n    } else {\n        if (group.isCharacterBox) {\n            node = inner[0];\n            node.type = \"mo\";\n        } else {\n            node = new mathMLTree.MathNode(\"mo\", inner);\n        } // Set spacing based on what is the most likely adjacent atom type.\n        // See TeXbook p170.\n        if (group.mclass === \"mbin\") {\n            node.attributes.lspace = \"0.22em\"; // medium space\n            node.attributes.rspace = \"0.22em\";\n        } else if (group.mclass === \"mpunct\") {\n            node.attributes.lspace = \"0em\";\n            node.attributes.rspace = \"0.17em\"; // thinspace\n        } else if (group.mclass === \"mopen\" || group.mclass === \"mclose\") {\n            node.attributes.lspace = \"0em\";\n            node.attributes.rspace = \"0em\";\n        } else if (group.mclass === \"minner\") {\n            node.attributes.lspace = \"0.0556em\"; // 1 mu is the most likely option\n            node.attributes.width = \"+0.1111em\";\n        } // MathML <mo> default space is 5/18 em, so <mrel> needs no action.\n    // Ref: https://developer.mozilla.org/en-US/docs/Web/MathML/Element/mo\n    }\n    return node;\n} // Math class commands except \\mathop\ndefineFunction({\n    type: \"mclass\",\n    names: [\n        \"\\\\mathord\",\n        \"\\\\mathbin\",\n        \"\\\\mathrel\",\n        \"\\\\mathopen\",\n        \"\\\\mathclose\",\n        \"\\\\mathpunct\",\n        \"\\\\mathinner\"\n    ],\n    props: {\n        numArgs: 1,\n        primitive: true\n    },\n    handler (_ref, args) {\n        var { parser, funcName } = _ref;\n        var body = args[0];\n        return {\n            type: \"mclass\",\n            mode: parser.mode,\n            mclass: \"m\" + funcName.slice(5),\n            // TODO(kevinb): don't prefix with 'm'\n            body: ordargument(body),\n            isCharacterBox: utils.isCharacterBox(body)\n        };\n    },\n    htmlBuilder: htmlBuilder$9,\n    mathmlBuilder: mathmlBuilder$8\n});\nvar binrelClass = (arg)=>{\n    // \\binrel@ spacing varies with (bin|rel|ord) of the atom in the argument.\n    // (by rendering separately and with {}s before and after, and measuring\n    // the change in spacing).  We'll do roughly the same by detecting the\n    // atom type directly.\n    var atom = arg.type === \"ordgroup\" && arg.body.length ? arg.body[0] : arg;\n    if (atom.type === \"atom\" && (atom.family === \"bin\" || atom.family === \"rel\")) {\n        return \"m\" + atom.family;\n    } else {\n        return \"mord\";\n    }\n}; // \\@binrel{x}{y} renders like y but as mbin/mrel/mord if x is mbin/mrel/mord.\n// This is equivalent to \\binrel@{x}\\binrel@@{y} in AMSTeX.\ndefineFunction({\n    type: \"mclass\",\n    names: [\n        \"\\\\@binrel\"\n    ],\n    props: {\n        numArgs: 2\n    },\n    handler (_ref2, args) {\n        var { parser } = _ref2;\n        return {\n            type: \"mclass\",\n            mode: parser.mode,\n            mclass: binrelClass(args[0]),\n            body: ordargument(args[1]),\n            isCharacterBox: utils.isCharacterBox(args[1])\n        };\n    }\n}); // Build a relation or stacked op by placing one symbol on top of another\ndefineFunction({\n    type: \"mclass\",\n    names: [\n        \"\\\\stackrel\",\n        \"\\\\overset\",\n        \"\\\\underset\"\n    ],\n    props: {\n        numArgs: 2\n    },\n    handler (_ref3, args) {\n        var { parser, funcName } = _ref3;\n        var baseArg = args[1];\n        var shiftedArg = args[0];\n        var mclass;\n        if (funcName !== \"\\\\stackrel\") {\n            // LaTeX applies \\binrel spacing to \\overset and \\underset.\n            mclass = binrelClass(baseArg);\n        } else {\n            mclass = \"mrel\"; // for \\stackrel\n        }\n        var baseOp = {\n            type: \"op\",\n            mode: baseArg.mode,\n            limits: true,\n            alwaysHandleSupSub: true,\n            parentIsSupSub: false,\n            symbol: false,\n            suppressBaseShift: funcName !== \"\\\\stackrel\",\n            body: ordargument(baseArg)\n        };\n        var supsub = {\n            type: \"supsub\",\n            mode: shiftedArg.mode,\n            base: baseOp,\n            sup: funcName === \"\\\\underset\" ? null : shiftedArg,\n            sub: funcName === \"\\\\underset\" ? shiftedArg : null\n        };\n        return {\n            type: \"mclass\",\n            mode: parser.mode,\n            mclass,\n            body: [\n                supsub\n            ],\n            isCharacterBox: utils.isCharacterBox(supsub)\n        };\n    },\n    htmlBuilder: htmlBuilder$9,\n    mathmlBuilder: mathmlBuilder$8\n});\n// \\pmb is a simulation of bold font.\n// The version of \\pmb in ambsy.sty works by typesetting three copies\n// with small offsets. We use CSS text-shadow.\n// It's a hack. Not as good as a real bold font. Better than nothing.\ndefineFunction({\n    type: \"pmb\",\n    names: [\n        \"\\\\pmb\"\n    ],\n    props: {\n        numArgs: 1,\n        allowedInText: true\n    },\n    handler (_ref, args) {\n        var { parser } = _ref;\n        return {\n            type: \"pmb\",\n            mode: parser.mode,\n            mclass: binrelClass(args[0]),\n            body: ordargument(args[0])\n        };\n    },\n    htmlBuilder (group, options) {\n        var elements = buildExpression$1(group.body, options, true);\n        var node = buildCommon.makeSpan([\n            group.mclass\n        ], elements, options);\n        node.style.textShadow = \"0.02em 0.01em 0.04px\";\n        return node;\n    },\n    mathmlBuilder (group, style) {\n        var inner = buildExpression(group.body, style); // Wrap with an <mstyle> element.\n        var node = new mathMLTree.MathNode(\"mstyle\", inner);\n        node.setAttribute(\"style\", \"text-shadow: 0.02em 0.01em 0.04px\");\n        return node;\n    }\n});\nvar cdArrowFunctionName = {\n    \">\": \"\\\\\\\\cdrightarrow\",\n    \"<\": \"\\\\\\\\cdleftarrow\",\n    \"=\": \"\\\\\\\\cdlongequal\",\n    \"A\": \"\\\\uparrow\",\n    \"V\": \"\\\\downarrow\",\n    \"|\": \"\\\\Vert\",\n    \".\": \"no arrow\"\n};\nvar newCell = ()=>{\n    // Create an empty cell, to be filled below with parse nodes.\n    // The parseTree from this module must be constructed like the\n    // one created by parseArray(), so an empty CD cell must\n    // be a ParseNode<\"styling\">. And CD is always displaystyle.\n    // So these values are fixed and flow can do implicit typing.\n    return {\n        type: \"styling\",\n        body: [],\n        mode: \"math\",\n        style: \"display\"\n    };\n};\nvar isStartOfArrow = (node)=>{\n    return node.type === \"textord\" && node.text === \"@\";\n};\nvar isLabelEnd = (node, endChar)=>{\n    return (node.type === \"mathord\" || node.type === \"atom\") && node.text === endChar;\n};\nfunction cdArrow(arrowChar, labels, parser) {\n    // Return a parse tree of an arrow and its labels.\n    // This acts in a way similar to a macro expansion.\n    var funcName = cdArrowFunctionName[arrowChar];\n    switch(funcName){\n        case \"\\\\\\\\cdrightarrow\":\n        case \"\\\\\\\\cdleftarrow\":\n            return parser.callFunction(funcName, [\n                labels[0]\n            ], [\n                labels[1]\n            ]);\n        case \"\\\\uparrow\":\n        case \"\\\\downarrow\":\n            {\n                var leftLabel = parser.callFunction(\"\\\\\\\\cdleft\", [\n                    labels[0]\n                ], []);\n                var bareArrow = {\n                    type: \"atom\",\n                    text: funcName,\n                    mode: \"math\",\n                    family: \"rel\"\n                };\n                var sizedArrow = parser.callFunction(\"\\\\Big\", [\n                    bareArrow\n                ], []);\n                var rightLabel = parser.callFunction(\"\\\\\\\\cdright\", [\n                    labels[1]\n                ], []);\n                var arrowGroup = {\n                    type: \"ordgroup\",\n                    mode: \"math\",\n                    body: [\n                        leftLabel,\n                        sizedArrow,\n                        rightLabel\n                    ]\n                };\n                return parser.callFunction(\"\\\\\\\\cdparent\", [\n                    arrowGroup\n                ], []);\n            }\n        case \"\\\\\\\\cdlongequal\":\n            return parser.callFunction(\"\\\\\\\\cdlongequal\", [], []);\n        case \"\\\\Vert\":\n            {\n                var arrow = {\n                    type: \"textord\",\n                    text: \"\\\\Vert\",\n                    mode: \"math\"\n                };\n                return parser.callFunction(\"\\\\Big\", [\n                    arrow\n                ], []);\n            }\n        default:\n            return {\n                type: \"textord\",\n                text: \" \",\n                mode: \"math\"\n            };\n    }\n}\nfunction parseCD(parser) {\n    // Get the array's parse nodes with \\\\ temporarily mapped to \\cr.\n    var parsedRows = [];\n    parser.gullet.beginGroup();\n    parser.gullet.macros.set(\"\\\\cr\", \"\\\\\\\\\\\\relax\");\n    parser.gullet.beginGroup();\n    while(true){\n        // eslint-disable-line no-constant-condition\n        // Get the parse nodes for the next row.\n        parsedRows.push(parser.parseExpression(false, \"\\\\\\\\\"));\n        parser.gullet.endGroup();\n        parser.gullet.beginGroup();\n        var next = parser.fetch().text;\n        if (next === \"&\" || next === \"\\\\\\\\\") {\n            parser.consume();\n        } else if (next === \"\\\\end\") {\n            if (parsedRows[parsedRows.length - 1].length === 0) {\n                parsedRows.pop(); // final row ended in \\\\\n            }\n            break;\n        } else {\n            throw new ParseError(\"Expected \\\\\\\\ or \\\\cr or \\\\end\", parser.nextToken);\n        }\n    }\n    var row = [];\n    var body = [\n        row\n    ]; // Loop thru the parse nodes. Collect them into cells and arrows.\n    for(var i = 0; i < parsedRows.length; i++){\n        // Start a new row.\n        var rowNodes = parsedRows[i]; // Create the first cell.\n        var cell = newCell();\n        for(var j = 0; j < rowNodes.length; j++){\n            if (!isStartOfArrow(rowNodes[j])) {\n                // If a parseNode is not an arrow, it goes into a cell.\n                cell.body.push(rowNodes[j]);\n            } else {\n                // Parse node j is an \"@\", the start of an arrow.\n                // Before starting on the arrow, push the cell into `row`.\n                row.push(cell); // Now collect parseNodes into an arrow.\n                // The character after \"@\" defines the arrow type.\n                j += 1;\n                var arrowChar = assertSymbolNodeType(rowNodes[j]).text; // Create two empty label nodes. We may or may not use them.\n                var labels = new Array(2);\n                labels[0] = {\n                    type: \"ordgroup\",\n                    mode: \"math\",\n                    body: []\n                };\n                labels[1] = {\n                    type: \"ordgroup\",\n                    mode: \"math\",\n                    body: []\n                }; // Process the arrow.\n                if (\"=|.\".indexOf(arrowChar) > -1) ;\n                else if (\"<>AV\".indexOf(arrowChar) > -1) {\n                    // Four arrows, `@>>>`, `@<<<`, `@AAA`, and `@VVV`, each take\n                    // two optional labels. E.g. the right-point arrow syntax is\n                    // really:  @>{optional label}>{optional label}>\n                    // Collect parseNodes into labels.\n                    for(var labelNum = 0; labelNum < 2; labelNum++){\n                        var inLabel = true;\n                        for(var k = j + 1; k < rowNodes.length; k++){\n                            if (isLabelEnd(rowNodes[k], arrowChar)) {\n                                inLabel = false;\n                                j = k;\n                                break;\n                            }\n                            if (isStartOfArrow(rowNodes[k])) {\n                                throw new ParseError(\"Missing a \" + arrowChar + \" character to complete a CD arrow.\", rowNodes[k]);\n                            }\n                            labels[labelNum].body.push(rowNodes[k]);\n                        }\n                        if (inLabel) {\n                            // isLabelEnd never returned a true.\n                            throw new ParseError(\"Missing a \" + arrowChar + \" character to complete a CD arrow.\", rowNodes[j]);\n                        }\n                    }\n                } else {\n                    throw new ParseError('Expected one of \"<>AV=|.\" after @', rowNodes[j]);\n                } // Now join the arrow to its labels.\n                var arrow = cdArrow(arrowChar, labels, parser); // Wrap the arrow in  ParseNode<\"styling\">.\n                // This is done to match parseArray() behavior.\n                var wrappedArrow = {\n                    type: \"styling\",\n                    body: [\n                        arrow\n                    ],\n                    mode: \"math\",\n                    style: \"display\" // CD is always displaystyle.\n                };\n                row.push(wrappedArrow); // In CD's syntax, cells are implicit. That is, everything that\n                // is not an arrow gets collected into a cell. So create an empty\n                // cell now. It will collect upcoming parseNodes.\n                cell = newCell();\n            }\n        }\n        if (i % 2 === 0) {\n            // Even-numbered rows consist of: cell, arrow, cell, arrow, ... cell\n            // The last cell is not yet pushed into `row`, so:\n            row.push(cell);\n        } else {\n            // Odd-numbered rows consist of: vert arrow, empty cell, ... vert arrow\n            // Remove the empty cell that was placed at the beginning of `row`.\n            row.shift();\n        }\n        row = [];\n        body.push(row);\n    } // End row group\n    parser.gullet.endGroup(); // End array group defining \\\\\n    parser.gullet.endGroup(); // define column separation.\n    var cols = new Array(body[0].length).fill({\n        type: \"align\",\n        align: \"c\",\n        pregap: 0.25,\n        // CD package sets \\enskip between columns.\n        postgap: 0.25 // So pre and post each get half an \\enskip, i.e. 0.25em.\n    });\n    return {\n        type: \"array\",\n        mode: \"math\",\n        body,\n        arraystretch: 1,\n        addJot: true,\n        rowGaps: [\n            null\n        ],\n        cols,\n        colSeparationType: \"CD\",\n        hLinesBeforeRow: new Array(body.length + 1).fill([])\n    };\n} // The functions below are not available for general use.\n// They are here only for internal use by the {CD} environment in placing labels\n// next to vertical arrows.\n// We don't need any such functions for horizontal arrows because we can reuse\n// the functionality that already exists for extensible arrows.\ndefineFunction({\n    type: \"cdlabel\",\n    names: [\n        \"\\\\\\\\cdleft\",\n        \"\\\\\\\\cdright\"\n    ],\n    props: {\n        numArgs: 1\n    },\n    handler (_ref, args) {\n        var { parser, funcName } = _ref;\n        return {\n            type: \"cdlabel\",\n            mode: parser.mode,\n            side: funcName.slice(4),\n            label: args[0]\n        };\n    },\n    htmlBuilder (group, options) {\n        var newOptions = options.havingStyle(options.style.sup());\n        var label = buildCommon.wrapFragment(buildGroup$1(group.label, newOptions, options), options);\n        label.classes.push(\"cd-label-\" + group.side);\n        label.style.bottom = makeEm(0.8 - label.depth); // Zero out label height & depth, so vertical align of arrow is set\n        // by the arrow height, not by the label.\n        label.height = 0;\n        label.depth = 0;\n        return label;\n    },\n    mathmlBuilder (group, options) {\n        var label = new mathMLTree.MathNode(\"mrow\", [\n            buildGroup(group.label, options)\n        ]);\n        label = new mathMLTree.MathNode(\"mpadded\", [\n            label\n        ]);\n        label.setAttribute(\"width\", \"0\");\n        if (group.side === \"left\") {\n            label.setAttribute(\"lspace\", \"-1width\");\n        } // We have to guess at vertical alignment. We know the arrow is 1.8em tall,\n        // But we don't know the height or depth of the label.\n        label.setAttribute(\"voffset\", \"0.7em\");\n        label = new mathMLTree.MathNode(\"mstyle\", [\n            label\n        ]);\n        label.setAttribute(\"displaystyle\", \"false\");\n        label.setAttribute(\"scriptlevel\", \"1\");\n        return label;\n    }\n});\ndefineFunction({\n    type: \"cdlabelparent\",\n    names: [\n        \"\\\\\\\\cdparent\"\n    ],\n    props: {\n        numArgs: 1\n    },\n    handler (_ref2, args) {\n        var { parser } = _ref2;\n        return {\n            type: \"cdlabelparent\",\n            mode: parser.mode,\n            fragment: args[0]\n        };\n    },\n    htmlBuilder (group, options) {\n        // Wrap the vertical arrow and its labels.\n        // The parent gets position: relative. The child gets position: absolute.\n        // So CSS can locate the label correctly.\n        var parent = buildCommon.wrapFragment(buildGroup$1(group.fragment, options), options);\n        parent.classes.push(\"cd-vert-arrow\");\n        return parent;\n    },\n    mathmlBuilder (group, options) {\n        return new mathMLTree.MathNode(\"mrow\", [\n            buildGroup(group.fragment, options)\n        ]);\n    }\n});\n// {123} and converts into symbol with code 123.  It is used by the *macro*\n// \\char defined in macros.js.\ndefineFunction({\n    type: \"textord\",\n    names: [\n        \"\\\\@char\"\n    ],\n    props: {\n        numArgs: 1,\n        allowedInText: true\n    },\n    handler (_ref, args) {\n        var { parser } = _ref;\n        var arg = assertNodeType(args[0], \"ordgroup\");\n        var group = arg.body;\n        var number = \"\";\n        for(var i = 0; i < group.length; i++){\n            var node = assertNodeType(group[i], \"textord\");\n            number += node.text;\n        }\n        var code = parseInt(number);\n        var text;\n        if (isNaN(code)) {\n            throw new ParseError(\"\\\\@char has non-numeric argument \" + number); // If we drop IE support, the following code could be replaced with\n        // text = String.fromCodePoint(code)\n        } else if (code < 0 || code >= 0x10ffff) {\n            throw new ParseError(\"\\\\@char with invalid code point \" + number);\n        } else if (code <= 0xffff) {\n            text = String.fromCharCode(code);\n        } else {\n            // Astral code point; split into surrogate halves\n            code -= 0x10000;\n            text = String.fromCharCode((code >> 10) + 0xd800, (code & 0x3ff) + 0xdc00);\n        }\n        return {\n            type: \"textord\",\n            mode: parser.mode,\n            text: text\n        };\n    }\n});\nvar htmlBuilder$8 = (group, options)=>{\n    var elements = buildExpression$1(group.body, options.withColor(group.color), false); // \\color isn't supposed to affect the type of the elements it contains.\n    // To accomplish this, we wrap the results in a fragment, so the inner\n    // elements will be able to directly interact with their neighbors. For\n    // example, `\\color{red}{2 +} 3` has the same spacing as `2 + 3`\n    return buildCommon.makeFragment(elements);\n};\nvar mathmlBuilder$7 = (group, options)=>{\n    var inner = buildExpression(group.body, options.withColor(group.color));\n    var node = new mathMLTree.MathNode(\"mstyle\", inner);\n    node.setAttribute(\"mathcolor\", group.color);\n    return node;\n};\ndefineFunction({\n    type: \"color\",\n    names: [\n        \"\\\\textcolor\"\n    ],\n    props: {\n        numArgs: 2,\n        allowedInText: true,\n        argTypes: [\n            \"color\",\n            \"original\"\n        ]\n    },\n    handler (_ref, args) {\n        var { parser } = _ref;\n        var color = assertNodeType(args[0], \"color-token\").color;\n        var body = args[1];\n        return {\n            type: \"color\",\n            mode: parser.mode,\n            color,\n            body: ordargument(body)\n        };\n    },\n    htmlBuilder: htmlBuilder$8,\n    mathmlBuilder: mathmlBuilder$7\n});\ndefineFunction({\n    type: \"color\",\n    names: [\n        \"\\\\color\"\n    ],\n    props: {\n        numArgs: 1,\n        allowedInText: true,\n        argTypes: [\n            \"color\"\n        ]\n    },\n    handler (_ref2, args) {\n        var { parser, breakOnTokenText } = _ref2;\n        var color = assertNodeType(args[0], \"color-token\").color; // Set macro \\current@color in current namespace to store the current\n        // color, mimicking the behavior of color.sty.\n        // This is currently used just to correctly color a \\right\n        // that follows a \\color command.\n        parser.gullet.macros.set(\"\\\\current@color\", color); // Parse out the implicit body that should be colored.\n        var body = parser.parseExpression(true, breakOnTokenText);\n        return {\n            type: \"color\",\n            mode: parser.mode,\n            color,\n            body\n        };\n    },\n    htmlBuilder: htmlBuilder$8,\n    mathmlBuilder: mathmlBuilder$7\n});\n// Row breaks within tabular environments, and line breaks at top level\ndefineFunction({\n    type: \"cr\",\n    names: [\n        \"\\\\\\\\\"\n    ],\n    props: {\n        numArgs: 0,\n        numOptionalArgs: 0,\n        allowedInText: true\n    },\n    handler (_ref, args, optArgs) {\n        var { parser } = _ref;\n        var size = parser.gullet.future().text === \"[\" ? parser.parseSizeGroup(true) : null;\n        var newLine = !parser.settings.displayMode || !parser.settings.useStrictBehavior(\"newLineInDisplayMode\", \"In LaTeX, \\\\\\\\ or \\\\newline \" + \"does nothing in display mode\");\n        return {\n            type: \"cr\",\n            mode: parser.mode,\n            newLine,\n            size: size && assertNodeType(size, \"size\").value\n        };\n    },\n    // The following builders are called only at the top level,\n    // not within tabular/array environments.\n    htmlBuilder (group, options) {\n        var span = buildCommon.makeSpan([\n            \"mspace\"\n        ], [], options);\n        if (group.newLine) {\n            span.classes.push(\"newline\");\n            if (group.size) {\n                span.style.marginTop = makeEm(calculateSize(group.size, options));\n            }\n        }\n        return span;\n    },\n    mathmlBuilder (group, options) {\n        var node = new mathMLTree.MathNode(\"mspace\");\n        if (group.newLine) {\n            node.setAttribute(\"linebreak\", \"newline\");\n            if (group.size) {\n                node.setAttribute(\"height\", makeEm(calculateSize(group.size, options)));\n            }\n        }\n        return node;\n    }\n});\nvar globalMap = {\n    \"\\\\global\": \"\\\\global\",\n    \"\\\\long\": \"\\\\\\\\globallong\",\n    \"\\\\\\\\globallong\": \"\\\\\\\\globallong\",\n    \"\\\\def\": \"\\\\gdef\",\n    \"\\\\gdef\": \"\\\\gdef\",\n    \"\\\\edef\": \"\\\\xdef\",\n    \"\\\\xdef\": \"\\\\xdef\",\n    \"\\\\let\": \"\\\\\\\\globallet\",\n    \"\\\\futurelet\": \"\\\\\\\\globalfuture\"\n};\nvar checkControlSequence = (tok)=>{\n    var name = tok.text;\n    if (/^(?:[\\\\{}$&#^_]|EOF)$/.test(name)) {\n        throw new ParseError(\"Expected a control sequence\", tok);\n    }\n    return name;\n};\nvar getRHS = (parser)=>{\n    var tok = parser.gullet.popToken();\n    if (tok.text === \"=\") {\n        // consume optional equals\n        tok = parser.gullet.popToken();\n        if (tok.text === \" \") {\n            // consume one optional space\n            tok = parser.gullet.popToken();\n        }\n    }\n    return tok;\n};\nvar letCommand = (parser, name, tok, global)=>{\n    var macro = parser.gullet.macros.get(tok.text);\n    if (macro == null) {\n        // don't expand it later even if a macro with the same name is defined\n        // e.g., \\let\\foo=\\frac \\def\\frac{\\relax} \\frac12\n        tok.noexpand = true;\n        macro = {\n            tokens: [\n                tok\n            ],\n            numArgs: 0,\n            // reproduce the same behavior in expansion\n            unexpandable: !parser.gullet.isExpandable(tok.text)\n        };\n    }\n    parser.gullet.macros.set(name, macro, global);\n}; // <assignment> -> <non-macro assignment>|<macro assignment>\n// <non-macro assignment> -> <simple assignment>|\\global<non-macro assignment>\n// <macro assignment> -> <definition>|<prefix><macro assignment>\n// <prefix> -> \\global|\\long|\\outer\ndefineFunction({\n    type: \"internal\",\n    names: [\n        \"\\\\global\",\n        \"\\\\long\",\n        \"\\\\\\\\globallong\" // can’t be entered directly\n    ],\n    props: {\n        numArgs: 0,\n        allowedInText: true\n    },\n    handler (_ref) {\n        var { parser, funcName } = _ref;\n        parser.consumeSpaces();\n        var token = parser.fetch();\n        if (globalMap[token.text]) {\n            // KaTeX doesn't have \\par, so ignore \\long\n            if (funcName === \"\\\\global\" || funcName === \"\\\\\\\\globallong\") {\n                token.text = globalMap[token.text];\n            }\n            return assertNodeType(parser.parseFunction(), \"internal\");\n        }\n        throw new ParseError(\"Invalid token after macro prefix\", token);\n    }\n}); // Basic support for macro definitions: \\def, \\gdef, \\edef, \\xdef\n// <definition> -> <def><control sequence><definition text>\n// <def> -> \\def|\\gdef|\\edef|\\xdef\n// <definition text> -> <parameter text><left brace><balanced text><right brace>\ndefineFunction({\n    type: \"internal\",\n    names: [\n        \"\\\\def\",\n        \"\\\\gdef\",\n        \"\\\\edef\",\n        \"\\\\xdef\"\n    ],\n    props: {\n        numArgs: 0,\n        allowedInText: true,\n        primitive: true\n    },\n    handler (_ref2) {\n        var { parser, funcName } = _ref2;\n        var tok = parser.gullet.popToken();\n        var name = tok.text;\n        if (/^(?:[\\\\{}$&#^_]|EOF)$/.test(name)) {\n            throw new ParseError(\"Expected a control sequence\", tok);\n        }\n        var numArgs = 0;\n        var insert;\n        var delimiters = [\n            []\n        ]; // <parameter text> contains no braces\n        while(parser.gullet.future().text !== \"{\"){\n            tok = parser.gullet.popToken();\n            if (tok.text === \"#\") {\n                // If the very last character of the <parameter text> is #, so that\n                // this # is immediately followed by {, TeX will behave as if the {\n                // had been inserted at the right end of both the parameter text\n                // and the replacement text.\n                if (parser.gullet.future().text === \"{\") {\n                    insert = parser.gullet.future();\n                    delimiters[numArgs].push(\"{\");\n                    break;\n                } // A parameter, the first appearance of # must be followed by 1,\n                // the next by 2, and so on; up to nine #’s are allowed\n                tok = parser.gullet.popToken();\n                if (!/^[1-9]$/.test(tok.text)) {\n                    throw new ParseError('Invalid argument number \"' + tok.text + '\"');\n                }\n                if (parseInt(tok.text) !== numArgs + 1) {\n                    throw new ParseError('Argument number \"' + tok.text + '\" out of order');\n                }\n                numArgs++;\n                delimiters.push([]);\n            } else if (tok.text === \"EOF\") {\n                throw new ParseError(\"Expected a macro definition\");\n            } else {\n                delimiters[numArgs].push(tok.text);\n            }\n        } // replacement text, enclosed in '{' and '}' and properly nested\n        var { tokens } = parser.gullet.consumeArg();\n        if (insert) {\n            tokens.unshift(insert);\n        }\n        if (funcName === \"\\\\edef\" || funcName === \"\\\\xdef\") {\n            tokens = parser.gullet.expandTokens(tokens);\n            tokens.reverse(); // to fit in with stack order\n        } // Final arg is the expansion of the macro\n        parser.gullet.macros.set(name, {\n            tokens,\n            numArgs,\n            delimiters\n        }, funcName === globalMap[funcName]);\n        return {\n            type: \"internal\",\n            mode: parser.mode\n        };\n    }\n}); // <simple assignment> -> <let assignment>\n// <let assignment> -> \\futurelet<control sequence><token><token>\n//     | \\let<control sequence><equals><one optional space><token>\n// <equals> -> <optional spaces>|<optional spaces>=\ndefineFunction({\n    type: \"internal\",\n    names: [\n        \"\\\\let\",\n        \"\\\\\\\\globallet\" // can’t be entered directly\n    ],\n    props: {\n        numArgs: 0,\n        allowedInText: true,\n        primitive: true\n    },\n    handler (_ref3) {\n        var { parser, funcName } = _ref3;\n        var name = checkControlSequence(parser.gullet.popToken());\n        parser.gullet.consumeSpaces();\n        var tok = getRHS(parser);\n        letCommand(parser, name, tok, funcName === \"\\\\\\\\globallet\");\n        return {\n            type: \"internal\",\n            mode: parser.mode\n        };\n    }\n}); // ref: https://www.tug.org/TUGboat/tb09-3/tb22bechtolsheim.pdf\ndefineFunction({\n    type: \"internal\",\n    names: [\n        \"\\\\futurelet\",\n        \"\\\\\\\\globalfuture\" // can’t be entered directly\n    ],\n    props: {\n        numArgs: 0,\n        allowedInText: true,\n        primitive: true\n    },\n    handler (_ref4) {\n        var { parser, funcName } = _ref4;\n        var name = checkControlSequence(parser.gullet.popToken());\n        var middle = parser.gullet.popToken();\n        var tok = parser.gullet.popToken();\n        letCommand(parser, name, tok, funcName === \"\\\\\\\\globalfuture\");\n        parser.gullet.pushToken(tok);\n        parser.gullet.pushToken(middle);\n        return {\n            type: \"internal\",\n            mode: parser.mode\n        };\n    }\n});\n/**\n * This file deals with creating delimiters of various sizes. The TeXbook\n * discusses these routines on page 441-442, in the \"Another subroutine sets box\n * x to a specified variable delimiter\" paragraph.\n *\n * There are three main routines here. `makeSmallDelim` makes a delimiter in the\n * normal font, but in either text, script, or scriptscript style.\n * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,\n * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of\n * smaller pieces that are stacked on top of one another.\n *\n * The functions take a parameter `center`, which determines if the delimiter\n * should be centered around the axis.\n *\n * Then, there are three exposed functions. `sizedDelim` makes a delimiter in\n * one of the given sizes. This is used for things like `\\bigl`.\n * `customSizedDelim` makes a delimiter with a given total height+depth. It is\n * called in places like `\\sqrt`. `leftRightDelim` makes an appropriate\n * delimiter which surrounds an expression of a given height an depth. It is\n * used in `\\left` and `\\right`.\n */ /**\n * Get the metrics for a given symbol and font, after transformation (i.e.\n * after following replacement from symbols.js)\n */ var getMetrics = function getMetrics(symbol, font, mode) {\n    var replace = symbols.math[symbol] && symbols.math[symbol].replace;\n    var metrics = getCharacterMetrics(replace || symbol, font, mode);\n    if (!metrics) {\n        throw new Error(\"Unsupported symbol \" + symbol + \" and font size \" + font + \".\");\n    }\n    return metrics;\n};\n/**\n * Puts a delimiter span in a given style, and adds appropriate height, depth,\n * and maxFontSizes.\n */ var styleWrap = function styleWrap(delim, toStyle, options, classes) {\n    var newOptions = options.havingBaseStyle(toStyle);\n    var span = buildCommon.makeSpan(classes.concat(newOptions.sizingClasses(options)), [\n        delim\n    ], options);\n    var delimSizeMultiplier = newOptions.sizeMultiplier / options.sizeMultiplier;\n    span.height *= delimSizeMultiplier;\n    span.depth *= delimSizeMultiplier;\n    span.maxFontSize = newOptions.sizeMultiplier;\n    return span;\n};\nvar centerSpan = function centerSpan(span, options, style) {\n    var newOptions = options.havingBaseStyle(style);\n    var shift = (1 - options.sizeMultiplier / newOptions.sizeMultiplier) * options.fontMetrics().axisHeight;\n    span.classes.push(\"delimcenter\");\n    span.style.top = makeEm(shift);\n    span.height -= shift;\n    span.depth += shift;\n};\n/**\n * Makes a small delimiter. This is a delimiter that comes in the Main-Regular\n * font, but is restyled to either be in textstyle, scriptstyle, or\n * scriptscriptstyle.\n */ var makeSmallDelim = function makeSmallDelim(delim, style, center, options, mode, classes) {\n    var text = buildCommon.makeSymbol(delim, \"Main-Regular\", mode, options);\n    var span = styleWrap(text, style, options, classes);\n    if (center) {\n        centerSpan(span, options, style);\n    }\n    return span;\n};\n/**\n * Builds a symbol in the given font size (note size is an integer)\n */ var mathrmSize = function mathrmSize(value, size, mode, options) {\n    return buildCommon.makeSymbol(value, \"Size\" + size + \"-Regular\", mode, options);\n};\n/**\n * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,\n * Size3, or Size4 fonts. It is always rendered in textstyle.\n */ var makeLargeDelim = function makeLargeDelim(delim, size, center, options, mode, classes) {\n    var inner = mathrmSize(delim, size, mode, options);\n    var span = styleWrap(buildCommon.makeSpan([\n        \"delimsizing\",\n        \"size\" + size\n    ], [\n        inner\n    ], options), Style$1.TEXT, options, classes);\n    if (center) {\n        centerSpan(span, options, Style$1.TEXT);\n    }\n    return span;\n};\n/**\n * Make a span from a font glyph with the given offset and in the given font.\n * This is used in makeStackedDelim to make the stacking pieces for the delimiter.\n */ var makeGlyphSpan = function makeGlyphSpan(symbol, font, mode) {\n    var sizeClass; // Apply the correct CSS class to choose the right font.\n    if (font === \"Size1-Regular\") {\n        sizeClass = \"delim-size1\";\n    } else /* if (font === \"Size4-Regular\") */ {\n        sizeClass = \"delim-size4\";\n    }\n    var corner = buildCommon.makeSpan([\n        \"delimsizinginner\",\n        sizeClass\n    ], [\n        buildCommon.makeSpan([], [\n            buildCommon.makeSymbol(symbol, font, mode)\n        ])\n    ]); // Since this will be passed into `makeVList` in the end, wrap the element\n    // in the appropriate tag that VList uses.\n    return {\n        type: \"elem\",\n        elem: corner\n    };\n};\nvar makeInner = function makeInner(ch, height, options) {\n    // Create a span with inline SVG for the inner part of a tall stacked delimiter.\n    var width = fontMetricsData[\"Size4-Regular\"][ch.charCodeAt(0)] ? fontMetricsData[\"Size4-Regular\"][ch.charCodeAt(0)][4] : fontMetricsData[\"Size1-Regular\"][ch.charCodeAt(0)][4];\n    var path = new PathNode(\"inner\", innerPath(ch, Math.round(1000 * height)));\n    var svgNode = new SvgNode([\n        path\n    ], {\n        \"width\": makeEm(width),\n        \"height\": makeEm(height),\n        // Override CSS rule `.katex svg { width: 100% }`\n        \"style\": \"width:\" + makeEm(width),\n        \"viewBox\": \"0 0 \" + 1000 * width + \" \" + Math.round(1000 * height),\n        \"preserveAspectRatio\": \"xMinYMin\"\n    });\n    var span = buildCommon.makeSvgSpan([], [\n        svgNode\n    ], options);\n    span.height = height;\n    span.style.height = makeEm(height);\n    span.style.width = makeEm(width);\n    return {\n        type: \"elem\",\n        elem: span\n    };\n}; // Helpers for makeStackedDelim\nvar lapInEms = 0.008;\nvar lap = {\n    type: \"kern\",\n    size: -1 * lapInEms\n};\nvar verts = [\n    \"|\",\n    \"\\\\lvert\",\n    \"\\\\rvert\",\n    \"\\\\vert\"\n];\nvar doubleVerts = [\n    \"\\\\|\",\n    \"\\\\lVert\",\n    \"\\\\rVert\",\n    \"\\\\Vert\"\n];\n/**\n * Make a stacked delimiter out of a given delimiter, with the total height at\n * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.\n */ var makeStackedDelim = function makeStackedDelim(delim, heightTotal, center, options, mode, classes) {\n    // There are four parts, the top, an optional middle, a repeated part, and a\n    // bottom.\n    var top;\n    var middle;\n    var repeat;\n    var bottom;\n    var svgLabel = \"\";\n    var viewBoxWidth = 0;\n    top = repeat = bottom = delim;\n    middle = null; // Also keep track of what font the delimiters are in\n    var font = \"Size1-Regular\"; // We set the parts and font based on the symbol. Note that we use\n    // '\\u23d0' instead of '|' and '\\u2016' instead of '\\\\|' for the\n    // repeats of the arrows\n    if (delim === \"\\\\uparrow\") {\n        repeat = bottom = \"⏐\";\n    } else if (delim === \"\\\\Uparrow\") {\n        repeat = bottom = \"‖\";\n    } else if (delim === \"\\\\downarrow\") {\n        top = repeat = \"⏐\";\n    } else if (delim === \"\\\\Downarrow\") {\n        top = repeat = \"‖\";\n    } else if (delim === \"\\\\updownarrow\") {\n        top = \"\\\\uparrow\";\n        repeat = \"⏐\";\n        bottom = \"\\\\downarrow\";\n    } else if (delim === \"\\\\Updownarrow\") {\n        top = \"\\\\Uparrow\";\n        repeat = \"‖\";\n        bottom = \"\\\\Downarrow\";\n    } else if (utils.contains(verts, delim)) {\n        repeat = \"∣\";\n        svgLabel = \"vert\";\n        viewBoxWidth = 333;\n    } else if (utils.contains(doubleVerts, delim)) {\n        repeat = \"∥\";\n        svgLabel = \"doublevert\";\n        viewBoxWidth = 556;\n    } else if (delim === \"[\" || delim === \"\\\\lbrack\") {\n        top = \"⎡\";\n        repeat = \"⎢\";\n        bottom = \"⎣\";\n        font = \"Size4-Regular\";\n        svgLabel = \"lbrack\";\n        viewBoxWidth = 667;\n    } else if (delim === \"]\" || delim === \"\\\\rbrack\") {\n        top = \"⎤\";\n        repeat = \"⎥\";\n        bottom = \"⎦\";\n        font = \"Size4-Regular\";\n        svgLabel = \"rbrack\";\n        viewBoxWidth = 667;\n    } else if (delim === \"\\\\lfloor\" || delim === \"⌊\") {\n        repeat = top = \"⎢\";\n        bottom = \"⎣\";\n        font = \"Size4-Regular\";\n        svgLabel = \"lfloor\";\n        viewBoxWidth = 667;\n    } else if (delim === \"\\\\lceil\" || delim === \"⌈\") {\n        top = \"⎡\";\n        repeat = bottom = \"⎢\";\n        font = \"Size4-Regular\";\n        svgLabel = \"lceil\";\n        viewBoxWidth = 667;\n    } else if (delim === \"\\\\rfloor\" || delim === \"⌋\") {\n        repeat = top = \"⎥\";\n        bottom = \"⎦\";\n        font = \"Size4-Regular\";\n        svgLabel = \"rfloor\";\n        viewBoxWidth = 667;\n    } else if (delim === \"\\\\rceil\" || delim === \"⌉\") {\n        top = \"⎤\";\n        repeat = bottom = \"⎥\";\n        font = \"Size4-Regular\";\n        svgLabel = \"rceil\";\n        viewBoxWidth = 667;\n    } else if (delim === \"(\" || delim === \"\\\\lparen\") {\n        top = \"⎛\";\n        repeat = \"⎜\";\n        bottom = \"⎝\";\n        font = \"Size4-Regular\";\n        svgLabel = \"lparen\";\n        viewBoxWidth = 875;\n    } else if (delim === \")\" || delim === \"\\\\rparen\") {\n        top = \"⎞\";\n        repeat = \"⎟\";\n        bottom = \"⎠\";\n        font = \"Size4-Regular\";\n        svgLabel = \"rparen\";\n        viewBoxWidth = 875;\n    } else if (delim === \"\\\\{\" || delim === \"\\\\lbrace\") {\n        top = \"⎧\";\n        middle = \"⎨\";\n        bottom = \"⎩\";\n        repeat = \"⎪\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\}\" || delim === \"\\\\rbrace\") {\n        top = \"⎫\";\n        middle = \"⎬\";\n        bottom = \"⎭\";\n        repeat = \"⎪\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\lgroup\" || delim === \"⟮\") {\n        top = \"⎧\";\n        bottom = \"⎩\";\n        repeat = \"⎪\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\rgroup\" || delim === \"⟯\") {\n        top = \"⎫\";\n        bottom = \"⎭\";\n        repeat = \"⎪\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\lmoustache\" || delim === \"⎰\") {\n        top = \"⎧\";\n        bottom = \"⎭\";\n        repeat = \"⎪\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\rmoustache\" || delim === \"⎱\") {\n        top = \"⎫\";\n        bottom = \"⎩\";\n        repeat = \"⎪\";\n        font = \"Size4-Regular\";\n    } // Get the metrics of the four sections\n    var topMetrics = getMetrics(top, font, mode);\n    var topHeightTotal = topMetrics.height + topMetrics.depth;\n    var repeatMetrics = getMetrics(repeat, font, mode);\n    var repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;\n    var bottomMetrics = getMetrics(bottom, font, mode);\n    var bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;\n    var middleHeightTotal = 0;\n    var middleFactor = 1;\n    if (middle !== null) {\n        var middleMetrics = getMetrics(middle, font, mode);\n        middleHeightTotal = middleMetrics.height + middleMetrics.depth;\n        middleFactor = 2; // repeat symmetrically above and below middle\n    } // Calculate the minimal height that the delimiter can have.\n    // It is at least the size of the top, bottom, and optional middle combined.\n    var minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal; // Compute the number of copies of the repeat symbol we will need\n    var repeatCount = Math.max(0, Math.ceil((heightTotal - minHeight) / (middleFactor * repeatHeightTotal))); // Compute the total height of the delimiter including all the symbols\n    var realHeightTotal = minHeight + repeatCount * middleFactor * repeatHeightTotal; // The center of the delimiter is placed at the center of the axis. Note\n    // that in this context, \"center\" means that the delimiter should be\n    // centered around the axis in the current style, while normally it is\n    // centered around the axis in textstyle.\n    var axisHeight = options.fontMetrics().axisHeight;\n    if (center) {\n        axisHeight *= options.sizeMultiplier;\n    } // Calculate the depth\n    var depth = realHeightTotal / 2 - axisHeight; // Now, we start building the pieces that will go into the vlist\n    // Keep a list of the pieces of the stacked delimiter\n    var stack = [];\n    if (svgLabel.length > 0) {\n        // Instead of stacking glyphs, create a single SVG.\n        // This evades browser problems with imprecise positioning of spans.\n        var midHeight = realHeightTotal - topHeightTotal - bottomHeightTotal;\n        var viewBoxHeight = Math.round(realHeightTotal * 1000);\n        var pathStr = tallDelim(svgLabel, Math.round(midHeight * 1000));\n        var path = new PathNode(svgLabel, pathStr);\n        var width = (viewBoxWidth / 1000).toFixed(3) + \"em\";\n        var height = (viewBoxHeight / 1000).toFixed(3) + \"em\";\n        var svg = new SvgNode([\n            path\n        ], {\n            \"width\": width,\n            \"height\": height,\n            \"viewBox\": \"0 0 \" + viewBoxWidth + \" \" + viewBoxHeight\n        });\n        var wrapper = buildCommon.makeSvgSpan([], [\n            svg\n        ], options);\n        wrapper.height = viewBoxHeight / 1000;\n        wrapper.style.width = width;\n        wrapper.style.height = height;\n        stack.push({\n            type: \"elem\",\n            elem: wrapper\n        });\n    } else {\n        // Stack glyphs\n        // Start by adding the bottom symbol\n        stack.push(makeGlyphSpan(bottom, font, mode));\n        stack.push(lap); // overlap\n        if (middle === null) {\n            // The middle section will be an SVG. Make it an extra 0.016em tall.\n            // We'll overlap by 0.008em at top and bottom.\n            var innerHeight = realHeightTotal - topHeightTotal - bottomHeightTotal + 2 * lapInEms;\n            stack.push(makeInner(repeat, innerHeight, options));\n        } else {\n            // When there is a middle bit, we need the middle part and two repeated\n            // sections\n            var _innerHeight = (realHeightTotal - topHeightTotal - bottomHeightTotal - middleHeightTotal) / 2 + 2 * lapInEms;\n            stack.push(makeInner(repeat, _innerHeight, options)); // Now insert the middle of the brace.\n            stack.push(lap);\n            stack.push(makeGlyphSpan(middle, font, mode));\n            stack.push(lap);\n            stack.push(makeInner(repeat, _innerHeight, options));\n        } // Add the top symbol\n        stack.push(lap);\n        stack.push(makeGlyphSpan(top, font, mode));\n    } // Finally, build the vlist\n    var newOptions = options.havingBaseStyle(Style$1.TEXT);\n    var inner = buildCommon.makeVList({\n        positionType: \"bottom\",\n        positionData: depth,\n        children: stack\n    }, newOptions);\n    return styleWrap(buildCommon.makeSpan([\n        \"delimsizing\",\n        \"mult\"\n    ], [\n        inner\n    ], newOptions), Style$1.TEXT, options, classes);\n}; // All surds have 0.08em padding above the vinculum inside the SVG.\n// That keeps browser span height rounding error from pinching the line.\nvar vbPad = 80; // padding above the surd, measured inside the viewBox.\nvar emPad = 0.08; // padding, in ems, measured in the document.\nvar sqrtSvg = function sqrtSvg(sqrtName, height, viewBoxHeight, extraVinculum, options) {\n    var path = sqrtPath(sqrtName, extraVinculum, viewBoxHeight);\n    var pathNode = new PathNode(sqrtName, path);\n    var svg = new SvgNode([\n        pathNode\n    ], {\n        // Note: 1000:1 ratio of viewBox to document em width.\n        \"width\": \"400em\",\n        \"height\": makeEm(height),\n        \"viewBox\": \"0 0 400000 \" + viewBoxHeight,\n        \"preserveAspectRatio\": \"xMinYMin slice\"\n    });\n    return buildCommon.makeSvgSpan([\n        \"hide-tail\"\n    ], [\n        svg\n    ], options);\n};\n/**\n * Make a sqrt image of the given height,\n */ var makeSqrtImage = function makeSqrtImage(height, options) {\n    // Define a newOptions that removes the effect of size changes such as \\Huge.\n    // We don't pick different a height surd for \\Huge. For it, we scale up.\n    var newOptions = options.havingBaseSizing(); // Pick the desired surd glyph from a sequence of surds.\n    var delim = traverseSequence(\"\\\\surd\", height * newOptions.sizeMultiplier, stackLargeDelimiterSequence, newOptions);\n    var sizeMultiplier = newOptions.sizeMultiplier; // default\n    // The standard sqrt SVGs each have a 0.04em thick vinculum.\n    // If Settings.minRuleThickness is larger than that, we add extraVinculum.\n    var extraVinculum = Math.max(0, options.minRuleThickness - options.fontMetrics().sqrtRuleThickness); // Create a span containing an SVG image of a sqrt symbol.\n    var span;\n    var spanHeight = 0;\n    var texHeight = 0;\n    var viewBoxHeight = 0;\n    var advanceWidth; // We create viewBoxes with 80 units of \"padding\" above each surd.\n    // Then browser rounding error on the parent span height will not\n    // encroach on the ink of the vinculum. But that padding is not\n    // included in the TeX-like `height` used for calculation of\n    // vertical alignment. So texHeight = span.height < span.style.height.\n    if (delim.type === \"small\") {\n        // Get an SVG that is derived from glyph U+221A in font KaTeX-Main.\n        // 1000 unit normal glyph height.\n        viewBoxHeight = 1000 + 1000 * extraVinculum + vbPad;\n        if (height < 1.0) {\n            sizeMultiplier = 1.0; // mimic a \\textfont radical\n        } else if (height < 1.4) {\n            sizeMultiplier = 0.7; // mimic a \\scriptfont radical\n        }\n        spanHeight = (1.0 + extraVinculum + emPad) / sizeMultiplier;\n        texHeight = (1.00 + extraVinculum) / sizeMultiplier;\n        span = sqrtSvg(\"sqrtMain\", spanHeight, viewBoxHeight, extraVinculum, options);\n        span.style.minWidth = \"0.853em\";\n        advanceWidth = 0.833 / sizeMultiplier; // from the font.\n    } else if (delim.type === \"large\") {\n        // These SVGs come from fonts: KaTeX_Size1, _Size2, etc.\n        viewBoxHeight = (1000 + vbPad) * sizeToMaxHeight[delim.size];\n        texHeight = (sizeToMaxHeight[delim.size] + extraVinculum) / sizeMultiplier;\n        spanHeight = (sizeToMaxHeight[delim.size] + extraVinculum + emPad) / sizeMultiplier;\n        span = sqrtSvg(\"sqrtSize\" + delim.size, spanHeight, viewBoxHeight, extraVinculum, options);\n        span.style.minWidth = \"1.02em\";\n        advanceWidth = 1.0 / sizeMultiplier; // 1.0 from the font.\n    } else {\n        // Tall sqrt. In TeX, this would be stacked using multiple glyphs.\n        // We'll use a single SVG to accomplish the same thing.\n        spanHeight = height + extraVinculum + emPad;\n        texHeight = height + extraVinculum;\n        viewBoxHeight = Math.floor(1000 * height + extraVinculum) + vbPad;\n        span = sqrtSvg(\"sqrtTall\", spanHeight, viewBoxHeight, extraVinculum, options);\n        span.style.minWidth = \"0.742em\";\n        advanceWidth = 1.056;\n    }\n    span.height = texHeight;\n    span.style.height = makeEm(spanHeight);\n    return {\n        span,\n        advanceWidth,\n        // Calculate the actual line width.\n        // This actually should depend on the chosen font -- e.g. \\boldmath\n        // should use the thicker surd symbols from e.g. KaTeX_Main-Bold, and\n        // have thicker rules.\n        ruleWidth: (options.fontMetrics().sqrtRuleThickness + extraVinculum) * sizeMultiplier\n    };\n}; // There are three kinds of delimiters, delimiters that stack when they become\n// too large\nvar stackLargeDelimiters = [\n    \"(\",\n    \"\\\\lparen\",\n    \")\",\n    \"\\\\rparen\",\n    \"[\",\n    \"\\\\lbrack\",\n    \"]\",\n    \"\\\\rbrack\",\n    \"\\\\{\",\n    \"\\\\lbrace\",\n    \"\\\\}\",\n    \"\\\\rbrace\",\n    \"\\\\lfloor\",\n    \"\\\\rfloor\",\n    \"⌊\",\n    \"⌋\",\n    \"\\\\lceil\",\n    \"\\\\rceil\",\n    \"⌈\",\n    \"⌉\",\n    \"\\\\surd\"\n]; // delimiters that always stack\nvar stackAlwaysDelimiters = [\n    \"\\\\uparrow\",\n    \"\\\\downarrow\",\n    \"\\\\updownarrow\",\n    \"\\\\Uparrow\",\n    \"\\\\Downarrow\",\n    \"\\\\Updownarrow\",\n    \"|\",\n    \"\\\\|\",\n    \"\\\\vert\",\n    \"\\\\Vert\",\n    \"\\\\lvert\",\n    \"\\\\rvert\",\n    \"\\\\lVert\",\n    \"\\\\rVert\",\n    \"\\\\lgroup\",\n    \"\\\\rgroup\",\n    \"⟮\",\n    \"⟯\",\n    \"\\\\lmoustache\",\n    \"\\\\rmoustache\",\n    \"⎰\",\n    \"⎱\"\n]; // and delimiters that never stack\nvar stackNeverDelimiters = [\n    \"<\",\n    \">\",\n    \"\\\\langle\",\n    \"\\\\rangle\",\n    \"/\",\n    \"\\\\backslash\",\n    \"\\\\lt\",\n    \"\\\\gt\"\n]; // Metrics of the different sizes. Found by looking at TeX's output of\n// $\\bigl| // \\Bigl| \\biggl| \\Biggl| \\showlists$\n// Used to create stacked delimiters of appropriate sizes in makeSizedDelim.\nvar sizeToMaxHeight = [\n    0,\n    1.2,\n    1.8,\n    2.4,\n    3.0\n];\n/**\n * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.\n */ var makeSizedDelim = function makeSizedDelim(delim, size, options, mode, classes) {\n    // < and > turn into \\langle and \\rangle in delimiters\n    if (delim === \"<\" || delim === \"\\\\lt\" || delim === \"⟨\") {\n        delim = \"\\\\langle\";\n    } else if (delim === \">\" || delim === \"\\\\gt\" || delim === \"⟩\") {\n        delim = \"\\\\rangle\";\n    } // Sized delimiters are never centered.\n    if (utils.contains(stackLargeDelimiters, delim) || utils.contains(stackNeverDelimiters, delim)) {\n        return makeLargeDelim(delim, size, false, options, mode, classes);\n    } else if (utils.contains(stackAlwaysDelimiters, delim)) {\n        return makeStackedDelim(delim, sizeToMaxHeight[size], false, options, mode, classes);\n    } else {\n        throw new ParseError(\"Illegal delimiter: '\" + delim + \"'\");\n    }\n};\n/**\n * There are three different sequences of delimiter sizes that the delimiters\n * follow depending on the kind of delimiter. This is used when creating custom\n * sized delimiters to decide whether to create a small, large, or stacked\n * delimiter.\n *\n * In real TeX, these sequences aren't explicitly defined, but are instead\n * defined inside the font metrics. Since there are only three sequences that\n * are possible for the delimiters that TeX defines, it is easier to just encode\n * them explicitly here.\n */ // Delimiters that never stack try small delimiters and large delimiters only\nvar stackNeverDelimiterSequence = [\n    {\n        type: \"small\",\n        style: Style$1.SCRIPTSCRIPT\n    },\n    {\n        type: \"small\",\n        style: Style$1.SCRIPT\n    },\n    {\n        type: \"small\",\n        style: Style$1.TEXT\n    },\n    {\n        type: \"large\",\n        size: 1\n    },\n    {\n        type: \"large\",\n        size: 2\n    },\n    {\n        type: \"large\",\n        size: 3\n    },\n    {\n        type: \"large\",\n        size: 4\n    }\n]; // Delimiters that always stack try the small delimiters first, then stack\nvar stackAlwaysDelimiterSequence = [\n    {\n        type: \"small\",\n        style: Style$1.SCRIPTSCRIPT\n    },\n    {\n        type: \"small\",\n        style: Style$1.SCRIPT\n    },\n    {\n        type: \"small\",\n        style: Style$1.TEXT\n    },\n    {\n        type: \"stack\"\n    }\n]; // Delimiters that stack when large try the small and then large delimiters, and\n// stack afterwards\nvar stackLargeDelimiterSequence = [\n    {\n        type: \"small\",\n        style: Style$1.SCRIPTSCRIPT\n    },\n    {\n        type: \"small\",\n        style: Style$1.SCRIPT\n    },\n    {\n        type: \"small\",\n        style: Style$1.TEXT\n    },\n    {\n        type: \"large\",\n        size: 1\n    },\n    {\n        type: \"large\",\n        size: 2\n    },\n    {\n        type: \"large\",\n        size: 3\n    },\n    {\n        type: \"large\",\n        size: 4\n    },\n    {\n        type: \"stack\"\n    }\n];\n/**\n * Get the font used in a delimiter based on what kind of delimiter it is.\n * TODO(#963) Use more specific font family return type once that is introduced.\n */ var delimTypeToFont = function delimTypeToFont(type) {\n    if (type.type === \"small\") {\n        return \"Main-Regular\";\n    } else if (type.type === \"large\") {\n        return \"Size\" + type.size + \"-Regular\";\n    } else if (type.type === \"stack\") {\n        return \"Size4-Regular\";\n    } else {\n        throw new Error(\"Add support for delim type '\" + type.type + \"' here.\");\n    }\n};\n/**\n * Traverse a sequence of types of delimiters to decide what kind of delimiter\n * should be used to create a delimiter of the given height+depth.\n */ var traverseSequence = function traverseSequence(delim, height, sequence, options) {\n    // Here, we choose the index we should start at in the sequences. In smaller\n    // sizes (which correspond to larger numbers in style.size) we start earlier\n    // in the sequence. Thus, scriptscript starts at index 3-3=0, script starts\n    // at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2\n    var start = Math.min(2, 3 - options.style.size);\n    for(var i = start; i < sequence.length; i++){\n        if (sequence[i].type === \"stack\") {\n            break;\n        }\n        var metrics = getMetrics(delim, delimTypeToFont(sequence[i]), \"math\");\n        var heightDepth = metrics.height + metrics.depth; // Small delimiters are scaled down versions of the same font, so we\n        // account for the style change size.\n        if (sequence[i].type === \"small\") {\n            var newOptions = options.havingBaseStyle(sequence[i].style);\n            heightDepth *= newOptions.sizeMultiplier;\n        } // Check if the delimiter at this size works for the given height.\n        if (heightDepth > height) {\n            return sequence[i];\n        }\n    } // If we reached the end of the sequence, return the last sequence element.\n    return sequence[sequence.length - 1];\n};\n/**\n * Make a delimiter of a given height+depth, with optional centering. Here, we\n * traverse the sequences, and create a delimiter that the sequence tells us to.\n */ var makeCustomSizedDelim = function makeCustomSizedDelim(delim, height, center, options, mode, classes) {\n    if (delim === \"<\" || delim === \"\\\\lt\" || delim === \"⟨\") {\n        delim = \"\\\\langle\";\n    } else if (delim === \">\" || delim === \"\\\\gt\" || delim === \"⟩\") {\n        delim = \"\\\\rangle\";\n    } // Decide what sequence to use\n    var sequence;\n    if (utils.contains(stackNeverDelimiters, delim)) {\n        sequence = stackNeverDelimiterSequence;\n    } else if (utils.contains(stackLargeDelimiters, delim)) {\n        sequence = stackLargeDelimiterSequence;\n    } else {\n        sequence = stackAlwaysDelimiterSequence;\n    } // Look through the sequence\n    var delimType = traverseSequence(delim, height, sequence, options); // Get the delimiter from font glyphs.\n    // Depending on the sequence element we decided on, call the\n    // appropriate function.\n    if (delimType.type === \"small\") {\n        return makeSmallDelim(delim, delimType.style, center, options, mode, classes);\n    } else if (delimType.type === \"large\") {\n        return makeLargeDelim(delim, delimType.size, center, options, mode, classes);\n    } else /* if (delimType.type === \"stack\") */ {\n        return makeStackedDelim(delim, height, center, options, mode, classes);\n    }\n};\n/**\n * Make a delimiter for use with `\\left` and `\\right`, given a height and depth\n * of an expression that the delimiters surround.\n */ var makeLeftRightDelim = function makeLeftRightDelim(delim, height, depth, options, mode, classes) {\n    // We always center \\left/\\right delimiters, so the axis is always shifted\n    var axisHeight = options.fontMetrics().axisHeight * options.sizeMultiplier; // Taken from TeX source, tex.web, function make_left_right\n    var delimiterFactor = 901;\n    var delimiterExtend = 5.0 / options.fontMetrics().ptPerEm;\n    var maxDistFromAxis = Math.max(height - axisHeight, depth + axisHeight);\n    var totalHeight = Math.max(// 65536 per pt, or 655360 per em. So, the division here truncates in\n    // TeX but doesn't here, producing different results. If we wanted to\n    // exactly match TeX's calculation, we could do\n    //   Math.floor(655360 * maxDistFromAxis / 500) *\n    //    delimiterFactor / 655360\n    // (To see the difference, compare\n    //    x^{x^{\\left(\\rule{0.1em}{0.68em}\\right)}}\n    // in TeX and KaTeX)\n    maxDistFromAxis / 500 * delimiterFactor, 2 * maxDistFromAxis - delimiterExtend); // Finally, we defer to `makeCustomSizedDelim` with our calculated total\n    // height\n    return makeCustomSizedDelim(delim, totalHeight, true, options, mode, classes);\n};\nvar delimiter = {\n    sqrtImage: makeSqrtImage,\n    sizedDelim: makeSizedDelim,\n    sizeToMaxHeight: sizeToMaxHeight,\n    customSizedDelim: makeCustomSizedDelim,\n    leftRightDelim: makeLeftRightDelim\n};\n// Extra data needed for the delimiter handler down below\nvar delimiterSizes = {\n    \"\\\\bigl\": {\n        mclass: \"mopen\",\n        size: 1\n    },\n    \"\\\\Bigl\": {\n        mclass: \"mopen\",\n        size: 2\n    },\n    \"\\\\biggl\": {\n        mclass: \"mopen\",\n        size: 3\n    },\n    \"\\\\Biggl\": {\n        mclass: \"mopen\",\n        size: 4\n    },\n    \"\\\\bigr\": {\n        mclass: \"mclose\",\n        size: 1\n    },\n    \"\\\\Bigr\": {\n        mclass: \"mclose\",\n        size: 2\n    },\n    \"\\\\biggr\": {\n        mclass: \"mclose\",\n        size: 3\n    },\n    \"\\\\Biggr\": {\n        mclass: \"mclose\",\n        size: 4\n    },\n    \"\\\\bigm\": {\n        mclass: \"mrel\",\n        size: 1\n    },\n    \"\\\\Bigm\": {\n        mclass: \"mrel\",\n        size: 2\n    },\n    \"\\\\biggm\": {\n        mclass: \"mrel\",\n        size: 3\n    },\n    \"\\\\Biggm\": {\n        mclass: \"mrel\",\n        size: 4\n    },\n    \"\\\\big\": {\n        mclass: \"mord\",\n        size: 1\n    },\n    \"\\\\Big\": {\n        mclass: \"mord\",\n        size: 2\n    },\n    \"\\\\bigg\": {\n        mclass: \"mord\",\n        size: 3\n    },\n    \"\\\\Bigg\": {\n        mclass: \"mord\",\n        size: 4\n    }\n};\nvar delimiters = [\n    \"(\",\n    \"\\\\lparen\",\n    \")\",\n    \"\\\\rparen\",\n    \"[\",\n    \"\\\\lbrack\",\n    \"]\",\n    \"\\\\rbrack\",\n    \"\\\\{\",\n    \"\\\\lbrace\",\n    \"\\\\}\",\n    \"\\\\rbrace\",\n    \"\\\\lfloor\",\n    \"\\\\rfloor\",\n    \"⌊\",\n    \"⌋\",\n    \"\\\\lceil\",\n    \"\\\\rceil\",\n    \"⌈\",\n    \"⌉\",\n    \"<\",\n    \">\",\n    \"\\\\langle\",\n    \"⟨\",\n    \"\\\\rangle\",\n    \"⟩\",\n    \"\\\\lt\",\n    \"\\\\gt\",\n    \"\\\\lvert\",\n    \"\\\\rvert\",\n    \"\\\\lVert\",\n    \"\\\\rVert\",\n    \"\\\\lgroup\",\n    \"\\\\rgroup\",\n    \"⟮\",\n    \"⟯\",\n    \"\\\\lmoustache\",\n    \"\\\\rmoustache\",\n    \"⎰\",\n    \"⎱\",\n    \"/\",\n    \"\\\\backslash\",\n    \"|\",\n    \"\\\\vert\",\n    \"\\\\|\",\n    \"\\\\Vert\",\n    \"\\\\uparrow\",\n    \"\\\\Uparrow\",\n    \"\\\\downarrow\",\n    \"\\\\Downarrow\",\n    \"\\\\updownarrow\",\n    \"\\\\Updownarrow\",\n    \".\"\n];\n// Delimiter functions\nfunction checkDelimiter(delim, context) {\n    var symDelim = checkSymbolNodeType(delim);\n    if (symDelim && utils.contains(delimiters, symDelim.text)) {\n        return symDelim;\n    } else if (symDelim) {\n        throw new ParseError(\"Invalid delimiter '\" + symDelim.text + \"' after '\" + context.funcName + \"'\", delim);\n    } else {\n        throw new ParseError(\"Invalid delimiter type '\" + delim.type + \"'\", delim);\n    }\n}\ndefineFunction({\n    type: \"delimsizing\",\n    names: [\n        \"\\\\bigl\",\n        \"\\\\Bigl\",\n        \"\\\\biggl\",\n        \"\\\\Biggl\",\n        \"\\\\bigr\",\n        \"\\\\Bigr\",\n        \"\\\\biggr\",\n        \"\\\\Biggr\",\n        \"\\\\bigm\",\n        \"\\\\Bigm\",\n        \"\\\\biggm\",\n        \"\\\\Biggm\",\n        \"\\\\big\",\n        \"\\\\Big\",\n        \"\\\\bigg\",\n        \"\\\\Bigg\"\n    ],\n    props: {\n        numArgs: 1,\n        argTypes: [\n            \"primitive\"\n        ]\n    },\n    handler: (context, args)=>{\n        var delim = checkDelimiter(args[0], context);\n        return {\n            type: \"delimsizing\",\n            mode: context.parser.mode,\n            size: delimiterSizes[context.funcName].size,\n            mclass: delimiterSizes[context.funcName].mclass,\n            delim: delim.text\n        };\n    },\n    htmlBuilder: (group, options)=>{\n        if (group.delim === \".\") {\n            // Empty delimiters still count as elements, even though they don't\n            // show anything.\n            return buildCommon.makeSpan([\n                group.mclass\n            ]);\n        } // Use delimiter.sizedDelim to generate the delimiter.\n        return delimiter.sizedDelim(group.delim, group.size, options, group.mode, [\n            group.mclass\n        ]);\n    },\n    mathmlBuilder: (group)=>{\n        var children = [];\n        if (group.delim !== \".\") {\n            children.push(makeText(group.delim, group.mode));\n        }\n        var node = new mathMLTree.MathNode(\"mo\", children);\n        if (group.mclass === \"mopen\" || group.mclass === \"mclose\") {\n            // Only some of the delimsizing functions act as fences, and they\n            // return \"mopen\" or \"mclose\" mclass.\n            node.setAttribute(\"fence\", \"true\");\n        } else {\n            // Explicitly disable fencing if it's not a fence, to override the\n            // defaults.\n            node.setAttribute(\"fence\", \"false\");\n        }\n        node.setAttribute(\"stretchy\", \"true\");\n        var size = makeEm(delimiter.sizeToMaxHeight[group.size]);\n        node.setAttribute(\"minsize\", size);\n        node.setAttribute(\"maxsize\", size);\n        return node;\n    }\n});\nfunction assertParsed(group) {\n    if (!group.body) {\n        throw new Error(\"Bug: The leftright ParseNode wasn't fully parsed.\");\n    }\n}\ndefineFunction({\n    type: \"leftright-right\",\n    names: [\n        \"\\\\right\"\n    ],\n    props: {\n        numArgs: 1,\n        primitive: true\n    },\n    handler: (context, args)=>{\n        // \\left case below triggers parsing of \\right in\n        //   `const right = parser.parseFunction();`\n        // uses this return value.\n        var color = context.parser.gullet.macros.get(\"\\\\current@color\");\n        if (color && typeof color !== \"string\") {\n            throw new ParseError(\"\\\\current@color set to non-string in \\\\right\");\n        }\n        return {\n            type: \"leftright-right\",\n            mode: context.parser.mode,\n            delim: checkDelimiter(args[0], context).text,\n            color\n        };\n    }\n});\ndefineFunction({\n    type: \"leftright\",\n    names: [\n        \"\\\\left\"\n    ],\n    props: {\n        numArgs: 1,\n        primitive: true\n    },\n    handler: (context, args)=>{\n        var delim = checkDelimiter(args[0], context);\n        var parser = context.parser; // Parse out the implicit body\n        ++parser.leftrightDepth; // parseExpression stops before '\\\\right'\n        var body = parser.parseExpression(false);\n        --parser.leftrightDepth; // Check the next token\n        parser.expect(\"\\\\right\", false);\n        var right = assertNodeType(parser.parseFunction(), \"leftright-right\");\n        return {\n            type: \"leftright\",\n            mode: parser.mode,\n            body,\n            left: delim.text,\n            right: right.delim,\n            rightColor: right.color\n        };\n    },\n    htmlBuilder: (group, options)=>{\n        assertParsed(group); // Build the inner expression\n        var inner = buildExpression$1(group.body, options, true, [\n            \"mopen\",\n            \"mclose\"\n        ]);\n        var innerHeight = 0;\n        var innerDepth = 0;\n        var hadMiddle = false; // Calculate its height and depth\n        for(var i = 0; i < inner.length; i++){\n            // Property `isMiddle` not defined on `span`. See comment in\n            // \"middle\"'s htmlBuilder.\n            // $FlowFixMe\n            if (inner[i].isMiddle) {\n                hadMiddle = true;\n            } else {\n                innerHeight = Math.max(inner[i].height, innerHeight);\n                innerDepth = Math.max(inner[i].depth, innerDepth);\n            }\n        } // The size of delimiters is the same, regardless of what style we are\n        // in. Thus, to correctly calculate the size of delimiter we need around\n        // a group, we scale down the inner size based on the size.\n        innerHeight *= options.sizeMultiplier;\n        innerDepth *= options.sizeMultiplier;\n        var leftDelim;\n        if (group.left === \".\") {\n            // Empty delimiters in \\left and \\right make null delimiter spaces.\n            leftDelim = makeNullDelimiter(options, [\n                \"mopen\"\n            ]);\n        } else {\n            // Otherwise, use leftRightDelim to generate the correct sized\n            // delimiter.\n            leftDelim = delimiter.leftRightDelim(group.left, innerHeight, innerDepth, options, group.mode, [\n                \"mopen\"\n            ]);\n        } // Add it to the beginning of the expression\n        inner.unshift(leftDelim); // Handle middle delimiters\n        if (hadMiddle) {\n            for(var _i = 1; _i < inner.length; _i++){\n                var middleDelim = inner[_i]; // Property `isMiddle` not defined on `span`. See comment in\n                // \"middle\"'s htmlBuilder.\n                // $FlowFixMe\n                var isMiddle = middleDelim.isMiddle;\n                if (isMiddle) {\n                    // Apply the options that were active when \\middle was called\n                    inner[_i] = delimiter.leftRightDelim(isMiddle.delim, innerHeight, innerDepth, isMiddle.options, group.mode, []);\n                }\n            }\n        }\n        var rightDelim; // Same for the right delimiter, but using color specified by \\color\n        if (group.right === \".\") {\n            rightDelim = makeNullDelimiter(options, [\n                \"mclose\"\n            ]);\n        } else {\n            var colorOptions = group.rightColor ? options.withColor(group.rightColor) : options;\n            rightDelim = delimiter.leftRightDelim(group.right, innerHeight, innerDepth, colorOptions, group.mode, [\n                \"mclose\"\n            ]);\n        } // Add it to the end of the expression.\n        inner.push(rightDelim);\n        return buildCommon.makeSpan([\n            \"minner\"\n        ], inner, options);\n    },\n    mathmlBuilder: (group, options)=>{\n        assertParsed(group);\n        var inner = buildExpression(group.body, options);\n        if (group.left !== \".\") {\n            var leftNode = new mathMLTree.MathNode(\"mo\", [\n                makeText(group.left, group.mode)\n            ]);\n            leftNode.setAttribute(\"fence\", \"true\");\n            inner.unshift(leftNode);\n        }\n        if (group.right !== \".\") {\n            var rightNode = new mathMLTree.MathNode(\"mo\", [\n                makeText(group.right, group.mode)\n            ]);\n            rightNode.setAttribute(\"fence\", \"true\");\n            if (group.rightColor) {\n                rightNode.setAttribute(\"mathcolor\", group.rightColor);\n            }\n            inner.push(rightNode);\n        }\n        return makeRow(inner);\n    }\n});\ndefineFunction({\n    type: \"middle\",\n    names: [\n        \"\\\\middle\"\n    ],\n    props: {\n        numArgs: 1,\n        primitive: true\n    },\n    handler: (context, args)=>{\n        var delim = checkDelimiter(args[0], context);\n        if (!context.parser.leftrightDepth) {\n            throw new ParseError(\"\\\\middle without preceding \\\\left\", delim);\n        }\n        return {\n            type: \"middle\",\n            mode: context.parser.mode,\n            delim: delim.text\n        };\n    },\n    htmlBuilder: (group, options)=>{\n        var middleDelim;\n        if (group.delim === \".\") {\n            middleDelim = makeNullDelimiter(options, []);\n        } else {\n            middleDelim = delimiter.sizedDelim(group.delim, 1, options, group.mode, []);\n            var isMiddle = {\n                delim: group.delim,\n                options\n            }; // Property `isMiddle` not defined on `span`. It is only used in\n            // this file above.\n            // TODO: Fix this violation of the `span` type and possibly rename\n            // things since `isMiddle` sounds like a boolean, but is a struct.\n            // $FlowFixMe\n            middleDelim.isMiddle = isMiddle;\n        }\n        return middleDelim;\n    },\n    mathmlBuilder: (group, options)=>{\n        // A Firefox \\middle will stretch a character vertically only if it\n        // is in the fence part of the operator dictionary at:\n        // https://www.w3.org/TR/MathML3/appendixc.html.\n        // So we need to avoid U+2223 and use plain \"|\" instead.\n        var textNode = group.delim === \"\\\\vert\" || group.delim === \"|\" ? makeText(\"|\", \"text\") : makeText(group.delim, group.mode);\n        var middleNode = new mathMLTree.MathNode(\"mo\", [\n            textNode\n        ]);\n        middleNode.setAttribute(\"fence\", \"true\"); // MathML gives 5/18em spacing to each <mo> element.\n        // \\middle should get delimiter spacing instead.\n        middleNode.setAttribute(\"lspace\", \"0.05em\");\n        middleNode.setAttribute(\"rspace\", \"0.05em\");\n        return middleNode;\n    }\n});\nvar htmlBuilder$7 = (group, options)=>{\n    // \\cancel, \\bcancel, \\xcancel, \\sout, \\fbox, \\colorbox, \\fcolorbox, \\phase\n    // Some groups can return document fragments.  Handle those by wrapping\n    // them in a span.\n    var inner = buildCommon.wrapFragment(buildGroup$1(group.body, options), options);\n    var label = group.label.slice(1);\n    var scale = options.sizeMultiplier;\n    var img;\n    var imgShift = 0; // In the LaTeX cancel package, line geometry is slightly different\n    // depending on whether the subject is wider than it is tall, or vice versa.\n    // We don't know the width of a group, so as a proxy, we test if\n    // the subject is a single character. This captures most of the\n    // subjects that should get the \"tall\" treatment.\n    var isSingleChar = utils.isCharacterBox(group.body);\n    if (label === \"sout\") {\n        img = buildCommon.makeSpan([\n            \"stretchy\",\n            \"sout\"\n        ]);\n        img.height = options.fontMetrics().defaultRuleThickness / scale;\n        imgShift = -0.5 * options.fontMetrics().xHeight;\n    } else if (label === \"phase\") {\n        // Set a couple of dimensions from the steinmetz package.\n        var lineWeight = calculateSize({\n            number: 0.6,\n            unit: \"pt\"\n        }, options);\n        var clearance = calculateSize({\n            number: 0.35,\n            unit: \"ex\"\n        }, options); // Prevent size changes like \\Huge from affecting line thickness\n        var newOptions = options.havingBaseSizing();\n        scale = scale / newOptions.sizeMultiplier;\n        var angleHeight = inner.height + inner.depth + lineWeight + clearance; // Reserve a left pad for the angle.\n        inner.style.paddingLeft = makeEm(angleHeight / 2 + lineWeight); // Create an SVG\n        var viewBoxHeight = Math.floor(1000 * angleHeight * scale);\n        var path = phasePath(viewBoxHeight);\n        var svgNode = new SvgNode([\n            new PathNode(\"phase\", path)\n        ], {\n            \"width\": \"400em\",\n            \"height\": makeEm(viewBoxHeight / 1000),\n            \"viewBox\": \"0 0 400000 \" + viewBoxHeight,\n            \"preserveAspectRatio\": \"xMinYMin slice\"\n        }); // Wrap it in a span with overflow: hidden.\n        img = buildCommon.makeSvgSpan([\n            \"hide-tail\"\n        ], [\n            svgNode\n        ], options);\n        img.style.height = makeEm(angleHeight);\n        imgShift = inner.depth + lineWeight + clearance;\n    } else {\n        // Add horizontal padding\n        if (/cancel/.test(label)) {\n            if (!isSingleChar) {\n                inner.classes.push(\"cancel-pad\");\n            }\n        } else if (label === \"angl\") {\n            inner.classes.push(\"anglpad\");\n        } else {\n            inner.classes.push(\"boxpad\");\n        } // Add vertical padding\n        var topPad = 0;\n        var bottomPad = 0;\n        var ruleThickness = 0; // ref: cancel package: \\advance\\totalheight2\\p@ % \"+2\"\n        if (/box/.test(label)) {\n            ruleThickness = Math.max(options.fontMetrics().fboxrule, options.minRuleThickness // User override.\n            );\n            topPad = options.fontMetrics().fboxsep + (label === \"colorbox\" ? 0 : ruleThickness);\n            bottomPad = topPad;\n        } else if (label === \"angl\") {\n            ruleThickness = Math.max(options.fontMetrics().defaultRuleThickness, options.minRuleThickness);\n            topPad = 4 * ruleThickness; // gap = 3 × line, plus the line itself.\n            bottomPad = Math.max(0, 0.25 - inner.depth);\n        } else {\n            topPad = isSingleChar ? 0.2 : 0;\n            bottomPad = topPad;\n        }\n        img = stretchy.encloseSpan(inner, label, topPad, bottomPad, options);\n        if (/fbox|boxed|fcolorbox/.test(label)) {\n            img.style.borderStyle = \"solid\";\n            img.style.borderWidth = makeEm(ruleThickness);\n        } else if (label === \"angl\" && ruleThickness !== 0.049) {\n            img.style.borderTopWidth = makeEm(ruleThickness);\n            img.style.borderRightWidth = makeEm(ruleThickness);\n        }\n        imgShift = inner.depth + bottomPad;\n        if (group.backgroundColor) {\n            img.style.backgroundColor = group.backgroundColor;\n            if (group.borderColor) {\n                img.style.borderColor = group.borderColor;\n            }\n        }\n    }\n    var vlist;\n    if (group.backgroundColor) {\n        vlist = buildCommon.makeVList({\n            positionType: \"individualShift\",\n            children: [\n                {\n                    type: \"elem\",\n                    elem: img,\n                    shift: imgShift\n                },\n                {\n                    type: \"elem\",\n                    elem: inner,\n                    shift: 0\n                }\n            ]\n        }, options);\n    } else {\n        var classes = /cancel|phase/.test(label) ? [\n            \"svg-align\"\n        ] : [];\n        vlist = buildCommon.makeVList({\n            positionType: \"individualShift\",\n            children: [\n                {\n                    type: \"elem\",\n                    elem: inner,\n                    shift: 0\n                },\n                {\n                    type: \"elem\",\n                    elem: img,\n                    shift: imgShift,\n                    wrapperClasses: classes\n                }\n            ]\n        }, options);\n    }\n    if (/cancel/.test(label)) {\n        // The cancel package documentation says that cancel lines add their height\n        // to the expression, but tests show that isn't how it actually works.\n        vlist.height = inner.height;\n        vlist.depth = inner.depth;\n    }\n    if (/cancel/.test(label) && !isSingleChar) {\n        // cancel does not create horiz space for its line extension.\n        return buildCommon.makeSpan([\n            \"mord\",\n            \"cancel-lap\"\n        ], [\n            vlist\n        ], options);\n    } else {\n        return buildCommon.makeSpan([\n            \"mord\"\n        ], [\n            vlist\n        ], options);\n    }\n};\nvar mathmlBuilder$6 = (group, options)=>{\n    var fboxsep = 0;\n    var node = new mathMLTree.MathNode(group.label.indexOf(\"colorbox\") > -1 ? \"mpadded\" : \"menclose\", [\n        buildGroup(group.body, options)\n    ]);\n    switch(group.label){\n        case \"\\\\cancel\":\n            node.setAttribute(\"notation\", \"updiagonalstrike\");\n            break;\n        case \"\\\\bcancel\":\n            node.setAttribute(\"notation\", \"downdiagonalstrike\");\n            break;\n        case \"\\\\phase\":\n            node.setAttribute(\"notation\", \"phasorangle\");\n            break;\n        case \"\\\\sout\":\n            node.setAttribute(\"notation\", \"horizontalstrike\");\n            break;\n        case \"\\\\fbox\":\n            node.setAttribute(\"notation\", \"box\");\n            break;\n        case \"\\\\angl\":\n            node.setAttribute(\"notation\", \"actuarial\");\n            break;\n        case \"\\\\fcolorbox\":\n        case \"\\\\colorbox\":\n            // <menclose> doesn't have a good notation option. So use <mpadded>\n            // instead. Set some attributes that come included with <menclose>.\n            fboxsep = options.fontMetrics().fboxsep * options.fontMetrics().ptPerEm;\n            node.setAttribute(\"width\", \"+\" + 2 * fboxsep + \"pt\");\n            node.setAttribute(\"height\", \"+\" + 2 * fboxsep + \"pt\");\n            node.setAttribute(\"lspace\", fboxsep + \"pt\"); //\n            node.setAttribute(\"voffset\", fboxsep + \"pt\");\n            if (group.label === \"\\\\fcolorbox\") {\n                var thk = Math.max(options.fontMetrics().fboxrule, options.minRuleThickness // user override\n                );\n                node.setAttribute(\"style\", \"border: \" + thk + \"em solid \" + String(group.borderColor));\n            }\n            break;\n        case \"\\\\xcancel\":\n            node.setAttribute(\"notation\", \"updiagonalstrike downdiagonalstrike\");\n            break;\n    }\n    if (group.backgroundColor) {\n        node.setAttribute(\"mathbackground\", group.backgroundColor);\n    }\n    return node;\n};\ndefineFunction({\n    type: \"enclose\",\n    names: [\n        \"\\\\colorbox\"\n    ],\n    props: {\n        numArgs: 2,\n        allowedInText: true,\n        argTypes: [\n            \"color\",\n            \"text\"\n        ]\n    },\n    handler (_ref, args, optArgs) {\n        var { parser, funcName } = _ref;\n        var color = assertNodeType(args[0], \"color-token\").color;\n        var body = args[1];\n        return {\n            type: \"enclose\",\n            mode: parser.mode,\n            label: funcName,\n            backgroundColor: color,\n            body\n        };\n    },\n    htmlBuilder: htmlBuilder$7,\n    mathmlBuilder: mathmlBuilder$6\n});\ndefineFunction({\n    type: \"enclose\",\n    names: [\n        \"\\\\fcolorbox\"\n    ],\n    props: {\n        numArgs: 3,\n        allowedInText: true,\n        argTypes: [\n            \"color\",\n            \"color\",\n            \"text\"\n        ]\n    },\n    handler (_ref2, args, optArgs) {\n        var { parser, funcName } = _ref2;\n        var borderColor = assertNodeType(args[0], \"color-token\").color;\n        var backgroundColor = assertNodeType(args[1], \"color-token\").color;\n        var body = args[2];\n        return {\n            type: \"enclose\",\n            mode: parser.mode,\n            label: funcName,\n            backgroundColor,\n            borderColor,\n            body\n        };\n    },\n    htmlBuilder: htmlBuilder$7,\n    mathmlBuilder: mathmlBuilder$6\n});\ndefineFunction({\n    type: \"enclose\",\n    names: [\n        \"\\\\fbox\"\n    ],\n    props: {\n        numArgs: 1,\n        argTypes: [\n            \"hbox\"\n        ],\n        allowedInText: true\n    },\n    handler (_ref3, args) {\n        var { parser } = _ref3;\n        return {\n            type: \"enclose\",\n            mode: parser.mode,\n            label: \"\\\\fbox\",\n            body: args[0]\n        };\n    }\n});\ndefineFunction({\n    type: \"enclose\",\n    names: [\n        \"\\\\cancel\",\n        \"\\\\bcancel\",\n        \"\\\\xcancel\",\n        \"\\\\sout\",\n        \"\\\\phase\"\n    ],\n    props: {\n        numArgs: 1\n    },\n    handler (_ref4, args) {\n        var { parser, funcName } = _ref4;\n        var body = args[0];\n        return {\n            type: \"enclose\",\n            mode: parser.mode,\n            label: funcName,\n            body\n        };\n    },\n    htmlBuilder: htmlBuilder$7,\n    mathmlBuilder: mathmlBuilder$6\n});\ndefineFunction({\n    type: \"enclose\",\n    names: [\n        \"\\\\angl\"\n    ],\n    props: {\n        numArgs: 1,\n        argTypes: [\n            \"hbox\"\n        ],\n        allowedInText: false\n    },\n    handler (_ref5, args) {\n        var { parser } = _ref5;\n        return {\n            type: \"enclose\",\n            mode: parser.mode,\n            label: \"\\\\angl\",\n            body: args[0]\n        };\n    }\n});\n/**\n * All registered environments.\n * `environments.js` exports this same dictionary again and makes it public.\n * `Parser.js` requires this dictionary via `environments.js`.\n */ var _environments = {};\nfunction defineEnvironment(_ref) {\n    var { type, names, props, handler, htmlBuilder, mathmlBuilder } = _ref;\n    // Set default values of environments.\n    var data = {\n        type,\n        numArgs: props.numArgs || 0,\n        allowedInText: false,\n        numOptionalArgs: 0,\n        handler\n    };\n    for(var i = 0; i < names.length; ++i){\n        // TODO: The value type of _environments should be a type union of all\n        // possible `EnvSpec<>` possibilities instead of `EnvSpec<*>`, which is\n        // an existential type.\n        _environments[names[i]] = data;\n    }\n    if (htmlBuilder) {\n        _htmlGroupBuilders[type] = htmlBuilder;\n    }\n    if (mathmlBuilder) {\n        _mathmlGroupBuilders[type] = mathmlBuilder;\n    }\n}\n/**\n * All registered global/built-in macros.\n * `macros.js` exports this same dictionary again and makes it public.\n * `Parser.js` requires this dictionary via `macros.js`.\n */ var _macros = {}; // This function might one day accept an additional argument and do more things.\nfunction defineMacro(name, body) {\n    _macros[name] = body;\n}\n// Helper functions\nfunction getHLines(parser) {\n    // Return an array. The array length = number of hlines.\n    // Each element in the array tells if the line is dashed.\n    var hlineInfo = [];\n    parser.consumeSpaces();\n    var nxt = parser.fetch().text;\n    if (nxt === \"\\\\relax\") {\n        // \\relax is an artifact of the \\cr macro below\n        parser.consume();\n        parser.consumeSpaces();\n        nxt = parser.fetch().text;\n    }\n    while(nxt === \"\\\\hline\" || nxt === \"\\\\hdashline\"){\n        parser.consume();\n        hlineInfo.push(nxt === \"\\\\hdashline\");\n        parser.consumeSpaces();\n        nxt = parser.fetch().text;\n    }\n    return hlineInfo;\n}\nvar validateAmsEnvironmentContext = (context)=>{\n    var settings = context.parser.settings;\n    if (!settings.displayMode) {\n        throw new ParseError(\"{\" + context.envName + \"} can be used only in\" + \" display mode.\");\n    }\n}; // autoTag (an argument to parseArray) can be one of three values:\n// * undefined: Regular (not-top-level) array; no tags on each row\n// * true: Automatic equation numbering, overridable by \\tag\n// * false: Tags allowed on each row, but no automatic numbering\n// This function *doesn't* work with the \"split\" environment name.\nfunction getAutoTag(name) {\n    if (name.indexOf(\"ed\") === -1) {\n        return name.indexOf(\"*\") === -1;\n    } // return undefined;\n}\n/**\n * Parse the body of the environment, with rows delimited by \\\\ and\n * columns delimited by &, and create a nested list in row-major order\n * with one group per cell.  If given an optional argument style\n * (\"text\", \"display\", etc.), then each cell is cast into that style.\n */ function parseArray(parser, _ref, style) {\n    var { hskipBeforeAndAfter, addJot, cols, arraystretch, colSeparationType, autoTag, singleRow, emptySingleRow, maxNumCols, leqno } = _ref;\n    parser.gullet.beginGroup();\n    if (!singleRow) {\n        // \\cr is equivalent to \\\\ without the optional size argument (see below)\n        // TODO: provide helpful error when \\cr is used outside array environment\n        parser.gullet.macros.set(\"\\\\cr\", \"\\\\\\\\\\\\relax\");\n    } // Get current arraystretch if it's not set by the environment\n    if (!arraystretch) {\n        var stretch = parser.gullet.expandMacroAsText(\"\\\\arraystretch\");\n        if (stretch == null) {\n            // Default \\arraystretch from lttab.dtx\n            arraystretch = 1;\n        } else {\n            arraystretch = parseFloat(stretch);\n            if (!arraystretch || arraystretch < 0) {\n                throw new ParseError(\"Invalid \\\\arraystretch: \" + stretch);\n            }\n        }\n    } // Start group for first cell\n    parser.gullet.beginGroup();\n    var row = [];\n    var body = [\n        row\n    ];\n    var rowGaps = [];\n    var hLinesBeforeRow = [];\n    var tags = autoTag != null ? [] : undefined; // amsmath uses \\global\\@eqnswtrue and \\global\\@eqnswfalse to represent\n    // whether this row should have an equation number.  Simulate this with\n    // a \\@eqnsw macro set to 1 or 0.\n    function beginRow() {\n        if (autoTag) {\n            parser.gullet.macros.set(\"\\\\@eqnsw\", \"1\", true);\n        }\n    }\n    function endRow() {\n        if (tags) {\n            if (parser.gullet.macros.get(\"\\\\df@tag\")) {\n                tags.push(parser.subparse([\n                    new Token(\"\\\\df@tag\")\n                ]));\n                parser.gullet.macros.set(\"\\\\df@tag\", undefined, true);\n            } else {\n                tags.push(Boolean(autoTag) && parser.gullet.macros.get(\"\\\\@eqnsw\") === \"1\");\n            }\n        }\n    }\n    beginRow(); // Test for \\hline at the top of the array.\n    hLinesBeforeRow.push(getHLines(parser));\n    while(true){\n        // eslint-disable-line no-constant-condition\n        // Parse each cell in its own group (namespace)\n        var cell = parser.parseExpression(false, singleRow ? \"\\\\end\" : \"\\\\\\\\\");\n        parser.gullet.endGroup();\n        parser.gullet.beginGroup();\n        cell = {\n            type: \"ordgroup\",\n            mode: parser.mode,\n            body: cell\n        };\n        if (style) {\n            cell = {\n                type: \"styling\",\n                mode: parser.mode,\n                style,\n                body: [\n                    cell\n                ]\n            };\n        }\n        row.push(cell);\n        var next = parser.fetch().text;\n        if (next === \"&\") {\n            if (maxNumCols && row.length === maxNumCols) {\n                if (singleRow || colSeparationType) {\n                    // {equation} or {split}\n                    throw new ParseError(\"Too many tab characters: &\", parser.nextToken);\n                } else {\n                    // {array} environment\n                    parser.settings.reportNonstrict(\"textEnv\", \"Too few columns \" + \"specified in the {array} column argument.\");\n                }\n            }\n            parser.consume();\n        } else if (next === \"\\\\end\") {\n            endRow(); // Arrays terminate newlines with `\\crcr` which consumes a `\\cr` if\n            // the last line is empty.  However, AMS environments keep the\n            // empty row if it's the only one.\n            // NOTE: Currently, `cell` is the last item added into `row`.\n            if (row.length === 1 && cell.type === \"styling\" && cell.body[0].body.length === 0 && (body.length > 1 || !emptySingleRow)) {\n                body.pop();\n            }\n            if (hLinesBeforeRow.length < body.length + 1) {\n                hLinesBeforeRow.push([]);\n            }\n            break;\n        } else if (next === \"\\\\\\\\\") {\n            parser.consume();\n            var size = void 0; // \\def\\Let@{\\let\\\\\\math@cr}\n            // \\def\\math@cr{...\\math@cr@}\n            // \\def\\math@cr@{\\new@ifnextchar[\\math@cr@@{\\math@cr@@[\\z@]}}\n            // \\def\\math@cr@@[#1]{...\\math@cr@@@...}\n            // \\def\\math@cr@@@{\\cr}\n            if (parser.gullet.future().text !== \" \") {\n                size = parser.parseSizeGroup(true);\n            }\n            rowGaps.push(size ? size.value : null);\n            endRow(); // check for \\hline(s) following the row separator\n            hLinesBeforeRow.push(getHLines(parser));\n            row = [];\n            body.push(row);\n            beginRow();\n        } else {\n            throw new ParseError(\"Expected & or \\\\\\\\ or \\\\cr or \\\\end\", parser.nextToken);\n        }\n    } // End cell group\n    parser.gullet.endGroup(); // End array group defining \\cr\n    parser.gullet.endGroup();\n    return {\n        type: \"array\",\n        mode: parser.mode,\n        addJot,\n        arraystretch,\n        body,\n        cols,\n        rowGaps,\n        hskipBeforeAndAfter,\n        hLinesBeforeRow,\n        colSeparationType,\n        tags,\n        leqno\n    };\n} // Decides on a style for cells in an array according to whether the given\n// environment name starts with the letter 'd'.\nfunction dCellStyle(envName) {\n    if (envName.slice(0, 1) === \"d\") {\n        return \"display\";\n    } else {\n        return \"text\";\n    }\n}\nvar htmlBuilder$6 = function htmlBuilder(group, options) {\n    var r;\n    var c;\n    var nr = group.body.length;\n    var hLinesBeforeRow = group.hLinesBeforeRow;\n    var nc = 0;\n    var body = new Array(nr);\n    var hlines = [];\n    var ruleThickness = Math.max(options.fontMetrics().arrayRuleWidth, options.minRuleThickness // User override.\n    ); // Horizontal spacing\n    var pt = 1 / options.fontMetrics().ptPerEm;\n    var arraycolsep = 5 * pt; // default value, i.e. \\arraycolsep in article.cls\n    if (group.colSeparationType && group.colSeparationType === \"small\") {\n        // We're in a {smallmatrix}. Default column space is \\thickspace,\n        // i.e. 5/18em = 0.2778em, per amsmath.dtx for {smallmatrix}.\n        // But that needs adjustment because LaTeX applies \\scriptstyle to the\n        // entire array, including the colspace, but this function applies\n        // \\scriptstyle only inside each element.\n        var localMultiplier = options.havingStyle(Style$1.SCRIPT).sizeMultiplier;\n        arraycolsep = 0.2778 * (localMultiplier / options.sizeMultiplier);\n    } // Vertical spacing\n    var baselineskip = group.colSeparationType === \"CD\" ? calculateSize({\n        number: 3,\n        unit: \"ex\"\n    }, options) : 12 * pt; // see size10.clo\n    // Default \\jot from ltmath.dtx\n    // TODO(edemaine): allow overriding \\jot via \\setlength (#687)\n    var jot = 3 * pt;\n    var arrayskip = group.arraystretch * baselineskip;\n    var arstrutHeight = 0.7 * arrayskip; // \\strutbox in ltfsstrc.dtx and\n    var arstrutDepth = 0.3 * arrayskip; // \\@arstrutbox in lttab.dtx\n    var totalHeight = 0; // Set a position for \\hline(s) at the top of the array, if any.\n    function setHLinePos(hlinesInGap) {\n        for(var i = 0; i < hlinesInGap.length; ++i){\n            if (i > 0) {\n                totalHeight += 0.25;\n            }\n            hlines.push({\n                pos: totalHeight,\n                isDashed: hlinesInGap[i]\n            });\n        }\n    }\n    setHLinePos(hLinesBeforeRow[0]);\n    for(r = 0; r < group.body.length; ++r){\n        var inrow = group.body[r];\n        var height = arstrutHeight; // \\@array adds an \\@arstrut\n        var depth = arstrutDepth; // to each tow (via the template)\n        if (nc < inrow.length) {\n            nc = inrow.length;\n        }\n        var outrow = new Array(inrow.length);\n        for(c = 0; c < inrow.length; ++c){\n            var elt = buildGroup$1(inrow[c], options);\n            if (depth < elt.depth) {\n                depth = elt.depth;\n            }\n            if (height < elt.height) {\n                height = elt.height;\n            }\n            outrow[c] = elt;\n        }\n        var rowGap = group.rowGaps[r];\n        var gap = 0;\n        if (rowGap) {\n            gap = calculateSize(rowGap, options);\n            if (gap > 0) {\n                // \\@argarraycr\n                gap += arstrutDepth;\n                if (depth < gap) {\n                    depth = gap; // \\@xargarraycr\n                }\n                gap = 0;\n            }\n        } // In AMS multiline environments such as aligned and gathered, rows\n        // correspond to lines that have additional \\jot added to the\n        // \\baselineskip via \\openup.\n        if (group.addJot) {\n            depth += jot;\n        }\n        outrow.height = height;\n        outrow.depth = depth;\n        totalHeight += height;\n        outrow.pos = totalHeight;\n        totalHeight += depth + gap; // \\@yargarraycr\n        body[r] = outrow; // Set a position for \\hline(s), if any.\n        setHLinePos(hLinesBeforeRow[r + 1]);\n    }\n    var offset = totalHeight / 2 + options.fontMetrics().axisHeight;\n    var colDescriptions = group.cols || [];\n    var cols = [];\n    var colSep;\n    var colDescrNum;\n    var tagSpans = [];\n    if (group.tags && group.tags.some((tag)=>tag)) {\n        // An environment with manual tags and/or automatic equation numbers.\n        // Create node(s), the latter of which trigger CSS counter increment.\n        for(r = 0; r < nr; ++r){\n            var rw = body[r];\n            var shift = rw.pos - offset;\n            var tag = group.tags[r];\n            var tagSpan = void 0;\n            if (tag === true) {\n                // automatic numbering\n                tagSpan = buildCommon.makeSpan([\n                    \"eqn-num\"\n                ], [], options);\n            } else if (tag === false) {\n                // \\nonumber/\\notag or starred environment\n                tagSpan = buildCommon.makeSpan([], [], options);\n            } else {\n                // manual \\tag\n                tagSpan = buildCommon.makeSpan([], buildExpression$1(tag, options, true), options);\n            }\n            tagSpan.depth = rw.depth;\n            tagSpan.height = rw.height;\n            tagSpans.push({\n                type: \"elem\",\n                elem: tagSpan,\n                shift\n            });\n        }\n    }\n    for(c = 0, colDescrNum = 0; // descriptions, so trailing separators don't get lost.\n    c < nc || colDescrNum < colDescriptions.length; ++c, ++colDescrNum){\n        var colDescr = colDescriptions[colDescrNum] || {};\n        var firstSeparator = true;\n        while(colDescr.type === \"separator\"){\n            // If there is more than one separator in a row, add a space\n            // between them.\n            if (!firstSeparator) {\n                colSep = buildCommon.makeSpan([\n                    \"arraycolsep\"\n                ], []);\n                colSep.style.width = makeEm(options.fontMetrics().doubleRuleSep);\n                cols.push(colSep);\n            }\n            if (colDescr.separator === \"|\" || colDescr.separator === \":\") {\n                var lineType = colDescr.separator === \"|\" ? \"solid\" : \"dashed\";\n                var separator = buildCommon.makeSpan([\n                    \"vertical-separator\"\n                ], [], options);\n                separator.style.height = makeEm(totalHeight);\n                separator.style.borderRightWidth = makeEm(ruleThickness);\n                separator.style.borderRightStyle = lineType;\n                separator.style.margin = \"0 \" + makeEm(-ruleThickness / 2);\n                var _shift = totalHeight - offset;\n                if (_shift) {\n                    separator.style.verticalAlign = makeEm(-_shift);\n                }\n                cols.push(separator);\n            } else {\n                throw new ParseError(\"Invalid separator type: \" + colDescr.separator);\n            }\n            colDescrNum++;\n            colDescr = colDescriptions[colDescrNum] || {};\n            firstSeparator = false;\n        }\n        if (c >= nc) {\n            continue;\n        }\n        var sepwidth = void 0;\n        if (c > 0 || group.hskipBeforeAndAfter) {\n            sepwidth = utils.deflt(colDescr.pregap, arraycolsep);\n            if (sepwidth !== 0) {\n                colSep = buildCommon.makeSpan([\n                    \"arraycolsep\"\n                ], []);\n                colSep.style.width = makeEm(sepwidth);\n                cols.push(colSep);\n            }\n        }\n        var col = [];\n        for(r = 0; r < nr; ++r){\n            var row = body[r];\n            var elem = row[c];\n            if (!elem) {\n                continue;\n            }\n            var _shift2 = row.pos - offset;\n            elem.depth = row.depth;\n            elem.height = row.height;\n            col.push({\n                type: \"elem\",\n                elem: elem,\n                shift: _shift2\n            });\n        }\n        col = buildCommon.makeVList({\n            positionType: \"individualShift\",\n            children: col\n        }, options);\n        col = buildCommon.makeSpan([\n            \"col-align-\" + (colDescr.align || \"c\")\n        ], [\n            col\n        ]);\n        cols.push(col);\n        if (c < nc - 1 || group.hskipBeforeAndAfter) {\n            sepwidth = utils.deflt(colDescr.postgap, arraycolsep);\n            if (sepwidth !== 0) {\n                colSep = buildCommon.makeSpan([\n                    \"arraycolsep\"\n                ], []);\n                colSep.style.width = makeEm(sepwidth);\n                cols.push(colSep);\n            }\n        }\n    }\n    body = buildCommon.makeSpan([\n        \"mtable\"\n    ], cols); // Add \\hline(s), if any.\n    if (hlines.length > 0) {\n        var line = buildCommon.makeLineSpan(\"hline\", options, ruleThickness);\n        var dashes = buildCommon.makeLineSpan(\"hdashline\", options, ruleThickness);\n        var vListElems = [\n            {\n                type: \"elem\",\n                elem: body,\n                shift: 0\n            }\n        ];\n        while(hlines.length > 0){\n            var hline = hlines.pop();\n            var lineShift = hline.pos - offset;\n            if (hline.isDashed) {\n                vListElems.push({\n                    type: \"elem\",\n                    elem: dashes,\n                    shift: lineShift\n                });\n            } else {\n                vListElems.push({\n                    type: \"elem\",\n                    elem: line,\n                    shift: lineShift\n                });\n            }\n        }\n        body = buildCommon.makeVList({\n            positionType: \"individualShift\",\n            children: vListElems\n        }, options);\n    }\n    if (tagSpans.length === 0) {\n        return buildCommon.makeSpan([\n            \"mord\"\n        ], [\n            body\n        ], options);\n    } else {\n        var eqnNumCol = buildCommon.makeVList({\n            positionType: \"individualShift\",\n            children: tagSpans\n        }, options);\n        eqnNumCol = buildCommon.makeSpan([\n            \"tag\"\n        ], [\n            eqnNumCol\n        ], options);\n        return buildCommon.makeFragment([\n            body,\n            eqnNumCol\n        ]);\n    }\n};\nvar alignMap = {\n    c: \"center \",\n    l: \"left \",\n    r: \"right \"\n};\nvar mathmlBuilder$5 = function mathmlBuilder(group, options) {\n    var tbl = [];\n    var glue = new mathMLTree.MathNode(\"mtd\", [], [\n        \"mtr-glue\"\n    ]);\n    var tag = new mathMLTree.MathNode(\"mtd\", [], [\n        \"mml-eqn-num\"\n    ]);\n    for(var i = 0; i < group.body.length; i++){\n        var rw = group.body[i];\n        var row = [];\n        for(var j = 0; j < rw.length; j++){\n            row.push(new mathMLTree.MathNode(\"mtd\", [\n                buildGroup(rw[j], options)\n            ]));\n        }\n        if (group.tags && group.tags[i]) {\n            row.unshift(glue);\n            row.push(glue);\n            if (group.leqno) {\n                row.unshift(tag);\n            } else {\n                row.push(tag);\n            }\n        }\n        tbl.push(new mathMLTree.MathNode(\"mtr\", row));\n    }\n    var table = new mathMLTree.MathNode(\"mtable\", tbl); // Set column alignment, row spacing, column spacing, and\n    // array lines by setting attributes on the table element.\n    // Set the row spacing. In MathML, we specify a gap distance.\n    // We do not use rowGap[] because MathML automatically increases\n    // cell height with the height/depth of the element content.\n    // LaTeX \\arraystretch multiplies the row baseline-to-baseline distance.\n    // We simulate this by adding (arraystretch - 1)em to the gap. This\n    // does a reasonable job of adjusting arrays containing 1 em tall content.\n    // The 0.16 and 0.09 values are found empirically. They produce an array\n    // similar to LaTeX and in which content does not interfere with \\hlines.\n    var gap = group.arraystretch === 0.5 ? 0.1 // {smallmatrix}, {subarray}\n     : 0.16 + group.arraystretch - 1 + (group.addJot ? 0.09 : 0);\n    table.setAttribute(\"rowspacing\", makeEm(gap)); // MathML table lines go only between cells.\n    // To place a line on an edge we'll use <menclose>, if necessary.\n    var menclose = \"\";\n    var align = \"\";\n    if (group.cols && group.cols.length > 0) {\n        // Find column alignment, column spacing, and  vertical lines.\n        var cols = group.cols;\n        var columnLines = \"\";\n        var prevTypeWasAlign = false;\n        var iStart = 0;\n        var iEnd = cols.length;\n        if (cols[0].type === \"separator\") {\n            menclose += \"top \";\n            iStart = 1;\n        }\n        if (cols[cols.length - 1].type === \"separator\") {\n            menclose += \"bottom \";\n            iEnd -= 1;\n        }\n        for(var _i = iStart; _i < iEnd; _i++){\n            if (cols[_i].type === \"align\") {\n                align += alignMap[cols[_i].align];\n                if (prevTypeWasAlign) {\n                    columnLines += \"none \";\n                }\n                prevTypeWasAlign = true;\n            } else if (cols[_i].type === \"separator\") {\n                // MathML accepts only single lines between cells.\n                // So we read only the first of consecutive separators.\n                if (prevTypeWasAlign) {\n                    columnLines += cols[_i].separator === \"|\" ? \"solid \" : \"dashed \";\n                    prevTypeWasAlign = false;\n                }\n            }\n        }\n        table.setAttribute(\"columnalign\", align.trim());\n        if (/[sd]/.test(columnLines)) {\n            table.setAttribute(\"columnlines\", columnLines.trim());\n        }\n    } // Set column spacing.\n    if (group.colSeparationType === \"align\") {\n        var _cols = group.cols || [];\n        var spacing = \"\";\n        for(var _i2 = 1; _i2 < _cols.length; _i2++){\n            spacing += _i2 % 2 ? \"0em \" : \"1em \";\n        }\n        table.setAttribute(\"columnspacing\", spacing.trim());\n    } else if (group.colSeparationType === \"alignat\" || group.colSeparationType === \"gather\") {\n        table.setAttribute(\"columnspacing\", \"0em\");\n    } else if (group.colSeparationType === \"small\") {\n        table.setAttribute(\"columnspacing\", \"0.2778em\");\n    } else if (group.colSeparationType === \"CD\") {\n        table.setAttribute(\"columnspacing\", \"0.5em\");\n    } else {\n        table.setAttribute(\"columnspacing\", \"1em\");\n    } // Address \\hline and \\hdashline\n    var rowLines = \"\";\n    var hlines = group.hLinesBeforeRow;\n    menclose += hlines[0].length > 0 ? \"left \" : \"\";\n    menclose += hlines[hlines.length - 1].length > 0 ? \"right \" : \"\";\n    for(var _i3 = 1; _i3 < hlines.length - 1; _i3++){\n        rowLines += hlines[_i3].length === 0 ? \"none \" // MathML accepts only a single line between rows. Read one element.\n         : hlines[_i3][0] ? \"dashed \" : \"solid \";\n    }\n    if (/[sd]/.test(rowLines)) {\n        table.setAttribute(\"rowlines\", rowLines.trim());\n    }\n    if (menclose !== \"\") {\n        table = new mathMLTree.MathNode(\"menclose\", [\n            table\n        ]);\n        table.setAttribute(\"notation\", menclose.trim());\n    }\n    if (group.arraystretch && group.arraystretch < 1) {\n        // A small array. Wrap in scriptstyle so row gap is not too large.\n        table = new mathMLTree.MathNode(\"mstyle\", [\n            table\n        ]);\n        table.setAttribute(\"scriptlevel\", \"1\");\n    }\n    return table;\n}; // Convenience function for align, align*, aligned, alignat, alignat*, alignedat.\nvar alignedHandler = function alignedHandler(context, args) {\n    if (context.envName.indexOf(\"ed\") === -1) {\n        validateAmsEnvironmentContext(context);\n    }\n    var cols = [];\n    var separationType = context.envName.indexOf(\"at\") > -1 ? \"alignat\" : \"align\";\n    var isSplit = context.envName === \"split\";\n    var res = parseArray(context.parser, {\n        cols,\n        addJot: true,\n        autoTag: isSplit ? undefined : getAutoTag(context.envName),\n        emptySingleRow: true,\n        colSeparationType: separationType,\n        maxNumCols: isSplit ? 2 : undefined,\n        leqno: context.parser.settings.leqno\n    }, \"display\"); // Determining number of columns.\n    // 1. If the first argument is given, we use it as a number of columns,\n    //    and makes sure that each row doesn't exceed that number.\n    // 2. Otherwise, just count number of columns = maximum number\n    //    of cells in each row (\"aligned\" mode -- isAligned will be true).\n    //\n    // At the same time, prepend empty group {} at beginning of every second\n    // cell in each row (starting with second cell) so that operators become\n    // binary.  This behavior is implemented in amsmath's \\start@aligned.\n    var numMaths;\n    var numCols = 0;\n    var emptyGroup = {\n        type: \"ordgroup\",\n        mode: context.mode,\n        body: []\n    };\n    if (args[0] && args[0].type === \"ordgroup\") {\n        var arg0 = \"\";\n        for(var i = 0; i < args[0].body.length; i++){\n            var textord = assertNodeType(args[0].body[i], \"textord\");\n            arg0 += textord.text;\n        }\n        numMaths = Number(arg0);\n        numCols = numMaths * 2;\n    }\n    var isAligned = !numCols;\n    res.body.forEach(function(row) {\n        for(var _i4 = 1; _i4 < row.length; _i4 += 2){\n            // Modify ordgroup node within styling node\n            var styling = assertNodeType(row[_i4], \"styling\");\n            var ordgroup = assertNodeType(styling.body[0], \"ordgroup\");\n            ordgroup.body.unshift(emptyGroup);\n        }\n        if (!isAligned) {\n            // Case 1\n            var curMaths = row.length / 2;\n            if (numMaths < curMaths) {\n                throw new ParseError(\"Too many math in a row: \" + (\"expected \" + numMaths + \", but got \" + curMaths), row[0]);\n            }\n        } else if (numCols < row.length) {\n            // Case 2\n            numCols = row.length;\n        }\n    }); // Adjusting alignment.\n    // In aligned mode, we add one \\qquad between columns;\n    // otherwise we add nothing.\n    for(var _i5 = 0; _i5 < numCols; ++_i5){\n        var align = \"r\";\n        var pregap = 0;\n        if (_i5 % 2 === 1) {\n            align = \"l\";\n        } else if (_i5 > 0 && isAligned) {\n            // \"aligned\" mode.\n            pregap = 1; // add one \\quad\n        }\n        cols[_i5] = {\n            type: \"align\",\n            align: align,\n            pregap: pregap,\n            postgap: 0\n        };\n    }\n    res.colSeparationType = isAligned ? \"align\" : \"alignat\";\n    return res;\n}; // Arrays are part of LaTeX, defined in lttab.dtx so its documentation\n// is part of the source2e.pdf file of LaTeX2e source documentation.\n// {darray} is an {array} environment where cells are set in \\displaystyle,\n// as defined in nccmath.sty.\ndefineEnvironment({\n    type: \"array\",\n    names: [\n        \"array\",\n        \"darray\"\n    ],\n    props: {\n        numArgs: 1\n    },\n    handler (context, args) {\n        // Since no types are specified above, the two possibilities are\n        // - The argument is wrapped in {} or [], in which case Parser's\n        //   parseGroup() returns an \"ordgroup\" wrapping some symbol node.\n        // - The argument is a bare symbol node.\n        var symNode = checkSymbolNodeType(args[0]);\n        var colalign = symNode ? [\n            args[0]\n        ] : assertNodeType(args[0], \"ordgroup\").body;\n        var cols = colalign.map(function(nde) {\n            var node = assertSymbolNodeType(nde);\n            var ca = node.text;\n            if (\"lcr\".indexOf(ca) !== -1) {\n                return {\n                    type: \"align\",\n                    align: ca\n                };\n            } else if (ca === \"|\") {\n                return {\n                    type: \"separator\",\n                    separator: \"|\"\n                };\n            } else if (ca === \":\") {\n                return {\n                    type: \"separator\",\n                    separator: \":\"\n                };\n            }\n            throw new ParseError(\"Unknown column alignment: \" + ca, nde);\n        });\n        var res = {\n            cols,\n            hskipBeforeAndAfter: true,\n            // \\@preamble in lttab.dtx\n            maxNumCols: cols.length\n        };\n        return parseArray(context.parser, res, dCellStyle(context.envName));\n    },\n    htmlBuilder: htmlBuilder$6,\n    mathmlBuilder: mathmlBuilder$5\n}); // The matrix environments of amsmath builds on the array environment\n// of LaTeX, which is discussed above.\n// The mathtools package adds starred versions of the same environments.\n// These have an optional argument to choose left|center|right justification.\ndefineEnvironment({\n    type: \"array\",\n    names: [\n        \"matrix\",\n        \"pmatrix\",\n        \"bmatrix\",\n        \"Bmatrix\",\n        \"vmatrix\",\n        \"Vmatrix\",\n        \"matrix*\",\n        \"pmatrix*\",\n        \"bmatrix*\",\n        \"Bmatrix*\",\n        \"vmatrix*\",\n        \"Vmatrix*\"\n    ],\n    props: {\n        numArgs: 0\n    },\n    handler (context) {\n        var delimiters = {\n            \"matrix\": null,\n            \"pmatrix\": [\n                \"(\",\n                \")\"\n            ],\n            \"bmatrix\": [\n                \"[\",\n                \"]\"\n            ],\n            \"Bmatrix\": [\n                \"\\\\{\",\n                \"\\\\}\"\n            ],\n            \"vmatrix\": [\n                \"|\",\n                \"|\"\n            ],\n            \"Vmatrix\": [\n                \"\\\\Vert\",\n                \"\\\\Vert\"\n            ]\n        }[context.envName.replace(\"*\", \"\")]; // \\hskip -\\arraycolsep in amsmath\n        var colAlign = \"c\";\n        var payload = {\n            hskipBeforeAndAfter: false,\n            cols: [\n                {\n                    type: \"align\",\n                    align: colAlign\n                }\n            ]\n        };\n        if (context.envName.charAt(context.envName.length - 1) === \"*\") {\n            // It's one of the mathtools starred functions.\n            // Parse the optional alignment argument.\n            var parser = context.parser;\n            parser.consumeSpaces();\n            if (parser.fetch().text === \"[\") {\n                parser.consume();\n                parser.consumeSpaces();\n                colAlign = parser.fetch().text;\n                if (\"lcr\".indexOf(colAlign) === -1) {\n                    throw new ParseError(\"Expected l or c or r\", parser.nextToken);\n                }\n                parser.consume();\n                parser.consumeSpaces();\n                parser.expect(\"]\");\n                parser.consume();\n                payload.cols = [\n                    {\n                        type: \"align\",\n                        align: colAlign\n                    }\n                ];\n            }\n        }\n        var res = parseArray(context.parser, payload, dCellStyle(context.envName)); // Populate cols with the correct number of column alignment specs.\n        var numCols = Math.max(0, ...res.body.map((row)=>row.length));\n        res.cols = new Array(numCols).fill({\n            type: \"align\",\n            align: colAlign\n        });\n        return delimiters ? {\n            type: \"leftright\",\n            mode: context.mode,\n            body: [\n                res\n            ],\n            left: delimiters[0],\n            right: delimiters[1],\n            rightColor: undefined // \\right uninfluenced by \\color in array\n        } : res;\n    },\n    htmlBuilder: htmlBuilder$6,\n    mathmlBuilder: mathmlBuilder$5\n});\ndefineEnvironment({\n    type: \"array\",\n    names: [\n        \"smallmatrix\"\n    ],\n    props: {\n        numArgs: 0\n    },\n    handler (context) {\n        var payload = {\n            arraystretch: 0.5\n        };\n        var res = parseArray(context.parser, payload, \"script\");\n        res.colSeparationType = \"small\";\n        return res;\n    },\n    htmlBuilder: htmlBuilder$6,\n    mathmlBuilder: mathmlBuilder$5\n});\ndefineEnvironment({\n    type: \"array\",\n    names: [\n        \"subarray\"\n    ],\n    props: {\n        numArgs: 1\n    },\n    handler (context, args) {\n        // Parsing of {subarray} is similar to {array}\n        var symNode = checkSymbolNodeType(args[0]);\n        var colalign = symNode ? [\n            args[0]\n        ] : assertNodeType(args[0], \"ordgroup\").body;\n        var cols = colalign.map(function(nde) {\n            var node = assertSymbolNodeType(nde);\n            var ca = node.text; // {subarray} only recognizes \"l\" & \"c\"\n            if (\"lc\".indexOf(ca) !== -1) {\n                return {\n                    type: \"align\",\n                    align: ca\n                };\n            }\n            throw new ParseError(\"Unknown column alignment: \" + ca, nde);\n        });\n        if (cols.length > 1) {\n            throw new ParseError(\"{subarray} can contain only one column\");\n        }\n        var res = {\n            cols,\n            hskipBeforeAndAfter: false,\n            arraystretch: 0.5\n        };\n        res = parseArray(context.parser, res, \"script\");\n        if (res.body.length > 0 && res.body[0].length > 1) {\n            throw new ParseError(\"{subarray} can contain only one column\");\n        }\n        return res;\n    },\n    htmlBuilder: htmlBuilder$6,\n    mathmlBuilder: mathmlBuilder$5\n}); // A cases environment (in amsmath.sty) is almost equivalent to\n// \\def\\arraystretch{1.2}%\n// \\left\\{\\begin{array}{@{}l@{\\quad}l@{}} … \\end{array}\\right.\n// {dcases} is a {cases} environment where cells are set in \\displaystyle,\n// as defined in mathtools.sty.\n// {rcases} is another mathtools environment. It's brace is on the right side.\ndefineEnvironment({\n    type: \"array\",\n    names: [\n        \"cases\",\n        \"dcases\",\n        \"rcases\",\n        \"drcases\"\n    ],\n    props: {\n        numArgs: 0\n    },\n    handler (context) {\n        var payload = {\n            arraystretch: 1.2,\n            cols: [\n                {\n                    type: \"align\",\n                    align: \"l\",\n                    pregap: 0,\n                    // TODO(kevinb) get the current style.\n                    // For now we use the metrics for TEXT style which is what we were\n                    // doing before.  Before attempting to get the current style we\n                    // should look at TeX's behavior especially for \\over and matrices.\n                    postgap: 1.0\n                },\n                {\n                    type: \"align\",\n                    align: \"l\",\n                    pregap: 0,\n                    postgap: 0\n                }\n            ]\n        };\n        var res = parseArray(context.parser, payload, dCellStyle(context.envName));\n        return {\n            type: \"leftright\",\n            mode: context.mode,\n            body: [\n                res\n            ],\n            left: context.envName.indexOf(\"r\") > -1 ? \".\" : \"\\\\{\",\n            right: context.envName.indexOf(\"r\") > -1 ? \"\\\\}\" : \".\",\n            rightColor: undefined\n        };\n    },\n    htmlBuilder: htmlBuilder$6,\n    mathmlBuilder: mathmlBuilder$5\n}); // In the align environment, one uses ampersands, &, to specify number of\n// columns in each row, and to locate spacing between each column.\n// align gets automatic numbering. align* and aligned do not.\n// The alignedat environment can be used in math mode.\n// Note that we assume \\nomallineskiplimit to be zero,\n// so that \\strut@ is the same as \\strut.\ndefineEnvironment({\n    type: \"array\",\n    names: [\n        \"align\",\n        \"align*\",\n        \"aligned\",\n        \"split\"\n    ],\n    props: {\n        numArgs: 0\n    },\n    handler: alignedHandler,\n    htmlBuilder: htmlBuilder$6,\n    mathmlBuilder: mathmlBuilder$5\n}); // A gathered environment is like an array environment with one centered\n// column, but where rows are considered lines so get \\jot line spacing\n// and contents are set in \\displaystyle.\ndefineEnvironment({\n    type: \"array\",\n    names: [\n        \"gathered\",\n        \"gather\",\n        \"gather*\"\n    ],\n    props: {\n        numArgs: 0\n    },\n    handler (context) {\n        if (utils.contains([\n            \"gather\",\n            \"gather*\"\n        ], context.envName)) {\n            validateAmsEnvironmentContext(context);\n        }\n        var res = {\n            cols: [\n                {\n                    type: \"align\",\n                    align: \"c\"\n                }\n            ],\n            addJot: true,\n            colSeparationType: \"gather\",\n            autoTag: getAutoTag(context.envName),\n            emptySingleRow: true,\n            leqno: context.parser.settings.leqno\n        };\n        return parseArray(context.parser, res, \"display\");\n    },\n    htmlBuilder: htmlBuilder$6,\n    mathmlBuilder: mathmlBuilder$5\n}); // alignat environment is like an align environment, but one must explicitly\n// specify maximum number of columns in each row, and can adjust spacing between\n// each columns.\ndefineEnvironment({\n    type: \"array\",\n    names: [\n        \"alignat\",\n        \"alignat*\",\n        \"alignedat\"\n    ],\n    props: {\n        numArgs: 1\n    },\n    handler: alignedHandler,\n    htmlBuilder: htmlBuilder$6,\n    mathmlBuilder: mathmlBuilder$5\n});\ndefineEnvironment({\n    type: \"array\",\n    names: [\n        \"equation\",\n        \"equation*\"\n    ],\n    props: {\n        numArgs: 0\n    },\n    handler (context) {\n        validateAmsEnvironmentContext(context);\n        var res = {\n            autoTag: getAutoTag(context.envName),\n            emptySingleRow: true,\n            singleRow: true,\n            maxNumCols: 1,\n            leqno: context.parser.settings.leqno\n        };\n        return parseArray(context.parser, res, \"display\");\n    },\n    htmlBuilder: htmlBuilder$6,\n    mathmlBuilder: mathmlBuilder$5\n});\ndefineEnvironment({\n    type: \"array\",\n    names: [\n        \"CD\"\n    ],\n    props: {\n        numArgs: 0\n    },\n    handler (context) {\n        validateAmsEnvironmentContext(context);\n        return parseCD(context.parser);\n    },\n    htmlBuilder: htmlBuilder$6,\n    mathmlBuilder: mathmlBuilder$5\n});\ndefineMacro(\"\\\\nonumber\", \"\\\\gdef\\\\@eqnsw{0}\");\ndefineMacro(\"\\\\notag\", \"\\\\nonumber\"); // Catch \\hline outside array environment\ndefineFunction({\n    type: \"text\",\n    // Doesn't matter what this is.\n    names: [\n        \"\\\\hline\",\n        \"\\\\hdashline\"\n    ],\n    props: {\n        numArgs: 0,\n        allowedInText: true,\n        allowedInMath: true\n    },\n    handler (context, args) {\n        throw new ParseError(context.funcName + \" valid only within array environment\");\n    }\n});\nvar environments = _environments;\n// defineEnvironment definitions.\ndefineFunction({\n    type: \"environment\",\n    names: [\n        \"\\\\begin\",\n        \"\\\\end\"\n    ],\n    props: {\n        numArgs: 1,\n        argTypes: [\n            \"text\"\n        ]\n    },\n    handler (_ref, args) {\n        var { parser, funcName } = _ref;\n        var nameGroup = args[0];\n        if (nameGroup.type !== \"ordgroup\") {\n            throw new ParseError(\"Invalid environment name\", nameGroup);\n        }\n        var envName = \"\";\n        for(var i = 0; i < nameGroup.body.length; ++i){\n            envName += assertNodeType(nameGroup.body[i], \"textord\").text;\n        }\n        if (funcName === \"\\\\begin\") {\n            // begin...end is similar to left...right\n            if (!environments.hasOwnProperty(envName)) {\n                throw new ParseError(\"No such environment: \" + envName, nameGroup);\n            } // Build the environment object. Arguments and other information will\n            // be made available to the begin and end methods using properties.\n            var env = environments[envName];\n            var { args: _args, optArgs } = parser.parseArguments(\"\\\\begin{\" + envName + \"}\", env);\n            var context = {\n                mode: parser.mode,\n                envName,\n                parser\n            };\n            var result = env.handler(context, _args, optArgs);\n            parser.expect(\"\\\\end\", false);\n            var endNameToken = parser.nextToken;\n            var end = assertNodeType(parser.parseFunction(), \"environment\");\n            if (end.name !== envName) {\n                throw new ParseError(\"Mismatch: \\\\begin{\" + envName + \"} matched by \\\\end{\" + end.name + \"}\", endNameToken);\n            } // $FlowFixMe, \"environment\" handler returns an environment ParseNode\n            return result;\n        }\n        return {\n            type: \"environment\",\n            mode: parser.mode,\n            name: envName,\n            nameGroup\n        };\n    }\n});\n// TODO(kevinb): implement \\\\sl and \\\\sc\nvar htmlBuilder$5 = (group, options)=>{\n    var font = group.font;\n    var newOptions = options.withFont(font);\n    return buildGroup$1(group.body, newOptions);\n};\nvar mathmlBuilder$4 = (group, options)=>{\n    var font = group.font;\n    var newOptions = options.withFont(font);\n    return buildGroup(group.body, newOptions);\n};\nvar fontAliases = {\n    \"\\\\Bbb\": \"\\\\mathbb\",\n    \"\\\\bold\": \"\\\\mathbf\",\n    \"\\\\frak\": \"\\\\mathfrak\",\n    \"\\\\bm\": \"\\\\boldsymbol\"\n};\ndefineFunction({\n    type: \"font\",\n    names: [\n        \"\\\\mathrm\",\n        \"\\\\mathit\",\n        \"\\\\mathbf\",\n        \"\\\\mathnormal\",\n        \"\\\\mathbb\",\n        \"\\\\mathcal\",\n        \"\\\\mathfrak\",\n        \"\\\\mathscr\",\n        \"\\\\mathsf\",\n        \"\\\\mathtt\",\n        \"\\\\Bbb\",\n        \"\\\\bold\",\n        \"\\\\frak\"\n    ],\n    props: {\n        numArgs: 1,\n        allowedInArgument: true\n    },\n    handler: (_ref, args)=>{\n        var { parser, funcName } = _ref;\n        var body = normalizeArgument(args[0]);\n        var func = funcName;\n        if (func in fontAliases) {\n            func = fontAliases[func];\n        }\n        return {\n            type: \"font\",\n            mode: parser.mode,\n            font: func.slice(1),\n            body\n        };\n    },\n    htmlBuilder: htmlBuilder$5,\n    mathmlBuilder: mathmlBuilder$4\n});\ndefineFunction({\n    type: \"mclass\",\n    names: [\n        \"\\\\boldsymbol\",\n        \"\\\\bm\"\n    ],\n    props: {\n        numArgs: 1\n    },\n    handler: (_ref2, args)=>{\n        var { parser } = _ref2;\n        var body = args[0];\n        var isCharacterBox = utils.isCharacterBox(body); // amsbsy.sty's \\boldsymbol uses \\binrel spacing to inherit the\n        // argument's bin|rel|ord status\n        return {\n            type: \"mclass\",\n            mode: parser.mode,\n            mclass: binrelClass(body),\n            body: [\n                {\n                    type: \"font\",\n                    mode: parser.mode,\n                    font: \"boldsymbol\",\n                    body\n                }\n            ],\n            isCharacterBox: isCharacterBox\n        };\n    }\n}); // Old font changing functions\ndefineFunction({\n    type: \"font\",\n    names: [\n        \"\\\\rm\",\n        \"\\\\sf\",\n        \"\\\\tt\",\n        \"\\\\bf\",\n        \"\\\\it\",\n        \"\\\\cal\"\n    ],\n    props: {\n        numArgs: 0,\n        allowedInText: true\n    },\n    handler: (_ref3, args)=>{\n        var { parser, funcName, breakOnTokenText } = _ref3;\n        var { mode } = parser;\n        var body = parser.parseExpression(true, breakOnTokenText);\n        var style = \"math\" + funcName.slice(1);\n        return {\n            type: \"font\",\n            mode: mode,\n            font: style,\n            body: {\n                type: \"ordgroup\",\n                mode: parser.mode,\n                body\n            }\n        };\n    },\n    htmlBuilder: htmlBuilder$5,\n    mathmlBuilder: mathmlBuilder$4\n});\nvar adjustStyle = (size, originalStyle)=>{\n    // Figure out what style this fraction should be in based on the\n    // function used\n    var style = originalStyle;\n    if (size === \"display\") {\n        // Get display style as a default.\n        // If incoming style is sub/sup, use style.text() to get correct size.\n        style = style.id >= Style$1.SCRIPT.id ? style.text() : Style$1.DISPLAY;\n    } else if (size === \"text\" && style.size === Style$1.DISPLAY.size) {\n        // We're in a \\tfrac but incoming style is displaystyle, so:\n        style = Style$1.TEXT;\n    } else if (size === \"script\") {\n        style = Style$1.SCRIPT;\n    } else if (size === \"scriptscript\") {\n        style = Style$1.SCRIPTSCRIPT;\n    }\n    return style;\n};\nvar htmlBuilder$4 = (group, options)=>{\n    // Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).\n    var style = adjustStyle(group.size, options.style);\n    var nstyle = style.fracNum();\n    var dstyle = style.fracDen();\n    var newOptions;\n    newOptions = options.havingStyle(nstyle);\n    var numerm = buildGroup$1(group.numer, newOptions, options);\n    if (group.continued) {\n        // \\cfrac inserts a \\strut into the numerator.\n        // Get \\strut dimensions from TeXbook page 353.\n        var hStrut = 8.5 / options.fontMetrics().ptPerEm;\n        var dStrut = 3.5 / options.fontMetrics().ptPerEm;\n        numerm.height = numerm.height < hStrut ? hStrut : numerm.height;\n        numerm.depth = numerm.depth < dStrut ? dStrut : numerm.depth;\n    }\n    newOptions = options.havingStyle(dstyle);\n    var denomm = buildGroup$1(group.denom, newOptions, options);\n    var rule;\n    var ruleWidth;\n    var ruleSpacing;\n    if (group.hasBarLine) {\n        if (group.barSize) {\n            ruleWidth = calculateSize(group.barSize, options);\n            rule = buildCommon.makeLineSpan(\"frac-line\", options, ruleWidth);\n        } else {\n            rule = buildCommon.makeLineSpan(\"frac-line\", options);\n        }\n        ruleWidth = rule.height;\n        ruleSpacing = rule.height;\n    } else {\n        rule = null;\n        ruleWidth = 0;\n        ruleSpacing = options.fontMetrics().defaultRuleThickness;\n    } // Rule 15b\n    var numShift;\n    var clearance;\n    var denomShift;\n    if (style.size === Style$1.DISPLAY.size || group.size === \"display\") {\n        numShift = options.fontMetrics().num1;\n        if (ruleWidth > 0) {\n            clearance = 3 * ruleSpacing;\n        } else {\n            clearance = 7 * ruleSpacing;\n        }\n        denomShift = options.fontMetrics().denom1;\n    } else {\n        if (ruleWidth > 0) {\n            numShift = options.fontMetrics().num2;\n            clearance = ruleSpacing;\n        } else {\n            numShift = options.fontMetrics().num3;\n            clearance = 3 * ruleSpacing;\n        }\n        denomShift = options.fontMetrics().denom2;\n    }\n    var frac;\n    if (!rule) {\n        // Rule 15c\n        var candidateClearance = numShift - numerm.depth - (denomm.height - denomShift);\n        if (candidateClearance < clearance) {\n            numShift += 0.5 * (clearance - candidateClearance);\n            denomShift += 0.5 * (clearance - candidateClearance);\n        }\n        frac = buildCommon.makeVList({\n            positionType: \"individualShift\",\n            children: [\n                {\n                    type: \"elem\",\n                    elem: denomm,\n                    shift: denomShift\n                },\n                {\n                    type: \"elem\",\n                    elem: numerm,\n                    shift: -numShift\n                }\n            ]\n        }, options);\n    } else {\n        // Rule 15d\n        var axisHeight = options.fontMetrics().axisHeight;\n        if (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth) < clearance) {\n            numShift += clearance - (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth));\n        }\n        if (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift) < clearance) {\n            denomShift += clearance - (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift));\n        }\n        var midShift = -(axisHeight - 0.5 * ruleWidth);\n        frac = buildCommon.makeVList({\n            positionType: \"individualShift\",\n            children: [\n                {\n                    type: \"elem\",\n                    elem: denomm,\n                    shift: denomShift\n                },\n                {\n                    type: \"elem\",\n                    elem: rule,\n                    shift: midShift\n                },\n                {\n                    type: \"elem\",\n                    elem: numerm,\n                    shift: -numShift\n                }\n            ]\n        }, options);\n    } // Since we manually change the style sometimes (with \\dfrac or \\tfrac),\n    // account for the possible size change here.\n    newOptions = options.havingStyle(style);\n    frac.height *= newOptions.sizeMultiplier / options.sizeMultiplier;\n    frac.depth *= newOptions.sizeMultiplier / options.sizeMultiplier; // Rule 15e\n    var delimSize;\n    if (style.size === Style$1.DISPLAY.size) {\n        delimSize = options.fontMetrics().delim1;\n    } else if (style.size === Style$1.SCRIPTSCRIPT.size) {\n        delimSize = options.havingStyle(Style$1.SCRIPT).fontMetrics().delim2;\n    } else {\n        delimSize = options.fontMetrics().delim2;\n    }\n    var leftDelim;\n    var rightDelim;\n    if (group.leftDelim == null) {\n        leftDelim = makeNullDelimiter(options, [\n            \"mopen\"\n        ]);\n    } else {\n        leftDelim = delimiter.customSizedDelim(group.leftDelim, delimSize, true, options.havingStyle(style), group.mode, [\n            \"mopen\"\n        ]);\n    }\n    if (group.continued) {\n        rightDelim = buildCommon.makeSpan([]); // zero width for \\cfrac\n    } else if (group.rightDelim == null) {\n        rightDelim = makeNullDelimiter(options, [\n            \"mclose\"\n        ]);\n    } else {\n        rightDelim = delimiter.customSizedDelim(group.rightDelim, delimSize, true, options.havingStyle(style), group.mode, [\n            \"mclose\"\n        ]);\n    }\n    return buildCommon.makeSpan([\n        \"mord\"\n    ].concat(newOptions.sizingClasses(options)), [\n        leftDelim,\n        buildCommon.makeSpan([\n            \"mfrac\"\n        ], [\n            frac\n        ]),\n        rightDelim\n    ], options);\n};\nvar mathmlBuilder$3 = (group, options)=>{\n    var node = new mathMLTree.MathNode(\"mfrac\", [\n        buildGroup(group.numer, options),\n        buildGroup(group.denom, options)\n    ]);\n    if (!group.hasBarLine) {\n        node.setAttribute(\"linethickness\", \"0px\");\n    } else if (group.barSize) {\n        var ruleWidth = calculateSize(group.barSize, options);\n        node.setAttribute(\"linethickness\", makeEm(ruleWidth));\n    }\n    var style = adjustStyle(group.size, options.style);\n    if (style.size !== options.style.size) {\n        node = new mathMLTree.MathNode(\"mstyle\", [\n            node\n        ]);\n        var isDisplay = style.size === Style$1.DISPLAY.size ? \"true\" : \"false\";\n        node.setAttribute(\"displaystyle\", isDisplay);\n        node.setAttribute(\"scriptlevel\", \"0\");\n    }\n    if (group.leftDelim != null || group.rightDelim != null) {\n        var withDelims = [];\n        if (group.leftDelim != null) {\n            var leftOp = new mathMLTree.MathNode(\"mo\", [\n                new mathMLTree.TextNode(group.leftDelim.replace(\"\\\\\", \"\"))\n            ]);\n            leftOp.setAttribute(\"fence\", \"true\");\n            withDelims.push(leftOp);\n        }\n        withDelims.push(node);\n        if (group.rightDelim != null) {\n            var rightOp = new mathMLTree.MathNode(\"mo\", [\n                new mathMLTree.TextNode(group.rightDelim.replace(\"\\\\\", \"\"))\n            ]);\n            rightOp.setAttribute(\"fence\", \"true\");\n            withDelims.push(rightOp);\n        }\n        return makeRow(withDelims);\n    }\n    return node;\n};\ndefineFunction({\n    type: \"genfrac\",\n    names: [\n        \"\\\\dfrac\",\n        \"\\\\frac\",\n        \"\\\\tfrac\",\n        \"\\\\dbinom\",\n        \"\\\\binom\",\n        \"\\\\tbinom\",\n        \"\\\\\\\\atopfrac\",\n        \"\\\\\\\\bracefrac\",\n        \"\\\\\\\\brackfrac\" // ditto\n    ],\n    props: {\n        numArgs: 2,\n        allowedInArgument: true\n    },\n    handler: (_ref, args)=>{\n        var { parser, funcName } = _ref;\n        var numer = args[0];\n        var denom = args[1];\n        var hasBarLine;\n        var leftDelim = null;\n        var rightDelim = null;\n        var size = \"auto\";\n        switch(funcName){\n            case \"\\\\dfrac\":\n            case \"\\\\frac\":\n            case \"\\\\tfrac\":\n                hasBarLine = true;\n                break;\n            case \"\\\\\\\\atopfrac\":\n                hasBarLine = false;\n                break;\n            case \"\\\\dbinom\":\n            case \"\\\\binom\":\n            case \"\\\\tbinom\":\n                hasBarLine = false;\n                leftDelim = \"(\";\n                rightDelim = \")\";\n                break;\n            case \"\\\\\\\\bracefrac\":\n                hasBarLine = false;\n                leftDelim = \"\\\\{\";\n                rightDelim = \"\\\\}\";\n                break;\n            case \"\\\\\\\\brackfrac\":\n                hasBarLine = false;\n                leftDelim = \"[\";\n                rightDelim = \"]\";\n                break;\n            default:\n                throw new Error(\"Unrecognized genfrac command\");\n        }\n        switch(funcName){\n            case \"\\\\dfrac\":\n            case \"\\\\dbinom\":\n                size = \"display\";\n                break;\n            case \"\\\\tfrac\":\n            case \"\\\\tbinom\":\n                size = \"text\";\n                break;\n        }\n        return {\n            type: \"genfrac\",\n            mode: parser.mode,\n            continued: false,\n            numer,\n            denom,\n            hasBarLine,\n            leftDelim,\n            rightDelim,\n            size,\n            barSize: null\n        };\n    },\n    htmlBuilder: htmlBuilder$4,\n    mathmlBuilder: mathmlBuilder$3\n});\ndefineFunction({\n    type: \"genfrac\",\n    names: [\n        \"\\\\cfrac\"\n    ],\n    props: {\n        numArgs: 2\n    },\n    handler: (_ref2, args)=>{\n        var { parser, funcName } = _ref2;\n        var numer = args[0];\n        var denom = args[1];\n        return {\n            type: \"genfrac\",\n            mode: parser.mode,\n            continued: true,\n            numer,\n            denom,\n            hasBarLine: true,\n            leftDelim: null,\n            rightDelim: null,\n            size: \"display\",\n            barSize: null\n        };\n    }\n}); // Infix generalized fractions -- these are not rendered directly, but replaced\n// immediately by one of the variants above.\ndefineFunction({\n    type: \"infix\",\n    names: [\n        \"\\\\over\",\n        \"\\\\choose\",\n        \"\\\\atop\",\n        \"\\\\brace\",\n        \"\\\\brack\"\n    ],\n    props: {\n        numArgs: 0,\n        infix: true\n    },\n    handler (_ref3) {\n        var { parser, funcName, token } = _ref3;\n        var replaceWith;\n        switch(funcName){\n            case \"\\\\over\":\n                replaceWith = \"\\\\frac\";\n                break;\n            case \"\\\\choose\":\n                replaceWith = \"\\\\binom\";\n                break;\n            case \"\\\\atop\":\n                replaceWith = \"\\\\\\\\atopfrac\";\n                break;\n            case \"\\\\brace\":\n                replaceWith = \"\\\\\\\\bracefrac\";\n                break;\n            case \"\\\\brack\":\n                replaceWith = \"\\\\\\\\brackfrac\";\n                break;\n            default:\n                throw new Error(\"Unrecognized infix genfrac command\");\n        }\n        return {\n            type: \"infix\",\n            mode: parser.mode,\n            replaceWith,\n            token\n        };\n    }\n});\nvar stylArray = [\n    \"display\",\n    \"text\",\n    \"script\",\n    \"scriptscript\"\n];\nvar delimFromValue = function delimFromValue(delimString) {\n    var delim = null;\n    if (delimString.length > 0) {\n        delim = delimString;\n        delim = delim === \".\" ? null : delim;\n    }\n    return delim;\n};\ndefineFunction({\n    type: \"genfrac\",\n    names: [\n        \"\\\\genfrac\"\n    ],\n    props: {\n        numArgs: 6,\n        allowedInArgument: true,\n        argTypes: [\n            \"math\",\n            \"math\",\n            \"size\",\n            \"text\",\n            \"math\",\n            \"math\"\n        ]\n    },\n    handler (_ref4, args) {\n        var { parser } = _ref4;\n        var numer = args[4];\n        var denom = args[5]; // Look into the parse nodes to get the desired delimiters.\n        var leftNode = normalizeArgument(args[0]);\n        var leftDelim = leftNode.type === \"atom\" && leftNode.family === \"open\" ? delimFromValue(leftNode.text) : null;\n        var rightNode = normalizeArgument(args[1]);\n        var rightDelim = rightNode.type === \"atom\" && rightNode.family === \"close\" ? delimFromValue(rightNode.text) : null;\n        var barNode = assertNodeType(args[2], \"size\");\n        var hasBarLine;\n        var barSize = null;\n        if (barNode.isBlank) {\n            // \\genfrac acts differently than \\above.\n            // \\genfrac treats an empty size group as a signal to use a\n            // standard bar size. \\above would see size = 0 and omit the bar.\n            hasBarLine = true;\n        } else {\n            barSize = barNode.value;\n            hasBarLine = barSize.number > 0;\n        } // Find out if we want displaystyle, textstyle, etc.\n        var size = \"auto\";\n        var styl = args[3];\n        if (styl.type === \"ordgroup\") {\n            if (styl.body.length > 0) {\n                var textOrd = assertNodeType(styl.body[0], \"textord\");\n                size = stylArray[Number(textOrd.text)];\n            }\n        } else {\n            styl = assertNodeType(styl, \"textord\");\n            size = stylArray[Number(styl.text)];\n        }\n        return {\n            type: \"genfrac\",\n            mode: parser.mode,\n            numer,\n            denom,\n            continued: false,\n            hasBarLine,\n            barSize,\n            leftDelim,\n            rightDelim,\n            size\n        };\n    },\n    htmlBuilder: htmlBuilder$4,\n    mathmlBuilder: mathmlBuilder$3\n}); // \\above is an infix fraction that also defines a fraction bar size.\ndefineFunction({\n    type: \"infix\",\n    names: [\n        \"\\\\above\"\n    ],\n    props: {\n        numArgs: 1,\n        argTypes: [\n            \"size\"\n        ],\n        infix: true\n    },\n    handler (_ref5, args) {\n        var { parser, funcName, token } = _ref5;\n        return {\n            type: \"infix\",\n            mode: parser.mode,\n            replaceWith: \"\\\\\\\\abovefrac\",\n            size: assertNodeType(args[0], \"size\").value,\n            token\n        };\n    }\n});\ndefineFunction({\n    type: \"genfrac\",\n    names: [\n        \"\\\\\\\\abovefrac\"\n    ],\n    props: {\n        numArgs: 3,\n        argTypes: [\n            \"math\",\n            \"size\",\n            \"math\"\n        ]\n    },\n    handler: (_ref6, args)=>{\n        var { parser, funcName } = _ref6;\n        var numer = args[0];\n        var barSize = assert(assertNodeType(args[1], \"infix\").size);\n        var denom = args[2];\n        var hasBarLine = barSize.number > 0;\n        return {\n            type: \"genfrac\",\n            mode: parser.mode,\n            numer,\n            denom,\n            continued: false,\n            hasBarLine,\n            barSize,\n            leftDelim: null,\n            rightDelim: null,\n            size: \"auto\"\n        };\n    },\n    htmlBuilder: htmlBuilder$4,\n    mathmlBuilder: mathmlBuilder$3\n});\n// NOTE: Unlike most `htmlBuilder`s, this one handles not only \"horizBrace\", but\n// also \"supsub\" since an over/underbrace can affect super/subscripting.\nvar htmlBuilder$3 = (grp, options)=>{\n    var style = options.style; // Pull out the `ParseNode<\"horizBrace\">` if `grp` is a \"supsub\" node.\n    var supSubGroup;\n    var group;\n    if (grp.type === \"supsub\") {\n        // Ref: LaTeX source2e: }}}}\\limits}\n        // i.e. LaTeX treats the brace similar to an op and passes it\n        // with \\limits, so we need to assign supsub style.\n        supSubGroup = grp.sup ? buildGroup$1(grp.sup, options.havingStyle(style.sup()), options) : buildGroup$1(grp.sub, options.havingStyle(style.sub()), options);\n        group = assertNodeType(grp.base, \"horizBrace\");\n    } else {\n        group = assertNodeType(grp, \"horizBrace\");\n    } // Build the base group\n    var body = buildGroup$1(group.base, options.havingBaseStyle(Style$1.DISPLAY)); // Create the stretchy element\n    var braceBody = stretchy.svgSpan(group, options); // Generate the vlist, with the appropriate kerns        ┏━━━━━━━━┓\n    // This first vlist contains the content and the brace:   equation\n    var vlist;\n    if (group.isOver) {\n        vlist = buildCommon.makeVList({\n            positionType: \"firstBaseline\",\n            children: [\n                {\n                    type: \"elem\",\n                    elem: body\n                },\n                {\n                    type: \"kern\",\n                    size: 0.1\n                },\n                {\n                    type: \"elem\",\n                    elem: braceBody\n                }\n            ]\n        }, options); // $FlowFixMe: Replace this with passing \"svg-align\" into makeVList.\n        vlist.children[0].children[0].children[1].classes.push(\"svg-align\");\n    } else {\n        vlist = buildCommon.makeVList({\n            positionType: \"bottom\",\n            positionData: body.depth + 0.1 + braceBody.height,\n            children: [\n                {\n                    type: \"elem\",\n                    elem: braceBody\n                },\n                {\n                    type: \"kern\",\n                    size: 0.1\n                },\n                {\n                    type: \"elem\",\n                    elem: body\n                }\n            ]\n        }, options); // $FlowFixMe: Replace this with passing \"svg-align\" into makeVList.\n        vlist.children[0].children[0].children[0].classes.push(\"svg-align\");\n    }\n    if (supSubGroup) {\n        // To write the supsub, wrap the first vlist in another vlist:\n        // They can't all go in the same vlist, because the note might be\n        // wider than the equation. We want the equation to control the\n        // brace width.\n        //      note          long note           long note\n        //   ┏━━━━━━━━┓   or    ┏━━━┓     not    ┏━━━━━━━━━┓\n        //    equation           eqn                 eqn\n        var vSpan = buildCommon.makeSpan([\n            \"mord\",\n            group.isOver ? \"mover\" : \"munder\"\n        ], [\n            vlist\n        ], options);\n        if (group.isOver) {\n            vlist = buildCommon.makeVList({\n                positionType: \"firstBaseline\",\n                children: [\n                    {\n                        type: \"elem\",\n                        elem: vSpan\n                    },\n                    {\n                        type: \"kern\",\n                        size: 0.2\n                    },\n                    {\n                        type: \"elem\",\n                        elem: supSubGroup\n                    }\n                ]\n            }, options);\n        } else {\n            vlist = buildCommon.makeVList({\n                positionType: \"bottom\",\n                positionData: vSpan.depth + 0.2 + supSubGroup.height + supSubGroup.depth,\n                children: [\n                    {\n                        type: \"elem\",\n                        elem: supSubGroup\n                    },\n                    {\n                        type: \"kern\",\n                        size: 0.2\n                    },\n                    {\n                        type: \"elem\",\n                        elem: vSpan\n                    }\n                ]\n            }, options);\n        }\n    }\n    return buildCommon.makeSpan([\n        \"mord\",\n        group.isOver ? \"mover\" : \"munder\"\n    ], [\n        vlist\n    ], options);\n};\nvar mathmlBuilder$2 = (group, options)=>{\n    var accentNode = stretchy.mathMLnode(group.label);\n    return new mathMLTree.MathNode(group.isOver ? \"mover\" : \"munder\", [\n        buildGroup(group.base, options),\n        accentNode\n    ]);\n}; // Horizontal stretchy braces\ndefineFunction({\n    type: \"horizBrace\",\n    names: [\n        \"\\\\overbrace\",\n        \"\\\\underbrace\"\n    ],\n    props: {\n        numArgs: 1\n    },\n    handler (_ref, args) {\n        var { parser, funcName } = _ref;\n        return {\n            type: \"horizBrace\",\n            mode: parser.mode,\n            label: funcName,\n            isOver: /^\\\\over/.test(funcName),\n            base: args[0]\n        };\n    },\n    htmlBuilder: htmlBuilder$3,\n    mathmlBuilder: mathmlBuilder$2\n});\ndefineFunction({\n    type: \"href\",\n    names: [\n        \"\\\\href\"\n    ],\n    props: {\n        numArgs: 2,\n        argTypes: [\n            \"url\",\n            \"original\"\n        ],\n        allowedInText: true\n    },\n    handler: (_ref, args)=>{\n        var { parser } = _ref;\n        var body = args[1];\n        var href = assertNodeType(args[0], \"url\").url;\n        if (!parser.settings.isTrusted({\n            command: \"\\\\href\",\n            url: href\n        })) {\n            return parser.formatUnsupportedCmd(\"\\\\href\");\n        }\n        return {\n            type: \"href\",\n            mode: parser.mode,\n            href,\n            body: ordargument(body)\n        };\n    },\n    htmlBuilder: (group, options)=>{\n        var elements = buildExpression$1(group.body, options, false);\n        return buildCommon.makeAnchor(group.href, [], elements, options);\n    },\n    mathmlBuilder: (group, options)=>{\n        var math = buildExpressionRow(group.body, options);\n        if (!(math instanceof MathNode)) {\n            math = new MathNode(\"mrow\", [\n                math\n            ]);\n        }\n        math.setAttribute(\"href\", group.href);\n        return math;\n    }\n});\ndefineFunction({\n    type: \"href\",\n    names: [\n        \"\\\\url\"\n    ],\n    props: {\n        numArgs: 1,\n        argTypes: [\n            \"url\"\n        ],\n        allowedInText: true\n    },\n    handler: (_ref2, args)=>{\n        var { parser } = _ref2;\n        var href = assertNodeType(args[0], \"url\").url;\n        if (!parser.settings.isTrusted({\n            command: \"\\\\url\",\n            url: href\n        })) {\n            return parser.formatUnsupportedCmd(\"\\\\url\");\n        }\n        var chars = [];\n        for(var i = 0; i < href.length; i++){\n            var c = href[i];\n            if (c === \"~\") {\n                c = \"\\\\textasciitilde\";\n            }\n            chars.push({\n                type: \"textord\",\n                mode: \"text\",\n                text: c\n            });\n        }\n        var body = {\n            type: \"text\",\n            mode: parser.mode,\n            font: \"\\\\texttt\",\n            body: chars\n        };\n        return {\n            type: \"href\",\n            mode: parser.mode,\n            href,\n            body: ordargument(body)\n        };\n    }\n});\n// In LaTeX, \\vcenter can act only on a box, as in\n// \\vcenter{\\hbox{$\\frac{a+b}{\\dfrac{c}{d}}$}}\n// This function by itself doesn't do anything but prevent a soft line break.\ndefineFunction({\n    type: \"hbox\",\n    names: [\n        \"\\\\hbox\"\n    ],\n    props: {\n        numArgs: 1,\n        argTypes: [\n            \"text\"\n        ],\n        allowedInText: true,\n        primitive: true\n    },\n    handler (_ref, args) {\n        var { parser } = _ref;\n        return {\n            type: \"hbox\",\n            mode: parser.mode,\n            body: ordargument(args[0])\n        };\n    },\n    htmlBuilder (group, options) {\n        var elements = buildExpression$1(group.body, options, false);\n        return buildCommon.makeFragment(elements);\n    },\n    mathmlBuilder (group, options) {\n        return new mathMLTree.MathNode(\"mrow\", buildExpression(group.body, options));\n    }\n});\ndefineFunction({\n    type: \"html\",\n    names: [\n        \"\\\\htmlClass\",\n        \"\\\\htmlId\",\n        \"\\\\htmlStyle\",\n        \"\\\\htmlData\"\n    ],\n    props: {\n        numArgs: 2,\n        argTypes: [\n            \"raw\",\n            \"original\"\n        ],\n        allowedInText: true\n    },\n    handler: (_ref, args)=>{\n        var { parser, funcName, token } = _ref;\n        var value = assertNodeType(args[0], \"raw\").string;\n        var body = args[1];\n        if (parser.settings.strict) {\n            parser.settings.reportNonstrict(\"htmlExtension\", \"HTML extension is disabled on strict mode\");\n        }\n        var trustContext;\n        var attributes = {};\n        switch(funcName){\n            case \"\\\\htmlClass\":\n                attributes.class = value;\n                trustContext = {\n                    command: \"\\\\htmlClass\",\n                    class: value\n                };\n                break;\n            case \"\\\\htmlId\":\n                attributes.id = value;\n                trustContext = {\n                    command: \"\\\\htmlId\",\n                    id: value\n                };\n                break;\n            case \"\\\\htmlStyle\":\n                attributes.style = value;\n                trustContext = {\n                    command: \"\\\\htmlStyle\",\n                    style: value\n                };\n                break;\n            case \"\\\\htmlData\":\n                {\n                    var data = value.split(\",\");\n                    for(var i = 0; i < data.length; i++){\n                        var keyVal = data[i].split(\"=\");\n                        if (keyVal.length !== 2) {\n                            throw new ParseError(\"Error parsing key-value for \\\\htmlData\");\n                        }\n                        attributes[\"data-\" + keyVal[0].trim()] = keyVal[1].trim();\n                    }\n                    trustContext = {\n                        command: \"\\\\htmlData\",\n                        attributes\n                    };\n                    break;\n                }\n            default:\n                throw new Error(\"Unrecognized html command\");\n        }\n        if (!parser.settings.isTrusted(trustContext)) {\n            return parser.formatUnsupportedCmd(funcName);\n        }\n        return {\n            type: \"html\",\n            mode: parser.mode,\n            attributes,\n            body: ordargument(body)\n        };\n    },\n    htmlBuilder: (group, options)=>{\n        var elements = buildExpression$1(group.body, options, false);\n        var classes = [\n            \"enclosing\"\n        ];\n        if (group.attributes.class) {\n            classes.push(...group.attributes.class.trim().split(/\\s+/));\n        }\n        var span = buildCommon.makeSpan(classes, elements, options);\n        for(var attr in group.attributes){\n            if (attr !== \"class\" && group.attributes.hasOwnProperty(attr)) {\n                span.setAttribute(attr, group.attributes[attr]);\n            }\n        }\n        return span;\n    },\n    mathmlBuilder: (group, options)=>{\n        return buildExpressionRow(group.body, options);\n    }\n});\ndefineFunction({\n    type: \"htmlmathml\",\n    names: [\n        \"\\\\html@mathml\"\n    ],\n    props: {\n        numArgs: 2,\n        allowedInText: true\n    },\n    handler: (_ref, args)=>{\n        var { parser } = _ref;\n        return {\n            type: \"htmlmathml\",\n            mode: parser.mode,\n            html: ordargument(args[0]),\n            mathml: ordargument(args[1])\n        };\n    },\n    htmlBuilder: (group, options)=>{\n        var elements = buildExpression$1(group.html, options, false);\n        return buildCommon.makeFragment(elements);\n    },\n    mathmlBuilder: (group, options)=>{\n        return buildExpressionRow(group.mathml, options);\n    }\n});\nvar sizeData = function sizeData(str) {\n    if (/^[-+]? *(\\d+(\\.\\d*)?|\\.\\d+)$/.test(str)) {\n        // str is a number with no unit specified.\n        // default unit is bp, per graphix package.\n        return {\n            number: +str,\n            unit: \"bp\"\n        };\n    } else {\n        var match = /([-+]?) *(\\d+(?:\\.\\d*)?|\\.\\d+) *([a-z]{2})/.exec(str);\n        if (!match) {\n            throw new ParseError(\"Invalid size: '\" + str + \"' in \\\\includegraphics\");\n        }\n        var data = {\n            number: +(match[1] + match[2]),\n            // sign + magnitude, cast to number\n            unit: match[3]\n        };\n        if (!validUnit(data)) {\n            throw new ParseError(\"Invalid unit: '\" + data.unit + \"' in \\\\includegraphics.\");\n        }\n        return data;\n    }\n};\ndefineFunction({\n    type: \"includegraphics\",\n    names: [\n        \"\\\\includegraphics\"\n    ],\n    props: {\n        numArgs: 1,\n        numOptionalArgs: 1,\n        argTypes: [\n            \"raw\",\n            \"url\"\n        ],\n        allowedInText: false\n    },\n    handler: (_ref, args, optArgs)=>{\n        var { parser } = _ref;\n        var width = {\n            number: 0,\n            unit: \"em\"\n        };\n        var height = {\n            number: 0.9,\n            unit: \"em\"\n        }; // sorta character sized.\n        var totalheight = {\n            number: 0,\n            unit: \"em\"\n        };\n        var alt = \"\";\n        if (optArgs[0]) {\n            var attributeStr = assertNodeType(optArgs[0], \"raw\").string; // Parser.js does not parse key/value pairs. We get a string.\n            var attributes = attributeStr.split(\",\");\n            for(var i = 0; i < attributes.length; i++){\n                var keyVal = attributes[i].split(\"=\");\n                if (keyVal.length === 2) {\n                    var str = keyVal[1].trim();\n                    switch(keyVal[0].trim()){\n                        case \"alt\":\n                            alt = str;\n                            break;\n                        case \"width\":\n                            width = sizeData(str);\n                            break;\n                        case \"height\":\n                            height = sizeData(str);\n                            break;\n                        case \"totalheight\":\n                            totalheight = sizeData(str);\n                            break;\n                        default:\n                            throw new ParseError(\"Invalid key: '\" + keyVal[0] + \"' in \\\\includegraphics.\");\n                    }\n                }\n            }\n        }\n        var src = assertNodeType(args[0], \"url\").url;\n        if (alt === \"\") {\n            // No alt given. Use the file name. Strip away the path.\n            alt = src;\n            alt = alt.replace(/^.*[\\\\/]/, \"\");\n            alt = alt.substring(0, alt.lastIndexOf(\".\"));\n        }\n        if (!parser.settings.isTrusted({\n            command: \"\\\\includegraphics\",\n            url: src\n        })) {\n            return parser.formatUnsupportedCmd(\"\\\\includegraphics\");\n        }\n        return {\n            type: \"includegraphics\",\n            mode: parser.mode,\n            alt: alt,\n            width: width,\n            height: height,\n            totalheight: totalheight,\n            src: src\n        };\n    },\n    htmlBuilder: (group, options)=>{\n        var height = calculateSize(group.height, options);\n        var depth = 0;\n        if (group.totalheight.number > 0) {\n            depth = calculateSize(group.totalheight, options) - height;\n        }\n        var width = 0;\n        if (group.width.number > 0) {\n            width = calculateSize(group.width, options);\n        }\n        var style = {\n            height: makeEm(height + depth)\n        };\n        if (width > 0) {\n            style.width = makeEm(width);\n        }\n        if (depth > 0) {\n            style.verticalAlign = makeEm(-depth);\n        }\n        var node = new Img(group.src, group.alt, style);\n        node.height = height;\n        node.depth = depth;\n        return node;\n    },\n    mathmlBuilder: (group, options)=>{\n        var node = new mathMLTree.MathNode(\"mglyph\", []);\n        node.setAttribute(\"alt\", group.alt);\n        var height = calculateSize(group.height, options);\n        var depth = 0;\n        if (group.totalheight.number > 0) {\n            depth = calculateSize(group.totalheight, options) - height;\n            node.setAttribute(\"valign\", makeEm(-depth));\n        }\n        node.setAttribute(\"height\", makeEm(height + depth));\n        if (group.width.number > 0) {\n            var width = calculateSize(group.width, options);\n            node.setAttribute(\"width\", makeEm(width));\n        }\n        node.setAttribute(\"src\", group.src);\n        return node;\n    }\n});\n// Horizontal spacing commands\ndefineFunction({\n    type: \"kern\",\n    names: [\n        \"\\\\kern\",\n        \"\\\\mkern\",\n        \"\\\\hskip\",\n        \"\\\\mskip\"\n    ],\n    props: {\n        numArgs: 1,\n        argTypes: [\n            \"size\"\n        ],\n        primitive: true,\n        allowedInText: true\n    },\n    handler (_ref, args) {\n        var { parser, funcName } = _ref;\n        var size = assertNodeType(args[0], \"size\");\n        if (parser.settings.strict) {\n            var mathFunction = funcName[1] === \"m\"; // \\mkern, \\mskip\n            var muUnit = size.value.unit === \"mu\";\n            if (mathFunction) {\n                if (!muUnit) {\n                    parser.settings.reportNonstrict(\"mathVsTextUnits\", \"LaTeX's \" + funcName + \" supports only mu units, \" + (\"not \" + size.value.unit + \" units\"));\n                }\n                if (parser.mode !== \"math\") {\n                    parser.settings.reportNonstrict(\"mathVsTextUnits\", \"LaTeX's \" + funcName + \" works only in math mode\");\n                }\n            } else {\n                // !mathFunction\n                if (muUnit) {\n                    parser.settings.reportNonstrict(\"mathVsTextUnits\", \"LaTeX's \" + funcName + \" doesn't support mu units\");\n                }\n            }\n        }\n        return {\n            type: \"kern\",\n            mode: parser.mode,\n            dimension: size.value\n        };\n    },\n    htmlBuilder (group, options) {\n        return buildCommon.makeGlue(group.dimension, options);\n    },\n    mathmlBuilder (group, options) {\n        var dimension = calculateSize(group.dimension, options);\n        return new mathMLTree.SpaceNode(dimension);\n    }\n});\n// Horizontal overlap functions\ndefineFunction({\n    type: \"lap\",\n    names: [\n        \"\\\\mathllap\",\n        \"\\\\mathrlap\",\n        \"\\\\mathclap\"\n    ],\n    props: {\n        numArgs: 1,\n        allowedInText: true\n    },\n    handler: (_ref, args)=>{\n        var { parser, funcName } = _ref;\n        var body = args[0];\n        return {\n            type: \"lap\",\n            mode: parser.mode,\n            alignment: funcName.slice(5),\n            body\n        };\n    },\n    htmlBuilder: (group, options)=>{\n        // mathllap, mathrlap, mathclap\n        var inner;\n        if (group.alignment === \"clap\") {\n            // ref: https://www.math.lsu.edu/~aperlis/publications/mathclap/\n            inner = buildCommon.makeSpan([], [\n                buildGroup$1(group.body, options)\n            ]); // wrap, since CSS will center a .clap > .inner > span\n            inner = buildCommon.makeSpan([\n                \"inner\"\n            ], [\n                inner\n            ], options);\n        } else {\n            inner = buildCommon.makeSpan([\n                \"inner\"\n            ], [\n                buildGroup$1(group.body, options)\n            ]);\n        }\n        var fix = buildCommon.makeSpan([\n            \"fix\"\n        ], []);\n        var node = buildCommon.makeSpan([\n            group.alignment\n        ], [\n            inner,\n            fix\n        ], options); // At this point, we have correctly set horizontal alignment of the\n        // two items involved in the lap.\n        // Next, use a strut to set the height of the HTML bounding box.\n        // Otherwise, a tall argument may be misplaced.\n        // This code resolved issue #1153\n        var strut = buildCommon.makeSpan([\n            \"strut\"\n        ]);\n        strut.style.height = makeEm(node.height + node.depth);\n        if (node.depth) {\n            strut.style.verticalAlign = makeEm(-node.depth);\n        }\n        node.children.unshift(strut); // Next, prevent vertical misplacement when next to something tall.\n        // This code resolves issue #1234\n        node = buildCommon.makeSpan([\n            \"thinbox\"\n        ], [\n            node\n        ], options);\n        return buildCommon.makeSpan([\n            \"mord\",\n            \"vbox\"\n        ], [\n            node\n        ], options);\n    },\n    mathmlBuilder: (group, options)=>{\n        // mathllap, mathrlap, mathclap\n        var node = new mathMLTree.MathNode(\"mpadded\", [\n            buildGroup(group.body, options)\n        ]);\n        if (group.alignment !== \"rlap\") {\n            var offset = group.alignment === \"llap\" ? \"-1\" : \"-0.5\";\n            node.setAttribute(\"lspace\", offset + \"width\");\n        }\n        node.setAttribute(\"width\", \"0px\");\n        return node;\n    }\n});\ndefineFunction({\n    type: \"styling\",\n    names: [\n        \"\\\\(\",\n        \"$\"\n    ],\n    props: {\n        numArgs: 0,\n        allowedInText: true,\n        allowedInMath: false\n    },\n    handler (_ref, args) {\n        var { funcName, parser } = _ref;\n        var outerMode = parser.mode;\n        parser.switchMode(\"math\");\n        var close = funcName === \"\\\\(\" ? \"\\\\)\" : \"$\";\n        var body = parser.parseExpression(false, close);\n        parser.expect(close);\n        parser.switchMode(outerMode);\n        return {\n            type: \"styling\",\n            mode: parser.mode,\n            style: \"text\",\n            body\n        };\n    }\n}); // Check for extra closing math delimiters\ndefineFunction({\n    type: \"text\",\n    // Doesn't matter what this is.\n    names: [\n        \"\\\\)\",\n        \"\\\\]\"\n    ],\n    props: {\n        numArgs: 0,\n        allowedInText: true,\n        allowedInMath: false\n    },\n    handler (context, args) {\n        throw new ParseError(\"Mismatched \" + context.funcName);\n    }\n});\nvar chooseMathStyle = (group, options)=>{\n    switch(options.style.size){\n        case Style$1.DISPLAY.size:\n            return group.display;\n        case Style$1.TEXT.size:\n            return group.text;\n        case Style$1.SCRIPT.size:\n            return group.script;\n        case Style$1.SCRIPTSCRIPT.size:\n            return group.scriptscript;\n        default:\n            return group.text;\n    }\n};\ndefineFunction({\n    type: \"mathchoice\",\n    names: [\n        \"\\\\mathchoice\"\n    ],\n    props: {\n        numArgs: 4,\n        primitive: true\n    },\n    handler: (_ref, args)=>{\n        var { parser } = _ref;\n        return {\n            type: \"mathchoice\",\n            mode: parser.mode,\n            display: ordargument(args[0]),\n            text: ordargument(args[1]),\n            script: ordargument(args[2]),\n            scriptscript: ordargument(args[3])\n        };\n    },\n    htmlBuilder: (group, options)=>{\n        var body = chooseMathStyle(group, options);\n        var elements = buildExpression$1(body, options, false);\n        return buildCommon.makeFragment(elements);\n    },\n    mathmlBuilder: (group, options)=>{\n        var body = chooseMathStyle(group, options);\n        return buildExpressionRow(body, options);\n    }\n});\nvar assembleSupSub = (base, supGroup, subGroup, options, style, slant, baseShift)=>{\n    base = buildCommon.makeSpan([], [\n        base\n    ]);\n    var subIsSingleCharacter = subGroup && utils.isCharacterBox(subGroup);\n    var sub;\n    var sup; // We manually have to handle the superscripts and subscripts. This,\n    // aside from the kern calculations, is copied from supsub.\n    if (supGroup) {\n        var elem = buildGroup$1(supGroup, options.havingStyle(style.sup()), options);\n        sup = {\n            elem,\n            kern: Math.max(options.fontMetrics().bigOpSpacing1, options.fontMetrics().bigOpSpacing3 - elem.depth)\n        };\n    }\n    if (subGroup) {\n        var _elem = buildGroup$1(subGroup, options.havingStyle(style.sub()), options);\n        sub = {\n            elem: _elem,\n            kern: Math.max(options.fontMetrics().bigOpSpacing2, options.fontMetrics().bigOpSpacing4 - _elem.height)\n        };\n    } // Build the final group as a vlist of the possible subscript, base,\n    // and possible superscript.\n    var finalGroup;\n    if (sup && sub) {\n        var bottom = options.fontMetrics().bigOpSpacing5 + sub.elem.height + sub.elem.depth + sub.kern + base.depth + baseShift;\n        finalGroup = buildCommon.makeVList({\n            positionType: \"bottom\",\n            positionData: bottom,\n            children: [\n                {\n                    type: \"kern\",\n                    size: options.fontMetrics().bigOpSpacing5\n                },\n                {\n                    type: \"elem\",\n                    elem: sub.elem,\n                    marginLeft: makeEm(-slant)\n                },\n                {\n                    type: \"kern\",\n                    size: sub.kern\n                },\n                {\n                    type: \"elem\",\n                    elem: base\n                },\n                {\n                    type: \"kern\",\n                    size: sup.kern\n                },\n                {\n                    type: \"elem\",\n                    elem: sup.elem,\n                    marginLeft: makeEm(slant)\n                },\n                {\n                    type: \"kern\",\n                    size: options.fontMetrics().bigOpSpacing5\n                }\n            ]\n        }, options);\n    } else if (sub) {\n        var top = base.height - baseShift; // Shift the limits by the slant of the symbol. Note\n        // that we are supposed to shift the limits by 1/2 of the slant,\n        // but since we are centering the limits adding a full slant of\n        // margin will shift by 1/2 that.\n        finalGroup = buildCommon.makeVList({\n            positionType: \"top\",\n            positionData: top,\n            children: [\n                {\n                    type: \"kern\",\n                    size: options.fontMetrics().bigOpSpacing5\n                },\n                {\n                    type: \"elem\",\n                    elem: sub.elem,\n                    marginLeft: makeEm(-slant)\n                },\n                {\n                    type: \"kern\",\n                    size: sub.kern\n                },\n                {\n                    type: \"elem\",\n                    elem: base\n                }\n            ]\n        }, options);\n    } else if (sup) {\n        var _bottom = base.depth + baseShift;\n        finalGroup = buildCommon.makeVList({\n            positionType: \"bottom\",\n            positionData: _bottom,\n            children: [\n                {\n                    type: \"elem\",\n                    elem: base\n                },\n                {\n                    type: \"kern\",\n                    size: sup.kern\n                },\n                {\n                    type: \"elem\",\n                    elem: sup.elem,\n                    marginLeft: makeEm(slant)\n                },\n                {\n                    type: \"kern\",\n                    size: options.fontMetrics().bigOpSpacing5\n                }\n            ]\n        }, options);\n    } else {\n        // This case probably shouldn't occur (this would mean the\n        // supsub was sending us a group with no superscript or\n        // subscript) but be safe.\n        return base;\n    }\n    var parts = [\n        finalGroup\n    ];\n    if (sub && slant !== 0 && !subIsSingleCharacter) {\n        // A negative margin-left was applied to the lower limit.\n        // Avoid an overlap by placing a spacer on the left on the group.\n        var spacer = buildCommon.makeSpan([\n            \"mspace\"\n        ], [], options);\n        spacer.style.marginRight = makeEm(slant);\n        parts.unshift(spacer);\n    }\n    return buildCommon.makeSpan([\n        \"mop\",\n        \"op-limits\"\n    ], parts, options);\n};\n// Limits, symbols\n// Most operators have a large successor symbol, but these don't.\nvar noSuccessor = [\n    \"\\\\smallint\"\n]; // NOTE: Unlike most `htmlBuilder`s, this one handles not only \"op\", but also\n// \"supsub\" since some of them (like \\int) can affect super/subscripting.\nvar htmlBuilder$2 = (grp, options)=>{\n    // Operators are handled in the TeXbook pg. 443-444, rule 13(a).\n    var supGroup;\n    var subGroup;\n    var hasLimits = false;\n    var group;\n    if (grp.type === \"supsub\") {\n        // If we have limits, supsub will pass us its group to handle. Pull\n        // out the superscript and subscript and set the group to the op in\n        // its base.\n        supGroup = grp.sup;\n        subGroup = grp.sub;\n        group = assertNodeType(grp.base, \"op\");\n        hasLimits = true;\n    } else {\n        group = assertNodeType(grp, \"op\");\n    }\n    var style = options.style;\n    var large = false;\n    if (style.size === Style$1.DISPLAY.size && group.symbol && !utils.contains(noSuccessor, group.name)) {\n        // Most symbol operators get larger in displaystyle (rule 13)\n        large = true;\n    }\n    var base;\n    if (group.symbol) {\n        // If this is a symbol, create the symbol.\n        var fontName = large ? \"Size2-Regular\" : \"Size1-Regular\";\n        var stash = \"\";\n        if (group.name === \"\\\\oiint\" || group.name === \"\\\\oiiint\") {\n            // No font glyphs yet, so use a glyph w/o the oval.\n            // TODO: When font glyphs are available, delete this code.\n            stash = group.name.slice(1);\n            group.name = stash === \"oiint\" ? \"\\\\iint\" : \"\\\\iiint\";\n        }\n        base = buildCommon.makeSymbol(group.name, fontName, \"math\", options, [\n            \"mop\",\n            \"op-symbol\",\n            large ? \"large-op\" : \"small-op\"\n        ]);\n        if (stash.length > 0) {\n            // We're in \\oiint or \\oiiint. Overlay the oval.\n            // TODO: When font glyphs are available, delete this code.\n            var italic = base.italic;\n            var oval = buildCommon.staticSvg(stash + \"Size\" + (large ? \"2\" : \"1\"), options);\n            base = buildCommon.makeVList({\n                positionType: \"individualShift\",\n                children: [\n                    {\n                        type: \"elem\",\n                        elem: base,\n                        shift: 0\n                    },\n                    {\n                        type: \"elem\",\n                        elem: oval,\n                        shift: large ? 0.08 : 0\n                    }\n                ]\n            }, options);\n            group.name = \"\\\\\" + stash;\n            base.classes.unshift(\"mop\"); // $FlowFixMe\n            base.italic = italic;\n        }\n    } else if (group.body) {\n        // If this is a list, compose that list.\n        var inner = buildExpression$1(group.body, options, true);\n        if (inner.length === 1 && inner[0] instanceof SymbolNode) {\n            base = inner[0];\n            base.classes[0] = \"mop\"; // replace old mclass\n        } else {\n            base = buildCommon.makeSpan([\n                \"mop\"\n            ], inner, options);\n        }\n    } else {\n        // Otherwise, this is a text operator. Build the text from the\n        // operator's name.\n        var output = [];\n        for(var i = 1; i < group.name.length; i++){\n            output.push(buildCommon.mathsym(group.name[i], group.mode, options));\n        }\n        base = buildCommon.makeSpan([\n            \"mop\"\n        ], output, options);\n    } // If content of op is a single symbol, shift it vertically.\n    var baseShift = 0;\n    var slant = 0;\n    if ((base instanceof SymbolNode || group.name === \"\\\\oiint\" || group.name === \"\\\\oiiint\") && !group.suppressBaseShift) {\n        // We suppress the shift of the base of \\overset and \\underset. Otherwise,\n        // shift the symbol so its center lies on the axis (rule 13). It\n        // appears that our fonts have the centers of the symbols already\n        // almost on the axis, so these numbers are very small. Note we\n        // don't actually apply this here, but instead it is used either in\n        // the vlist creation or separately when there are no limits.\n        baseShift = (base.height - base.depth) / 2 - options.fontMetrics().axisHeight; // The slant of the symbol is just its italic correction.\n        // $FlowFixMe\n        slant = base.italic;\n    }\n    if (hasLimits) {\n        return assembleSupSub(base, supGroup, subGroup, options, style, slant, baseShift);\n    } else {\n        if (baseShift) {\n            base.style.position = \"relative\";\n            base.style.top = makeEm(baseShift);\n        }\n        return base;\n    }\n};\nvar mathmlBuilder$1 = (group, options)=>{\n    var node;\n    if (group.symbol) {\n        // This is a symbol. Just add the symbol.\n        node = new MathNode(\"mo\", [\n            makeText(group.name, group.mode)\n        ]);\n        if (utils.contains(noSuccessor, group.name)) {\n            node.setAttribute(\"largeop\", \"false\");\n        }\n    } else if (group.body) {\n        // This is an operator with children. Add them.\n        node = new MathNode(\"mo\", buildExpression(group.body, options));\n    } else {\n        // This is a text operator. Add all of the characters from the\n        // operator's name.\n        node = new MathNode(\"mi\", [\n            new TextNode(group.name.slice(1))\n        ]); // Append an <mo>&ApplyFunction;</mo>.\n        // ref: https://www.w3.org/TR/REC-MathML/chap3_2.html#sec3.2.4\n        var operator = new MathNode(\"mo\", [\n            makeText(\"⁡\", \"text\")\n        ]);\n        if (group.parentIsSupSub) {\n            node = new MathNode(\"mrow\", [\n                node,\n                operator\n            ]);\n        } else {\n            node = newDocumentFragment([\n                node,\n                operator\n            ]);\n        }\n    }\n    return node;\n};\nvar singleCharBigOps = {\n    \"∏\": \"\\\\prod\",\n    \"∐\": \"\\\\coprod\",\n    \"∑\": \"\\\\sum\",\n    \"⋀\": \"\\\\bigwedge\",\n    \"⋁\": \"\\\\bigvee\",\n    \"⋂\": \"\\\\bigcap\",\n    \"⋃\": \"\\\\bigcup\",\n    \"⨀\": \"\\\\bigodot\",\n    \"⨁\": \"\\\\bigoplus\",\n    \"⨂\": \"\\\\bigotimes\",\n    \"⨄\": \"\\\\biguplus\",\n    \"⨆\": \"\\\\bigsqcup\"\n};\ndefineFunction({\n    type: \"op\",\n    names: [\n        \"\\\\coprod\",\n        \"\\\\bigvee\",\n        \"\\\\bigwedge\",\n        \"\\\\biguplus\",\n        \"\\\\bigcap\",\n        \"\\\\bigcup\",\n        \"\\\\intop\",\n        \"\\\\prod\",\n        \"\\\\sum\",\n        \"\\\\bigotimes\",\n        \"\\\\bigoplus\",\n        \"\\\\bigodot\",\n        \"\\\\bigsqcup\",\n        \"\\\\smallint\",\n        \"∏\",\n        \"∐\",\n        \"∑\",\n        \"⋀\",\n        \"⋁\",\n        \"⋂\",\n        \"⋃\",\n        \"⨀\",\n        \"⨁\",\n        \"⨂\",\n        \"⨄\",\n        \"⨆\"\n    ],\n    props: {\n        numArgs: 0\n    },\n    handler: (_ref, args)=>{\n        var { parser, funcName } = _ref;\n        var fName = funcName;\n        if (fName.length === 1) {\n            fName = singleCharBigOps[fName];\n        }\n        return {\n            type: \"op\",\n            mode: parser.mode,\n            limits: true,\n            parentIsSupSub: false,\n            symbol: true,\n            name: fName\n        };\n    },\n    htmlBuilder: htmlBuilder$2,\n    mathmlBuilder: mathmlBuilder$1\n}); // Note: calling defineFunction with a type that's already been defined only\n// works because the same htmlBuilder and mathmlBuilder are being used.\ndefineFunction({\n    type: \"op\",\n    names: [\n        \"\\\\mathop\"\n    ],\n    props: {\n        numArgs: 1,\n        primitive: true\n    },\n    handler: (_ref2, args)=>{\n        var { parser } = _ref2;\n        var body = args[0];\n        return {\n            type: \"op\",\n            mode: parser.mode,\n            limits: false,\n            parentIsSupSub: false,\n            symbol: false,\n            body: ordargument(body)\n        };\n    },\n    htmlBuilder: htmlBuilder$2,\n    mathmlBuilder: mathmlBuilder$1\n}); // There are 2 flags for operators; whether they produce limits in\n// displaystyle, and whether they are symbols and should grow in\n// displaystyle. These four groups cover the four possible choices.\nvar singleCharIntegrals = {\n    \"∫\": \"\\\\int\",\n    \"∬\": \"\\\\iint\",\n    \"∭\": \"\\\\iiint\",\n    \"∮\": \"\\\\oint\",\n    \"∯\": \"\\\\oiint\",\n    \"∰\": \"\\\\oiiint\"\n}; // No limits, not symbols\ndefineFunction({\n    type: \"op\",\n    names: [\n        \"\\\\arcsin\",\n        \"\\\\arccos\",\n        \"\\\\arctan\",\n        \"\\\\arctg\",\n        \"\\\\arcctg\",\n        \"\\\\arg\",\n        \"\\\\ch\",\n        \"\\\\cos\",\n        \"\\\\cosec\",\n        \"\\\\cosh\",\n        \"\\\\cot\",\n        \"\\\\cotg\",\n        \"\\\\coth\",\n        \"\\\\csc\",\n        \"\\\\ctg\",\n        \"\\\\cth\",\n        \"\\\\deg\",\n        \"\\\\dim\",\n        \"\\\\exp\",\n        \"\\\\hom\",\n        \"\\\\ker\",\n        \"\\\\lg\",\n        \"\\\\ln\",\n        \"\\\\log\",\n        \"\\\\sec\",\n        \"\\\\sin\",\n        \"\\\\sinh\",\n        \"\\\\sh\",\n        \"\\\\tan\",\n        \"\\\\tanh\",\n        \"\\\\tg\",\n        \"\\\\th\"\n    ],\n    props: {\n        numArgs: 0\n    },\n    handler (_ref3) {\n        var { parser, funcName } = _ref3;\n        return {\n            type: \"op\",\n            mode: parser.mode,\n            limits: false,\n            parentIsSupSub: false,\n            symbol: false,\n            name: funcName\n        };\n    },\n    htmlBuilder: htmlBuilder$2,\n    mathmlBuilder: mathmlBuilder$1\n}); // Limits, not symbols\ndefineFunction({\n    type: \"op\",\n    names: [\n        \"\\\\det\",\n        \"\\\\gcd\",\n        \"\\\\inf\",\n        \"\\\\lim\",\n        \"\\\\max\",\n        \"\\\\min\",\n        \"\\\\Pr\",\n        \"\\\\sup\"\n    ],\n    props: {\n        numArgs: 0\n    },\n    handler (_ref4) {\n        var { parser, funcName } = _ref4;\n        return {\n            type: \"op\",\n            mode: parser.mode,\n            limits: true,\n            parentIsSupSub: false,\n            symbol: false,\n            name: funcName\n        };\n    },\n    htmlBuilder: htmlBuilder$2,\n    mathmlBuilder: mathmlBuilder$1\n}); // No limits, symbols\ndefineFunction({\n    type: \"op\",\n    names: [\n        \"\\\\int\",\n        \"\\\\iint\",\n        \"\\\\iiint\",\n        \"\\\\oint\",\n        \"\\\\oiint\",\n        \"\\\\oiiint\",\n        \"∫\",\n        \"∬\",\n        \"∭\",\n        \"∮\",\n        \"∯\",\n        \"∰\"\n    ],\n    props: {\n        numArgs: 0\n    },\n    handler (_ref5) {\n        var { parser, funcName } = _ref5;\n        var fName = funcName;\n        if (fName.length === 1) {\n            fName = singleCharIntegrals[fName];\n        }\n        return {\n            type: \"op\",\n            mode: parser.mode,\n            limits: false,\n            parentIsSupSub: false,\n            symbol: true,\n            name: fName\n        };\n    },\n    htmlBuilder: htmlBuilder$2,\n    mathmlBuilder: mathmlBuilder$1\n});\n// NOTE: Unlike most `htmlBuilder`s, this one handles not only\n// \"operatorname\", but also  \"supsub\" since \\operatorname* can\n// affect super/subscripting.\nvar htmlBuilder$1 = (grp, options)=>{\n    // Operators are handled in the TeXbook pg. 443-444, rule 13(a).\n    var supGroup;\n    var subGroup;\n    var hasLimits = false;\n    var group;\n    if (grp.type === \"supsub\") {\n        // If we have limits, supsub will pass us its group to handle. Pull\n        // out the superscript and subscript and set the group to the op in\n        // its base.\n        supGroup = grp.sup;\n        subGroup = grp.sub;\n        group = assertNodeType(grp.base, \"operatorname\");\n        hasLimits = true;\n    } else {\n        group = assertNodeType(grp, \"operatorname\");\n    }\n    var base;\n    if (group.body.length > 0) {\n        var body = group.body.map((child)=>{\n            // $FlowFixMe: Check if the node has a string `text` property.\n            var childText = child.text;\n            if (typeof childText === \"string\") {\n                return {\n                    type: \"textord\",\n                    mode: child.mode,\n                    text: childText\n                };\n            } else {\n                return child;\n            }\n        }); // Consolidate function names into symbol characters.\n        var expression = buildExpression$1(body, options.withFont(\"mathrm\"), true);\n        for(var i = 0; i < expression.length; i++){\n            var child = expression[i];\n            if (child instanceof SymbolNode) {\n                // Per amsopn package,\n                // change minus to hyphen and \\ast to asterisk\n                child.text = child.text.replace(/\\u2212/, \"-\").replace(/\\u2217/, \"*\");\n            }\n        }\n        base = buildCommon.makeSpan([\n            \"mop\"\n        ], expression, options);\n    } else {\n        base = buildCommon.makeSpan([\n            \"mop\"\n        ], [], options);\n    }\n    if (hasLimits) {\n        return assembleSupSub(base, supGroup, subGroup, options, options.style, 0, 0);\n    } else {\n        return base;\n    }\n};\nvar mathmlBuilder = (group, options)=>{\n    // The steps taken here are similar to the html version.\n    var expression = buildExpression(group.body, options.withFont(\"mathrm\")); // Is expression a string or has it something like a fraction?\n    var isAllString = true; // default\n    for(var i = 0; i < expression.length; i++){\n        var node = expression[i];\n        if (node instanceof mathMLTree.SpaceNode) ;\n        else if (node instanceof mathMLTree.MathNode) {\n            switch(node.type){\n                case \"mi\":\n                case \"mn\":\n                case \"ms\":\n                case \"mspace\":\n                case \"mtext\":\n                    break;\n                // Do nothing yet.\n                case \"mo\":\n                    {\n                        var child = node.children[0];\n                        if (node.children.length === 1 && child instanceof mathMLTree.TextNode) {\n                            child.text = child.text.replace(/\\u2212/, \"-\").replace(/\\u2217/, \"*\");\n                        } else {\n                            isAllString = false;\n                        }\n                        break;\n                    }\n                default:\n                    isAllString = false;\n            }\n        } else {\n            isAllString = false;\n        }\n    }\n    if (isAllString) {\n        // Write a single TextNode instead of multiple nested tags.\n        var word = expression.map((node)=>node.toText()).join(\"\");\n        expression = [\n            new mathMLTree.TextNode(word)\n        ];\n    }\n    var identifier = new mathMLTree.MathNode(\"mi\", expression);\n    identifier.setAttribute(\"mathvariant\", \"normal\"); // \\u2061 is the same as &ApplyFunction;\n    // ref: https://www.w3schools.com/charsets/ref_html_entities_a.asp\n    var operator = new mathMLTree.MathNode(\"mo\", [\n        makeText(\"⁡\", \"text\")\n    ]);\n    if (group.parentIsSupSub) {\n        return new mathMLTree.MathNode(\"mrow\", [\n            identifier,\n            operator\n        ]);\n    } else {\n        return mathMLTree.newDocumentFragment([\n            identifier,\n            operator\n        ]);\n    }\n}; // \\operatorname\n// amsopn.dtx: \\mathop{#1\\kern\\z@\\operator@font#3}\\newmcodes@\ndefineFunction({\n    type: \"operatorname\",\n    names: [\n        \"\\\\operatorname@\",\n        \"\\\\operatornamewithlimits\"\n    ],\n    props: {\n        numArgs: 1\n    },\n    handler: (_ref, args)=>{\n        var { parser, funcName } = _ref;\n        var body = args[0];\n        return {\n            type: \"operatorname\",\n            mode: parser.mode,\n            body: ordargument(body),\n            alwaysHandleSupSub: funcName === \"\\\\operatornamewithlimits\",\n            limits: false,\n            parentIsSupSub: false\n        };\n    },\n    htmlBuilder: htmlBuilder$1,\n    mathmlBuilder\n});\ndefineMacro(\"\\\\operatorname\", \"\\\\@ifstar\\\\operatornamewithlimits\\\\operatorname@\");\ndefineFunctionBuilders({\n    type: \"ordgroup\",\n    htmlBuilder (group, options) {\n        if (group.semisimple) {\n            return buildCommon.makeFragment(buildExpression$1(group.body, options, false));\n        }\n        return buildCommon.makeSpan([\n            \"mord\"\n        ], buildExpression$1(group.body, options, true), options);\n    },\n    mathmlBuilder (group, options) {\n        return buildExpressionRow(group.body, options, true);\n    }\n});\ndefineFunction({\n    type: \"overline\",\n    names: [\n        \"\\\\overline\"\n    ],\n    props: {\n        numArgs: 1\n    },\n    handler (_ref, args) {\n        var { parser } = _ref;\n        var body = args[0];\n        return {\n            type: \"overline\",\n            mode: parser.mode,\n            body\n        };\n    },\n    htmlBuilder (group, options) {\n        // Overlines are handled in the TeXbook pg 443, Rule 9.\n        // Build the inner group in the cramped style.\n        var innerGroup = buildGroup$1(group.body, options.havingCrampedStyle()); // Create the line above the body\n        var line = buildCommon.makeLineSpan(\"overline-line\", options); // Generate the vlist, with the appropriate kerns\n        var defaultRuleThickness = options.fontMetrics().defaultRuleThickness;\n        var vlist = buildCommon.makeVList({\n            positionType: \"firstBaseline\",\n            children: [\n                {\n                    type: \"elem\",\n                    elem: innerGroup\n                },\n                {\n                    type: \"kern\",\n                    size: 3 * defaultRuleThickness\n                },\n                {\n                    type: \"elem\",\n                    elem: line\n                },\n                {\n                    type: \"kern\",\n                    size: defaultRuleThickness\n                }\n            ]\n        }, options);\n        return buildCommon.makeSpan([\n            \"mord\",\n            \"overline\"\n        ], [\n            vlist\n        ], options);\n    },\n    mathmlBuilder (group, options) {\n        var operator = new mathMLTree.MathNode(\"mo\", [\n            new mathMLTree.TextNode(\"‾\")\n        ]);\n        operator.setAttribute(\"stretchy\", \"true\");\n        var node = new mathMLTree.MathNode(\"mover\", [\n            buildGroup(group.body, options),\n            operator\n        ]);\n        node.setAttribute(\"accent\", \"true\");\n        return node;\n    }\n});\ndefineFunction({\n    type: \"phantom\",\n    names: [\n        \"\\\\phantom\"\n    ],\n    props: {\n        numArgs: 1,\n        allowedInText: true\n    },\n    handler: (_ref, args)=>{\n        var { parser } = _ref;\n        var body = args[0];\n        return {\n            type: \"phantom\",\n            mode: parser.mode,\n            body: ordargument(body)\n        };\n    },\n    htmlBuilder: (group, options)=>{\n        var elements = buildExpression$1(group.body, options.withPhantom(), false); // \\phantom isn't supposed to affect the elements it contains.\n        // See \"color\" for more details.\n        return buildCommon.makeFragment(elements);\n    },\n    mathmlBuilder: (group, options)=>{\n        var inner = buildExpression(group.body, options);\n        return new mathMLTree.MathNode(\"mphantom\", inner);\n    }\n});\ndefineFunction({\n    type: \"hphantom\",\n    names: [\n        \"\\\\hphantom\"\n    ],\n    props: {\n        numArgs: 1,\n        allowedInText: true\n    },\n    handler: (_ref2, args)=>{\n        var { parser } = _ref2;\n        var body = args[0];\n        return {\n            type: \"hphantom\",\n            mode: parser.mode,\n            body\n        };\n    },\n    htmlBuilder: (group, options)=>{\n        var node = buildCommon.makeSpan([], [\n            buildGroup$1(group.body, options.withPhantom())\n        ]);\n        node.height = 0;\n        node.depth = 0;\n        if (node.children) {\n            for(var i = 0; i < node.children.length; i++){\n                node.children[i].height = 0;\n                node.children[i].depth = 0;\n            }\n        } // See smash for comment re: use of makeVList\n        node = buildCommon.makeVList({\n            positionType: \"firstBaseline\",\n            children: [\n                {\n                    type: \"elem\",\n                    elem: node\n                }\n            ]\n        }, options); // For spacing, TeX treats \\smash as a math group (same spacing as ord).\n        return buildCommon.makeSpan([\n            \"mord\"\n        ], [\n            node\n        ], options);\n    },\n    mathmlBuilder: (group, options)=>{\n        var inner = buildExpression(ordargument(group.body), options);\n        var phantom = new mathMLTree.MathNode(\"mphantom\", inner);\n        var node = new mathMLTree.MathNode(\"mpadded\", [\n            phantom\n        ]);\n        node.setAttribute(\"height\", \"0px\");\n        node.setAttribute(\"depth\", \"0px\");\n        return node;\n    }\n});\ndefineFunction({\n    type: \"vphantom\",\n    names: [\n        \"\\\\vphantom\"\n    ],\n    props: {\n        numArgs: 1,\n        allowedInText: true\n    },\n    handler: (_ref3, args)=>{\n        var { parser } = _ref3;\n        var body = args[0];\n        return {\n            type: \"vphantom\",\n            mode: parser.mode,\n            body\n        };\n    },\n    htmlBuilder: (group, options)=>{\n        var inner = buildCommon.makeSpan([\n            \"inner\"\n        ], [\n            buildGroup$1(group.body, options.withPhantom())\n        ]);\n        var fix = buildCommon.makeSpan([\n            \"fix\"\n        ], []);\n        return buildCommon.makeSpan([\n            \"mord\",\n            \"rlap\"\n        ], [\n            inner,\n            fix\n        ], options);\n    },\n    mathmlBuilder: (group, options)=>{\n        var inner = buildExpression(ordargument(group.body), options);\n        var phantom = new mathMLTree.MathNode(\"mphantom\", inner);\n        var node = new mathMLTree.MathNode(\"mpadded\", [\n            phantom\n        ]);\n        node.setAttribute(\"width\", \"0px\");\n        return node;\n    }\n});\ndefineFunction({\n    type: \"raisebox\",\n    names: [\n        \"\\\\raisebox\"\n    ],\n    props: {\n        numArgs: 2,\n        argTypes: [\n            \"size\",\n            \"hbox\"\n        ],\n        allowedInText: true\n    },\n    handler (_ref, args) {\n        var { parser } = _ref;\n        var amount = assertNodeType(args[0], \"size\").value;\n        var body = args[1];\n        return {\n            type: \"raisebox\",\n            mode: parser.mode,\n            dy: amount,\n            body\n        };\n    },\n    htmlBuilder (group, options) {\n        var body = buildGroup$1(group.body, options);\n        var dy = calculateSize(group.dy, options);\n        return buildCommon.makeVList({\n            positionType: \"shift\",\n            positionData: -dy,\n            children: [\n                {\n                    type: \"elem\",\n                    elem: body\n                }\n            ]\n        }, options);\n    },\n    mathmlBuilder (group, options) {\n        var node = new mathMLTree.MathNode(\"mpadded\", [\n            buildGroup(group.body, options)\n        ]);\n        var dy = group.dy.number + group.dy.unit;\n        node.setAttribute(\"voffset\", dy);\n        return node;\n    }\n});\ndefineFunction({\n    type: \"internal\",\n    names: [\n        \"\\\\relax\"\n    ],\n    props: {\n        numArgs: 0,\n        allowedInText: true\n    },\n    handler (_ref) {\n        var { parser } = _ref;\n        return {\n            type: \"internal\",\n            mode: parser.mode\n        };\n    }\n});\ndefineFunction({\n    type: \"rule\",\n    names: [\n        \"\\\\rule\"\n    ],\n    props: {\n        numArgs: 2,\n        numOptionalArgs: 1,\n        argTypes: [\n            \"size\",\n            \"size\",\n            \"size\"\n        ]\n    },\n    handler (_ref, args, optArgs) {\n        var { parser } = _ref;\n        var shift = optArgs[0];\n        var width = assertNodeType(args[0], \"size\");\n        var height = assertNodeType(args[1], \"size\");\n        return {\n            type: \"rule\",\n            mode: parser.mode,\n            shift: shift && assertNodeType(shift, \"size\").value,\n            width: width.value,\n            height: height.value\n        };\n    },\n    htmlBuilder (group, options) {\n        // Make an empty span for the rule\n        var rule = buildCommon.makeSpan([\n            \"mord\",\n            \"rule\"\n        ], [], options); // Calculate the shift, width, and height of the rule, and account for units\n        var width = calculateSize(group.width, options);\n        var height = calculateSize(group.height, options);\n        var shift = group.shift ? calculateSize(group.shift, options) : 0; // Style the rule to the right size\n        rule.style.borderRightWidth = makeEm(width);\n        rule.style.borderTopWidth = makeEm(height);\n        rule.style.bottom = makeEm(shift); // Record the height and width\n        rule.width = width;\n        rule.height = height + shift;\n        rule.depth = -shift; // Font size is the number large enough that the browser will\n        // reserve at least `absHeight` space above the baseline.\n        // The 1.125 factor was empirically determined\n        rule.maxFontSize = height * 1.125 * options.sizeMultiplier;\n        return rule;\n    },\n    mathmlBuilder (group, options) {\n        var width = calculateSize(group.width, options);\n        var height = calculateSize(group.height, options);\n        var shift = group.shift ? calculateSize(group.shift, options) : 0;\n        var color = options.color && options.getColor() || \"black\";\n        var rule = new mathMLTree.MathNode(\"mspace\");\n        rule.setAttribute(\"mathbackground\", color);\n        rule.setAttribute(\"width\", makeEm(width));\n        rule.setAttribute(\"height\", makeEm(height));\n        var wrapper = new mathMLTree.MathNode(\"mpadded\", [\n            rule\n        ]);\n        if (shift >= 0) {\n            wrapper.setAttribute(\"height\", makeEm(shift));\n        } else {\n            wrapper.setAttribute(\"height\", makeEm(shift));\n            wrapper.setAttribute(\"depth\", makeEm(-shift));\n        }\n        wrapper.setAttribute(\"voffset\", makeEm(shift));\n        return wrapper;\n    }\n});\nfunction sizingGroup(value, options, baseOptions) {\n    var inner = buildExpression$1(value, options, false);\n    var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier; // Add size-resetting classes to the inner list and set maxFontSize\n    // manually. Handle nested size changes.\n    for(var i = 0; i < inner.length; i++){\n        var pos = inner[i].classes.indexOf(\"sizing\");\n        if (pos < 0) {\n            Array.prototype.push.apply(inner[i].classes, options.sizingClasses(baseOptions));\n        } else if (inner[i].classes[pos + 1] === \"reset-size\" + options.size) {\n            // This is a nested size change: e.g., inner[i] is the \"b\" in\n            // `\\Huge a \\small b`. Override the old size (the `reset-` class)\n            // but not the new size.\n            inner[i].classes[pos + 1] = \"reset-size\" + baseOptions.size;\n        }\n        inner[i].height *= multiplier;\n        inner[i].depth *= multiplier;\n    }\n    return buildCommon.makeFragment(inner);\n}\nvar sizeFuncs = [\n    \"\\\\tiny\",\n    \"\\\\sixptsize\",\n    \"\\\\scriptsize\",\n    \"\\\\footnotesize\",\n    \"\\\\small\",\n    \"\\\\normalsize\",\n    \"\\\\large\",\n    \"\\\\Large\",\n    \"\\\\LARGE\",\n    \"\\\\huge\",\n    \"\\\\Huge\"\n];\nvar htmlBuilder = (group, options)=>{\n    // Handle sizing operators like \\Huge. Real TeX doesn't actually allow\n    // these functions inside of math expressions, so we do some special\n    // handling.\n    var newOptions = options.havingSize(group.size);\n    return sizingGroup(group.body, newOptions, options);\n};\ndefineFunction({\n    type: \"sizing\",\n    names: sizeFuncs,\n    props: {\n        numArgs: 0,\n        allowedInText: true\n    },\n    handler: (_ref, args)=>{\n        var { breakOnTokenText, funcName, parser } = _ref;\n        var body = parser.parseExpression(false, breakOnTokenText);\n        return {\n            type: \"sizing\",\n            mode: parser.mode,\n            // Figure out what size to use based on the list of functions above\n            size: sizeFuncs.indexOf(funcName) + 1,\n            body\n        };\n    },\n    htmlBuilder,\n    mathmlBuilder: (group, options)=>{\n        var newOptions = options.havingSize(group.size);\n        var inner = buildExpression(group.body, newOptions);\n        var node = new mathMLTree.MathNode(\"mstyle\", inner); // TODO(emily): This doesn't produce the correct size for nested size\n        // changes, because we don't keep state of what style we're currently\n        // in, so we can't reset the size to normal before changing it.  Now\n        // that we're passing an options parameter we should be able to fix\n        // this.\n        node.setAttribute(\"mathsize\", makeEm(newOptions.sizeMultiplier));\n        return node;\n    }\n});\n// smash, with optional [tb], as in AMS\ndefineFunction({\n    type: \"smash\",\n    names: [\n        \"\\\\smash\"\n    ],\n    props: {\n        numArgs: 1,\n        numOptionalArgs: 1,\n        allowedInText: true\n    },\n    handler: (_ref, args, optArgs)=>{\n        var { parser } = _ref;\n        var smashHeight = false;\n        var smashDepth = false;\n        var tbArg = optArgs[0] && assertNodeType(optArgs[0], \"ordgroup\");\n        if (tbArg) {\n            // Optional [tb] argument is engaged.\n            // ref: amsmath: \\renewcommand{\\smash}[1][tb]{%\n            //               def\\mb@t{\\ht}\\def\\mb@b{\\dp}\\def\\mb@tb{\\ht\\z@\\z@\\dp}%\n            var letter = \"\";\n            for(var i = 0; i < tbArg.body.length; ++i){\n                var node = tbArg.body[i]; // $FlowFixMe: Not every node type has a `text` property.\n                letter = node.text;\n                if (letter === \"t\") {\n                    smashHeight = true;\n                } else if (letter === \"b\") {\n                    smashDepth = true;\n                } else {\n                    smashHeight = false;\n                    smashDepth = false;\n                    break;\n                }\n            }\n        } else {\n            smashHeight = true;\n            smashDepth = true;\n        }\n        var body = args[0];\n        return {\n            type: \"smash\",\n            mode: parser.mode,\n            body,\n            smashHeight,\n            smashDepth\n        };\n    },\n    htmlBuilder: (group, options)=>{\n        var node = buildCommon.makeSpan([], [\n            buildGroup$1(group.body, options)\n        ]);\n        if (!group.smashHeight && !group.smashDepth) {\n            return node;\n        }\n        if (group.smashHeight) {\n            node.height = 0; // In order to influence makeVList, we have to reset the children.\n            if (node.children) {\n                for(var i = 0; i < node.children.length; i++){\n                    node.children[i].height = 0;\n                }\n            }\n        }\n        if (group.smashDepth) {\n            node.depth = 0;\n            if (node.children) {\n                for(var _i = 0; _i < node.children.length; _i++){\n                    node.children[_i].depth = 0;\n                }\n            }\n        } // At this point, we've reset the TeX-like height and depth values.\n        // But the span still has an HTML line height.\n        // makeVList applies \"display: table-cell\", which prevents the browser\n        // from acting on that line height. So we'll call makeVList now.\n        var smashedNode = buildCommon.makeVList({\n            positionType: \"firstBaseline\",\n            children: [\n                {\n                    type: \"elem\",\n                    elem: node\n                }\n            ]\n        }, options); // For spacing, TeX treats \\hphantom as a math group (same spacing as ord).\n        return buildCommon.makeSpan([\n            \"mord\"\n        ], [\n            smashedNode\n        ], options);\n    },\n    mathmlBuilder: (group, options)=>{\n        var node = new mathMLTree.MathNode(\"mpadded\", [\n            buildGroup(group.body, options)\n        ]);\n        if (group.smashHeight) {\n            node.setAttribute(\"height\", \"0px\");\n        }\n        if (group.smashDepth) {\n            node.setAttribute(\"depth\", \"0px\");\n        }\n        return node;\n    }\n});\ndefineFunction({\n    type: \"sqrt\",\n    names: [\n        \"\\\\sqrt\"\n    ],\n    props: {\n        numArgs: 1,\n        numOptionalArgs: 1\n    },\n    handler (_ref, args, optArgs) {\n        var { parser } = _ref;\n        var index = optArgs[0];\n        var body = args[0];\n        return {\n            type: \"sqrt\",\n            mode: parser.mode,\n            body,\n            index\n        };\n    },\n    htmlBuilder (group, options) {\n        // Square roots are handled in the TeXbook pg. 443, Rule 11.\n        // First, we do the same steps as in overline to build the inner group\n        // and line\n        var inner = buildGroup$1(group.body, options.havingCrampedStyle());\n        if (inner.height === 0) {\n            // Render a small surd.\n            inner.height = options.fontMetrics().xHeight;\n        } // Some groups can return document fragments.  Handle those by wrapping\n        // them in a span.\n        inner = buildCommon.wrapFragment(inner, options); // Calculate the minimum size for the \\surd delimiter\n        var metrics = options.fontMetrics();\n        var theta = metrics.defaultRuleThickness;\n        var phi = theta;\n        if (options.style.id < Style$1.TEXT.id) {\n            phi = options.fontMetrics().xHeight;\n        } // Calculate the clearance between the body and line\n        var lineClearance = theta + phi / 4;\n        var minDelimiterHeight = inner.height + inner.depth + lineClearance + theta; // Create a sqrt SVG of the required minimum size\n        var { span: img, ruleWidth, advanceWidth } = delimiter.sqrtImage(minDelimiterHeight, options);\n        var delimDepth = img.height - ruleWidth; // Adjust the clearance based on the delimiter size\n        if (delimDepth > inner.height + inner.depth + lineClearance) {\n            lineClearance = (lineClearance + delimDepth - inner.height - inner.depth) / 2;\n        } // Shift the sqrt image\n        var imgShift = img.height - inner.height - lineClearance - ruleWidth;\n        inner.style.paddingLeft = makeEm(advanceWidth); // Overlay the image and the argument.\n        var body = buildCommon.makeVList({\n            positionType: \"firstBaseline\",\n            children: [\n                {\n                    type: \"elem\",\n                    elem: inner,\n                    wrapperClasses: [\n                        \"svg-align\"\n                    ]\n                },\n                {\n                    type: \"kern\",\n                    size: -(inner.height + imgShift)\n                },\n                {\n                    type: \"elem\",\n                    elem: img\n                },\n                {\n                    type: \"kern\",\n                    size: ruleWidth\n                }\n            ]\n        }, options);\n        if (!group.index) {\n            return buildCommon.makeSpan([\n                \"mord\",\n                \"sqrt\"\n            ], [\n                body\n            ], options);\n        } else {\n            // Handle the optional root index\n            // The index is always in scriptscript style\n            var newOptions = options.havingStyle(Style$1.SCRIPTSCRIPT);\n            var rootm = buildGroup$1(group.index, newOptions, options); // The amount the index is shifted by. This is taken from the TeX\n            // source, in the definition of `\\r@@t`.\n            var toShift = 0.6 * (body.height - body.depth); // Build a VList with the superscript shifted up correctly\n            var rootVList = buildCommon.makeVList({\n                positionType: \"shift\",\n                positionData: -toShift,\n                children: [\n                    {\n                        type: \"elem\",\n                        elem: rootm\n                    }\n                ]\n            }, options); // Add a class surrounding it so we can add on the appropriate\n            // kerning\n            var rootVListWrap = buildCommon.makeSpan([\n                \"root\"\n            ], [\n                rootVList\n            ]);\n            return buildCommon.makeSpan([\n                \"mord\",\n                \"sqrt\"\n            ], [\n                rootVListWrap,\n                body\n            ], options);\n        }\n    },\n    mathmlBuilder (group, options) {\n        var { body, index } = group;\n        return index ? new mathMLTree.MathNode(\"mroot\", [\n            buildGroup(body, options),\n            buildGroup(index, options)\n        ]) : new mathMLTree.MathNode(\"msqrt\", [\n            buildGroup(body, options)\n        ]);\n    }\n});\nvar styleMap = {\n    \"display\": Style$1.DISPLAY,\n    \"text\": Style$1.TEXT,\n    \"script\": Style$1.SCRIPT,\n    \"scriptscript\": Style$1.SCRIPTSCRIPT\n};\ndefineFunction({\n    type: \"styling\",\n    names: [\n        \"\\\\displaystyle\",\n        \"\\\\textstyle\",\n        \"\\\\scriptstyle\",\n        \"\\\\scriptscriptstyle\"\n    ],\n    props: {\n        numArgs: 0,\n        allowedInText: true,\n        primitive: true\n    },\n    handler (_ref, args) {\n        var { breakOnTokenText, funcName, parser } = _ref;\n        // parse out the implicit body\n        var body = parser.parseExpression(true, breakOnTokenText); // TODO: Refactor to avoid duplicating styleMap in multiple places (e.g.\n        // here and in buildHTML and de-dupe the enumeration of all the styles).\n        // $FlowFixMe: The names above exactly match the styles.\n        var style = funcName.slice(1, funcName.length - 5);\n        return {\n            type: \"styling\",\n            mode: parser.mode,\n            // Figure out what style to use by pulling out the style from\n            // the function name\n            style,\n            body\n        };\n    },\n    htmlBuilder (group, options) {\n        // Style changes are handled in the TeXbook on pg. 442, Rule 3.\n        var newStyle = styleMap[group.style];\n        var newOptions = options.havingStyle(newStyle).withFont(\"\");\n        return sizingGroup(group.body, newOptions, options);\n    },\n    mathmlBuilder (group, options) {\n        // Figure out what style we're changing to.\n        var newStyle = styleMap[group.style];\n        var newOptions = options.havingStyle(newStyle);\n        var inner = buildExpression(group.body, newOptions);\n        var node = new mathMLTree.MathNode(\"mstyle\", inner);\n        var styleAttributes = {\n            \"display\": [\n                \"0\",\n                \"true\"\n            ],\n            \"text\": [\n                \"0\",\n                \"false\"\n            ],\n            \"script\": [\n                \"1\",\n                \"false\"\n            ],\n            \"scriptscript\": [\n                \"2\",\n                \"false\"\n            ]\n        };\n        var attr = styleAttributes[group.style];\n        node.setAttribute(\"scriptlevel\", attr[0]);\n        node.setAttribute(\"displaystyle\", attr[1]);\n        return node;\n    }\n});\n/**\n * Sometimes, groups perform special rules when they have superscripts or\n * subscripts attached to them. This function lets the `supsub` group know that\n * Sometimes, groups perform special rules when they have superscripts or\n * its inner element should handle the superscripts and subscripts instead of\n * handling them itself.\n */ var htmlBuilderDelegate = function htmlBuilderDelegate(group, options) {\n    var base = group.base;\n    if (!base) {\n        return null;\n    } else if (base.type === \"op\") {\n        // Operators handle supsubs differently when they have limits\n        // (e.g. `\\displaystyle\\sum_2^3`)\n        var delegate = base.limits && (options.style.size === Style$1.DISPLAY.size || base.alwaysHandleSupSub);\n        return delegate ? htmlBuilder$2 : null;\n    } else if (base.type === \"operatorname\") {\n        var _delegate = base.alwaysHandleSupSub && (options.style.size === Style$1.DISPLAY.size || base.limits);\n        return _delegate ? htmlBuilder$1 : null;\n    } else if (base.type === \"accent\") {\n        return utils.isCharacterBox(base.base) ? htmlBuilder$a : null;\n    } else if (base.type === \"horizBrace\") {\n        var isSup = !group.sub;\n        return isSup === base.isOver ? htmlBuilder$3 : null;\n    } else {\n        return null;\n    }\n}; // Super scripts and subscripts, whose precise placement can depend on other\n// functions that precede them.\ndefineFunctionBuilders({\n    type: \"supsub\",\n    htmlBuilder (group, options) {\n        // Superscript and subscripts are handled in the TeXbook on page\n        // 445-446, rules 18(a-f).\n        // Here is where we defer to the inner group if it should handle\n        // superscripts and subscripts itself.\n        var builderDelegate = htmlBuilderDelegate(group, options);\n        if (builderDelegate) {\n            return builderDelegate(group, options);\n        }\n        var { base: valueBase, sup: valueSup, sub: valueSub } = group;\n        var base = buildGroup$1(valueBase, options);\n        var supm;\n        var subm;\n        var metrics = options.fontMetrics(); // Rule 18a\n        var supShift = 0;\n        var subShift = 0;\n        var isCharacterBox = valueBase && utils.isCharacterBox(valueBase);\n        if (valueSup) {\n            var newOptions = options.havingStyle(options.style.sup());\n            supm = buildGroup$1(valueSup, newOptions, options);\n            if (!isCharacterBox) {\n                supShift = base.height - newOptions.fontMetrics().supDrop * newOptions.sizeMultiplier / options.sizeMultiplier;\n            }\n        }\n        if (valueSub) {\n            var _newOptions = options.havingStyle(options.style.sub());\n            subm = buildGroup$1(valueSub, _newOptions, options);\n            if (!isCharacterBox) {\n                subShift = base.depth + _newOptions.fontMetrics().subDrop * _newOptions.sizeMultiplier / options.sizeMultiplier;\n            }\n        } // Rule 18c\n        var minSupShift;\n        if (options.style === Style$1.DISPLAY) {\n            minSupShift = metrics.sup1;\n        } else if (options.style.cramped) {\n            minSupShift = metrics.sup3;\n        } else {\n            minSupShift = metrics.sup2;\n        } // scriptspace is a font-size-independent size, so scale it\n        // appropriately for use as the marginRight.\n        var multiplier = options.sizeMultiplier;\n        var marginRight = makeEm(0.5 / metrics.ptPerEm / multiplier);\n        var marginLeft = null;\n        if (subm) {\n            // Subscripts shouldn't be shifted by the base's italic correction.\n            // Account for that by shifting the subscript back the appropriate\n            // amount. Note we only do this when the base is a single symbol.\n            var isOiint = group.base && group.base.type === \"op\" && group.base.name && (group.base.name === \"\\\\oiint\" || group.base.name === \"\\\\oiiint\");\n            if (base instanceof SymbolNode || isOiint) {\n                // $FlowFixMe\n                marginLeft = makeEm(-base.italic);\n            }\n        }\n        var supsub;\n        if (supm && subm) {\n            supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);\n            subShift = Math.max(subShift, metrics.sub2);\n            var ruleWidth = metrics.defaultRuleThickness; // Rule 18e\n            var maxWidth = 4 * ruleWidth;\n            if (supShift - supm.depth - (subm.height - subShift) < maxWidth) {\n                subShift = maxWidth - (supShift - supm.depth) + subm.height;\n                var psi = 0.8 * metrics.xHeight - (supShift - supm.depth);\n                if (psi > 0) {\n                    supShift += psi;\n                    subShift -= psi;\n                }\n            }\n            var vlistElem = [\n                {\n                    type: \"elem\",\n                    elem: subm,\n                    shift: subShift,\n                    marginRight,\n                    marginLeft\n                },\n                {\n                    type: \"elem\",\n                    elem: supm,\n                    shift: -supShift,\n                    marginRight\n                }\n            ];\n            supsub = buildCommon.makeVList({\n                positionType: \"individualShift\",\n                children: vlistElem\n            }, options);\n        } else if (subm) {\n            // Rule 18b\n            subShift = Math.max(subShift, metrics.sub1, subm.height - 0.8 * metrics.xHeight);\n            var _vlistElem = [\n                {\n                    type: \"elem\",\n                    elem: subm,\n                    marginLeft,\n                    marginRight\n                }\n            ];\n            supsub = buildCommon.makeVList({\n                positionType: \"shift\",\n                positionData: subShift,\n                children: _vlistElem\n            }, options);\n        } else if (supm) {\n            // Rule 18c, d\n            supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);\n            supsub = buildCommon.makeVList({\n                positionType: \"shift\",\n                positionData: -supShift,\n                children: [\n                    {\n                        type: \"elem\",\n                        elem: supm,\n                        marginRight\n                    }\n                ]\n            }, options);\n        } else {\n            throw new Error(\"supsub must have either sup or sub.\");\n        } // Wrap the supsub vlist in a span.msupsub to reset text-align.\n        var mclass = getTypeOfDomTree(base, \"right\") || \"mord\";\n        return buildCommon.makeSpan([\n            mclass\n        ], [\n            base,\n            buildCommon.makeSpan([\n                \"msupsub\"\n            ], [\n                supsub\n            ])\n        ], options);\n    },\n    mathmlBuilder (group, options) {\n        // Is the inner group a relevant horizonal brace?\n        var isBrace = false;\n        var isOver;\n        var isSup;\n        if (group.base && group.base.type === \"horizBrace\") {\n            isSup = !!group.sup;\n            if (isSup === group.base.isOver) {\n                isBrace = true;\n                isOver = group.base.isOver;\n            }\n        }\n        if (group.base && (group.base.type === \"op\" || group.base.type === \"operatorname\")) {\n            group.base.parentIsSupSub = true;\n        }\n        var children = [\n            buildGroup(group.base, options)\n        ];\n        if (group.sub) {\n            children.push(buildGroup(group.sub, options));\n        }\n        if (group.sup) {\n            children.push(buildGroup(group.sup, options));\n        }\n        var nodeType;\n        if (isBrace) {\n            nodeType = isOver ? \"mover\" : \"munder\";\n        } else if (!group.sub) {\n            var base = group.base;\n            if (base && base.type === \"op\" && base.limits && (options.style === Style$1.DISPLAY || base.alwaysHandleSupSub)) {\n                nodeType = \"mover\";\n            } else if (base && base.type === \"operatorname\" && base.alwaysHandleSupSub && (base.limits || options.style === Style$1.DISPLAY)) {\n                nodeType = \"mover\";\n            } else {\n                nodeType = \"msup\";\n            }\n        } else if (!group.sup) {\n            var _base = group.base;\n            if (_base && _base.type === \"op\" && _base.limits && (options.style === Style$1.DISPLAY || _base.alwaysHandleSupSub)) {\n                nodeType = \"munder\";\n            } else if (_base && _base.type === \"operatorname\" && _base.alwaysHandleSupSub && (_base.limits || options.style === Style$1.DISPLAY)) {\n                nodeType = \"munder\";\n            } else {\n                nodeType = \"msub\";\n            }\n        } else {\n            var _base2 = group.base;\n            if (_base2 && _base2.type === \"op\" && _base2.limits && options.style === Style$1.DISPLAY) {\n                nodeType = \"munderover\";\n            } else if (_base2 && _base2.type === \"operatorname\" && _base2.alwaysHandleSupSub && (options.style === Style$1.DISPLAY || _base2.limits)) {\n                nodeType = \"munderover\";\n            } else {\n                nodeType = \"msubsup\";\n            }\n        }\n        return new mathMLTree.MathNode(nodeType, children);\n    }\n});\ndefineFunctionBuilders({\n    type: \"atom\",\n    htmlBuilder (group, options) {\n        return buildCommon.mathsym(group.text, group.mode, options, [\n            \"m\" + group.family\n        ]);\n    },\n    mathmlBuilder (group, options) {\n        var node = new mathMLTree.MathNode(\"mo\", [\n            makeText(group.text, group.mode)\n        ]);\n        if (group.family === \"bin\") {\n            var variant = getVariant(group, options);\n            if (variant === \"bold-italic\") {\n                node.setAttribute(\"mathvariant\", variant);\n            }\n        } else if (group.family === \"punct\") {\n            node.setAttribute(\"separator\", \"true\");\n        } else if (group.family === \"open\" || group.family === \"close\") {\n            // Delims built here should not stretch vertically.\n            // See delimsizing.js for stretchy delims.\n            node.setAttribute(\"stretchy\", \"false\");\n        }\n        return node;\n    }\n});\n// \"mathord\" and \"textord\" ParseNodes created in Parser.js from symbol Groups in\n// src/symbols.js.\nvar defaultVariant = {\n    \"mi\": \"italic\",\n    \"mn\": \"normal\",\n    \"mtext\": \"normal\"\n};\ndefineFunctionBuilders({\n    type: \"mathord\",\n    htmlBuilder (group, options) {\n        return buildCommon.makeOrd(group, options, \"mathord\");\n    },\n    mathmlBuilder (group, options) {\n        var node = new mathMLTree.MathNode(\"mi\", [\n            makeText(group.text, group.mode, options)\n        ]);\n        var variant = getVariant(group, options) || \"italic\";\n        if (variant !== defaultVariant[node.type]) {\n            node.setAttribute(\"mathvariant\", variant);\n        }\n        return node;\n    }\n});\ndefineFunctionBuilders({\n    type: \"textord\",\n    htmlBuilder (group, options) {\n        return buildCommon.makeOrd(group, options, \"textord\");\n    },\n    mathmlBuilder (group, options) {\n        var text = makeText(group.text, group.mode, options);\n        var variant = getVariant(group, options) || \"normal\";\n        var node;\n        if (group.mode === \"text\") {\n            node = new mathMLTree.MathNode(\"mtext\", [\n                text\n            ]);\n        } else if (/[0-9]/.test(group.text)) {\n            node = new mathMLTree.MathNode(\"mn\", [\n                text\n            ]);\n        } else if (group.text === \"\\\\prime\") {\n            node = new mathMLTree.MathNode(\"mo\", [\n                text\n            ]);\n        } else {\n            node = new mathMLTree.MathNode(\"mi\", [\n                text\n            ]);\n        }\n        if (variant !== defaultVariant[node.type]) {\n            node.setAttribute(\"mathvariant\", variant);\n        }\n        return node;\n    }\n});\nvar cssSpace = {\n    \"\\\\nobreak\": \"nobreak\",\n    \"\\\\allowbreak\": \"allowbreak\"\n}; // A lookup table to determine whether a spacing function/symbol should be\n// treated like a regular space character.  If a symbol or command is a key\n// in this table, then it should be a regular space character.  Furthermore,\n// the associated value may have a `className` specifying an extra CSS class\n// to add to the created `span`.\nvar regularSpace = {\n    \" \": {},\n    \"\\\\ \": {},\n    \"~\": {\n        className: \"nobreak\"\n    },\n    \"\\\\space\": {},\n    \"\\\\nobreakspace\": {\n        className: \"nobreak\"\n    }\n}; // ParseNode<\"spacing\"> created in Parser.js from the \"spacing\" symbol Groups in\n// src/symbols.js.\ndefineFunctionBuilders({\n    type: \"spacing\",\n    htmlBuilder (group, options) {\n        if (regularSpace.hasOwnProperty(group.text)) {\n            var className = regularSpace[group.text].className || \"\"; // Spaces are generated by adding an actual space. Each of these\n            // things has an entry in the symbols table, so these will be turned\n            // into appropriate outputs.\n            if (group.mode === \"text\") {\n                var ord = buildCommon.makeOrd(group, options, \"textord\");\n                ord.classes.push(className);\n                return ord;\n            } else {\n                return buildCommon.makeSpan([\n                    \"mspace\",\n                    className\n                ], [\n                    buildCommon.mathsym(group.text, group.mode, options)\n                ], options);\n            }\n        } else if (cssSpace.hasOwnProperty(group.text)) {\n            // Spaces based on just a CSS class.\n            return buildCommon.makeSpan([\n                \"mspace\",\n                cssSpace[group.text]\n            ], [], options);\n        } else {\n            throw new ParseError('Unknown type of space \"' + group.text + '\"');\n        }\n    },\n    mathmlBuilder (group, options) {\n        var node;\n        if (regularSpace.hasOwnProperty(group.text)) {\n            node = new mathMLTree.MathNode(\"mtext\", [\n                new mathMLTree.TextNode(\"\\xa0\")\n            ]);\n        } else if (cssSpace.hasOwnProperty(group.text)) {\n            // CSS-based MathML spaces (\\nobreak, \\allowbreak) are ignored\n            return new mathMLTree.MathNode(\"mspace\");\n        } else {\n            throw new ParseError('Unknown type of space \"' + group.text + '\"');\n        }\n        return node;\n    }\n});\nvar pad = ()=>{\n    var padNode = new mathMLTree.MathNode(\"mtd\", []);\n    padNode.setAttribute(\"width\", \"50%\");\n    return padNode;\n};\ndefineFunctionBuilders({\n    type: \"tag\",\n    mathmlBuilder (group, options) {\n        var table = new mathMLTree.MathNode(\"mtable\", [\n            new mathMLTree.MathNode(\"mtr\", [\n                pad(),\n                new mathMLTree.MathNode(\"mtd\", [\n                    buildExpressionRow(group.body, options)\n                ]),\n                pad(),\n                new mathMLTree.MathNode(\"mtd\", [\n                    buildExpressionRow(group.tag, options)\n                ])\n            ])\n        ]);\n        table.setAttribute(\"width\", \"100%\");\n        return table; // TODO: Left-aligned tags.\n    // Currently, the group and options passed here do not contain\n    // enough info to set tag alignment. `leqno` is in Settings but it is\n    // not passed to Options. On the HTML side, leqno is\n    // set by a CSS class applied in buildTree.js. That would have worked\n    // in MathML if browsers supported <mlabeledtr>. Since they don't, we\n    // need to rewrite the way this function is called.\n    }\n});\nvar textFontFamilies = {\n    \"\\\\text\": undefined,\n    \"\\\\textrm\": \"textrm\",\n    \"\\\\textsf\": \"textsf\",\n    \"\\\\texttt\": \"texttt\",\n    \"\\\\textnormal\": \"textrm\"\n};\nvar textFontWeights = {\n    \"\\\\textbf\": \"textbf\",\n    \"\\\\textmd\": \"textmd\"\n};\nvar textFontShapes = {\n    \"\\\\textit\": \"textit\",\n    \"\\\\textup\": \"textup\"\n};\nvar optionsWithFont = (group, options)=>{\n    var font = group.font; // Checks if the argument is a font family or a font style.\n    if (!font) {\n        return options;\n    } else if (textFontFamilies[font]) {\n        return options.withTextFontFamily(textFontFamilies[font]);\n    } else if (textFontWeights[font]) {\n        return options.withTextFontWeight(textFontWeights[font]);\n    } else {\n        return options.withTextFontShape(textFontShapes[font]);\n    }\n};\ndefineFunction({\n    type: \"text\",\n    names: [\n        \"\\\\text\",\n        \"\\\\textrm\",\n        \"\\\\textsf\",\n        \"\\\\texttt\",\n        \"\\\\textnormal\",\n        \"\\\\textbf\",\n        \"\\\\textmd\",\n        \"\\\\textit\",\n        \"\\\\textup\"\n    ],\n    props: {\n        numArgs: 1,\n        argTypes: [\n            \"text\"\n        ],\n        allowedInArgument: true,\n        allowedInText: true\n    },\n    handler (_ref, args) {\n        var { parser, funcName } = _ref;\n        var body = args[0];\n        return {\n            type: \"text\",\n            mode: parser.mode,\n            body: ordargument(body),\n            font: funcName\n        };\n    },\n    htmlBuilder (group, options) {\n        var newOptions = optionsWithFont(group, options);\n        var inner = buildExpression$1(group.body, newOptions, true);\n        return buildCommon.makeSpan([\n            \"mord\",\n            \"text\"\n        ], inner, newOptions);\n    },\n    mathmlBuilder (group, options) {\n        var newOptions = optionsWithFont(group, options);\n        return buildExpressionRow(group.body, newOptions);\n    }\n});\ndefineFunction({\n    type: \"underline\",\n    names: [\n        \"\\\\underline\"\n    ],\n    props: {\n        numArgs: 1,\n        allowedInText: true\n    },\n    handler (_ref, args) {\n        var { parser } = _ref;\n        return {\n            type: \"underline\",\n            mode: parser.mode,\n            body: args[0]\n        };\n    },\n    htmlBuilder (group, options) {\n        // Underlines are handled in the TeXbook pg 443, Rule 10.\n        // Build the inner group.\n        var innerGroup = buildGroup$1(group.body, options); // Create the line to go below the body\n        var line = buildCommon.makeLineSpan(\"underline-line\", options); // Generate the vlist, with the appropriate kerns\n        var defaultRuleThickness = options.fontMetrics().defaultRuleThickness;\n        var vlist = buildCommon.makeVList({\n            positionType: \"top\",\n            positionData: innerGroup.height,\n            children: [\n                {\n                    type: \"kern\",\n                    size: defaultRuleThickness\n                },\n                {\n                    type: \"elem\",\n                    elem: line\n                },\n                {\n                    type: \"kern\",\n                    size: 3 * defaultRuleThickness\n                },\n                {\n                    type: \"elem\",\n                    elem: innerGroup\n                }\n            ]\n        }, options);\n        return buildCommon.makeSpan([\n            \"mord\",\n            \"underline\"\n        ], [\n            vlist\n        ], options);\n    },\n    mathmlBuilder (group, options) {\n        var operator = new mathMLTree.MathNode(\"mo\", [\n            new mathMLTree.TextNode(\"‾\")\n        ]);\n        operator.setAttribute(\"stretchy\", \"true\");\n        var node = new mathMLTree.MathNode(\"munder\", [\n            buildGroup(group.body, options),\n            operator\n        ]);\n        node.setAttribute(\"accentunder\", \"true\");\n        return node;\n    }\n});\ndefineFunction({\n    type: \"vcenter\",\n    names: [\n        \"\\\\vcenter\"\n    ],\n    props: {\n        numArgs: 1,\n        argTypes: [\n            \"original\"\n        ],\n        // In LaTeX, \\vcenter can act only on a box.\n        allowedInText: false\n    },\n    handler (_ref, args) {\n        var { parser } = _ref;\n        return {\n            type: \"vcenter\",\n            mode: parser.mode,\n            body: args[0]\n        };\n    },\n    htmlBuilder (group, options) {\n        var body = buildGroup$1(group.body, options);\n        var axisHeight = options.fontMetrics().axisHeight;\n        var dy = 0.5 * (body.height - axisHeight - (body.depth + axisHeight));\n        return buildCommon.makeVList({\n            positionType: \"shift\",\n            positionData: dy,\n            children: [\n                {\n                    type: \"elem\",\n                    elem: body\n                }\n            ]\n        }, options);\n    },\n    mathmlBuilder (group, options) {\n        // There is no way to do this in MathML.\n        // Write a class as a breadcrumb in case some post-processor wants\n        // to perform a vcenter adjustment.\n        return new mathMLTree.MathNode(\"mpadded\", [\n            buildGroup(group.body, options)\n        ], [\n            \"vcenter\"\n        ]);\n    }\n});\ndefineFunction({\n    type: \"verb\",\n    names: [\n        \"\\\\verb\"\n    ],\n    props: {\n        numArgs: 0,\n        allowedInText: true\n    },\n    handler (context, args, optArgs) {\n        // \\verb and \\verb* are dealt with directly in Parser.js.\n        // If we end up here, it's because of a failure to match the two delimiters\n        // in the regex in Lexer.js.  LaTeX raises the following error when \\verb is\n        // terminated by end of line (or file).\n        throw new ParseError(\"\\\\verb ended by end of line instead of matching delimiter\");\n    },\n    htmlBuilder (group, options) {\n        var text = makeVerb(group);\n        var body = []; // \\verb enters text mode and therefore is sized like \\textstyle\n        var newOptions = options.havingStyle(options.style.text());\n        for(var i = 0; i < text.length; i++){\n            var c = text[i];\n            if (c === \"~\") {\n                c = \"\\\\textasciitilde\";\n            }\n            body.push(buildCommon.makeSymbol(c, \"Typewriter-Regular\", group.mode, newOptions, [\n                \"mord\",\n                \"texttt\"\n            ]));\n        }\n        return buildCommon.makeSpan([\n            \"mord\",\n            \"text\"\n        ].concat(newOptions.sizingClasses(options)), buildCommon.tryCombineChars(body), newOptions);\n    },\n    mathmlBuilder (group, options) {\n        var text = new mathMLTree.TextNode(makeVerb(group));\n        var node = new mathMLTree.MathNode(\"mtext\", [\n            text\n        ]);\n        node.setAttribute(\"mathvariant\", \"monospace\");\n        return node;\n    }\n});\n/**\n * Converts verb group into body string.\n *\n * \\verb* replaces each space with an open box \\u2423\n * \\verb replaces each space with a no-break space \\xA0\n */ var makeVerb = (group)=>group.body.replace(/ /g, group.star ? \"␣\" : \"\\xa0\");\n/** Include this to ensure that all functions are defined. */ var functions = _functions;\n/**\n * The Lexer class handles tokenizing the input in various ways. Since our\n * parser expects us to be able to backtrack, the lexer allows lexing from any\n * given starting point.\n *\n * Its main exposed function is the `lex` function, which takes a position to\n * lex from and a type of token to lex. It defers to the appropriate `_innerLex`\n * function.\n *\n * The various `_innerLex` functions perform the actual lexing of different\n * kinds.\n */ /* The following tokenRegex\n * - matches typical whitespace (but not NBSP etc.) using its first group\n * - does not match any control character \\x00-\\x1f except whitespace\n * - does not match a bare backslash\n * - matches any ASCII character except those just mentioned\n * - does not match the BMP private use area \\uE000-\\uF8FF\n * - does not match bare surrogate code units\n * - matches any BMP character except for those just described\n * - matches any valid Unicode surrogate pair\n * - matches a backslash followed by one or more whitespace characters\n * - matches a backslash followed by one or more letters then whitespace\n * - matches a backslash followed by any BMP character\n * Capturing groups:\n *   [1] regular whitespace\n *   [2] backslash followed by whitespace\n *   [3] anything else, which may include:\n *     [4] left character of \\verb*\n *     [5] left character of \\verb\n *     [6] backslash followed by word, excluding any trailing whitespace\n * Just because the Lexer matches something doesn't mean it's valid input:\n * If there is no matching function or symbol definition, the Parser will\n * still reject the input.\n */ var spaceRegexString = \"[ \\r\\n\t]\";\nvar controlWordRegexString = \"\\\\\\\\[a-zA-Z@]+\";\nvar controlSymbolRegexString = \"\\\\\\\\[^\\uD800-\\uDFFF]\";\nvar controlWordWhitespaceRegexString = \"(\" + controlWordRegexString + \")\" + spaceRegexString + \"*\";\nvar controlSpaceRegexString = \"\\\\\\\\(\\n|[ \\r\t]+\\n?)[ \\r\t]*\";\nvar combiningDiacriticalMarkString = \"[̀-ͯ]\";\nvar combiningDiacriticalMarksEndRegex = new RegExp(combiningDiacriticalMarkString + \"+$\");\nvar tokenRegexString = \"(\" + spaceRegexString + \"+)|\" + (controlSpaceRegexString + \"|\") + // \\whitespace\n\"([!-\\\\[\\\\]-‧‪-퟿豈-￿]\" + (combiningDiacriticalMarkString + \"*\") + // ...plus accents\n\"|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]\" + (combiningDiacriticalMarkString + \"*\") + // ...plus accents\n\"|\\\\\\\\verb\\\\*([^]).*?\\\\4\" + // \\verb*\n\"|\\\\\\\\verb([^*a-zA-Z]).*?\\\\5\" + (\"|\" + controlWordWhitespaceRegexString) + (\"|\" + controlSymbolRegexString + \")\"); // \\\\, \\', etc.\n/** Main Lexer class */ class Lexer {\n    // Category codes. The lexer only supports comment characters (14) for now.\n    // MacroExpander additionally distinguishes active (13).\n    constructor(input, settings){\n        this.input = void 0;\n        this.settings = void 0;\n        this.tokenRegex = void 0;\n        this.catcodes = void 0;\n        // Separate accents from characters\n        this.input = input;\n        this.settings = settings;\n        this.tokenRegex = new RegExp(tokenRegexString, \"g\");\n        this.catcodes = {\n            \"%\": 14,\n            // comment character\n            \"~\": 13 // active character\n        };\n    }\n    setCatcode(char, code) {\n        this.catcodes[char] = code;\n    }\n    /**\n   * This function lexes a single token.\n   */ lex() {\n        var input = this.input;\n        var pos = this.tokenRegex.lastIndex;\n        if (pos === input.length) {\n            return new Token(\"EOF\", new SourceLocation(this, pos, pos));\n        }\n        var match = this.tokenRegex.exec(input);\n        if (match === null || match.index !== pos) {\n            throw new ParseError(\"Unexpected character: '\" + input[pos] + \"'\", new Token(input[pos], new SourceLocation(this, pos, pos + 1)));\n        }\n        var text = match[6] || match[3] || (match[2] ? \"\\\\ \" : \" \");\n        if (this.catcodes[text] === 14) {\n            // comment character\n            var nlIndex = input.indexOf(\"\\n\", this.tokenRegex.lastIndex);\n            if (nlIndex === -1) {\n                this.tokenRegex.lastIndex = input.length; // EOF\n                this.settings.reportNonstrict(\"commentAtEnd\", \"% comment has no terminating newline; LaTeX would \" + \"fail because of commenting the end of math mode (e.g. $)\");\n            } else {\n                this.tokenRegex.lastIndex = nlIndex + 1;\n            }\n            return this.lex();\n        }\n        return new Token(text, new SourceLocation(this, pos, this.tokenRegex.lastIndex));\n    }\n}\n/**\n * A `Namespace` refers to a space of nameable things like macros or lengths,\n * which can be `set` either globally or local to a nested group, using an\n * undo stack similar to how TeX implements this functionality.\n * Performance-wise, `get` and local `set` take constant time, while global\n * `set` takes time proportional to the depth of group nesting.\n */ class Namespace {\n    /**\n   * Both arguments are optional.  The first argument is an object of\n   * built-in mappings which never change.  The second argument is an object\n   * of initial (global-level) mappings, which will constantly change\n   * according to any global/top-level `set`s done.\n   */ constructor(builtins, globalMacros){\n        if (builtins === void 0) {\n            builtins = {};\n        }\n        if (globalMacros === void 0) {\n            globalMacros = {};\n        }\n        this.current = void 0;\n        this.builtins = void 0;\n        this.undefStack = void 0;\n        this.current = globalMacros;\n        this.builtins = builtins;\n        this.undefStack = [];\n    }\n    /**\n   * Start a new nested group, affecting future local `set`s.\n   */ beginGroup() {\n        this.undefStack.push({});\n    }\n    /**\n   * End current nested group, restoring values before the group began.\n   */ endGroup() {\n        if (this.undefStack.length === 0) {\n            throw new ParseError(\"Unbalanced namespace destruction: attempt \" + \"to pop global namespace; please report this as a bug\");\n        }\n        var undefs = this.undefStack.pop();\n        for(var undef in undefs){\n            if (undefs.hasOwnProperty(undef)) {\n                if (undefs[undef] == null) {\n                    delete this.current[undef];\n                } else {\n                    this.current[undef] = undefs[undef];\n                }\n            }\n        }\n    }\n    /**\n   * Ends all currently nested groups (if any), restoring values before the\n   * groups began.  Useful in case of an error in the middle of parsing.\n   */ endGroups() {\n        while(this.undefStack.length > 0){\n            this.endGroup();\n        }\n    }\n    /**\n   * Detect whether `name` has a definition.  Equivalent to\n   * `get(name) != null`.\n   */ has(name) {\n        return this.current.hasOwnProperty(name) || this.builtins.hasOwnProperty(name);\n    }\n    /**\n   * Get the current value of a name, or `undefined` if there is no value.\n   *\n   * Note: Do not use `if (namespace.get(...))` to detect whether a macro\n   * is defined, as the definition may be the empty string which evaluates\n   * to `false` in JavaScript.  Use `if (namespace.get(...) != null)` or\n   * `if (namespace.has(...))`.\n   */ get(name) {\n        if (this.current.hasOwnProperty(name)) {\n            return this.current[name];\n        } else {\n            return this.builtins[name];\n        }\n    }\n    /**\n   * Set the current value of a name, and optionally set it globally too.\n   * Local set() sets the current value and (when appropriate) adds an undo\n   * operation to the undo stack.  Global set() may change the undo\n   * operation at every level, so takes time linear in their number.\n   * A value of undefined means to delete existing definitions.\n   */ set(name, value, global) {\n        if (global === void 0) {\n            global = false;\n        }\n        if (global) {\n            // Global set is equivalent to setting in all groups.  Simulate this\n            // by destroying any undos currently scheduled for this name,\n            // and adding an undo with the *new* value (in case it later gets\n            // locally reset within this environment).\n            for(var i = 0; i < this.undefStack.length; i++){\n                delete this.undefStack[i][name];\n            }\n            if (this.undefStack.length > 0) {\n                this.undefStack[this.undefStack.length - 1][name] = value;\n            }\n        } else {\n            // Undo this set at end of this group (possibly to `undefined`),\n            // unless an undo is already in place, in which case that older\n            // value is the correct one.\n            var top = this.undefStack[this.undefStack.length - 1];\n            if (top && !top.hasOwnProperty(name)) {\n                top[name] = this.current[name];\n            }\n        }\n        if (value == null) {\n            delete this.current[name];\n        } else {\n            this.current[name] = value;\n        }\n    }\n}\n/**\n * Predefined macros for KaTeX.\n * This can be used to define some commands in terms of others.\n */ var macros = _macros;\n// macro tools\ndefineMacro(\"\\\\noexpand\", function(context) {\n    // The expansion is the token itself; but that token is interpreted\n    // as if its meaning were ‘\\relax’ if it is a control sequence that\n    // would ordinarily be expanded by TeX’s expansion rules.\n    var t = context.popToken();\n    if (context.isExpandable(t.text)) {\n        t.noexpand = true;\n        t.treatAsRelax = true;\n    }\n    return {\n        tokens: [\n            t\n        ],\n        numArgs: 0\n    };\n});\ndefineMacro(\"\\\\expandafter\", function(context) {\n    // TeX first reads the token that comes immediately after \\expandafter,\n    // without expanding it; let’s call this token t. Then TeX reads the\n    // token that comes after t (and possibly more tokens, if that token\n    // has an argument), replacing it by its expansion. Finally TeX puts\n    // t back in front of that expansion.\n    var t = context.popToken();\n    context.expandOnce(true); // expand only an expandable token\n    return {\n        tokens: [\n            t\n        ],\n        numArgs: 0\n    };\n}); // LaTeX's \\@firstoftwo{#1}{#2} expands to #1, skipping #2\n// TeX source: \\long\\def\\@firstoftwo#1#2{#1}\ndefineMacro(\"\\\\@firstoftwo\", function(context) {\n    var args = context.consumeArgs(2);\n    return {\n        tokens: args[0],\n        numArgs: 0\n    };\n}); // LaTeX's \\@secondoftwo{#1}{#2} expands to #2, skipping #1\n// TeX source: \\long\\def\\@secondoftwo#1#2{#2}\ndefineMacro(\"\\\\@secondoftwo\", function(context) {\n    var args = context.consumeArgs(2);\n    return {\n        tokens: args[1],\n        numArgs: 0\n    };\n}); // LaTeX's \\@ifnextchar{#1}{#2}{#3} looks ahead to the next (unexpanded)\n// symbol that isn't a space, consuming any spaces but not consuming the\n// first nonspace character.  If that nonspace character matches #1, then\n// the macro expands to #2; otherwise, it expands to #3.\ndefineMacro(\"\\\\@ifnextchar\", function(context) {\n    var args = context.consumeArgs(3); // symbol, if, else\n    context.consumeSpaces();\n    var nextToken = context.future();\n    if (args[0].length === 1 && args[0][0].text === nextToken.text) {\n        return {\n            tokens: args[1],\n            numArgs: 0\n        };\n    } else {\n        return {\n            tokens: args[2],\n            numArgs: 0\n        };\n    }\n}); // LaTeX's \\@ifstar{#1}{#2} looks ahead to the next (unexpanded) symbol.\n// If it is `*`, then it consumes the symbol, and the macro expands to #1;\n// otherwise, the macro expands to #2 (without consuming the symbol).\n// TeX source: \\def\\@ifstar#1{\\@ifnextchar *{\\@firstoftwo{#1}}}\ndefineMacro(\"\\\\@ifstar\", \"\\\\@ifnextchar *{\\\\@firstoftwo{#1}}\"); // LaTeX's \\TextOrMath{#1}{#2} expands to #1 in text mode, #2 in math mode\ndefineMacro(\"\\\\TextOrMath\", function(context) {\n    var args = context.consumeArgs(2);\n    if (context.mode === \"text\") {\n        return {\n            tokens: args[0],\n            numArgs: 0\n        };\n    } else {\n        return {\n            tokens: args[1],\n            numArgs: 0\n        };\n    }\n}); // Lookup table for parsing numbers in base 8 through 16\nvar digitToNumber = {\n    \"0\": 0,\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3,\n    \"4\": 4,\n    \"5\": 5,\n    \"6\": 6,\n    \"7\": 7,\n    \"8\": 8,\n    \"9\": 9,\n    \"a\": 10,\n    \"A\": 10,\n    \"b\": 11,\n    \"B\": 11,\n    \"c\": 12,\n    \"C\": 12,\n    \"d\": 13,\n    \"D\": 13,\n    \"e\": 14,\n    \"E\": 14,\n    \"f\": 15,\n    \"F\": 15\n}; // TeX \\char makes a literal character (catcode 12) using the following forms:\n// (see The TeXBook, p. 43)\n//   \\char123  -- decimal\n//   \\char'123 -- octal\n//   \\char\"123 -- hex\n//   \\char`x   -- character that can be written (i.e. isn't active)\n//   \\char`\\x  -- character that cannot be written (e.g. %)\n// These all refer to characters from the font, so we turn them into special\n// calls to a function \\@char dealt with in the Parser.\ndefineMacro(\"\\\\char\", function(context) {\n    var token = context.popToken();\n    var base;\n    var number = \"\";\n    if (token.text === \"'\") {\n        base = 8;\n        token = context.popToken();\n    } else if (token.text === '\"') {\n        base = 16;\n        token = context.popToken();\n    } else if (token.text === \"`\") {\n        token = context.popToken();\n        if (token.text[0] === \"\\\\\") {\n            number = token.text.charCodeAt(1);\n        } else if (token.text === \"EOF\") {\n            throw new ParseError(\"\\\\char` missing argument\");\n        } else {\n            number = token.text.charCodeAt(0);\n        }\n    } else {\n        base = 10;\n    }\n    if (base) {\n        // Parse a number in the given base, starting with first `token`.\n        number = digitToNumber[token.text];\n        if (number == null || number >= base) {\n            throw new ParseError(\"Invalid base-\" + base + \" digit \" + token.text);\n        }\n        var digit;\n        while((digit = digitToNumber[context.future().text]) != null && digit < base){\n            number *= base;\n            number += digit;\n            context.popToken();\n        }\n    }\n    return \"\\\\@char{\" + number + \"}\";\n}); // \\newcommand{\\macro}[args]{definition}\n// \\renewcommand{\\macro}[args]{definition}\n// TODO: Optional arguments: \\newcommand{\\macro}[args][default]{definition}\nvar newcommand = (context, existsOK, nonexistsOK)=>{\n    var arg = context.consumeArg().tokens;\n    if (arg.length !== 1) {\n        throw new ParseError(\"\\\\newcommand's first argument must be a macro name\");\n    }\n    var name = arg[0].text;\n    var exists = context.isDefined(name);\n    if (exists && !existsOK) {\n        throw new ParseError(\"\\\\newcommand{\" + name + \"} attempting to redefine \" + (name + \"; use \\\\renewcommand\"));\n    }\n    if (!exists && !nonexistsOK) {\n        throw new ParseError(\"\\\\renewcommand{\" + name + \"} when command \" + name + \" \" + \"does not yet exist; use \\\\newcommand\");\n    }\n    var numArgs = 0;\n    arg = context.consumeArg().tokens;\n    if (arg.length === 1 && arg[0].text === \"[\") {\n        var argText = \"\";\n        var token = context.expandNextToken();\n        while(token.text !== \"]\" && token.text !== \"EOF\"){\n            // TODO: Should properly expand arg, e.g., ignore {}s\n            argText += token.text;\n            token = context.expandNextToken();\n        }\n        if (!argText.match(/^\\s*[0-9]+\\s*$/)) {\n            throw new ParseError(\"Invalid number of arguments: \" + argText);\n        }\n        numArgs = parseInt(argText);\n        arg = context.consumeArg().tokens;\n    } // Final arg is the expansion of the macro\n    context.macros.set(name, {\n        tokens: arg,\n        numArgs\n    });\n    return \"\";\n};\ndefineMacro(\"\\\\newcommand\", (context)=>newcommand(context, false, true));\ndefineMacro(\"\\\\renewcommand\", (context)=>newcommand(context, true, false));\ndefineMacro(\"\\\\providecommand\", (context)=>newcommand(context, true, true)); // terminal (console) tools\ndefineMacro(\"\\\\message\", (context)=>{\n    var arg = context.consumeArgs(1)[0]; // eslint-disable-next-line no-console\n    console.log(arg.reverse().map((token)=>token.text).join(\"\"));\n    return \"\";\n});\ndefineMacro(\"\\\\errmessage\", (context)=>{\n    var arg = context.consumeArgs(1)[0]; // eslint-disable-next-line no-console\n    console.error(arg.reverse().map((token)=>token.text).join(\"\"));\n    return \"\";\n});\ndefineMacro(\"\\\\show\", (context)=>{\n    var tok = context.popToken();\n    var name = tok.text; // eslint-disable-next-line no-console\n    console.log(tok, context.macros.get(name), functions[name], symbols.math[name], symbols.text[name]);\n    return \"\";\n}); //////////////////////////////////////////////////////////////////////\n// Grouping\n// \\let\\bgroup={ \\let\\egroup=}\ndefineMacro(\"\\\\bgroup\", \"{\");\ndefineMacro(\"\\\\egroup\", \"}\"); // Symbols from latex.ltx:\n// \\def~{\\nobreakspace{}}\n// \\def\\lq{`}\n// \\def\\rq{'}\n// \\def \\aa {\\r a}\n// \\def \\AA {\\r A}\ndefineMacro(\"~\", \"\\\\nobreakspace\");\ndefineMacro(\"\\\\lq\", \"`\");\ndefineMacro(\"\\\\rq\", \"'\");\ndefineMacro(\"\\\\aa\", \"\\\\r a\");\ndefineMacro(\"\\\\AA\", \"\\\\r A\"); // Copyright (C) and registered (R) symbols. Use raw symbol in MathML.\n// \\DeclareTextCommandDefault{\\textcopyright}{\\textcircled{c}}\n// \\DeclareTextCommandDefault{\\textregistered}{\\textcircled{%\n//      \\check@mathfonts\\fontsize\\sf@size\\z@\\math@fontsfalse\\selectfont R}}\n// \\DeclareRobustCommand{\\copyright}{%\n//    \\ifmmode{\\nfss@text{\\textcopyright}}\\else\\textcopyright\\fi}\ndefineMacro(\"\\\\textcopyright\", \"\\\\html@mathml{\\\\textcircled{c}}{\\\\char`\\xa9}\");\ndefineMacro(\"\\\\copyright\", \"\\\\TextOrMath{\\\\textcopyright}{\\\\text{\\\\textcopyright}}\");\ndefineMacro(\"\\\\textregistered\", \"\\\\html@mathml{\\\\textcircled{\\\\scriptsize R}}{\\\\char`\\xae}\"); // Characters omitted from Unicode range 1D400–1D7FF\ndefineMacro(\"ℬ\", \"\\\\mathscr{B}\"); // script\ndefineMacro(\"ℰ\", \"\\\\mathscr{E}\");\ndefineMacro(\"ℱ\", \"\\\\mathscr{F}\");\ndefineMacro(\"ℋ\", \"\\\\mathscr{H}\");\ndefineMacro(\"ℐ\", \"\\\\mathscr{I}\");\ndefineMacro(\"ℒ\", \"\\\\mathscr{L}\");\ndefineMacro(\"ℳ\", \"\\\\mathscr{M}\");\ndefineMacro(\"ℛ\", \"\\\\mathscr{R}\");\ndefineMacro(\"ℭ\", \"\\\\mathfrak{C}\"); // Fraktur\ndefineMacro(\"ℌ\", \"\\\\mathfrak{H}\");\ndefineMacro(\"ℨ\", \"\\\\mathfrak{Z}\"); // Define \\Bbbk with a macro that works in both HTML and MathML.\ndefineMacro(\"\\\\Bbbk\", \"\\\\Bbb{k}\"); // Unicode middle dot\n// The KaTeX fonts do not contain U+00B7. Instead, \\cdotp displays\n// the dot at U+22C5 and gives it punct spacing.\ndefineMacro(\"\\xb7\", \"\\\\cdotp\"); // \\llap and \\rlap render their contents in text mode\ndefineMacro(\"\\\\llap\", \"\\\\mathllap{\\\\textrm{#1}}\");\ndefineMacro(\"\\\\rlap\", \"\\\\mathrlap{\\\\textrm{#1}}\");\ndefineMacro(\"\\\\clap\", \"\\\\mathclap{\\\\textrm{#1}}\"); // \\mathstrut from the TeXbook, p 360\ndefineMacro(\"\\\\mathstrut\", \"\\\\vphantom{(}\"); // \\underbar from TeXbook p 353\ndefineMacro(\"\\\\underbar\", \"\\\\underline{\\\\text{#1}}\"); // \\not is defined by base/fontmath.ltx via\n// \\DeclareMathSymbol{\\not}{\\mathrel}{symbols}{\"36}\n// It's thus treated like a \\mathrel, but defined by a symbol that has zero\n// width but extends to the right.  We use \\rlap to get that spacing.\n// For MathML we write U+0338 here. buildMathML.js will then do the overlay.\ndefineMacro(\"\\\\not\", '\\\\html@mathml{\\\\mathrel{\\\\mathrlap\\\\@not}}{\\\\char\"338}'); // Negated symbols from base/fontmath.ltx:\n// \\def\\neq{\\not=} \\let\\ne=\\neq\n// \\DeclareRobustCommand\n//   \\notin{\\mathrel{\\m@th\\mathpalette\\c@ncel\\in}}\n// \\def\\c@ncel#1#2{\\m@th\\ooalign{$\\hfil#1\\mkern1mu/\\hfil$\\crcr$#1#2$}}\ndefineMacro(\"\\\\neq\", \"\\\\html@mathml{\\\\mathrel{\\\\not=}}{\\\\mathrel{\\\\char`≠}}\");\ndefineMacro(\"\\\\ne\", \"\\\\neq\");\ndefineMacro(\"≠\", \"\\\\neq\");\ndefineMacro(\"\\\\notin\", \"\\\\html@mathml{\\\\mathrel{{\\\\in}\\\\mathllap{/\\\\mskip1mu}}}\" + \"{\\\\mathrel{\\\\char`∉}}\");\ndefineMacro(\"∉\", \"\\\\notin\"); // Unicode stacked relations\ndefineMacro(\"≘\", \"\\\\html@mathml{\" + \"\\\\mathrel{=\\\\kern{-1em}\\\\raisebox{0.4em}{$\\\\scriptsize\\\\frown$}}\" + \"}{\\\\mathrel{\\\\char`≘}}\");\ndefineMacro(\"≙\", \"\\\\html@mathml{\\\\stackrel{\\\\tiny\\\\wedge}{=}}{\\\\mathrel{\\\\char`≘}}\");\ndefineMacro(\"≚\", \"\\\\html@mathml{\\\\stackrel{\\\\tiny\\\\vee}{=}}{\\\\mathrel{\\\\char`≚}}\");\ndefineMacro(\"≛\", \"\\\\html@mathml{\\\\stackrel{\\\\scriptsize\\\\star}{=}}\" + \"{\\\\mathrel{\\\\char`≛}}\");\ndefineMacro(\"≝\", \"\\\\html@mathml{\\\\stackrel{\\\\tiny\\\\mathrm{def}}{=}}\" + \"{\\\\mathrel{\\\\char`≝}}\");\ndefineMacro(\"≞\", \"\\\\html@mathml{\\\\stackrel{\\\\tiny\\\\mathrm{m}}{=}}\" + \"{\\\\mathrel{\\\\char`≞}}\");\ndefineMacro(\"≟\", \"\\\\html@mathml{\\\\stackrel{\\\\tiny?}{=}}{\\\\mathrel{\\\\char`≟}}\"); // Misc Unicode\ndefineMacro(\"⟂\", \"\\\\perp\");\ndefineMacro(\"‼\", \"\\\\mathclose{!\\\\mkern-0.8mu!}\");\ndefineMacro(\"∌\", \"\\\\notni\");\ndefineMacro(\"⌜\", \"\\\\ulcorner\");\ndefineMacro(\"⌝\", \"\\\\urcorner\");\ndefineMacro(\"⌞\", \"\\\\llcorner\");\ndefineMacro(\"⌟\", \"\\\\lrcorner\");\ndefineMacro(\"\\xa9\", \"\\\\copyright\");\ndefineMacro(\"\\xae\", \"\\\\textregistered\");\ndefineMacro(\"️\", \"\\\\textregistered\"); // The KaTeX fonts have corners at codepoints that don't match Unicode.\n// For MathML purposes, use the Unicode code point.\ndefineMacro(\"\\\\ulcorner\", '\\\\html@mathml{\\\\@ulcorner}{\\\\mathop{\\\\char\"231c}}');\ndefineMacro(\"\\\\urcorner\", '\\\\html@mathml{\\\\@urcorner}{\\\\mathop{\\\\char\"231d}}');\ndefineMacro(\"\\\\llcorner\", '\\\\html@mathml{\\\\@llcorner}{\\\\mathop{\\\\char\"231e}}');\ndefineMacro(\"\\\\lrcorner\", '\\\\html@mathml{\\\\@lrcorner}{\\\\mathop{\\\\char\"231f}}'); //////////////////////////////////////////////////////////////////////\n// LaTeX_2ε\n// \\vdots{\\vbox{\\baselineskip4\\p@  \\lineskiplimit\\z@\n// \\kern6\\p@\\hbox{.}\\hbox{.}\\hbox{.}}}\n// We'll call \\varvdots, which gets a glyph from symbols.js.\n// The zero-width rule gets us an equivalent to the vertical 6pt kern.\ndefineMacro(\"\\\\vdots\", \"\\\\mathord{\\\\varvdots\\\\rule{0pt}{15pt}}\");\ndefineMacro(\"⋮\", \"\\\\vdots\"); //////////////////////////////////////////////////////////////////////\n// amsmath.sty\n// http://mirrors.concertpass.com/tex-archive/macros/latex/required/amsmath/amsmath.pdf\n// Italic Greek capital letters.  AMS defines these with \\DeclareMathSymbol,\n// but they are equivalent to \\mathit{\\Letter}.\ndefineMacro(\"\\\\varGamma\", \"\\\\mathit{\\\\Gamma}\");\ndefineMacro(\"\\\\varDelta\", \"\\\\mathit{\\\\Delta}\");\ndefineMacro(\"\\\\varTheta\", \"\\\\mathit{\\\\Theta}\");\ndefineMacro(\"\\\\varLambda\", \"\\\\mathit{\\\\Lambda}\");\ndefineMacro(\"\\\\varXi\", \"\\\\mathit{\\\\Xi}\");\ndefineMacro(\"\\\\varPi\", \"\\\\mathit{\\\\Pi}\");\ndefineMacro(\"\\\\varSigma\", \"\\\\mathit{\\\\Sigma}\");\ndefineMacro(\"\\\\varUpsilon\", \"\\\\mathit{\\\\Upsilon}\");\ndefineMacro(\"\\\\varPhi\", \"\\\\mathit{\\\\Phi}\");\ndefineMacro(\"\\\\varPsi\", \"\\\\mathit{\\\\Psi}\");\ndefineMacro(\"\\\\varOmega\", \"\\\\mathit{\\\\Omega}\"); //\\newcommand{\\substack}[1]{\\subarray{c}#1\\endsubarray}\ndefineMacro(\"\\\\substack\", \"\\\\begin{subarray}{c}#1\\\\end{subarray}\"); // \\renewcommand{\\colon}{\\nobreak\\mskip2mu\\mathpunct{}\\nonscript\n// \\mkern-\\thinmuskip{:}\\mskip6muplus1mu\\relax}\ndefineMacro(\"\\\\colon\", \"\\\\nobreak\\\\mskip2mu\\\\mathpunct{}\" + \"\\\\mathchoice{\\\\mkern-3mu}{\\\\mkern-3mu}{}{}{:}\\\\mskip6mu\\\\relax\"); // \\newcommand{\\boxed}[1]{\\fbox{\\m@th$\\displaystyle#1$}}\ndefineMacro(\"\\\\boxed\", \"\\\\fbox{$\\\\displaystyle{#1}$}\"); // \\def\\iff{\\DOTSB\\;\\Longleftrightarrow\\;}\n// \\def\\implies{\\DOTSB\\;\\Longrightarrow\\;}\n// \\def\\impliedby{\\DOTSB\\;\\Longleftarrow\\;}\ndefineMacro(\"\\\\iff\", \"\\\\DOTSB\\\\;\\\\Longleftrightarrow\\\\;\");\ndefineMacro(\"\\\\implies\", \"\\\\DOTSB\\\\;\\\\Longrightarrow\\\\;\");\ndefineMacro(\"\\\\impliedby\", \"\\\\DOTSB\\\\;\\\\Longleftarrow\\\\;\"); // AMSMath's automatic \\dots, based on \\mdots@@ macro.\nvar dotsByToken = {\n    \",\": \"\\\\dotsc\",\n    \"\\\\not\": \"\\\\dotsb\",\n    // \\keybin@ checks for the following:\n    \"+\": \"\\\\dotsb\",\n    \"=\": \"\\\\dotsb\",\n    \"<\": \"\\\\dotsb\",\n    \">\": \"\\\\dotsb\",\n    \"-\": \"\\\\dotsb\",\n    \"*\": \"\\\\dotsb\",\n    \":\": \"\\\\dotsb\",\n    // Symbols whose definition starts with \\DOTSB:\n    \"\\\\DOTSB\": \"\\\\dotsb\",\n    \"\\\\coprod\": \"\\\\dotsb\",\n    \"\\\\bigvee\": \"\\\\dotsb\",\n    \"\\\\bigwedge\": \"\\\\dotsb\",\n    \"\\\\biguplus\": \"\\\\dotsb\",\n    \"\\\\bigcap\": \"\\\\dotsb\",\n    \"\\\\bigcup\": \"\\\\dotsb\",\n    \"\\\\prod\": \"\\\\dotsb\",\n    \"\\\\sum\": \"\\\\dotsb\",\n    \"\\\\bigotimes\": \"\\\\dotsb\",\n    \"\\\\bigoplus\": \"\\\\dotsb\",\n    \"\\\\bigodot\": \"\\\\dotsb\",\n    \"\\\\bigsqcup\": \"\\\\dotsb\",\n    \"\\\\And\": \"\\\\dotsb\",\n    \"\\\\longrightarrow\": \"\\\\dotsb\",\n    \"\\\\Longrightarrow\": \"\\\\dotsb\",\n    \"\\\\longleftarrow\": \"\\\\dotsb\",\n    \"\\\\Longleftarrow\": \"\\\\dotsb\",\n    \"\\\\longleftrightarrow\": \"\\\\dotsb\",\n    \"\\\\Longleftrightarrow\": \"\\\\dotsb\",\n    \"\\\\mapsto\": \"\\\\dotsb\",\n    \"\\\\longmapsto\": \"\\\\dotsb\",\n    \"\\\\hookrightarrow\": \"\\\\dotsb\",\n    \"\\\\doteq\": \"\\\\dotsb\",\n    // Symbols whose definition starts with \\mathbin:\n    \"\\\\mathbin\": \"\\\\dotsb\",\n    // Symbols whose definition starts with \\mathrel:\n    \"\\\\mathrel\": \"\\\\dotsb\",\n    \"\\\\relbar\": \"\\\\dotsb\",\n    \"\\\\Relbar\": \"\\\\dotsb\",\n    \"\\\\xrightarrow\": \"\\\\dotsb\",\n    \"\\\\xleftarrow\": \"\\\\dotsb\",\n    // Symbols whose definition starts with \\DOTSI:\n    \"\\\\DOTSI\": \"\\\\dotsi\",\n    \"\\\\int\": \"\\\\dotsi\",\n    \"\\\\oint\": \"\\\\dotsi\",\n    \"\\\\iint\": \"\\\\dotsi\",\n    \"\\\\iiint\": \"\\\\dotsi\",\n    \"\\\\iiiint\": \"\\\\dotsi\",\n    \"\\\\idotsint\": \"\\\\dotsi\",\n    // Symbols whose definition starts with \\DOTSX:\n    \"\\\\DOTSX\": \"\\\\dotsx\"\n};\ndefineMacro(\"\\\\dots\", function(context) {\n    // TODO: If used in text mode, should expand to \\textellipsis.\n    // However, in KaTeX, \\textellipsis and \\ldots behave the same\n    // (in text mode), and it's unlikely we'd see any of the math commands\n    // that affect the behavior of \\dots when in text mode.  So fine for now\n    // (until we support \\ifmmode ... \\else ... \\fi).\n    var thedots = \"\\\\dotso\";\n    var next = context.expandAfterFuture().text;\n    if (next in dotsByToken) {\n        thedots = dotsByToken[next];\n    } else if (next.slice(0, 4) === \"\\\\not\") {\n        thedots = \"\\\\dotsb\";\n    } else if (next in symbols.math) {\n        if (utils.contains([\n            \"bin\",\n            \"rel\"\n        ], symbols.math[next].group)) {\n            thedots = \"\\\\dotsb\";\n        }\n    }\n    return thedots;\n});\nvar spaceAfterDots = {\n    // \\rightdelim@ checks for the following:\n    \")\": true,\n    \"]\": true,\n    \"\\\\rbrack\": true,\n    \"\\\\}\": true,\n    \"\\\\rbrace\": true,\n    \"\\\\rangle\": true,\n    \"\\\\rceil\": true,\n    \"\\\\rfloor\": true,\n    \"\\\\rgroup\": true,\n    \"\\\\rmoustache\": true,\n    \"\\\\right\": true,\n    \"\\\\bigr\": true,\n    \"\\\\biggr\": true,\n    \"\\\\Bigr\": true,\n    \"\\\\Biggr\": true,\n    // \\extra@ also tests for the following:\n    \"$\": true,\n    // \\extrap@ checks for the following:\n    \";\": true,\n    \".\": true,\n    \",\": true\n};\ndefineMacro(\"\\\\dotso\", function(context) {\n    var next = context.future().text;\n    if (next in spaceAfterDots) {\n        return \"\\\\ldots\\\\,\";\n    } else {\n        return \"\\\\ldots\";\n    }\n});\ndefineMacro(\"\\\\dotsc\", function(context) {\n    var next = context.future().text; // \\dotsc uses \\extra@ but not \\extrap@, instead specially checking for\n    // ';' and '.', but doesn't check for ','.\n    if (next in spaceAfterDots && next !== \",\") {\n        return \"\\\\ldots\\\\,\";\n    } else {\n        return \"\\\\ldots\";\n    }\n});\ndefineMacro(\"\\\\cdots\", function(context) {\n    var next = context.future().text;\n    if (next in spaceAfterDots) {\n        return \"\\\\@cdots\\\\,\";\n    } else {\n        return \"\\\\@cdots\";\n    }\n});\ndefineMacro(\"\\\\dotsb\", \"\\\\cdots\");\ndefineMacro(\"\\\\dotsm\", \"\\\\cdots\");\ndefineMacro(\"\\\\dotsi\", \"\\\\!\\\\cdots\"); // amsmath doesn't actually define \\dotsx, but \\dots followed by a macro\n// starting with \\DOTSX implies \\dotso, and then \\extra@ detects this case\n// and forces the added `\\,`.\ndefineMacro(\"\\\\dotsx\", \"\\\\ldots\\\\,\"); // \\let\\DOTSI\\relax\n// \\let\\DOTSB\\relax\n// \\let\\DOTSX\\relax\ndefineMacro(\"\\\\DOTSI\", \"\\\\relax\");\ndefineMacro(\"\\\\DOTSB\", \"\\\\relax\");\ndefineMacro(\"\\\\DOTSX\", \"\\\\relax\"); // Spacing, based on amsmath.sty's override of LaTeX defaults\n// \\DeclareRobustCommand{\\tmspace}[3]{%\n//   \\ifmmode\\mskip#1#2\\else\\kern#1#3\\fi\\relax}\ndefineMacro(\"\\\\tmspace\", \"\\\\TextOrMath{\\\\kern#1#3}{\\\\mskip#1#2}\\\\relax\"); // \\renewcommand{\\,}{\\tmspace+\\thinmuskip{.1667em}}\n// TODO: math mode should use \\thinmuskip\ndefineMacro(\"\\\\,\", \"\\\\tmspace+{3mu}{.1667em}\"); // \\let\\thinspace\\,\ndefineMacro(\"\\\\thinspace\", \"\\\\,\"); // \\def\\>{\\mskip\\medmuskip}\n// \\renewcommand{\\:}{\\tmspace+\\medmuskip{.2222em}}\n// TODO: \\> and math mode of \\: should use \\medmuskip = 4mu plus 2mu minus 4mu\ndefineMacro(\"\\\\>\", \"\\\\mskip{4mu}\");\ndefineMacro(\"\\\\:\", \"\\\\tmspace+{4mu}{.2222em}\"); // \\let\\medspace\\:\ndefineMacro(\"\\\\medspace\", \"\\\\:\"); // \\renewcommand{\\;}{\\tmspace+\\thickmuskip{.2777em}}\n// TODO: math mode should use \\thickmuskip = 5mu plus 5mu\ndefineMacro(\"\\\\;\", \"\\\\tmspace+{5mu}{.2777em}\"); // \\let\\thickspace\\;\ndefineMacro(\"\\\\thickspace\", \"\\\\;\"); // \\renewcommand{\\!}{\\tmspace-\\thinmuskip{.1667em}}\n// TODO: math mode should use \\thinmuskip\ndefineMacro(\"\\\\!\", \"\\\\tmspace-{3mu}{.1667em}\"); // \\let\\negthinspace\\!\ndefineMacro(\"\\\\negthinspace\", \"\\\\!\"); // \\newcommand{\\negmedspace}{\\tmspace-\\medmuskip{.2222em}}\n// TODO: math mode should use \\medmuskip\ndefineMacro(\"\\\\negmedspace\", \"\\\\tmspace-{4mu}{.2222em}\"); // \\newcommand{\\negthickspace}{\\tmspace-\\thickmuskip{.2777em}}\n// TODO: math mode should use \\thickmuskip\ndefineMacro(\"\\\\negthickspace\", \"\\\\tmspace-{5mu}{.277em}\"); // \\def\\enspace{\\kern.5em }\ndefineMacro(\"\\\\enspace\", \"\\\\kern.5em \"); // \\def\\enskip{\\hskip.5em\\relax}\ndefineMacro(\"\\\\enskip\", \"\\\\hskip.5em\\\\relax\"); // \\def\\quad{\\hskip1em\\relax}\ndefineMacro(\"\\\\quad\", \"\\\\hskip1em\\\\relax\"); // \\def\\qquad{\\hskip2em\\relax}\ndefineMacro(\"\\\\qquad\", \"\\\\hskip2em\\\\relax\"); // \\tag@in@display form of \\tag\ndefineMacro(\"\\\\tag\", \"\\\\@ifstar\\\\tag@literal\\\\tag@paren\");\ndefineMacro(\"\\\\tag@paren\", \"\\\\tag@literal{({#1})}\");\ndefineMacro(\"\\\\tag@literal\", (context)=>{\n    if (context.macros.get(\"\\\\df@tag\")) {\n        throw new ParseError(\"Multiple \\\\tag\");\n    }\n    return \"\\\\gdef\\\\df@tag{\\\\text{#1}}\";\n}); // \\renewcommand{\\bmod}{\\nonscript\\mskip-\\medmuskip\\mkern5mu\\mathbin\n//   {\\operator@font mod}\\penalty900\n//   \\mkern5mu\\nonscript\\mskip-\\medmuskip}\n// \\newcommand{\\pod}[1]{\\allowbreak\n//   \\if@display\\mkern18mu\\else\\mkern8mu\\fi(#1)}\n// \\renewcommand{\\pmod}[1]{\\pod{{\\operator@font mod}\\mkern6mu#1}}\n// \\newcommand{\\mod}[1]{\\allowbreak\\if@display\\mkern18mu\n//   \\else\\mkern12mu\\fi{\\operator@font mod}\\,\\,#1}\n// TODO: math mode should use \\medmuskip = 4mu plus 2mu minus 4mu\ndefineMacro(\"\\\\bmod\", \"\\\\mathchoice{\\\\mskip1mu}{\\\\mskip1mu}{\\\\mskip5mu}{\\\\mskip5mu}\" + \"\\\\mathbin{\\\\rm mod}\" + \"\\\\mathchoice{\\\\mskip1mu}{\\\\mskip1mu}{\\\\mskip5mu}{\\\\mskip5mu}\");\ndefineMacro(\"\\\\pod\", \"\\\\allowbreak\" + \"\\\\mathchoice{\\\\mkern18mu}{\\\\mkern8mu}{\\\\mkern8mu}{\\\\mkern8mu}(#1)\");\ndefineMacro(\"\\\\pmod\", \"\\\\pod{{\\\\rm mod}\\\\mkern6mu#1}\");\ndefineMacro(\"\\\\mod\", \"\\\\allowbreak\" + \"\\\\mathchoice{\\\\mkern18mu}{\\\\mkern12mu}{\\\\mkern12mu}{\\\\mkern12mu}\" + \"{\\\\rm mod}\\\\,\\\\,#1\"); //////////////////////////////////////////////////////////////////////\n// LaTeX source2e\n// \\expandafter\\let\\expandafter\\@normalcr\n//     \\csname\\expandafter\\@gobble\\string\\\\ \\endcsname\n// \\DeclareRobustCommand\\newline{\\@normalcr\\relax}\ndefineMacro(\"\\\\newline\", \"\\\\\\\\\\\\relax\"); // \\def\\TeX{T\\kern-.1667em\\lower.5ex\\hbox{E}\\kern-.125emX\\@}\n// TODO: Doesn't normally work in math mode because \\@ fails.  KaTeX doesn't\n// support \\@ yet, so that's omitted, and we add \\text so that the result\n// doesn't look funny in math mode.\ndefineMacro(\"\\\\TeX\", \"\\\\textrm{\\\\html@mathml{\" + \"T\\\\kern-.1667em\\\\raisebox{-.5ex}{E}\\\\kern-.125emX\" + \"}{TeX}}\"); // \\DeclareRobustCommand{\\LaTeX}{L\\kern-.36em%\n//         {\\sbox\\z@ T%\n//          \\vbox to\\ht\\z@{\\hbox{\\check@mathfonts\n//                               \\fontsize\\sf@size\\z@\n//                               \\math@fontsfalse\\selectfont\n//                               A}%\n//                         \\vss}%\n//         }%\n//         \\kern-.15em%\n//         \\TeX}\n// This code aligns the top of the A with the T (from the perspective of TeX's\n// boxes, though visually the A appears to extend above slightly).\n// We compute the corresponding \\raisebox when A is rendered in \\normalsize\n// \\scriptstyle, which has a scale factor of 0.7 (see Options.js).\nvar latexRaiseA = makeEm(fontMetricsData[\"Main-Regular\"][\"T\".charCodeAt(0)][1] - 0.7 * fontMetricsData[\"Main-Regular\"][\"A\".charCodeAt(0)][1]);\ndefineMacro(\"\\\\LaTeX\", \"\\\\textrm{\\\\html@mathml{\" + (\"L\\\\kern-.36em\\\\raisebox{\" + latexRaiseA + \"}{\\\\scriptstyle A}\") + \"\\\\kern-.15em\\\\TeX}{LaTeX}}\"); // New KaTeX logo based on tweaking LaTeX logo\ndefineMacro(\"\\\\KaTeX\", \"\\\\textrm{\\\\html@mathml{\" + (\"K\\\\kern-.17em\\\\raisebox{\" + latexRaiseA + \"}{\\\\scriptstyle A}\") + \"\\\\kern-.15em\\\\TeX}{KaTeX}}\"); // \\DeclareRobustCommand\\hspace{\\@ifstar\\@hspacer\\@hspace}\n// \\def\\@hspace#1{\\hskip  #1\\relax}\n// \\def\\@hspacer#1{\\vrule \\@width\\z@\\nobreak\n//                 \\hskip #1\\hskip \\z@skip}\ndefineMacro(\"\\\\hspace\", \"\\\\@ifstar\\\\@hspacer\\\\@hspace\");\ndefineMacro(\"\\\\@hspace\", \"\\\\hskip #1\\\\relax\");\ndefineMacro(\"\\\\@hspacer\", \"\\\\rule{0pt}{0pt}\\\\hskip #1\\\\relax\"); //////////////////////////////////////////////////////////////////////\n// mathtools.sty\n//\\providecommand\\ordinarycolon{:}\ndefineMacro(\"\\\\ordinarycolon\", \":\"); //\\def\\vcentcolon{\\mathrel{\\mathop\\ordinarycolon}}\n//TODO(edemaine): Not yet centered. Fix via \\raisebox or #726\ndefineMacro(\"\\\\vcentcolon\", \"\\\\mathrel{\\\\mathop\\\\ordinarycolon}\"); // \\providecommand*\\dblcolon{\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon}\ndefineMacro(\"\\\\dblcolon\", \"\\\\html@mathml{\" + \"\\\\mathrel{\\\\vcentcolon\\\\mathrel{\\\\mkern-.9mu}\\\\vcentcolon}}\" + '{\\\\mathop{\\\\char\"2237}}'); // \\providecommand*\\coloneqq{\\vcentcolon\\mathrel{\\mkern-1.2mu}=}\ndefineMacro(\"\\\\coloneqq\", \"\\\\html@mathml{\" + \"\\\\mathrel{\\\\vcentcolon\\\\mathrel{\\\\mkern-1.2mu}=}}\" + '{\\\\mathop{\\\\char\"2254}}'); // ≔\n// \\providecommand*\\Coloneqq{\\dblcolon\\mathrel{\\mkern-1.2mu}=}\ndefineMacro(\"\\\\Coloneqq\", \"\\\\html@mathml{\" + \"\\\\mathrel{\\\\dblcolon\\\\mathrel{\\\\mkern-1.2mu}=}}\" + '{\\\\mathop{\\\\char\"2237\\\\char\"3d}}'); // \\providecommand*\\coloneq{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}\ndefineMacro(\"\\\\coloneq\", \"\\\\html@mathml{\" + \"\\\\mathrel{\\\\vcentcolon\\\\mathrel{\\\\mkern-1.2mu}\\\\mathrel{-}}}\" + '{\\\\mathop{\\\\char\"3a\\\\char\"2212}}'); // \\providecommand*\\Coloneq{\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}\ndefineMacro(\"\\\\Coloneq\", \"\\\\html@mathml{\" + \"\\\\mathrel{\\\\dblcolon\\\\mathrel{\\\\mkern-1.2mu}\\\\mathrel{-}}}\" + '{\\\\mathop{\\\\char\"2237\\\\char\"2212}}'); // \\providecommand*\\eqqcolon{=\\mathrel{\\mkern-1.2mu}\\vcentcolon}\ndefineMacro(\"\\\\eqqcolon\", \"\\\\html@mathml{\" + \"\\\\mathrel{=\\\\mathrel{\\\\mkern-1.2mu}\\\\vcentcolon}}\" + '{\\\\mathop{\\\\char\"2255}}'); // ≕\n// \\providecommand*\\Eqqcolon{=\\mathrel{\\mkern-1.2mu}\\dblcolon}\ndefineMacro(\"\\\\Eqqcolon\", \"\\\\html@mathml{\" + \"\\\\mathrel{=\\\\mathrel{\\\\mkern-1.2mu}\\\\dblcolon}}\" + '{\\\\mathop{\\\\char\"3d\\\\char\"2237}}'); // \\providecommand*\\eqcolon{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon}\ndefineMacro(\"\\\\eqcolon\", \"\\\\html@mathml{\" + \"\\\\mathrel{\\\\mathrel{-}\\\\mathrel{\\\\mkern-1.2mu}\\\\vcentcolon}}\" + '{\\\\mathop{\\\\char\"2239}}'); // \\providecommand*\\Eqcolon{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon}\ndefineMacro(\"\\\\Eqcolon\", \"\\\\html@mathml{\" + \"\\\\mathrel{\\\\mathrel{-}\\\\mathrel{\\\\mkern-1.2mu}\\\\dblcolon}}\" + '{\\\\mathop{\\\\char\"2212\\\\char\"2237}}'); // \\providecommand*\\colonapprox{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx}\ndefineMacro(\"\\\\colonapprox\", \"\\\\html@mathml{\" + \"\\\\mathrel{\\\\vcentcolon\\\\mathrel{\\\\mkern-1.2mu}\\\\approx}}\" + '{\\\\mathop{\\\\char\"3a\\\\char\"2248}}'); // \\providecommand*\\Colonapprox{\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx}\ndefineMacro(\"\\\\Colonapprox\", \"\\\\html@mathml{\" + \"\\\\mathrel{\\\\dblcolon\\\\mathrel{\\\\mkern-1.2mu}\\\\approx}}\" + '{\\\\mathop{\\\\char\"2237\\\\char\"2248}}'); // \\providecommand*\\colonsim{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim}\ndefineMacro(\"\\\\colonsim\", \"\\\\html@mathml{\" + \"\\\\mathrel{\\\\vcentcolon\\\\mathrel{\\\\mkern-1.2mu}\\\\sim}}\" + '{\\\\mathop{\\\\char\"3a\\\\char\"223c}}'); // \\providecommand*\\Colonsim{\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim}\ndefineMacro(\"\\\\Colonsim\", \"\\\\html@mathml{\" + \"\\\\mathrel{\\\\dblcolon\\\\mathrel{\\\\mkern-1.2mu}\\\\sim}}\" + '{\\\\mathop{\\\\char\"2237\\\\char\"223c}}'); // Some Unicode characters are implemented with macros to mathtools functions.\ndefineMacro(\"∷\", \"\\\\dblcolon\"); // ::\ndefineMacro(\"∹\", \"\\\\eqcolon\"); // -:\ndefineMacro(\"≔\", \"\\\\coloneqq\"); // :=\ndefineMacro(\"≕\", \"\\\\eqqcolon\"); // =:\ndefineMacro(\"⩴\", \"\\\\Coloneqq\"); // ::=\n//////////////////////////////////////////////////////////////////////\n// colonequals.sty\n// Alternate names for mathtools's macros:\ndefineMacro(\"\\\\ratio\", \"\\\\vcentcolon\");\ndefineMacro(\"\\\\coloncolon\", \"\\\\dblcolon\");\ndefineMacro(\"\\\\colonequals\", \"\\\\coloneqq\");\ndefineMacro(\"\\\\coloncolonequals\", \"\\\\Coloneqq\");\ndefineMacro(\"\\\\equalscolon\", \"\\\\eqqcolon\");\ndefineMacro(\"\\\\equalscoloncolon\", \"\\\\Eqqcolon\");\ndefineMacro(\"\\\\colonminus\", \"\\\\coloneq\");\ndefineMacro(\"\\\\coloncolonminus\", \"\\\\Coloneq\");\ndefineMacro(\"\\\\minuscolon\", \"\\\\eqcolon\");\ndefineMacro(\"\\\\minuscoloncolon\", \"\\\\Eqcolon\"); // \\colonapprox name is same in mathtools and colonequals.\ndefineMacro(\"\\\\coloncolonapprox\", \"\\\\Colonapprox\"); // \\colonsim name is same in mathtools and colonequals.\ndefineMacro(\"\\\\coloncolonsim\", \"\\\\Colonsim\"); // Additional macros, implemented by analogy with mathtools definitions:\ndefineMacro(\"\\\\simcolon\", \"\\\\mathrel{\\\\sim\\\\mathrel{\\\\mkern-1.2mu}\\\\vcentcolon}\");\ndefineMacro(\"\\\\simcoloncolon\", \"\\\\mathrel{\\\\sim\\\\mathrel{\\\\mkern-1.2mu}\\\\dblcolon}\");\ndefineMacro(\"\\\\approxcolon\", \"\\\\mathrel{\\\\approx\\\\mathrel{\\\\mkern-1.2mu}\\\\vcentcolon}\");\ndefineMacro(\"\\\\approxcoloncolon\", \"\\\\mathrel{\\\\approx\\\\mathrel{\\\\mkern-1.2mu}\\\\dblcolon}\"); // Present in newtxmath, pxfonts and txfonts\ndefineMacro(\"\\\\notni\", \"\\\\html@mathml{\\\\not\\\\ni}{\\\\mathrel{\\\\char`∌}}\");\ndefineMacro(\"\\\\limsup\", \"\\\\DOTSB\\\\operatorname*{lim\\\\,sup}\");\ndefineMacro(\"\\\\liminf\", \"\\\\DOTSB\\\\operatorname*{lim\\\\,inf}\"); //////////////////////////////////////////////////////////////////////\n// From amsopn.sty\ndefineMacro(\"\\\\injlim\", \"\\\\DOTSB\\\\operatorname*{inj\\\\,lim}\");\ndefineMacro(\"\\\\projlim\", \"\\\\DOTSB\\\\operatorname*{proj\\\\,lim}\");\ndefineMacro(\"\\\\varlimsup\", \"\\\\DOTSB\\\\operatorname*{\\\\overline{lim}}\");\ndefineMacro(\"\\\\varliminf\", \"\\\\DOTSB\\\\operatorname*{\\\\underline{lim}}\");\ndefineMacro(\"\\\\varinjlim\", \"\\\\DOTSB\\\\operatorname*{\\\\underrightarrow{lim}}\");\ndefineMacro(\"\\\\varprojlim\", \"\\\\DOTSB\\\\operatorname*{\\\\underleftarrow{lim}}\"); //////////////////////////////////////////////////////////////////////\n// MathML alternates for KaTeX glyphs in the Unicode private area\ndefineMacro(\"\\\\gvertneqq\", \"\\\\html@mathml{\\\\@gvertneqq}{≩}\");\ndefineMacro(\"\\\\lvertneqq\", \"\\\\html@mathml{\\\\@lvertneqq}{≨}\");\ndefineMacro(\"\\\\ngeqq\", \"\\\\html@mathml{\\\\@ngeqq}{≱}\");\ndefineMacro(\"\\\\ngeqslant\", \"\\\\html@mathml{\\\\@ngeqslant}{≱}\");\ndefineMacro(\"\\\\nleqq\", \"\\\\html@mathml{\\\\@nleqq}{≰}\");\ndefineMacro(\"\\\\nleqslant\", \"\\\\html@mathml{\\\\@nleqslant}{≰}\");\ndefineMacro(\"\\\\nshortmid\", \"\\\\html@mathml{\\\\@nshortmid}{∤}\");\ndefineMacro(\"\\\\nshortparallel\", \"\\\\html@mathml{\\\\@nshortparallel}{∦}\");\ndefineMacro(\"\\\\nsubseteqq\", \"\\\\html@mathml{\\\\@nsubseteqq}{⊈}\");\ndefineMacro(\"\\\\nsupseteqq\", \"\\\\html@mathml{\\\\@nsupseteqq}{⊉}\");\ndefineMacro(\"\\\\varsubsetneq\", \"\\\\html@mathml{\\\\@varsubsetneq}{⊊}\");\ndefineMacro(\"\\\\varsubsetneqq\", \"\\\\html@mathml{\\\\@varsubsetneqq}{⫋}\");\ndefineMacro(\"\\\\varsupsetneq\", \"\\\\html@mathml{\\\\@varsupsetneq}{⊋}\");\ndefineMacro(\"\\\\varsupsetneqq\", \"\\\\html@mathml{\\\\@varsupsetneqq}{⫌}\");\ndefineMacro(\"\\\\imath\", \"\\\\html@mathml{\\\\@imath}{ı}\");\ndefineMacro(\"\\\\jmath\", \"\\\\html@mathml{\\\\@jmath}{ȷ}\"); //////////////////////////////////////////////////////////////////////\n// stmaryrd and semantic\n// The stmaryrd and semantic packages render the next four items by calling a\n// glyph. Those glyphs do not exist in the KaTeX fonts. Hence the macros.\ndefineMacro(\"\\\\llbracket\", \"\\\\html@mathml{\" + \"\\\\mathopen{[\\\\mkern-3.2mu[}}\" + \"{\\\\mathopen{\\\\char`⟦}}\");\ndefineMacro(\"\\\\rrbracket\", \"\\\\html@mathml{\" + \"\\\\mathclose{]\\\\mkern-3.2mu]}}\" + \"{\\\\mathclose{\\\\char`⟧}}\");\ndefineMacro(\"⟦\", \"\\\\llbracket\"); // blackboard bold [\ndefineMacro(\"⟧\", \"\\\\rrbracket\"); // blackboard bold ]\ndefineMacro(\"\\\\lBrace\", \"\\\\html@mathml{\" + \"\\\\mathopen{\\\\{\\\\mkern-3.2mu[}}\" + \"{\\\\mathopen{\\\\char`⦃}}\");\ndefineMacro(\"\\\\rBrace\", \"\\\\html@mathml{\" + \"\\\\mathclose{]\\\\mkern-3.2mu\\\\}}}\" + \"{\\\\mathclose{\\\\char`⦄}}\");\ndefineMacro(\"⦃\", \"\\\\lBrace\"); // blackboard bold {\ndefineMacro(\"⦄\", \"\\\\rBrace\"); // blackboard bold }\n// TODO: Create variable sized versions of the last two items. I believe that\n// will require new font glyphs.\n// The stmaryrd function `\\minuso` provides a \"Plimsoll\" symbol that\n// superimposes the characters \\circ and \\mathminus. Used in chemistry.\ndefineMacro(\"\\\\minuso\", \"\\\\mathbin{\\\\html@mathml{\" + \"{\\\\mathrlap{\\\\mathchoice{\\\\kern{0.145em}}{\\\\kern{0.145em}}\" + \"{\\\\kern{0.1015em}}{\\\\kern{0.0725em}}\\\\circ}{-}}}\" + \"{\\\\char`⦵}}\");\ndefineMacro(\"⦵\", \"\\\\minuso\"); //////////////////////////////////////////////////////////////////////\n// texvc.sty\n// The texvc package contains macros available in mediawiki pages.\n// We omit the functions deprecated at\n// https://en.wikipedia.org/wiki/Help:Displaying_a_formula#Deprecated_syntax\n// We also omit texvc's \\O, which conflicts with \\text{\\O}\ndefineMacro(\"\\\\darr\", \"\\\\downarrow\");\ndefineMacro(\"\\\\dArr\", \"\\\\Downarrow\");\ndefineMacro(\"\\\\Darr\", \"\\\\Downarrow\");\ndefineMacro(\"\\\\lang\", \"\\\\langle\");\ndefineMacro(\"\\\\rang\", \"\\\\rangle\");\ndefineMacro(\"\\\\uarr\", \"\\\\uparrow\");\ndefineMacro(\"\\\\uArr\", \"\\\\Uparrow\");\ndefineMacro(\"\\\\Uarr\", \"\\\\Uparrow\");\ndefineMacro(\"\\\\N\", \"\\\\mathbb{N}\");\ndefineMacro(\"\\\\R\", \"\\\\mathbb{R}\");\ndefineMacro(\"\\\\Z\", \"\\\\mathbb{Z}\");\ndefineMacro(\"\\\\alef\", \"\\\\aleph\");\ndefineMacro(\"\\\\alefsym\", \"\\\\aleph\");\ndefineMacro(\"\\\\Alpha\", \"\\\\mathrm{A}\");\ndefineMacro(\"\\\\Beta\", \"\\\\mathrm{B}\");\ndefineMacro(\"\\\\bull\", \"\\\\bullet\");\ndefineMacro(\"\\\\Chi\", \"\\\\mathrm{X}\");\ndefineMacro(\"\\\\clubs\", \"\\\\clubsuit\");\ndefineMacro(\"\\\\cnums\", \"\\\\mathbb{C}\");\ndefineMacro(\"\\\\Complex\", \"\\\\mathbb{C}\");\ndefineMacro(\"\\\\Dagger\", \"\\\\ddagger\");\ndefineMacro(\"\\\\diamonds\", \"\\\\diamondsuit\");\ndefineMacro(\"\\\\empty\", \"\\\\emptyset\");\ndefineMacro(\"\\\\Epsilon\", \"\\\\mathrm{E}\");\ndefineMacro(\"\\\\Eta\", \"\\\\mathrm{H}\");\ndefineMacro(\"\\\\exist\", \"\\\\exists\");\ndefineMacro(\"\\\\harr\", \"\\\\leftrightarrow\");\ndefineMacro(\"\\\\hArr\", \"\\\\Leftrightarrow\");\ndefineMacro(\"\\\\Harr\", \"\\\\Leftrightarrow\");\ndefineMacro(\"\\\\hearts\", \"\\\\heartsuit\");\ndefineMacro(\"\\\\image\", \"\\\\Im\");\ndefineMacro(\"\\\\infin\", \"\\\\infty\");\ndefineMacro(\"\\\\Iota\", \"\\\\mathrm{I}\");\ndefineMacro(\"\\\\isin\", \"\\\\in\");\ndefineMacro(\"\\\\Kappa\", \"\\\\mathrm{K}\");\ndefineMacro(\"\\\\larr\", \"\\\\leftarrow\");\ndefineMacro(\"\\\\lArr\", \"\\\\Leftarrow\");\ndefineMacro(\"\\\\Larr\", \"\\\\Leftarrow\");\ndefineMacro(\"\\\\lrarr\", \"\\\\leftrightarrow\");\ndefineMacro(\"\\\\lrArr\", \"\\\\Leftrightarrow\");\ndefineMacro(\"\\\\Lrarr\", \"\\\\Leftrightarrow\");\ndefineMacro(\"\\\\Mu\", \"\\\\mathrm{M}\");\ndefineMacro(\"\\\\natnums\", \"\\\\mathbb{N}\");\ndefineMacro(\"\\\\Nu\", \"\\\\mathrm{N}\");\ndefineMacro(\"\\\\Omicron\", \"\\\\mathrm{O}\");\ndefineMacro(\"\\\\plusmn\", \"\\\\pm\");\ndefineMacro(\"\\\\rarr\", \"\\\\rightarrow\");\ndefineMacro(\"\\\\rArr\", \"\\\\Rightarrow\");\ndefineMacro(\"\\\\Rarr\", \"\\\\Rightarrow\");\ndefineMacro(\"\\\\real\", \"\\\\Re\");\ndefineMacro(\"\\\\reals\", \"\\\\mathbb{R}\");\ndefineMacro(\"\\\\Reals\", \"\\\\mathbb{R}\");\ndefineMacro(\"\\\\Rho\", \"\\\\mathrm{P}\");\ndefineMacro(\"\\\\sdot\", \"\\\\cdot\");\ndefineMacro(\"\\\\sect\", \"\\\\S\");\ndefineMacro(\"\\\\spades\", \"\\\\spadesuit\");\ndefineMacro(\"\\\\sub\", \"\\\\subset\");\ndefineMacro(\"\\\\sube\", \"\\\\subseteq\");\ndefineMacro(\"\\\\supe\", \"\\\\supseteq\");\ndefineMacro(\"\\\\Tau\", \"\\\\mathrm{T}\");\ndefineMacro(\"\\\\thetasym\", \"\\\\vartheta\"); // TODO: defineMacro(\"\\\\varcoppa\", \"\\\\\\mbox{\\\\coppa}\");\ndefineMacro(\"\\\\weierp\", \"\\\\wp\");\ndefineMacro(\"\\\\Zeta\", \"\\\\mathrm{Z}\"); //////////////////////////////////////////////////////////////////////\n// statmath.sty\n// https://ctan.math.illinois.edu/macros/latex/contrib/statmath/statmath.pdf\ndefineMacro(\"\\\\argmin\", \"\\\\DOTSB\\\\operatorname*{arg\\\\,min}\");\ndefineMacro(\"\\\\argmax\", \"\\\\DOTSB\\\\operatorname*{arg\\\\,max}\");\ndefineMacro(\"\\\\plim\", \"\\\\DOTSB\\\\mathop{\\\\operatorname{plim}}\\\\limits\"); //////////////////////////////////////////////////////////////////////\n// braket.sty\n// http://ctan.math.washington.edu/tex-archive/macros/latex/contrib/braket/braket.pdf\ndefineMacro(\"\\\\bra\", \"\\\\mathinner{\\\\langle{#1}|}\");\ndefineMacro(\"\\\\ket\", \"\\\\mathinner{|{#1}\\\\rangle}\");\ndefineMacro(\"\\\\braket\", \"\\\\mathinner{\\\\langle{#1}\\\\rangle}\");\ndefineMacro(\"\\\\Bra\", \"\\\\left\\\\langle#1\\\\right|\");\ndefineMacro(\"\\\\Ket\", \"\\\\left|#1\\\\right\\\\rangle\");\nvar braketHelper = (one)=>(context)=>{\n        var left = context.consumeArg().tokens;\n        var middle = context.consumeArg().tokens;\n        var middleDouble = context.consumeArg().tokens;\n        var right = context.consumeArg().tokens;\n        var oldMiddle = context.macros.get(\"|\");\n        var oldMiddleDouble = context.macros.get(\"\\\\|\");\n        context.macros.beginGroup();\n        var midMacro = (double)=>(context)=>{\n                if (one) {\n                    // Only modify the first instance of | or \\|\n                    context.macros.set(\"|\", oldMiddle);\n                    if (middleDouble.length) {\n                        context.macros.set(\"\\\\|\", oldMiddleDouble);\n                    }\n                }\n                var doubled = double;\n                if (!double && middleDouble.length) {\n                    // Mimic \\@ifnextchar\n                    var nextToken = context.future();\n                    if (nextToken.text === \"|\") {\n                        context.popToken();\n                        doubled = true;\n                    }\n                }\n                return {\n                    tokens: doubled ? middleDouble : middle,\n                    numArgs: 0\n                };\n            };\n        context.macros.set(\"|\", midMacro(false));\n        if (middleDouble.length) {\n            context.macros.set(\"\\\\|\", midMacro(true));\n        }\n        var arg = context.consumeArg().tokens;\n        var expanded = context.expandTokens([\n            ...right,\n            ...arg,\n            ...left // reversed\n        ]);\n        context.macros.endGroup();\n        return {\n            tokens: expanded.reverse(),\n            numArgs: 0\n        };\n    };\ndefineMacro(\"\\\\bra@ket\", braketHelper(false));\ndefineMacro(\"\\\\bra@set\", braketHelper(true));\ndefineMacro(\"\\\\Braket\", \"\\\\bra@ket{\\\\left\\\\langle}\" + \"{\\\\,\\\\middle\\\\vert\\\\,}{\\\\,\\\\middle\\\\vert\\\\,}{\\\\right\\\\rangle}\");\ndefineMacro(\"\\\\Set\", \"\\\\bra@set{\\\\left\\\\{\\\\:}\" + \"{\\\\;\\\\middle\\\\vert\\\\;}{\\\\;\\\\middle\\\\Vert\\\\;}{\\\\:\\\\right\\\\}}\");\ndefineMacro(\"\\\\set\", \"\\\\bra@set{\\\\{\\\\,}{\\\\mid}{}{\\\\,\\\\}}\"); // has no support for special || or \\|\n//////////////////////////////////////////////////////////////////////\n// actuarialangle.dtx\ndefineMacro(\"\\\\angln\", \"{\\\\angl n}\"); // Custom Khan Academy colors, should be moved to an optional package\ndefineMacro(\"\\\\blue\", \"\\\\textcolor{##6495ed}{#1}\");\ndefineMacro(\"\\\\orange\", \"\\\\textcolor{##ffa500}{#1}\");\ndefineMacro(\"\\\\pink\", \"\\\\textcolor{##ff00af}{#1}\");\ndefineMacro(\"\\\\red\", \"\\\\textcolor{##df0030}{#1}\");\ndefineMacro(\"\\\\green\", \"\\\\textcolor{##28ae7b}{#1}\");\ndefineMacro(\"\\\\gray\", \"\\\\textcolor{gray}{#1}\");\ndefineMacro(\"\\\\purple\", \"\\\\textcolor{##9d38bd}{#1}\");\ndefineMacro(\"\\\\blueA\", \"\\\\textcolor{##ccfaff}{#1}\");\ndefineMacro(\"\\\\blueB\", \"\\\\textcolor{##80f6ff}{#1}\");\ndefineMacro(\"\\\\blueC\", \"\\\\textcolor{##63d9ea}{#1}\");\ndefineMacro(\"\\\\blueD\", \"\\\\textcolor{##11accd}{#1}\");\ndefineMacro(\"\\\\blueE\", \"\\\\textcolor{##0c7f99}{#1}\");\ndefineMacro(\"\\\\tealA\", \"\\\\textcolor{##94fff5}{#1}\");\ndefineMacro(\"\\\\tealB\", \"\\\\textcolor{##26edd5}{#1}\");\ndefineMacro(\"\\\\tealC\", \"\\\\textcolor{##01d1c1}{#1}\");\ndefineMacro(\"\\\\tealD\", \"\\\\textcolor{##01a995}{#1}\");\ndefineMacro(\"\\\\tealE\", \"\\\\textcolor{##208170}{#1}\");\ndefineMacro(\"\\\\greenA\", \"\\\\textcolor{##b6ffb0}{#1}\");\ndefineMacro(\"\\\\greenB\", \"\\\\textcolor{##8af281}{#1}\");\ndefineMacro(\"\\\\greenC\", \"\\\\textcolor{##74cf70}{#1}\");\ndefineMacro(\"\\\\greenD\", \"\\\\textcolor{##1fab54}{#1}\");\ndefineMacro(\"\\\\greenE\", \"\\\\textcolor{##0d923f}{#1}\");\ndefineMacro(\"\\\\goldA\", \"\\\\textcolor{##ffd0a9}{#1}\");\ndefineMacro(\"\\\\goldB\", \"\\\\textcolor{##ffbb71}{#1}\");\ndefineMacro(\"\\\\goldC\", \"\\\\textcolor{##ff9c39}{#1}\");\ndefineMacro(\"\\\\goldD\", \"\\\\textcolor{##e07d10}{#1}\");\ndefineMacro(\"\\\\goldE\", \"\\\\textcolor{##a75a05}{#1}\");\ndefineMacro(\"\\\\redA\", \"\\\\textcolor{##fca9a9}{#1}\");\ndefineMacro(\"\\\\redB\", \"\\\\textcolor{##ff8482}{#1}\");\ndefineMacro(\"\\\\redC\", \"\\\\textcolor{##f9685d}{#1}\");\ndefineMacro(\"\\\\redD\", \"\\\\textcolor{##e84d39}{#1}\");\ndefineMacro(\"\\\\redE\", \"\\\\textcolor{##bc2612}{#1}\");\ndefineMacro(\"\\\\maroonA\", \"\\\\textcolor{##ffbde0}{#1}\");\ndefineMacro(\"\\\\maroonB\", \"\\\\textcolor{##ff92c6}{#1}\");\ndefineMacro(\"\\\\maroonC\", \"\\\\textcolor{##ed5fa6}{#1}\");\ndefineMacro(\"\\\\maroonD\", \"\\\\textcolor{##ca337c}{#1}\");\ndefineMacro(\"\\\\maroonE\", \"\\\\textcolor{##9e034e}{#1}\");\ndefineMacro(\"\\\\purpleA\", \"\\\\textcolor{##ddd7ff}{#1}\");\ndefineMacro(\"\\\\purpleB\", \"\\\\textcolor{##c6b9fc}{#1}\");\ndefineMacro(\"\\\\purpleC\", \"\\\\textcolor{##aa87ff}{#1}\");\ndefineMacro(\"\\\\purpleD\", \"\\\\textcolor{##7854ab}{#1}\");\ndefineMacro(\"\\\\purpleE\", \"\\\\textcolor{##543b78}{#1}\");\ndefineMacro(\"\\\\mintA\", \"\\\\textcolor{##f5f9e8}{#1}\");\ndefineMacro(\"\\\\mintB\", \"\\\\textcolor{##edf2df}{#1}\");\ndefineMacro(\"\\\\mintC\", \"\\\\textcolor{##e0e5cc}{#1}\");\ndefineMacro(\"\\\\grayA\", \"\\\\textcolor{##f6f7f7}{#1}\");\ndefineMacro(\"\\\\grayB\", \"\\\\textcolor{##f0f1f2}{#1}\");\ndefineMacro(\"\\\\grayC\", \"\\\\textcolor{##e3e5e6}{#1}\");\ndefineMacro(\"\\\\grayD\", \"\\\\textcolor{##d6d8da}{#1}\");\ndefineMacro(\"\\\\grayE\", \"\\\\textcolor{##babec2}{#1}\");\ndefineMacro(\"\\\\grayF\", \"\\\\textcolor{##888d93}{#1}\");\ndefineMacro(\"\\\\grayG\", \"\\\\textcolor{##626569}{#1}\");\ndefineMacro(\"\\\\grayH\", \"\\\\textcolor{##3b3e40}{#1}\");\ndefineMacro(\"\\\\grayI\", \"\\\\textcolor{##21242c}{#1}\");\ndefineMacro(\"\\\\kaBlue\", \"\\\\textcolor{##314453}{#1}\");\ndefineMacro(\"\\\\kaGreen\", \"\\\\textcolor{##71B307}{#1}\");\n/**\n * This file contains the “gullet” where macros are expanded\n * until only non-macro tokens remain.\n */ // List of commands that act like macros but aren't defined as a macro,\n// function, or symbol.  Used in `isDefined`.\nvar implicitCommands = {\n    \"^\": true,\n    // Parser.js\n    \"_\": true,\n    // Parser.js\n    \"\\\\limits\": true,\n    // Parser.js\n    \"\\\\nolimits\": true // Parser.js\n};\nclass MacroExpander {\n    constructor(input, settings, mode){\n        this.settings = void 0;\n        this.expansionCount = void 0;\n        this.lexer = void 0;\n        this.macros = void 0;\n        this.stack = void 0;\n        this.mode = void 0;\n        this.settings = settings;\n        this.expansionCount = 0;\n        this.feed(input); // Make new global namespace\n        this.macros = new Namespace(macros, settings.macros);\n        this.mode = mode;\n        this.stack = []; // contains tokens in REVERSE order\n    }\n    /**\n   * Feed a new input string to the same MacroExpander\n   * (with existing macros etc.).\n   */ feed(input) {\n        this.lexer = new Lexer(input, this.settings);\n    }\n    /**\n   * Switches between \"text\" and \"math\" modes.\n   */ switchMode(newMode) {\n        this.mode = newMode;\n    }\n    /**\n   * Start a new group nesting within all namespaces.\n   */ beginGroup() {\n        this.macros.beginGroup();\n    }\n    /**\n   * End current group nesting within all namespaces.\n   */ endGroup() {\n        this.macros.endGroup();\n    }\n    /**\n   * Ends all currently nested groups (if any), restoring values before the\n   * groups began.  Useful in case of an error in the middle of parsing.\n   */ endGroups() {\n        this.macros.endGroups();\n    }\n    /**\n   * Returns the topmost token on the stack, without expanding it.\n   * Similar in behavior to TeX's `\\futurelet`.\n   */ future() {\n        if (this.stack.length === 0) {\n            this.pushToken(this.lexer.lex());\n        }\n        return this.stack[this.stack.length - 1];\n    }\n    /**\n   * Remove and return the next unexpanded token.\n   */ popToken() {\n        this.future(); // ensure non-empty stack\n        return this.stack.pop();\n    }\n    /**\n   * Add a given token to the token stack.  In particular, this get be used\n   * to put back a token returned from one of the other methods.\n   */ pushToken(token) {\n        this.stack.push(token);\n    }\n    /**\n   * Append an array of tokens to the token stack.\n   */ pushTokens(tokens) {\n        this.stack.push(...tokens);\n    }\n    /**\n   * Find an macro argument without expanding tokens and append the array of\n   * tokens to the token stack. Uses Token as a container for the result.\n   */ scanArgument(isOptional) {\n        var start;\n        var end;\n        var tokens;\n        if (isOptional) {\n            this.consumeSpaces(); // \\@ifnextchar gobbles any space following it\n            if (this.future().text !== \"[\") {\n                return null;\n            }\n            start = this.popToken(); // don't include [ in tokens\n            ({ tokens, end } = this.consumeArg([\n                \"]\"\n            ]));\n        } else {\n            ({ tokens, start, end } = this.consumeArg());\n        } // indicate the end of an argument\n        this.pushToken(new Token(\"EOF\", end.loc));\n        this.pushTokens(tokens);\n        return start.range(end, \"\");\n    }\n    /**\n   * Consume all following space tokens, without expansion.\n   */ consumeSpaces() {\n        for(;;){\n            var token = this.future();\n            if (token.text === \" \") {\n                this.stack.pop();\n            } else {\n                break;\n            }\n        }\n    }\n    /**\n   * Consume an argument from the token stream, and return the resulting array\n   * of tokens and start/end token.\n   */ consumeArg(delims) {\n        // The argument for a delimited parameter is the shortest (possibly\n        // empty) sequence of tokens with properly nested {...} groups that is\n        // followed ... by this particular list of non-parameter tokens.\n        // The argument for an undelimited parameter is the next nonblank\n        // token, unless that token is ‘{’, when the argument will be the\n        // entire {...} group that follows.\n        var tokens = [];\n        var isDelimited = delims && delims.length > 0;\n        if (!isDelimited) {\n            // Ignore spaces between arguments.  As the TeXbook says:\n            // \"After you have said ‘\\def\\row#1#2{...}’, you are allowed to\n            //  put spaces between the arguments (e.g., ‘\\row x n’), because\n            //  TeX doesn’t use single spaces as undelimited arguments.\"\n            this.consumeSpaces();\n        }\n        var start = this.future();\n        var tok;\n        var depth = 0;\n        var match = 0;\n        do {\n            tok = this.popToken();\n            tokens.push(tok);\n            if (tok.text === \"{\") {\n                ++depth;\n            } else if (tok.text === \"}\") {\n                --depth;\n                if (depth === -1) {\n                    throw new ParseError(\"Extra }\", tok);\n                }\n            } else if (tok.text === \"EOF\") {\n                throw new ParseError(\"Unexpected end of input in a macro argument\" + \", expected '\" + (delims && isDelimited ? delims[match] : \"}\") + \"'\", tok);\n            }\n            if (delims && isDelimited) {\n                if ((depth === 0 || depth === 1 && delims[match] === \"{\") && tok.text === delims[match]) {\n                    ++match;\n                    if (match === delims.length) {\n                        // don't include delims in tokens\n                        tokens.splice(-match, match);\n                        break;\n                    }\n                } else {\n                    match = 0;\n                }\n            }\n        }while (depth !== 0 || isDelimited); // If the argument found ... has the form ‘{<nested tokens>}’,\n        // ... the outermost braces enclosing the argument are removed\n        if (start.text === \"{\" && tokens[tokens.length - 1].text === \"}\") {\n            tokens.pop();\n            tokens.shift();\n        }\n        tokens.reverse(); // to fit in with stack order\n        return {\n            tokens,\n            start,\n            end: tok\n        };\n    }\n    /**\n   * Consume the specified number of (delimited) arguments from the token\n   * stream and return the resulting array of arguments.\n   */ consumeArgs(numArgs, delimiters) {\n        if (delimiters) {\n            if (delimiters.length !== numArgs + 1) {\n                throw new ParseError(\"The length of delimiters doesn't match the number of args!\");\n            }\n            var delims = delimiters[0];\n            for(var i = 0; i < delims.length; i++){\n                var tok = this.popToken();\n                if (delims[i] !== tok.text) {\n                    throw new ParseError(\"Use of the macro doesn't match its definition\", tok);\n                }\n            }\n        }\n        var args = [];\n        for(var _i = 0; _i < numArgs; _i++){\n            args.push(this.consumeArg(delimiters && delimiters[_i + 1]).tokens);\n        }\n        return args;\n    }\n    /**\n   * Expand the next token only once if possible.\n   *\n   * If the token is expanded, the resulting tokens will be pushed onto\n   * the stack in reverse order, and the number of such tokens will be\n   * returned.  This number might be zero or positive.\n   *\n   * If not, the return value is `false`, and the next token remains at the\n   * top of the stack.\n   *\n   * In either case, the next token will be on the top of the stack,\n   * or the stack will be empty (in case of empty expansion\n   * and no other tokens).\n   *\n   * Used to implement `expandAfterFuture` and `expandNextToken`.\n   *\n   * If expandableOnly, only expandable tokens are expanded and\n   * an undefined control sequence results in an error.\n   */ expandOnce(expandableOnly) {\n        var topToken = this.popToken();\n        var name = topToken.text;\n        var expansion = !topToken.noexpand ? this._getExpansion(name) : null;\n        if (expansion == null || expandableOnly && expansion.unexpandable) {\n            if (expandableOnly && expansion == null && name[0] === \"\\\\\" && !this.isDefined(name)) {\n                throw new ParseError(\"Undefined control sequence: \" + name);\n            }\n            this.pushToken(topToken);\n            return false;\n        }\n        this.expansionCount++;\n        if (this.expansionCount > this.settings.maxExpand) {\n            throw new ParseError(\"Too many expansions: infinite loop or \" + \"need to increase maxExpand setting\");\n        }\n        var tokens = expansion.tokens;\n        var args = this.consumeArgs(expansion.numArgs, expansion.delimiters);\n        if (expansion.numArgs) {\n            // paste arguments in place of the placeholders\n            tokens = tokens.slice(); // make a shallow copy\n            for(var i = tokens.length - 1; i >= 0; --i){\n                var tok = tokens[i];\n                if (tok.text === \"#\") {\n                    if (i === 0) {\n                        throw new ParseError(\"Incomplete placeholder at end of macro body\", tok);\n                    }\n                    tok = tokens[--i]; // next token on stack\n                    if (tok.text === \"#\") {\n                        // ## → #\n                        tokens.splice(i + 1, 1); // drop first #\n                    } else if (/^[1-9]$/.test(tok.text)) {\n                        // replace the placeholder with the indicated argument\n                        tokens.splice(i, 2, ...args[+tok.text - 1]);\n                    } else {\n                        throw new ParseError(\"Not a valid argument number\", tok);\n                    }\n                }\n            }\n        } // Concatenate expansion onto top of stack.\n        this.pushTokens(tokens);\n        return tokens.length;\n    }\n    /**\n   * Expand the next token only once (if possible), and return the resulting\n   * top token on the stack (without removing anything from the stack).\n   * Similar in behavior to TeX's `\\expandafter\\futurelet`.\n   * Equivalent to expandOnce() followed by future().\n   */ expandAfterFuture() {\n        this.expandOnce();\n        return this.future();\n    }\n    /**\n   * Recursively expand first token, then return first non-expandable token.\n   */ expandNextToken() {\n        for(;;){\n            if (this.expandOnce() === false) {\n                // fully expanded\n                var token = this.stack.pop(); // the token after \\noexpand is interpreted as if its meaning\n                // were ‘\\relax’\n                if (token.treatAsRelax) {\n                    token.text = \"\\\\relax\";\n                }\n                return token;\n            }\n        } // Flow unable to figure out that this pathway is impossible.\n        // https://github.com/facebook/flow/issues/4808\n        throw new Error(); // eslint-disable-line no-unreachable\n    }\n    /**\n   * Fully expand the given macro name and return the resulting list of\n   * tokens, or return `undefined` if no such macro is defined.\n   */ expandMacro(name) {\n        return this.macros.has(name) ? this.expandTokens([\n            new Token(name)\n        ]) : undefined;\n    }\n    /**\n   * Fully expand the given token stream and return the resulting list of\n   * tokens.  Note that the input tokens are in reverse order, but the\n   * output tokens are in forward order.\n   */ expandTokens(tokens) {\n        var output = [];\n        var oldStackLength = this.stack.length;\n        this.pushTokens(tokens);\n        while(this.stack.length > oldStackLength){\n            // Expand only expandable tokens\n            if (this.expandOnce(true) === false) {\n                // fully expanded\n                var token = this.stack.pop();\n                if (token.treatAsRelax) {\n                    // the expansion of \\noexpand is the token itself\n                    token.noexpand = false;\n                    token.treatAsRelax = false;\n                }\n                output.push(token);\n            }\n        }\n        return output;\n    }\n    /**\n   * Fully expand the given macro name and return the result as a string,\n   * or return `undefined` if no such macro is defined.\n   */ expandMacroAsText(name) {\n        var tokens = this.expandMacro(name);\n        if (tokens) {\n            return tokens.map((token)=>token.text).join(\"\");\n        } else {\n            return tokens;\n        }\n    }\n    /**\n   * Returns the expanded macro as a reversed array of tokens and a macro\n   * argument count.  Or returns `null` if no such macro.\n   */ _getExpansion(name) {\n        var definition = this.macros.get(name);\n        if (definition == null) {\n            // mainly checking for undefined here\n            return definition;\n        } // If a single character has an associated catcode other than 13\n        // (active character), then don't expand it.\n        if (name.length === 1) {\n            var catcode = this.lexer.catcodes[name];\n            if (catcode != null && catcode !== 13) {\n                return;\n            }\n        }\n        var expansion = typeof definition === \"function\" ? definition(this) : definition;\n        if (typeof expansion === \"string\") {\n            var numArgs = 0;\n            if (expansion.indexOf(\"#\") !== -1) {\n                var stripped = expansion.replace(/##/g, \"\");\n                while(stripped.indexOf(\"#\" + (numArgs + 1)) !== -1){\n                    ++numArgs;\n                }\n            }\n            var bodyLexer = new Lexer(expansion, this.settings);\n            var tokens = [];\n            var tok = bodyLexer.lex();\n            while(tok.text !== \"EOF\"){\n                tokens.push(tok);\n                tok = bodyLexer.lex();\n            }\n            tokens.reverse(); // to fit in with stack using push and pop\n            var expanded = {\n                tokens,\n                numArgs\n            };\n            return expanded;\n        }\n        return expansion;\n    }\n    /**\n   * Determine whether a command is currently \"defined\" (has some\n   * functionality), meaning that it's a macro (in the current group),\n   * a function, a symbol, or one of the special commands listed in\n   * `implicitCommands`.\n   */ isDefined(name) {\n        return this.macros.has(name) || functions.hasOwnProperty(name) || symbols.math.hasOwnProperty(name) || symbols.text.hasOwnProperty(name) || implicitCommands.hasOwnProperty(name);\n    }\n    /**\n   * Determine whether a command is expandable.\n   */ isExpandable(name) {\n        var macro = this.macros.get(name);\n        return macro != null ? typeof macro === \"string\" || typeof macro === \"function\" || !macro.unexpandable : functions.hasOwnProperty(name) && !functions[name].primitive;\n    }\n}\n// Helpers for Parser.js handling of Unicode (sub|super)script characters.\nvar unicodeSubRegEx = /^[₊₋₌₍₎₀₁₂₃₄₅₆₇₈₉ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓᵦᵧᵨᵩᵪ]/;\nvar uSubsAndSups = Object.freeze({\n    \"₊\": \"+\",\n    \"₋\": \"-\",\n    \"₌\": \"=\",\n    \"₍\": \"(\",\n    \"₎\": \")\",\n    \"₀\": \"0\",\n    \"₁\": \"1\",\n    \"₂\": \"2\",\n    \"₃\": \"3\",\n    \"₄\": \"4\",\n    \"₅\": \"5\",\n    \"₆\": \"6\",\n    \"₇\": \"7\",\n    \"₈\": \"8\",\n    \"₉\": \"9\",\n    \"ₐ\": \"a\",\n    \"ₑ\": \"e\",\n    \"ₕ\": \"h\",\n    \"ᵢ\": \"i\",\n    \"ⱼ\": \"j\",\n    \"ₖ\": \"k\",\n    \"ₗ\": \"l\",\n    \"ₘ\": \"m\",\n    \"ₙ\": \"n\",\n    \"ₒ\": \"o\",\n    \"ₚ\": \"p\",\n    \"ᵣ\": \"r\",\n    \"ₛ\": \"s\",\n    \"ₜ\": \"t\",\n    \"ᵤ\": \"u\",\n    \"ᵥ\": \"v\",\n    \"ₓ\": \"x\",\n    \"ᵦ\": \"β\",\n    \"ᵧ\": \"γ\",\n    \"ᵨ\": \"ρ\",\n    \"ᵩ\": \"ϕ\",\n    \"ᵪ\": \"χ\",\n    \"⁺\": \"+\",\n    \"⁻\": \"-\",\n    \"⁼\": \"=\",\n    \"⁽\": \"(\",\n    \"⁾\": \")\",\n    \"⁰\": \"0\",\n    \"\\xb9\": \"1\",\n    \"\\xb2\": \"2\",\n    \"\\xb3\": \"3\",\n    \"⁴\": \"4\",\n    \"⁵\": \"5\",\n    \"⁶\": \"6\",\n    \"⁷\": \"7\",\n    \"⁸\": \"8\",\n    \"⁹\": \"9\",\n    \"ᴬ\": \"A\",\n    \"ᴮ\": \"B\",\n    \"ᴰ\": \"D\",\n    \"ᴱ\": \"E\",\n    \"ᴳ\": \"G\",\n    \"ᴴ\": \"H\",\n    \"ᴵ\": \"I\",\n    \"ᴶ\": \"J\",\n    \"ᴷ\": \"K\",\n    \"ᴸ\": \"L\",\n    \"ᴹ\": \"M\",\n    \"ᴺ\": \"N\",\n    \"ᴼ\": \"O\",\n    \"ᴾ\": \"P\",\n    \"ᴿ\": \"R\",\n    \"ᵀ\": \"T\",\n    \"ᵁ\": \"U\",\n    \"ⱽ\": \"V\",\n    \"ᵂ\": \"W\",\n    \"ᵃ\": \"a\",\n    \"ᵇ\": \"b\",\n    \"ᶜ\": \"c\",\n    \"ᵈ\": \"d\",\n    \"ᵉ\": \"e\",\n    \"ᶠ\": \"f\",\n    \"ᵍ\": \"g\",\n    \"ʰ\": \"h\",\n    \"ⁱ\": \"i\",\n    \"ʲ\": \"j\",\n    \"ᵏ\": \"k\",\n    \"ˡ\": \"l\",\n    \"ᵐ\": \"m\",\n    \"ⁿ\": \"n\",\n    \"ᵒ\": \"o\",\n    \"ᵖ\": \"p\",\n    \"ʳ\": \"r\",\n    \"ˢ\": \"s\",\n    \"ᵗ\": \"t\",\n    \"ᵘ\": \"u\",\n    \"ᵛ\": \"v\",\n    \"ʷ\": \"w\",\n    \"ˣ\": \"x\",\n    \"ʸ\": \"y\",\n    \"ᶻ\": \"z\",\n    \"ᵝ\": \"β\",\n    \"ᵞ\": \"γ\",\n    \"ᵟ\": \"δ\",\n    \"ᵠ\": \"ϕ\",\n    \"ᵡ\": \"χ\",\n    \"ᶿ\": \"θ\"\n});\n/* eslint no-constant-condition:0 */ var unicodeAccents = {\n    \"́\": {\n        \"text\": \"\\\\'\",\n        \"math\": \"\\\\acute\"\n    },\n    \"̀\": {\n        \"text\": \"\\\\`\",\n        \"math\": \"\\\\grave\"\n    },\n    \"̈\": {\n        \"text\": '\\\\\"',\n        \"math\": \"\\\\ddot\"\n    },\n    \"̃\": {\n        \"text\": \"\\\\~\",\n        \"math\": \"\\\\tilde\"\n    },\n    \"̄\": {\n        \"text\": \"\\\\=\",\n        \"math\": \"\\\\bar\"\n    },\n    \"̆\": {\n        \"text\": \"\\\\u\",\n        \"math\": \"\\\\breve\"\n    },\n    \"̌\": {\n        \"text\": \"\\\\v\",\n        \"math\": \"\\\\check\"\n    },\n    \"̂\": {\n        \"text\": \"\\\\^\",\n        \"math\": \"\\\\hat\"\n    },\n    \"̇\": {\n        \"text\": \"\\\\.\",\n        \"math\": \"\\\\dot\"\n    },\n    \"̊\": {\n        \"text\": \"\\\\r\",\n        \"math\": \"\\\\mathring\"\n    },\n    \"̋\": {\n        \"text\": \"\\\\H\"\n    },\n    \"̧\": {\n        \"text\": \"\\\\c\"\n    }\n};\nvar unicodeSymbols = {\n    \"\\xe1\": \"á\",\n    \"\\xe0\": \"à\",\n    \"\\xe4\": \"ä\",\n    \"ǟ\": \"ǟ\",\n    \"\\xe3\": \"ã\",\n    \"ā\": \"ā\",\n    \"ă\": \"ă\",\n    \"ắ\": \"ắ\",\n    \"ằ\": \"ằ\",\n    \"ẵ\": \"ẵ\",\n    \"ǎ\": \"ǎ\",\n    \"\\xe2\": \"â\",\n    \"ấ\": \"ấ\",\n    \"ầ\": \"ầ\",\n    \"ẫ\": \"ẫ\",\n    \"ȧ\": \"ȧ\",\n    \"ǡ\": \"ǡ\",\n    \"\\xe5\": \"å\",\n    \"ǻ\": \"ǻ\",\n    \"ḃ\": \"ḃ\",\n    \"ć\": \"ć\",\n    \"ḉ\": \"ḉ\",\n    \"č\": \"č\",\n    \"ĉ\": \"ĉ\",\n    \"ċ\": \"ċ\",\n    \"\\xe7\": \"ç\",\n    \"ď\": \"ď\",\n    \"ḋ\": \"ḋ\",\n    \"ḑ\": \"ḑ\",\n    \"\\xe9\": \"é\",\n    \"\\xe8\": \"è\",\n    \"\\xeb\": \"ë\",\n    \"ẽ\": \"ẽ\",\n    \"ē\": \"ē\",\n    \"ḗ\": \"ḗ\",\n    \"ḕ\": \"ḕ\",\n    \"ĕ\": \"ĕ\",\n    \"ḝ\": \"ḝ\",\n    \"ě\": \"ě\",\n    \"\\xea\": \"ê\",\n    \"ế\": \"ế\",\n    \"ề\": \"ề\",\n    \"ễ\": \"ễ\",\n    \"ė\": \"ė\",\n    \"ȩ\": \"ȩ\",\n    \"ḟ\": \"ḟ\",\n    \"ǵ\": \"ǵ\",\n    \"ḡ\": \"ḡ\",\n    \"ğ\": \"ğ\",\n    \"ǧ\": \"ǧ\",\n    \"ĝ\": \"ĝ\",\n    \"ġ\": \"ġ\",\n    \"ģ\": \"ģ\",\n    \"ḧ\": \"ḧ\",\n    \"ȟ\": \"ȟ\",\n    \"ĥ\": \"ĥ\",\n    \"ḣ\": \"ḣ\",\n    \"ḩ\": \"ḩ\",\n    \"\\xed\": \"í\",\n    \"\\xec\": \"ì\",\n    \"\\xef\": \"ï\",\n    \"ḯ\": \"ḯ\",\n    \"ĩ\": \"ĩ\",\n    \"ī\": \"ī\",\n    \"ĭ\": \"ĭ\",\n    \"ǐ\": \"ǐ\",\n    \"\\xee\": \"î\",\n    \"ǰ\": \"ǰ\",\n    \"ĵ\": \"ĵ\",\n    \"ḱ\": \"ḱ\",\n    \"ǩ\": \"ǩ\",\n    \"ķ\": \"ķ\",\n    \"ĺ\": \"ĺ\",\n    \"ľ\": \"ľ\",\n    \"ļ\": \"ļ\",\n    \"ḿ\": \"ḿ\",\n    \"ṁ\": \"ṁ\",\n    \"ń\": \"ń\",\n    \"ǹ\": \"ǹ\",\n    \"\\xf1\": \"ñ\",\n    \"ň\": \"ň\",\n    \"ṅ\": \"ṅ\",\n    \"ņ\": \"ņ\",\n    \"\\xf3\": \"ó\",\n    \"\\xf2\": \"ò\",\n    \"\\xf6\": \"ö\",\n    \"ȫ\": \"ȫ\",\n    \"\\xf5\": \"õ\",\n    \"ṍ\": \"ṍ\",\n    \"ṏ\": \"ṏ\",\n    \"ȭ\": \"ȭ\",\n    \"ō\": \"ō\",\n    \"ṓ\": \"ṓ\",\n    \"ṑ\": \"ṑ\",\n    \"ŏ\": \"ŏ\",\n    \"ǒ\": \"ǒ\",\n    \"\\xf4\": \"ô\",\n    \"ố\": \"ố\",\n    \"ồ\": \"ồ\",\n    \"ỗ\": \"ỗ\",\n    \"ȯ\": \"ȯ\",\n    \"ȱ\": \"ȱ\",\n    \"ő\": \"ő\",\n    \"ṕ\": \"ṕ\",\n    \"ṗ\": \"ṗ\",\n    \"ŕ\": \"ŕ\",\n    \"ř\": \"ř\",\n    \"ṙ\": \"ṙ\",\n    \"ŗ\": \"ŗ\",\n    \"ś\": \"ś\",\n    \"ṥ\": \"ṥ\",\n    \"š\": \"š\",\n    \"ṧ\": \"ṧ\",\n    \"ŝ\": \"ŝ\",\n    \"ṡ\": \"ṡ\",\n    \"ş\": \"ş\",\n    \"ẗ\": \"ẗ\",\n    \"ť\": \"ť\",\n    \"ṫ\": \"ṫ\",\n    \"ţ\": \"ţ\",\n    \"\\xfa\": \"ú\",\n    \"\\xf9\": \"ù\",\n    \"\\xfc\": \"ü\",\n    \"ǘ\": \"ǘ\",\n    \"ǜ\": \"ǜ\",\n    \"ǖ\": \"ǖ\",\n    \"ǚ\": \"ǚ\",\n    \"ũ\": \"ũ\",\n    \"ṹ\": \"ṹ\",\n    \"ū\": \"ū\",\n    \"ṻ\": \"ṻ\",\n    \"ŭ\": \"ŭ\",\n    \"ǔ\": \"ǔ\",\n    \"\\xfb\": \"û\",\n    \"ů\": \"ů\",\n    \"ű\": \"ű\",\n    \"ṽ\": \"ṽ\",\n    \"ẃ\": \"ẃ\",\n    \"ẁ\": \"ẁ\",\n    \"ẅ\": \"ẅ\",\n    \"ŵ\": \"ŵ\",\n    \"ẇ\": \"ẇ\",\n    \"ẘ\": \"ẘ\",\n    \"ẍ\": \"ẍ\",\n    \"ẋ\": \"ẋ\",\n    \"\\xfd\": \"ý\",\n    \"ỳ\": \"ỳ\",\n    \"\\xff\": \"ÿ\",\n    \"ỹ\": \"ỹ\",\n    \"ȳ\": \"ȳ\",\n    \"ŷ\": \"ŷ\",\n    \"ẏ\": \"ẏ\",\n    \"ẙ\": \"ẙ\",\n    \"ź\": \"ź\",\n    \"ž\": \"ž\",\n    \"ẑ\": \"ẑ\",\n    \"ż\": \"ż\",\n    \"\\xc1\": \"Á\",\n    \"\\xc0\": \"À\",\n    \"\\xc4\": \"Ä\",\n    \"Ǟ\": \"Ǟ\",\n    \"\\xc3\": \"Ã\",\n    \"Ā\": \"Ā\",\n    \"Ă\": \"Ă\",\n    \"Ắ\": \"Ắ\",\n    \"Ằ\": \"Ằ\",\n    \"Ẵ\": \"Ẵ\",\n    \"Ǎ\": \"Ǎ\",\n    \"\\xc2\": \"Â\",\n    \"Ấ\": \"Ấ\",\n    \"Ầ\": \"Ầ\",\n    \"Ẫ\": \"Ẫ\",\n    \"Ȧ\": \"Ȧ\",\n    \"Ǡ\": \"Ǡ\",\n    \"\\xc5\": \"Å\",\n    \"Ǻ\": \"Ǻ\",\n    \"Ḃ\": \"Ḃ\",\n    \"Ć\": \"Ć\",\n    \"Ḉ\": \"Ḉ\",\n    \"Č\": \"Č\",\n    \"Ĉ\": \"Ĉ\",\n    \"Ċ\": \"Ċ\",\n    \"\\xc7\": \"Ç\",\n    \"Ď\": \"Ď\",\n    \"Ḋ\": \"Ḋ\",\n    \"Ḑ\": \"Ḑ\",\n    \"\\xc9\": \"É\",\n    \"\\xc8\": \"È\",\n    \"\\xcb\": \"Ë\",\n    \"Ẽ\": \"Ẽ\",\n    \"Ē\": \"Ē\",\n    \"Ḗ\": \"Ḗ\",\n    \"Ḕ\": \"Ḕ\",\n    \"Ĕ\": \"Ĕ\",\n    \"Ḝ\": \"Ḝ\",\n    \"Ě\": \"Ě\",\n    \"\\xca\": \"Ê\",\n    \"Ế\": \"Ế\",\n    \"Ề\": \"Ề\",\n    \"Ễ\": \"Ễ\",\n    \"Ė\": \"Ė\",\n    \"Ȩ\": \"Ȩ\",\n    \"Ḟ\": \"Ḟ\",\n    \"Ǵ\": \"Ǵ\",\n    \"Ḡ\": \"Ḡ\",\n    \"Ğ\": \"Ğ\",\n    \"Ǧ\": \"Ǧ\",\n    \"Ĝ\": \"Ĝ\",\n    \"Ġ\": \"Ġ\",\n    \"Ģ\": \"Ģ\",\n    \"Ḧ\": \"Ḧ\",\n    \"Ȟ\": \"Ȟ\",\n    \"Ĥ\": \"Ĥ\",\n    \"Ḣ\": \"Ḣ\",\n    \"Ḩ\": \"Ḩ\",\n    \"\\xcd\": \"Í\",\n    \"\\xcc\": \"Ì\",\n    \"\\xcf\": \"Ï\",\n    \"Ḯ\": \"Ḯ\",\n    \"Ĩ\": \"Ĩ\",\n    \"Ī\": \"Ī\",\n    \"Ĭ\": \"Ĭ\",\n    \"Ǐ\": \"Ǐ\",\n    \"\\xce\": \"Î\",\n    \"İ\": \"İ\",\n    \"Ĵ\": \"Ĵ\",\n    \"Ḱ\": \"Ḱ\",\n    \"Ǩ\": \"Ǩ\",\n    \"Ķ\": \"Ķ\",\n    \"Ĺ\": \"Ĺ\",\n    \"Ľ\": \"Ľ\",\n    \"Ļ\": \"Ļ\",\n    \"Ḿ\": \"Ḿ\",\n    \"Ṁ\": \"Ṁ\",\n    \"Ń\": \"Ń\",\n    \"Ǹ\": \"Ǹ\",\n    \"\\xd1\": \"Ñ\",\n    \"Ň\": \"Ň\",\n    \"Ṅ\": \"Ṅ\",\n    \"Ņ\": \"Ņ\",\n    \"\\xd3\": \"Ó\",\n    \"\\xd2\": \"Ò\",\n    \"\\xd6\": \"Ö\",\n    \"Ȫ\": \"Ȫ\",\n    \"\\xd5\": \"Õ\",\n    \"Ṍ\": \"Ṍ\",\n    \"Ṏ\": \"Ṏ\",\n    \"Ȭ\": \"Ȭ\",\n    \"Ō\": \"Ō\",\n    \"Ṓ\": \"Ṓ\",\n    \"Ṑ\": \"Ṑ\",\n    \"Ŏ\": \"Ŏ\",\n    \"Ǒ\": \"Ǒ\",\n    \"\\xd4\": \"Ô\",\n    \"Ố\": \"Ố\",\n    \"Ồ\": \"Ồ\",\n    \"Ỗ\": \"Ỗ\",\n    \"Ȯ\": \"Ȯ\",\n    \"Ȱ\": \"Ȱ\",\n    \"Ő\": \"Ő\",\n    \"Ṕ\": \"Ṕ\",\n    \"Ṗ\": \"Ṗ\",\n    \"Ŕ\": \"Ŕ\",\n    \"Ř\": \"Ř\",\n    \"Ṙ\": \"Ṙ\",\n    \"Ŗ\": \"Ŗ\",\n    \"Ś\": \"Ś\",\n    \"Ṥ\": \"Ṥ\",\n    \"Š\": \"Š\",\n    \"Ṧ\": \"Ṧ\",\n    \"Ŝ\": \"Ŝ\",\n    \"Ṡ\": \"Ṡ\",\n    \"Ş\": \"Ş\",\n    \"Ť\": \"Ť\",\n    \"Ṫ\": \"Ṫ\",\n    \"Ţ\": \"Ţ\",\n    \"\\xda\": \"Ú\",\n    \"\\xd9\": \"Ù\",\n    \"\\xdc\": \"Ü\",\n    \"Ǘ\": \"Ǘ\",\n    \"Ǜ\": \"Ǜ\",\n    \"Ǖ\": \"Ǖ\",\n    \"Ǚ\": \"Ǚ\",\n    \"Ũ\": \"Ũ\",\n    \"Ṹ\": \"Ṹ\",\n    \"Ū\": \"Ū\",\n    \"Ṻ\": \"Ṻ\",\n    \"Ŭ\": \"Ŭ\",\n    \"Ǔ\": \"Ǔ\",\n    \"\\xdb\": \"Û\",\n    \"Ů\": \"Ů\",\n    \"Ű\": \"Ű\",\n    \"Ṽ\": \"Ṽ\",\n    \"Ẃ\": \"Ẃ\",\n    \"Ẁ\": \"Ẁ\",\n    \"Ẅ\": \"Ẅ\",\n    \"Ŵ\": \"Ŵ\",\n    \"Ẇ\": \"Ẇ\",\n    \"Ẍ\": \"Ẍ\",\n    \"Ẋ\": \"Ẋ\",\n    \"\\xdd\": \"Ý\",\n    \"Ỳ\": \"Ỳ\",\n    \"Ÿ\": \"Ÿ\",\n    \"Ỹ\": \"Ỹ\",\n    \"Ȳ\": \"Ȳ\",\n    \"Ŷ\": \"Ŷ\",\n    \"Ẏ\": \"Ẏ\",\n    \"Ź\": \"Ź\",\n    \"Ž\": \"Ž\",\n    \"Ẑ\": \"Ẑ\",\n    \"Ż\": \"Ż\",\n    \"ά\": \"ά\",\n    \"ὰ\": \"ὰ\",\n    \"ᾱ\": \"ᾱ\",\n    \"ᾰ\": \"ᾰ\",\n    \"έ\": \"έ\",\n    \"ὲ\": \"ὲ\",\n    \"ή\": \"ή\",\n    \"ὴ\": \"ὴ\",\n    \"ί\": \"ί\",\n    \"ὶ\": \"ὶ\",\n    \"ϊ\": \"ϊ\",\n    \"ΐ\": \"ΐ\",\n    \"ῒ\": \"ῒ\",\n    \"ῑ\": \"ῑ\",\n    \"ῐ\": \"ῐ\",\n    \"ό\": \"ό\",\n    \"ὸ\": \"ὸ\",\n    \"ύ\": \"ύ\",\n    \"ὺ\": \"ὺ\",\n    \"ϋ\": \"ϋ\",\n    \"ΰ\": \"ΰ\",\n    \"ῢ\": \"ῢ\",\n    \"ῡ\": \"ῡ\",\n    \"ῠ\": \"ῠ\",\n    \"ώ\": \"ώ\",\n    \"ὼ\": \"ὼ\",\n    \"Ύ\": \"Ύ\",\n    \"Ὺ\": \"Ὺ\",\n    \"Ϋ\": \"Ϋ\",\n    \"Ῡ\": \"Ῡ\",\n    \"Ῠ\": \"Ῠ\",\n    \"Ώ\": \"Ώ\",\n    \"Ὼ\": \"Ὼ\"\n};\n/**\n * This file contains the parser used to parse out a TeX expression from the\n * input. Since TeX isn't context-free, standard parsers don't work particularly\n * well.\n *\n * The strategy of this parser is as such:\n *\n * The main functions (the `.parse...` ones) take a position in the current\n * parse string to parse tokens from. The lexer (found in Lexer.js, stored at\n * this.gullet.lexer) also supports pulling out tokens at arbitrary places. When\n * individual tokens are needed at a position, the lexer is called to pull out a\n * token, which is then used.\n *\n * The parser has a property called \"mode\" indicating the mode that\n * the parser is currently in. Currently it has to be one of \"math\" or\n * \"text\", which denotes whether the current environment is a math-y\n * one or a text-y one (e.g. inside \\text). Currently, this serves to\n * limit the functions which can be used in text mode.\n *\n * The main functions then return an object which contains the useful data that\n * was parsed at its given point, and a new position at the end of the parsed\n * data. The main functions can call each other and continue the parsing by\n * using the returned position as a new starting point.\n *\n * There are also extra `.handle...` functions, which pull out some reused\n * functionality into self-contained functions.\n *\n * The functions return ParseNodes.\n */ class Parser {\n    constructor(input, settings){\n        this.mode = void 0;\n        this.gullet = void 0;\n        this.settings = void 0;\n        this.leftrightDepth = void 0;\n        this.nextToken = void 0;\n        // Start in math mode\n        this.mode = \"math\"; // Create a new macro expander (gullet) and (indirectly via that) also a\n        // new lexer (mouth) for this parser (stomach, in the language of TeX)\n        this.gullet = new MacroExpander(input, settings, this.mode); // Store the settings for use in parsing\n        this.settings = settings; // Count leftright depth (for \\middle errors)\n        this.leftrightDepth = 0;\n    }\n    /**\n   * Checks a result to make sure it has the right type, and throws an\n   * appropriate error otherwise.\n   */ expect(text, consume) {\n        if (consume === void 0) {\n            consume = true;\n        }\n        if (this.fetch().text !== text) {\n            throw new ParseError(\"Expected '\" + text + \"', got '\" + this.fetch().text + \"'\", this.fetch());\n        }\n        if (consume) {\n            this.consume();\n        }\n    }\n    /**\n   * Discards the current lookahead token, considering it consumed.\n   */ consume() {\n        this.nextToken = null;\n    }\n    /**\n   * Return the current lookahead token, or if there isn't one (at the\n   * beginning, or if the previous lookahead token was consume()d),\n   * fetch the next token as the new lookahead token and return it.\n   */ fetch() {\n        if (this.nextToken == null) {\n            this.nextToken = this.gullet.expandNextToken();\n        }\n        return this.nextToken;\n    }\n    /**\n   * Switches between \"text\" and \"math\" modes.\n   */ switchMode(newMode) {\n        this.mode = newMode;\n        this.gullet.switchMode(newMode);\n    }\n    /**\n   * Main parsing function, which parses an entire input.\n   */ parse() {\n        if (!this.settings.globalGroup) {\n            // Create a group namespace for the math expression.\n            // (LaTeX creates a new group for every $...$, $$...$$, \\[...\\].)\n            this.gullet.beginGroup();\n        } // Use old \\color behavior (same as LaTeX's \\textcolor) if requested.\n        // We do this within the group for the math expression, so it doesn't\n        // pollute settings.macros.\n        if (this.settings.colorIsTextColor) {\n            this.gullet.macros.set(\"\\\\color\", \"\\\\textcolor\");\n        }\n        try {\n            // Try to parse the input\n            var parse = this.parseExpression(false); // If we succeeded, make sure there's an EOF at the end\n            this.expect(\"EOF\"); // End the group namespace for the expression\n            if (!this.settings.globalGroup) {\n                this.gullet.endGroup();\n            }\n            return parse; // Close any leftover groups in case of a parse error.\n        } finally{\n            this.gullet.endGroups();\n        }\n    }\n    /**\n   * Fully parse a separate sequence of tokens as a separate job.\n   * Tokens should be specified in reverse order, as in a MacroDefinition.\n   */ subparse(tokens) {\n        // Save the next token from the current job.\n        var oldToken = this.nextToken;\n        this.consume(); // Run the new job, terminating it with an excess '}'\n        this.gullet.pushToken(new Token(\"}\"));\n        this.gullet.pushTokens(tokens);\n        var parse = this.parseExpression(false);\n        this.expect(\"}\"); // Restore the next token from the current job.\n        this.nextToken = oldToken;\n        return parse;\n    }\n    /**\n   * Parses an \"expression\", which is a list of atoms.\n   *\n   * `breakOnInfix`: Should the parsing stop when we hit infix nodes? This\n   *                 happens when functions have higher precedence han infix\n   *                 nodes in implicit parses.\n   *\n   * `breakOnTokenText`: The text of the token that the expression should end\n   *                     with, or `null` if something else should end the\n   *                     expression.\n   */ parseExpression(breakOnInfix, breakOnTokenText) {\n        var body = []; // Keep adding atoms to the body until we can't parse any more atoms (either\n        // we reached the end, a }, or a \\right)\n        while(true){\n            // Ignore spaces in math mode\n            if (this.mode === \"math\") {\n                this.consumeSpaces();\n            }\n            var lex = this.fetch();\n            if (Parser.endOfExpression.indexOf(lex.text) !== -1) {\n                break;\n            }\n            if (breakOnTokenText && lex.text === breakOnTokenText) {\n                break;\n            }\n            if (breakOnInfix && functions[lex.text] && functions[lex.text].infix) {\n                break;\n            }\n            var atom = this.parseAtom(breakOnTokenText);\n            if (!atom) {\n                break;\n            } else if (atom.type === \"internal\") {\n                continue;\n            }\n            body.push(atom);\n        }\n        if (this.mode === \"text\") {\n            this.formLigatures(body);\n        }\n        return this.handleInfixNodes(body);\n    }\n    /**\n   * Rewrites infix operators such as \\over with corresponding commands such\n   * as \\frac.\n   *\n   * There can only be one infix operator per group.  If there's more than one\n   * then the expression is ambiguous.  This can be resolved by adding {}.\n   */ handleInfixNodes(body) {\n        var overIndex = -1;\n        var funcName;\n        for(var i = 0; i < body.length; i++){\n            if (body[i].type === \"infix\") {\n                if (overIndex !== -1) {\n                    throw new ParseError(\"only one infix operator per group\", body[i].token);\n                }\n                overIndex = i;\n                funcName = body[i].replaceWith;\n            }\n        }\n        if (overIndex !== -1 && funcName) {\n            var numerNode;\n            var denomNode;\n            var numerBody = body.slice(0, overIndex);\n            var denomBody = body.slice(overIndex + 1);\n            if (numerBody.length === 1 && numerBody[0].type === \"ordgroup\") {\n                numerNode = numerBody[0];\n            } else {\n                numerNode = {\n                    type: \"ordgroup\",\n                    mode: this.mode,\n                    body: numerBody\n                };\n            }\n            if (denomBody.length === 1 && denomBody[0].type === \"ordgroup\") {\n                denomNode = denomBody[0];\n            } else {\n                denomNode = {\n                    type: \"ordgroup\",\n                    mode: this.mode,\n                    body: denomBody\n                };\n            }\n            var node;\n            if (funcName === \"\\\\\\\\abovefrac\") {\n                node = this.callFunction(funcName, [\n                    numerNode,\n                    body[overIndex],\n                    denomNode\n                ], []);\n            } else {\n                node = this.callFunction(funcName, [\n                    numerNode,\n                    denomNode\n                ], []);\n            }\n            return [\n                node\n            ];\n        } else {\n            return body;\n        }\n    }\n    /**\n   * Handle a subscript or superscript with nice errors.\n   */ handleSupSubscript(name // For error reporting.\n    ) {\n        var symbolToken = this.fetch();\n        var symbol = symbolToken.text;\n        this.consume();\n        this.consumeSpaces(); // ignore spaces before sup/subscript argument\n        var group = this.parseGroup(name);\n        if (!group) {\n            throw new ParseError(\"Expected group after '\" + symbol + \"'\", symbolToken);\n        }\n        return group;\n    }\n    /**\n   * Converts the textual input of an unsupported command into a text node\n   * contained within a color node whose color is determined by errorColor\n   */ formatUnsupportedCmd(text) {\n        var textordArray = [];\n        for(var i = 0; i < text.length; i++){\n            textordArray.push({\n                type: \"textord\",\n                mode: \"text\",\n                text: text[i]\n            });\n        }\n        var textNode = {\n            type: \"text\",\n            mode: this.mode,\n            body: textordArray\n        };\n        var colorNode = {\n            type: \"color\",\n            mode: this.mode,\n            color: this.settings.errorColor,\n            body: [\n                textNode\n            ]\n        };\n        return colorNode;\n    }\n    /**\n   * Parses a group with optional super/subscripts.\n   */ parseAtom(breakOnTokenText) {\n        // The body of an atom is an implicit group, so that things like\n        // \\left(x\\right)^2 work correctly.\n        var base = this.parseGroup(\"atom\", breakOnTokenText); // In text mode, we don't have superscripts or subscripts\n        if (this.mode === \"text\") {\n            return base;\n        } // Note that base may be empty (i.e. null) at this point.\n        var superscript;\n        var subscript;\n        while(true){\n            // Guaranteed in math mode, so eat any spaces first.\n            this.consumeSpaces(); // Lex the first token\n            var lex = this.fetch();\n            if (lex.text === \"\\\\limits\" || lex.text === \"\\\\nolimits\") {\n                // We got a limit control\n                if (base && base.type === \"op\") {\n                    var limits = lex.text === \"\\\\limits\";\n                    base.limits = limits;\n                    base.alwaysHandleSupSub = true;\n                } else if (base && base.type === \"operatorname\") {\n                    if (base.alwaysHandleSupSub) {\n                        base.limits = lex.text === \"\\\\limits\";\n                    }\n                } else {\n                    throw new ParseError(\"Limit controls must follow a math operator\", lex);\n                }\n                this.consume();\n            } else if (lex.text === \"^\") {\n                // We got a superscript start\n                if (superscript) {\n                    throw new ParseError(\"Double superscript\", lex);\n                }\n                superscript = this.handleSupSubscript(\"superscript\");\n            } else if (lex.text === \"_\") {\n                // We got a subscript start\n                if (subscript) {\n                    throw new ParseError(\"Double subscript\", lex);\n                }\n                subscript = this.handleSupSubscript(\"subscript\");\n            } else if (lex.text === \"'\") {\n                // We got a prime\n                if (superscript) {\n                    throw new ParseError(\"Double superscript\", lex);\n                }\n                var prime = {\n                    type: \"textord\",\n                    mode: this.mode,\n                    text: \"\\\\prime\"\n                }; // Many primes can be grouped together, so we handle this here\n                var primes = [\n                    prime\n                ];\n                this.consume(); // Keep lexing tokens until we get something that's not a prime\n                while(this.fetch().text === \"'\"){\n                    // For each one, add another prime to the list\n                    primes.push(prime);\n                    this.consume();\n                } // If there's a superscript following the primes, combine that\n                // superscript in with the primes.\n                if (this.fetch().text === \"^\") {\n                    primes.push(this.handleSupSubscript(\"superscript\"));\n                } // Put everything into an ordgroup as the superscript\n                superscript = {\n                    type: \"ordgroup\",\n                    mode: this.mode,\n                    body: primes\n                };\n            } else if (uSubsAndSups[lex.text]) {\n                // A Unicode subscript or superscript character.\n                // We treat these similarly to the unicode-math package.\n                // So we render a string of Unicode (sub|super)scripts the\n                // same as a (sub|super)script of regular characters.\n                var str = uSubsAndSups[lex.text];\n                var isSub = unicodeSubRegEx.test(lex.text);\n                this.consume(); // Continue fetching tokens to fill out the string.\n                while(true){\n                    var token = this.fetch().text;\n                    if (!uSubsAndSups[token]) {\n                        break;\n                    }\n                    if (unicodeSubRegEx.test(token) !== isSub) {\n                        break;\n                    }\n                    this.consume();\n                    str += uSubsAndSups[token];\n                } // Now create a (sub|super)script.\n                var body = new Parser(str, this.settings).parse();\n                if (isSub) {\n                    subscript = {\n                        type: \"ordgroup\",\n                        mode: \"math\",\n                        body\n                    };\n                } else {\n                    superscript = {\n                        type: \"ordgroup\",\n                        mode: \"math\",\n                        body\n                    };\n                }\n            } else {\n                break;\n            }\n        } // Base must be set if superscript or subscript are set per logic above,\n        // but need to check here for type check to pass.\n        if (superscript || subscript) {\n            // If we got either a superscript or subscript, create a supsub\n            return {\n                type: \"supsub\",\n                mode: this.mode,\n                base: base,\n                sup: superscript,\n                sub: subscript\n            };\n        } else {\n            // Otherwise return the original body\n            return base;\n        }\n    }\n    /**\n   * Parses an entire function, including its base and all of its arguments.\n   */ parseFunction(breakOnTokenText, name // For determining its context\n    ) {\n        var token = this.fetch();\n        var func = token.text;\n        var funcData = functions[func];\n        if (!funcData) {\n            return null;\n        }\n        this.consume(); // consume command token\n        if (name && name !== \"atom\" && !funcData.allowedInArgument) {\n            throw new ParseError(\"Got function '\" + func + \"' with no arguments\" + (name ? \" as \" + name : \"\"), token);\n        } else if (this.mode === \"text\" && !funcData.allowedInText) {\n            throw new ParseError(\"Can't use function '\" + func + \"' in text mode\", token);\n        } else if (this.mode === \"math\" && funcData.allowedInMath === false) {\n            throw new ParseError(\"Can't use function '\" + func + \"' in math mode\", token);\n        }\n        var { args, optArgs } = this.parseArguments(func, funcData);\n        return this.callFunction(func, args, optArgs, token, breakOnTokenText);\n    }\n    /**\n   * Call a function handler with a suitable context and arguments.\n   */ callFunction(name, args, optArgs, token, breakOnTokenText) {\n        var context = {\n            funcName: name,\n            parser: this,\n            token,\n            breakOnTokenText\n        };\n        var func = functions[name];\n        if (func && func.handler) {\n            return func.handler(context, args, optArgs);\n        } else {\n            throw new ParseError(\"No function handler for \" + name);\n        }\n    }\n    /**\n   * Parses the arguments of a function or environment\n   */ parseArguments(func, funcData) {\n        var totalArgs = funcData.numArgs + funcData.numOptionalArgs;\n        if (totalArgs === 0) {\n            return {\n                args: [],\n                optArgs: []\n            };\n        }\n        var args = [];\n        var optArgs = [];\n        for(var i = 0; i < totalArgs; i++){\n            var argType = funcData.argTypes && funcData.argTypes[i];\n            var isOptional = i < funcData.numOptionalArgs;\n            if (funcData.primitive && argType == null || // \\sqrt expands into primitive if optional argument doesn't exist\n            funcData.type === \"sqrt\" && i === 1 && optArgs[0] == null) {\n                argType = \"primitive\";\n            }\n            var arg = this.parseGroupOfType(\"argument to '\" + func + \"'\", argType, isOptional);\n            if (isOptional) {\n                optArgs.push(arg);\n            } else if (arg != null) {\n                args.push(arg);\n            } else {\n                // should be unreachable\n                throw new ParseError(\"Null argument, please report this as a bug\");\n            }\n        }\n        return {\n            args,\n            optArgs\n        };\n    }\n    /**\n   * Parses a group when the mode is changing.\n   */ parseGroupOfType(name, type, optional) {\n        switch(type){\n            case \"color\":\n                return this.parseColorGroup(optional);\n            case \"size\":\n                return this.parseSizeGroup(optional);\n            case \"url\":\n                return this.parseUrlGroup(optional);\n            case \"math\":\n            case \"text\":\n                return this.parseArgumentGroup(optional, type);\n            case \"hbox\":\n                {\n                    // hbox argument type wraps the argument in the equivalent of\n                    // \\hbox, which is like \\text but switching to \\textstyle size.\n                    var group = this.parseArgumentGroup(optional, \"text\");\n                    return group != null ? {\n                        type: \"styling\",\n                        mode: group.mode,\n                        body: [\n                            group\n                        ],\n                        style: \"text\" // simulate \\textstyle\n                    } : null;\n                }\n            case \"raw\":\n                {\n                    var token = this.parseStringGroup(\"raw\", optional);\n                    return token != null ? {\n                        type: \"raw\",\n                        mode: \"text\",\n                        string: token.text\n                    } : null;\n                }\n            case \"primitive\":\n                {\n                    if (optional) {\n                        throw new ParseError(\"A primitive argument cannot be optional\");\n                    }\n                    var _group = this.parseGroup(name);\n                    if (_group == null) {\n                        throw new ParseError(\"Expected group as \" + name, this.fetch());\n                    }\n                    return _group;\n                }\n            case \"original\":\n            case null:\n            case undefined:\n                return this.parseArgumentGroup(optional);\n            default:\n                throw new ParseError(\"Unknown group type as \" + name, this.fetch());\n        }\n    }\n    /**\n   * Discard any space tokens, fetching the next non-space token.\n   */ consumeSpaces() {\n        while(this.fetch().text === \" \"){\n            this.consume();\n        }\n    }\n    /**\n   * Parses a group, essentially returning the string formed by the\n   * brace-enclosed tokens plus some position information.\n   */ parseStringGroup(modeName, optional) {\n        var argToken = this.gullet.scanArgument(optional);\n        if (argToken == null) {\n            return null;\n        }\n        var str = \"\";\n        var nextToken;\n        while((nextToken = this.fetch()).text !== \"EOF\"){\n            str += nextToken.text;\n            this.consume();\n        }\n        this.consume(); // consume the end of the argument\n        argToken.text = str;\n        return argToken;\n    }\n    /**\n   * Parses a regex-delimited group: the largest sequence of tokens\n   * whose concatenated strings match `regex`. Returns the string\n   * formed by the tokens plus some position information.\n   */ parseRegexGroup(regex, modeName // Used to describe the mode in error messages.\n    ) {\n        var firstToken = this.fetch();\n        var lastToken = firstToken;\n        var str = \"\";\n        var nextToken;\n        while((nextToken = this.fetch()).text !== \"EOF\" && regex.test(str + nextToken.text)){\n            lastToken = nextToken;\n            str += lastToken.text;\n            this.consume();\n        }\n        if (str === \"\") {\n            throw new ParseError(\"Invalid \" + modeName + \": '\" + firstToken.text + \"'\", firstToken);\n        }\n        return firstToken.range(lastToken, str);\n    }\n    /**\n   * Parses a color description.\n   */ parseColorGroup(optional) {\n        var res = this.parseStringGroup(\"color\", optional);\n        if (res == null) {\n            return null;\n        }\n        var match = /^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i.exec(res.text);\n        if (!match) {\n            throw new ParseError(\"Invalid color: '\" + res.text + \"'\", res);\n        }\n        var color = match[0];\n        if (/^[0-9a-f]{6}$/i.test(color)) {\n            // We allow a 6-digit HTML color spec without a leading \"#\".\n            // This follows the xcolor package's HTML color model.\n            // Predefined color names are all missed by this RegEx pattern.\n            color = \"#\" + color;\n        }\n        return {\n            type: \"color-token\",\n            mode: this.mode,\n            color\n        };\n    }\n    /**\n   * Parses a size specification, consisting of magnitude and unit.\n   */ parseSizeGroup(optional) {\n        var res;\n        var isBlank = false; // don't expand before parseStringGroup\n        this.gullet.consumeSpaces();\n        if (!optional && this.gullet.future().text !== \"{\") {\n            res = this.parseRegexGroup(/^[-+]? *(?:$|\\d+|\\d+\\.\\d*|\\.\\d*) *[a-z]{0,2} *$/, \"size\");\n        } else {\n            res = this.parseStringGroup(\"size\", optional);\n        }\n        if (!res) {\n            return null;\n        }\n        if (!optional && res.text.length === 0) {\n            // Because we've tested for what is !optional, this block won't\n            // affect \\kern, \\hspace, etc. It will capture the mandatory arguments\n            // to \\genfrac and \\above.\n            res.text = \"0pt\"; // Enable \\above{}\n            isBlank = true; // This is here specifically for \\genfrac\n        }\n        var match = /([-+]?) *(\\d+(?:\\.\\d*)?|\\.\\d+) *([a-z]{2})/.exec(res.text);\n        if (!match) {\n            throw new ParseError(\"Invalid size: '\" + res.text + \"'\", res);\n        }\n        var data = {\n            number: +(match[1] + match[2]),\n            // sign + magnitude, cast to number\n            unit: match[3]\n        };\n        if (!validUnit(data)) {\n            throw new ParseError(\"Invalid unit: '\" + data.unit + \"'\", res);\n        }\n        return {\n            type: \"size\",\n            mode: this.mode,\n            value: data,\n            isBlank\n        };\n    }\n    /**\n   * Parses an URL, checking escaped letters and allowed protocols,\n   * and setting the catcode of % as an active character (as in \\hyperref).\n   */ parseUrlGroup(optional) {\n        this.gullet.lexer.setCatcode(\"%\", 13); // active character\n        this.gullet.lexer.setCatcode(\"~\", 12); // other character\n        var res = this.parseStringGroup(\"url\", optional);\n        this.gullet.lexer.setCatcode(\"%\", 14); // comment character\n        this.gullet.lexer.setCatcode(\"~\", 13); // active character\n        if (res == null) {\n            return null;\n        } // hyperref package allows backslashes alone in href, but doesn't\n        // generate valid links in such cases; we interpret this as\n        // \"undefined\" behaviour, and keep them as-is. Some browser will\n        // replace backslashes with forward slashes.\n        var url = res.text.replace(/\\\\([#$%&~_^{}])/g, \"$1\");\n        return {\n            type: \"url\",\n            mode: this.mode,\n            url\n        };\n    }\n    /**\n   * Parses an argument with the mode specified.\n   */ parseArgumentGroup(optional, mode) {\n        var argToken = this.gullet.scanArgument(optional);\n        if (argToken == null) {\n            return null;\n        }\n        var outerMode = this.mode;\n        if (mode) {\n            // Switch to specified mode\n            this.switchMode(mode);\n        }\n        this.gullet.beginGroup();\n        var expression = this.parseExpression(false, \"EOF\"); // TODO: find an alternative way to denote the end\n        this.expect(\"EOF\"); // expect the end of the argument\n        this.gullet.endGroup();\n        var result = {\n            type: \"ordgroup\",\n            mode: this.mode,\n            loc: argToken.loc,\n            body: expression\n        };\n        if (mode) {\n            // Switch mode back\n            this.switchMode(outerMode);\n        }\n        return result;\n    }\n    /**\n   * Parses an ordinary group, which is either a single nucleus (like \"x\")\n   * or an expression in braces (like \"{x+y}\") or an implicit group, a group\n   * that starts at the current position, and ends right before a higher explicit\n   * group ends, or at EOF.\n   */ parseGroup(name, breakOnTokenText) {\n        var firstToken = this.fetch();\n        var text = firstToken.text;\n        var result; // Try to parse an open brace or \\begingroup\n        if (text === \"{\" || text === \"\\\\begingroup\") {\n            this.consume();\n            var groupEnd = text === \"{\" ? \"}\" : \"\\\\endgroup\";\n            this.gullet.beginGroup(); // If we get a brace, parse an expression\n            var expression = this.parseExpression(false, groupEnd);\n            var lastToken = this.fetch();\n            this.expect(groupEnd); // Check that we got a matching closing brace\n            this.gullet.endGroup();\n            result = {\n                type: \"ordgroup\",\n                mode: this.mode,\n                loc: SourceLocation.range(firstToken, lastToken),\n                body: expression,\n                // A group formed by \\begingroup...\\endgroup is a semi-simple group\n                // which doesn't affect spacing in math mode, i.e., is transparent.\n                // https://tex.stackexchange.com/questions/1930/when-should-one-\n                // use-begingroup-instead-of-bgroup\n                semisimple: text === \"\\\\begingroup\" || undefined\n            };\n        } else {\n            // If there exists a function with this name, parse the function.\n            // Otherwise, just return a nucleus\n            result = this.parseFunction(breakOnTokenText, name) || this.parseSymbol();\n            if (result == null && text[0] === \"\\\\\" && !implicitCommands.hasOwnProperty(text)) {\n                if (this.settings.throwOnError) {\n                    throw new ParseError(\"Undefined control sequence: \" + text, firstToken);\n                }\n                result = this.formatUnsupportedCmd(text);\n                this.consume();\n            }\n        }\n        return result;\n    }\n    /**\n   * Form ligature-like combinations of characters for text mode.\n   * This includes inputs like \"--\", \"---\", \"``\" and \"''\".\n   * The result will simply replace multiple textord nodes with a single\n   * character in each value by a single textord node having multiple\n   * characters in its value.  The representation is still ASCII source.\n   * The group will be modified in place.\n   */ formLigatures(group) {\n        var n = group.length - 1;\n        for(var i = 0; i < n; ++i){\n            var a = group[i]; // $FlowFixMe: Not every node type has a `text` property.\n            var v = a.text;\n            if (v === \"-\" && group[i + 1].text === \"-\") {\n                if (i + 1 < n && group[i + 2].text === \"-\") {\n                    group.splice(i, 3, {\n                        type: \"textord\",\n                        mode: \"text\",\n                        loc: SourceLocation.range(a, group[i + 2]),\n                        text: \"---\"\n                    });\n                    n -= 2;\n                } else {\n                    group.splice(i, 2, {\n                        type: \"textord\",\n                        mode: \"text\",\n                        loc: SourceLocation.range(a, group[i + 1]),\n                        text: \"--\"\n                    });\n                    n -= 1;\n                }\n            }\n            if ((v === \"'\" || v === \"`\") && group[i + 1].text === v) {\n                group.splice(i, 2, {\n                    type: \"textord\",\n                    mode: \"text\",\n                    loc: SourceLocation.range(a, group[i + 1]),\n                    text: v + v\n                });\n                n -= 1;\n            }\n        }\n    }\n    /**\n   * Parse a single symbol out of the string. Here, we handle single character\n   * symbols and special functions like \\verb.\n   */ parseSymbol() {\n        var nucleus = this.fetch();\n        var text = nucleus.text;\n        if (/^\\\\verb[^a-zA-Z]/.test(text)) {\n            this.consume();\n            var arg = text.slice(5);\n            var star = arg.charAt(0) === \"*\";\n            if (star) {\n                arg = arg.slice(1);\n            } // Lexer's tokenRegex is constructed to always have matching\n            // first/last characters.\n            if (arg.length < 2 || arg.charAt(0) !== arg.slice(-1)) {\n                throw new ParseError(\"\\\\verb assertion failed --\\n                    please report what input caused this bug\");\n            }\n            arg = arg.slice(1, -1); // remove first and last char\n            return {\n                type: \"verb\",\n                mode: \"text\",\n                body: arg,\n                star\n            };\n        } // At this point, we should have a symbol, possibly with accents.\n        // First expand any accented base symbol according to unicodeSymbols.\n        if (unicodeSymbols.hasOwnProperty(text[0]) && !symbols[this.mode][text[0]]) {\n            // This behavior is not strict (XeTeX-compatible) in math mode.\n            if (this.settings.strict && this.mode === \"math\") {\n                this.settings.reportNonstrict(\"unicodeTextInMathMode\", 'Accented Unicode text character \"' + text[0] + '\" used in ' + \"math mode\", nucleus);\n            }\n            text = unicodeSymbols[text[0]] + text.slice(1);\n        } // Strip off any combining characters\n        var match = combiningDiacriticalMarksEndRegex.exec(text);\n        if (match) {\n            text = text.substring(0, match.index);\n            if (text === \"i\") {\n                text = \"ı\"; // dotless i, in math and text mode\n            } else if (text === \"j\") {\n                text = \"ȷ\"; // dotless j, in math and text mode\n            }\n        } // Recognize base symbol\n        var symbol;\n        if (symbols[this.mode][text]) {\n            if (this.settings.strict && this.mode === \"math\" && extraLatin.indexOf(text) >= 0) {\n                this.settings.reportNonstrict(\"unicodeTextInMathMode\", 'Latin-1/Unicode text character \"' + text[0] + '\" used in ' + \"math mode\", nucleus);\n            }\n            var group = symbols[this.mode][text].group;\n            var loc = SourceLocation.range(nucleus);\n            var s;\n            if (ATOMS.hasOwnProperty(group)) {\n                // $FlowFixMe\n                var family = group;\n                s = {\n                    type: \"atom\",\n                    mode: this.mode,\n                    family,\n                    loc,\n                    text\n                };\n            } else {\n                // $FlowFixMe\n                s = {\n                    type: group,\n                    mode: this.mode,\n                    loc,\n                    text\n                };\n            } // $FlowFixMe\n            symbol = s;\n        } else if (text.charCodeAt(0) >= 0x80) {\n            // no symbol for e.g. ^\n            if (this.settings.strict) {\n                if (!supportedCodepoint(text.charCodeAt(0))) {\n                    this.settings.reportNonstrict(\"unknownSymbol\", 'Unrecognized Unicode character \"' + text[0] + '\"' + (\" (\" + text.charCodeAt(0) + \")\"), nucleus);\n                } else if (this.mode === \"math\") {\n                    this.settings.reportNonstrict(\"unicodeTextInMathMode\", 'Unicode text character \"' + text[0] + '\" used in math mode', nucleus);\n                }\n            } // All nonmathematical Unicode characters are rendered as if they\n            // are in text mode (wrapped in \\text) because that's what it\n            // takes to render them in LaTeX.  Setting `mode: this.mode` is\n            // another natural choice (the user requested math mode), but\n            // this makes it more difficult for getCharacterMetrics() to\n            // distinguish Unicode characters without metrics and those for\n            // which we want to simulate the letter M.\n            symbol = {\n                type: \"textord\",\n                mode: \"text\",\n                loc: SourceLocation.range(nucleus),\n                text\n            };\n        } else {\n            return null; // EOF, ^, _, {, }, etc.\n        }\n        this.consume(); // Transform combining characters into accents\n        if (match) {\n            for(var i = 0; i < match[0].length; i++){\n                var accent = match[0][i];\n                if (!unicodeAccents[accent]) {\n                    throw new ParseError(\"Unknown accent ' \" + accent + \"'\", nucleus);\n                }\n                var command = unicodeAccents[accent][this.mode] || unicodeAccents[accent].text;\n                if (!command) {\n                    throw new ParseError(\"Accent \" + accent + \" unsupported in \" + this.mode + \" mode\", nucleus);\n                }\n                symbol = {\n                    type: \"accent\",\n                    mode: this.mode,\n                    loc: SourceLocation.range(nucleus),\n                    label: command,\n                    isStretchy: false,\n                    isShifty: true,\n                    // $FlowFixMe\n                    base: symbol\n                };\n            }\n        } // $FlowFixMe\n        return symbol;\n    }\n}\nParser.endOfExpression = [\n    \"}\",\n    \"\\\\endgroup\",\n    \"\\\\end\",\n    \"\\\\right\",\n    \"&\"\n];\n/**\n * Provides a single function for parsing an expression using a Parser\n * TODO(emily): Remove this\n */ /**\n * Parses an expression using a Parser, then returns the parsed result.\n */ var parseTree = function parseTree(toParse, settings) {\n    if (!(typeof toParse === \"string\" || toParse instanceof String)) {\n        throw new TypeError(\"KaTeX can only parse string typed expression\");\n    }\n    var parser = new Parser(toParse, settings); // Blank out any \\df@tag to avoid spurious \"Duplicate \\tag\" errors\n    delete parser.gullet.macros.current[\"\\\\df@tag\"];\n    var tree = parser.parse(); // Prevent a color definition from persisting between calls to katex.render().\n    delete parser.gullet.macros.current[\"\\\\current@color\"];\n    delete parser.gullet.macros.current[\"\\\\color\"]; // If the input used \\tag, it will set the \\df@tag macro to the tag.\n    // In this case, we separately parse the tag and wrap the tree.\n    if (parser.gullet.macros.get(\"\\\\df@tag\")) {\n        if (!settings.displayMode) {\n            throw new ParseError(\"\\\\tag works only in display equations\");\n        }\n        tree = [\n            {\n                type: \"tag\",\n                mode: \"text\",\n                body: tree,\n                tag: parser.subparse([\n                    new Token(\"\\\\df@tag\")\n                ])\n            }\n        ];\n    }\n    return tree;\n};\n/* eslint no-console:0 */ /**\n * Parse and build an expression, and place that expression in the DOM node\n * given.\n */ var render = function render(expression, baseNode, options) {\n    baseNode.textContent = \"\";\n    var node = renderToDomTree(expression, options).toNode();\n    baseNode.appendChild(node);\n}; // KaTeX's styles don't work properly in quirks mode. Print out an error, and\n// disable rendering.\nif (typeof document !== \"undefined\") {\n    if (document.compatMode !== \"CSS1Compat\") {\n        typeof console !== \"undefined\" && console.warn(\"Warning: KaTeX doesn't work in quirks mode. Make sure your \" + \"website has a suitable doctype.\");\n        render = function render() {\n            throw new ParseError(\"KaTeX doesn't work in quirks mode.\");\n        };\n    }\n}\n/**\n * Parse and build an expression, and return the markup for that.\n */ var renderToString = function renderToString(expression, options) {\n    var markup = renderToDomTree(expression, options).toMarkup();\n    return markup;\n};\n/**\n * Parse an expression and return the parse tree.\n */ var generateParseTree = function generateParseTree(expression, options) {\n    var settings = new Settings(options);\n    return parseTree(expression, settings);\n};\n/**\n * If the given error is a KaTeX ParseError and options.throwOnError is false,\n * renders the invalid LaTeX as a span with hover title giving the KaTeX\n * error message.  Otherwise, simply throws the error.\n */ var renderError = function renderError(error, expression, options) {\n    if (options.throwOnError || !(error instanceof ParseError)) {\n        throw error;\n    }\n    var node = buildCommon.makeSpan([\n        \"katex-error\"\n    ], [\n        new SymbolNode(expression)\n    ]);\n    node.setAttribute(\"title\", error.toString());\n    node.setAttribute(\"style\", \"color:\" + options.errorColor);\n    return node;\n};\n/**\n * Generates and returns the katex build tree. This is used for advanced\n * use cases (like rendering to custom output).\n */ var renderToDomTree = function renderToDomTree(expression, options) {\n    var settings = new Settings(options);\n    try {\n        var tree = parseTree(expression, settings);\n        return buildTree(tree, expression, settings);\n    } catch (error) {\n        return renderError(error, expression, settings);\n    }\n};\n/**\n * Generates and returns the katex build tree, with just HTML (no MathML).\n * This is used for advanced use cases (like rendering to custom output).\n */ var renderToHTMLTree = function renderToHTMLTree(expression, options) {\n    var settings = new Settings(options);\n    try {\n        var tree = parseTree(expression, settings);\n        return buildHTMLTree(tree, expression, settings);\n    } catch (error) {\n        return renderError(error, expression, settings);\n    }\n};\nvar katex = {\n    /**\n   * Current KaTeX version\n   */ version: \"0.16.8\",\n    /**\n   * Renders the given LaTeX into an HTML+MathML combination, and adds\n   * it as a child to the specified DOM node.\n   */ render,\n    /**\n   * Renders the given LaTeX into an HTML+MathML combination string,\n   * for sending to the client.\n   */ renderToString,\n    /**\n   * KaTeX error, usually during parsing.\n   */ ParseError,\n    /**\n   * The shema of Settings\n   */ SETTINGS_SCHEMA,\n    /**\n   * Parses the given LaTeX into KaTeX's internal parse tree structure,\n   * without rendering to HTML or MathML.\n   *\n   * NOTE: This method is not currently recommended for public use.\n   * The internal tree representation is unstable and is very likely\n   * to change. Use at your own risk.\n   */ __parse: generateParseTree,\n    /**\n   * Renders the given LaTeX into an HTML+MathML internal DOM tree\n   * representation, without flattening that representation to a string.\n   *\n   * NOTE: This method is not currently recommended for public use.\n   * The internal tree representation is unstable and is very likely\n   * to change. Use at your own risk.\n   */ __renderToDomTree: renderToDomTree,\n    /**\n   * Renders the given LaTeX into an HTML internal DOM tree representation,\n   * without MathML and without flattening that representation to a string.\n   *\n   * NOTE: This method is not currently recommended for public use.\n   * The internal tree representation is unstable and is very likely\n   * to change. Use at your own risk.\n   */ __renderToHTMLTree: renderToHTMLTree,\n    /**\n   * extends internal font metrics object with a new object\n   * each key in the new object represents a font name\n  */ __setFontMetrics: setFontMetrics,\n    /**\n   * adds a new symbol to builtin symbols table\n   */ __defineSymbol: defineSymbol,\n    /**\n   * adds a new function to builtin function list,\n   * which directly produce parse tree elements\n   * and have their own html/mathml builders\n   */ __defineFunction: defineFunction,\n    /**\n   * adds a new macro to builtin macro list\n   */ __defineMacro: defineMacro,\n    /**\n   * Expose the dom tree node types, which can be useful for type checking nodes.\n   *\n   * NOTE: This method is not currently recommended for public use.\n   * The internal tree representation is unstable and is very likely\n   * to change. Use at your own risk.\n   */ __domTree: {\n        Span,\n        Anchor,\n        SymbolNode,\n        SvgNode,\n        PathNode,\n        LineNode\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/katex/dist/katex.mjs\n");

/***/ })

};
;