[{"/Volumes/D/github/ChatGPT-Next-Web/app/api/auth.ts":"1","/Volumes/D/github/ChatGPT-Next-Web/app/api/common.ts":"2","/Volumes/D/github/ChatGPT-Next-Web/app/api/config/route.ts":"3","/Volumes/D/github/ChatGPT-Next-Web/app/client/api.ts":"4","/Volumes/D/github/ChatGPT-Next-Web/app/client/controller.ts":"5","/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/google.ts":"6","/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/openai.ts":"7","/Volumes/D/github/ChatGPT-Next-Web/app/command.ts":"8","/Volumes/D/github/ChatGPT-Next-Web/app/components/auth.tsx":"9","/Volumes/D/github/ChatGPT-Next-Web/app/components/button.tsx":"10","/Volumes/D/github/ChatGPT-Next-Web/app/components/chat-list.tsx":"11","/Volumes/D/github/ChatGPT-Next-Web/app/components/chat.tsx":"12","/Volumes/D/github/ChatGPT-Next-Web/app/components/emoji.tsx":"13","/Volumes/D/github/ChatGPT-Next-Web/app/components/error.tsx":"14","/Volumes/D/github/ChatGPT-Next-Web/app/components/exporter.tsx":"15","/Volumes/D/github/ChatGPT-Next-Web/app/components/home.tsx":"16","/Volumes/D/github/ChatGPT-Next-Web/app/components/input-range.tsx":"17","/Volumes/D/github/ChatGPT-Next-Web/app/components/markdown.tsx":"18","/Volumes/D/github/ChatGPT-Next-Web/app/components/mask.tsx":"19","/Volumes/D/github/ChatGPT-Next-Web/app/components/message-selector.tsx":"20","/Volumes/D/github/ChatGPT-Next-Web/app/components/model-config.tsx":"21","/Volumes/D/github/ChatGPT-Next-Web/app/components/new-chat.tsx":"22","/Volumes/D/github/ChatGPT-Next-Web/app/components/settings.tsx":"23","/Volumes/D/github/ChatGPT-Next-Web/app/components/sidebar.tsx":"24","/Volumes/D/github/ChatGPT-Next-Web/app/components/ui-lib.tsx":"25","/Volumes/D/github/ChatGPT-Next-Web/app/config/build.ts":"26","/Volumes/D/github/ChatGPT-Next-Web/app/config/client.ts":"27","/Volumes/D/github/ChatGPT-Next-Web/app/config/server.ts":"28","/Volumes/D/github/ChatGPT-Next-Web/app/constant.ts":"29","/Volumes/D/github/ChatGPT-Next-Web/app/global.d.ts":"30","/Volumes/D/github/ChatGPT-Next-Web/app/layout.tsx":"31","/Volumes/D/github/ChatGPT-Next-Web/app/locales/ar.ts":"32","/Volumes/D/github/ChatGPT-Next-Web/app/locales/bn.ts":"33","/Volumes/D/github/ChatGPT-Next-Web/app/locales/cn.ts":"34","/Volumes/D/github/ChatGPT-Next-Web/app/locales/cs.ts":"35","/Volumes/D/github/ChatGPT-Next-Web/app/locales/de.ts":"36","/Volumes/D/github/ChatGPT-Next-Web/app/locales/en.ts":"37","/Volumes/D/github/ChatGPT-Next-Web/app/locales/es.ts":"38","/Volumes/D/github/ChatGPT-Next-Web/app/locales/fr.ts":"39","/Volumes/D/github/ChatGPT-Next-Web/app/locales/id.ts":"40","/Volumes/D/github/ChatGPT-Next-Web/app/locales/index.ts":"41","/Volumes/D/github/ChatGPT-Next-Web/app/locales/it.ts":"42","/Volumes/D/github/ChatGPT-Next-Web/app/locales/jp.ts":"43","/Volumes/D/github/ChatGPT-Next-Web/app/locales/ko.ts":"44","/Volumes/D/github/ChatGPT-Next-Web/app/locales/no.ts":"45","/Volumes/D/github/ChatGPT-Next-Web/app/locales/pt.ts":"46","/Volumes/D/github/ChatGPT-Next-Web/app/locales/ru.ts":"47","/Volumes/D/github/ChatGPT-Next-Web/app/locales/sk.ts":"48","/Volumes/D/github/ChatGPT-Next-Web/app/locales/tr.ts":"49","/Volumes/D/github/ChatGPT-Next-Web/app/locales/tw.ts":"50","/Volumes/D/github/ChatGPT-Next-Web/app/locales/vi.ts":"51","/Volumes/D/github/ChatGPT-Next-Web/app/masks/cn.ts":"52","/Volumes/D/github/ChatGPT-Next-Web/app/masks/en.ts":"53","/Volumes/D/github/ChatGPT-Next-Web/app/masks/index.ts":"54","/Volumes/D/github/ChatGPT-Next-Web/app/masks/typing.ts":"55","/Volumes/D/github/ChatGPT-Next-Web/app/page.tsx":"56","/Volumes/D/github/ChatGPT-Next-Web/app/polyfill.ts":"57","/Volumes/D/github/ChatGPT-Next-Web/app/store/access.ts":"58","/Volumes/D/github/ChatGPT-Next-Web/app/store/chat.ts":"59","/Volumes/D/github/ChatGPT-Next-Web/app/store/config.ts":"60","/Volumes/D/github/ChatGPT-Next-Web/app/store/index.ts":"61","/Volumes/D/github/ChatGPT-Next-Web/app/store/mask.ts":"62","/Volumes/D/github/ChatGPT-Next-Web/app/store/prompt.ts":"63","/Volumes/D/github/ChatGPT-Next-Web/app/store/sync.ts":"64","/Volumes/D/github/ChatGPT-Next-Web/app/store/update.ts":"65","/Volumes/D/github/ChatGPT-Next-Web/app/typing.ts":"66","/Volumes/D/github/ChatGPT-Next-Web/app/utils/clone.ts":"67","/Volumes/D/github/ChatGPT-Next-Web/app/utils/cloud/index.ts":"68","/Volumes/D/github/ChatGPT-Next-Web/app/utils/cloud/upstash.ts":"69","/Volumes/D/github/ChatGPT-Next-Web/app/utils/cloud/webdav.ts":"70","/Volumes/D/github/ChatGPT-Next-Web/app/utils/format.ts":"71","/Volumes/D/github/ChatGPT-Next-Web/app/utils/hooks.ts":"72","/Volumes/D/github/ChatGPT-Next-Web/app/utils/merge.ts":"73","/Volumes/D/github/ChatGPT-Next-Web/app/utils/model.ts":"74","/Volumes/D/github/ChatGPT-Next-Web/app/utils/store.ts":"75","/Volumes/D/github/ChatGPT-Next-Web/app/utils/sync.ts":"76","/Volumes/D/github/ChatGPT-Next-Web/app/utils/token.ts":"77","/Volumes/D/github/ChatGPT-Next-Web/app/utils.ts":"78","/Volumes/D/github/ChatGPT-Next-Web/app/api/upstash/[action]/[...key]/route.ts":"79","/Volumes/D/github/ChatGPT-Next-Web/app/api/webdav/[...path]/route.ts":"80","/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/anthropic.ts":"81","/Volumes/D/github/ChatGPT-Next-Web/app/utils/object.ts":"82","/Volumes/D/github/ChatGPT-Next-Web/app/masks/tw.ts":"83","/Volumes/D/github/ChatGPT-Next-Web/app/utils/chat.ts":"84","/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/alibaba.ts":"85","/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/baidu.ts":"86","/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/bytedance.ts":"87","/Volumes/D/github/ChatGPT-Next-Web/app/masks/build.ts":"88","/Volumes/D/github/ChatGPT-Next-Web/app/utils/baidu.ts":"89","/Volumes/D/github/ChatGPT-Next-Web/app/utils/cloudflare.ts":"90","/Volumes/D/github/ChatGPT-Next-Web/app/api/[provider]/[...path]/route.ts":"91","/Volumes/D/github/ChatGPT-Next-Web/app/api/alibaba.ts":"92","/Volumes/D/github/ChatGPT-Next-Web/app/api/anthropic.ts":"93","/Volumes/D/github/ChatGPT-Next-Web/app/api/artifacts/route.ts":"94","/Volumes/D/github/ChatGPT-Next-Web/app/api/azure.ts":"95","/Volumes/D/github/ChatGPT-Next-Web/app/api/baidu.ts":"96","/Volumes/D/github/ChatGPT-Next-Web/app/api/bytedance.ts":"97","/Volumes/D/github/ChatGPT-Next-Web/app/api/deepseek.ts":"98","/Volumes/D/github/ChatGPT-Next-Web/app/api/glm.ts":"99","/Volumes/D/github/ChatGPT-Next-Web/app/api/google.ts":"100","/Volumes/D/github/ChatGPT-Next-Web/app/api/iflytek.ts":"101","/Volumes/D/github/ChatGPT-Next-Web/app/api/moonshot.ts":"102","/Volumes/D/github/ChatGPT-Next-Web/app/api/openai.ts":"103","/Volumes/D/github/ChatGPT-Next-Web/app/api/proxy.ts":"104","/Volumes/D/github/ChatGPT-Next-Web/app/api/siliconflow.ts":"105","/Volumes/D/github/ChatGPT-Next-Web/app/api/stability.ts":"106","/Volumes/D/github/ChatGPT-Next-Web/app/api/tencent/route.ts":"107","/Volumes/D/github/ChatGPT-Next-Web/app/api/xai.ts":"108","/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/deepseek.ts":"109","/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/glm.ts":"110","/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/iflytek.ts":"111","/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/moonshot.ts":"112","/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/siliconflow.ts":"113","/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/tencent.ts":"114","/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/xai.ts":"115","/Volumes/D/github/ChatGPT-Next-Web/app/components/artifacts.tsx":"116","/Volumes/D/github/ChatGPT-Next-Web/app/components/mcp-market.tsx":"117","/Volumes/D/github/ChatGPT-Next-Web/app/components/plugin.tsx":"118","/Volumes/D/github/ChatGPT-Next-Web/app/components/realtime-chat/index.ts":"119","/Volumes/D/github/ChatGPT-Next-Web/app/components/realtime-chat/realtime-chat.tsx":"120","/Volumes/D/github/ChatGPT-Next-Web/app/components/realtime-chat/realtime-config.tsx":"121","/Volumes/D/github/ChatGPT-Next-Web/app/components/sd/index.tsx":"122","/Volumes/D/github/ChatGPT-Next-Web/app/components/sd/sd-panel.tsx":"123","/Volumes/D/github/ChatGPT-Next-Web/app/components/sd/sd-sidebar.tsx":"124","/Volumes/D/github/ChatGPT-Next-Web/app/components/sd/sd.tsx":"125","/Volumes/D/github/ChatGPT-Next-Web/app/components/search-chat.tsx":"126","/Volumes/D/github/ChatGPT-Next-Web/app/components/tts-config.tsx":"127","/Volumes/D/github/ChatGPT-Next-Web/app/components/voice-print/index.ts":"128","/Volumes/D/github/ChatGPT-Next-Web/app/components/voice-print/voice-print.tsx":"129","/Volumes/D/github/ChatGPT-Next-Web/app/lib/audio.ts":"130","/Volumes/D/github/ChatGPT-Next-Web/app/locales/da.ts":"131","/Volumes/D/github/ChatGPT-Next-Web/app/mcp/actions.ts":"132","/Volumes/D/github/ChatGPT-Next-Web/app/mcp/client.ts":"133","/Volumes/D/github/ChatGPT-Next-Web/app/mcp/logger.ts":"134","/Volumes/D/github/ChatGPT-Next-Web/app/mcp/types.ts":"135","/Volumes/D/github/ChatGPT-Next-Web/app/mcp/utils.ts":"136","/Volumes/D/github/ChatGPT-Next-Web/app/store/plugin.ts":"137","/Volumes/D/github/ChatGPT-Next-Web/app/store/sd.ts":"138","/Volumes/D/github/ChatGPT-Next-Web/app/utils/audio.ts":"139","/Volumes/D/github/ChatGPT-Next-Web/app/utils/auth-settings-events.ts":"140","/Volumes/D/github/ChatGPT-Next-Web/app/utils/hmac.ts":"141","/Volumes/D/github/ChatGPT-Next-Web/app/utils/indexedDB-storage.ts":"142","/Volumes/D/github/ChatGPT-Next-Web/app/utils/ms_edge_tts.ts":"143","/Volumes/D/github/ChatGPT-Next-Web/app/utils/stream.ts":"144","/Volumes/D/github/ChatGPT-Next-Web/app/utils/tencent.ts":"145"},{"size":3941,"mtime":1738736986088,"results":"146","hashOfConfig":"147"},{"size":5974,"mtime":1736322425242,"results":"148","hashOfConfig":"147"},{"size":859,"mtime":1736322425243,"results":"149","hashOfConfig":"147"},{"size":10589,"mtime":1743556370935,"results":"150","hashOfConfig":"147"},{"size":914,"mtime":1706753140076,"results":"151","hashOfConfig":"147"},{"size":9657,"mtime":1739525749168,"results":"152","hashOfConfig":"147"},{"size":15115,"mtime":1746770633374,"results":"153","hashOfConfig":"147"},{"size":1981,"mtime":1727250083222,"results":"154","hashOfConfig":"147"},{"size":5763,"mtime":1732520926165,"results":"155","hashOfConfig":"147"},{"size":1492,"mtime":1732520926167,"results":"156","hashOfConfig":"147"},{"size":4974,"mtime":1732520926168,"results":"157","hashOfConfig":"147"},{"size":72019,"mtime":1738736986096,"results":"158","hashOfConfig":"147"},{"size":3804,"mtime":1743556370937,"results":"159","hashOfConfig":"147"},{"size":2051,"mtime":1727250083229,"results":"160","hashOfConfig":"147"},{"size":18690,"mtime":1739525749176,"results":"161","hashOfConfig":"147"},{"size":7184,"mtime":1738736986098,"results":"162","hashOfConfig":"147"},{"size":762,"mtime":1732520926172,"results":"163","hashOfConfig":"147"},{"size":9737,"mtime":1732520926172,"results":"164","hashOfConfig":"147"},{"size":21123,"mtime":1732520926172,"results":"165","hashOfConfig":"147"},{"size":7075,"mtime":1732520926173,"results":"166","hashOfConfig":"147"},{"size":9018,"mtime":1732520926174,"results":"167","hashOfConfig":"147"},{"size":5354,"mtime":1732520926176,"results":"168","hashOfConfig":"147"},{"size":60626,"mtime":1738736986099,"results":"169","hashOfConfig":"147"},{"size":11026,"mtime":1738736986100,"results":"170","hashOfConfig":"147"},{"size":14272,"mtime":1739525749176,"results":"171","hashOfConfig":"147"},{"size":1278,"mtime":1718697629675,"results":"172","hashOfConfig":"147"},{"size":615,"mtime":1723617231672,"results":"173","hashOfConfig":"147"},{"size":7966,"mtime":1738736986100,"results":"174","hashOfConfig":"147"},{"size":21629,"mtime":1746770633374,"results":"175","hashOfConfig":"147"},{"size":1179,"mtime":1730254633537,"results":"176","hashOfConfig":"147"},{"size":1929,"mtime":1738736986103,"results":"177","hashOfConfig":"147"},{"size":22592,"mtime":1730254633540,"results":"178","hashOfConfig":"147"},{"size":32740,"mtime":1730254633548,"results":"179","hashOfConfig":"147"},{"size":24578,"mtime":1738736986103,"results":"180","hashOfConfig":"147"},{"size":19183,"mtime":1730254633550,"results":"181","hashOfConfig":"147"},{"size":20512,"mtime":1730254633550,"results":"182","hashOfConfig":"147"},{"size":24234,"mtime":1738736986104,"results":"183","hashOfConfig":"147"},{"size":20189,"mtime":1730254633551,"results":"184","hashOfConfig":"147"},{"size":20687,"mtime":1730254633552,"results":"185","hashOfConfig":"147"},{"size":18665,"mtime":1730254633552,"results":"186","hashOfConfig":"147"},{"size":3309,"mtime":1743556370939,"results":"187","hashOfConfig":"147"},{"size":20056,"mtime":1730254633553,"results":"188","hashOfConfig":"147"},{"size":21382,"mtime":1730254633553,"results":"189","hashOfConfig":"147"},{"size":19568,"mtime":1730254633553,"results":"190","hashOfConfig":"147"},{"size":18911,"mtime":1730254633554,"results":"191","hashOfConfig":"147"},{"size":16523,"mtime":1730254633554,"results":"192","hashOfConfig":"147"},{"size":26411,"mtime":1730254633554,"results":"193","hashOfConfig":"147"},{"size":17136,"mtime":1730254633555,"results":"194","hashOfConfig":"147"},{"size":19618,"mtime":1730254633555,"results":"195","hashOfConfig":"147"},{"size":17107,"mtime":1736322425254,"results":"196","hashOfConfig":"147"},{"size":21480,"mtime":1730254633556,"results":"197","hashOfConfig":"147"},{"size":21404,"mtime":1736322425255,"results":"198","hashOfConfig":"147"},{"size":12849,"mtime":1706753140106,"results":"199","hashOfConfig":"147"},{"size":1039,"mtime":1727250083261,"results":"200","hashOfConfig":"147"},{"size":207,"mtime":1706753140107,"results":"201","hashOfConfig":"147"},{"size":373,"mtime":1738736986106,"results":"202","hashOfConfig":"147"},{"size":623,"mtime":1706753140107,"results":"203","hashOfConfig":"147"},{"size":7139,"mtime":1738736986107,"results":"204","hashOfConfig":"147"},{"size":28164,"mtime":1738736986108,"results":"205","hashOfConfig":"147"},{"size":6563,"mtime":1736322425256,"results":"206","hashOfConfig":"147"},{"size":128,"mtime":1727250083263,"results":"207","hashOfConfig":"147"},{"size":3420,"mtime":1730254633564,"results":"208","hashOfConfig":"147"},{"size":4720,"mtime":1730254633565,"results":"209","hashOfConfig":"147"},{"size":3834,"mtime":1730254633565,"results":"210","hashOfConfig":"147"},{"size":4801,"mtime":1730254633566,"results":"211","hashOfConfig":"147"},{"size":577,"mtime":1736322425257,"results":"212","hashOfConfig":"147"},{"size":271,"mtime":1706753140112,"results":"213","hashOfConfig":"147"},{"size":787,"mtime":1706753140112,"results":"214","hashOfConfig":"147"},{"size":3218,"mtime":1718697629687,"results":"215","hashOfConfig":"147"},{"size":2574,"mtime":1724393589135,"results":"216","hashOfConfig":"147"},{"size":843,"mtime":1706753140113,"results":"217","hashOfConfig":"147"},{"size":616,"mtime":1721379671706,"results":"218","hashOfConfig":"147"},{"size":419,"mtime":1706753140113,"results":"219","hashOfConfig":"147"},{"size":7806,"mtime":1738736986109,"results":"220","hashOfConfig":"147"},{"size":2050,"mtime":1727250083269,"results":"221","hashOfConfig":"147"},{"size":4781,"mtime":1706753140114,"results":"222","hashOfConfig":"147"},{"size":465,"mtime":1706753140114,"results":"223","hashOfConfig":"147"},{"size":12594,"mtime":1739525749186,"results":"224","hashOfConfig":"147"},{"size":1865,"mtime":1710840278309,"results":"225","hashOfConfig":"147"},{"size":3897,"mtime":1727250083215,"results":"226","hashOfConfig":"147"},{"size":12206,"mtime":1732520926159,"results":"227","hashOfConfig":"147"},{"size":397,"mtime":1712633899662,"results":"228","hashOfConfig":"147"},{"size":21458,"mtime":1713171954509,"results":"229","hashOfConfig":"147"},{"size":19233,"mtime":1743556370939,"results":"230","hashOfConfig":"147"},{"size":7592,"mtime":1743556370935,"results":"231","hashOfConfig":"147"},{"size":8105,"mtime":1739525749166,"results":"232","hashOfConfig":"147"},{"size":6893,"mtime":1739525749166,"results":"233","hashOfConfig":"147"},{"size":551,"mtime":1720428014914,"results":"234","hashOfConfig":"147"},{"size":555,"mtime":1721379671705,"results":"235","hashOfConfig":"147"},{"size":1240,"mtime":1721379671705,"results":"236","hashOfConfig":"147"},{"size":2609,"mtime":1738736986088,"results":"237","hashOfConfig":"147"},{"size":3269,"mtime":1736322425239,"results":"238","hashOfConfig":"147"},{"size":4380,"mtime":1736322425240,"results":"239","hashOfConfig":"147"},{"size":2083,"mtime":1724393589098,"results":"240","hashOfConfig":"147"},{"size":823,"mtime":1727250083211,"results":"241","hashOfConfig":"147"},{"size":3554,"mtime":1736322425240,"results":"242","hashOfConfig":"147"},{"size":3165,"mtime":1736322425242,"results":"243","hashOfConfig":"147"},{"size":3207,"mtime":1736322425244,"results":"244","hashOfConfig":"147"},{"size":3227,"mtime":1736322425245,"results":"245","hashOfConfig":"147"},{"size":3316,"mtime":1730254633517,"results":"246","hashOfConfig":"147"},{"size":3203,"mtime":1736322425246,"results":"247","hashOfConfig":"147"},{"size":3207,"mtime":1736322425246,"results":"248","hashOfConfig":"147"},{"size":2096,"mtime":1743556370934,"results":"249","hashOfConfig":"147"},{"size":2766,"mtime":1732520926158,"results":"250","hashOfConfig":"147"},{"size":3234,"mtime":1738736986090,"results":"251","hashOfConfig":"147"},{"size":2641,"mtime":1724393589099,"results":"252","hashOfConfig":"147"},{"size":2531,"mtime":1727250083214,"results":"253","hashOfConfig":"147"},{"size":3162,"mtime":1736322425246,"results":"254","hashOfConfig":"147"},{"size":7624,"mtime":1743556370936,"results":"255","hashOfConfig":"147"},{"size":8134,"mtime":1739525749168,"results":"256","hashOfConfig":"147"},{"size":7247,"mtime":1732520926163,"results":"257","hashOfConfig":"147"},{"size":5700,"mtime":1732520926163,"results":"258","hashOfConfig":"147"},{"size":8085,"mtime":1739525749173,"results":"259","hashOfConfig":"147"},{"size":7674,"mtime":1739525749173,"results":"260","hashOfConfig":"147"},{"size":5539,"mtime":1739525749175,"results":"261","hashOfConfig":"147"},{"size":7585,"mtime":1727250083222,"results":"262","hashOfConfig":"147"},{"size":24610,"mtime":1738736986099,"results":"263","hashOfConfig":"147"},{"size":12810,"mtime":1732520926176,"results":"264","hashOfConfig":"147"},{"size":33,"mtime":1732520926177,"results":"265","hashOfConfig":"147"},{"size":10960,"mtime":1732520926177,"results":"266","hashOfConfig":"147"},{"size":5560,"mtime":1732520926177,"results":"267","hashOfConfig":"147"},{"size":50,"mtime":1723617231639,"results":"268","hashOfConfig":"147"},{"size":9445,"mtime":1732520926178,"results":"269","hashOfConfig":"147"},{"size":3967,"mtime":1723617231642,"results":"270","hashOfConfig":"147"},{"size":13877,"mtime":1732520926178,"results":"271","hashOfConfig":"147"},{"size":5238,"mtime":1724393589111,"results":"272","hashOfConfig":"147"},{"size":3870,"mtime":1727250083235,"results":"273","hashOfConfig":"147"},{"size":31,"mtime":1732520926180,"results":"274","hashOfConfig":"147"},{"size":5379,"mtime":1732520926180,"results":"275","hashOfConfig":"147"},{"size":6833,"mtime":1732520926182,"results":"276","hashOfConfig":"147"},{"size":23097,"mtime":1743556370938,"results":"277","hashOfConfig":"147"},{"size":10414,"mtime":1738736986104,"results":"278","hashOfConfig":"147"},{"size":1366,"mtime":1738736986105,"results":"279","hashOfConfig":"147"},{"size":1446,"mtime":1738736986105,"results":"280","hashOfConfig":"147"},{"size":3568,"mtime":1738736986105,"results":"281","hashOfConfig":"147"},{"size":349,"mtime":1738736986106,"results":"282","hashOfConfig":"147"},{"size":7837,"mtime":1730254633564,"results":"283","hashOfConfig":"147"},{"size":4677,"mtime":1723617231678,"results":"284","hashOfConfig":"147"},{"size":1314,"mtime":1727250083267,"results":"285","hashOfConfig":"147"},{"size":629,"mtime":1730254633569,"results":"286","hashOfConfig":"147"},{"size":7661,"mtime":1724393589135,"results":"287","hashOfConfig":"147"},{"size":1161,"mtime":1727250083269,"results":"288","hashOfConfig":"147"},{"size":15323,"mtime":1727250083269,"results":"289","hashOfConfig":"147"},{"size":3078,"mtime":1732520926187,"results":"290","hashOfConfig":"147"},{"size":2815,"mtime":1724393589136,"results":"291","hashOfConfig":"147"},{"filePath":"292","messages":"293","suppressedMessages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11f545v",{"filePath":"295","messages":"296","suppressedMessages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","suppressedMessages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","suppressedMessages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"304","messages":"305","suppressedMessages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"307","messages":"308","suppressedMessages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"310","messages":"311","suppressedMessages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","suppressedMessages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"316","messages":"317","suppressedMessages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","suppressedMessages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"322","messages":"323","suppressedMessages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","suppressedMessages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328"},{"filePath":"329","messages":"330","suppressedMessages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"332","messages":"333","suppressedMessages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","suppressedMessages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"338","messages":"339","suppressedMessages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"341","messages":"342","suppressedMessages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"344","messages":"345","suppressedMessages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347"},{"filePath":"348","messages":"349","suppressedMessages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"351","messages":"352","suppressedMessages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"354","messages":"355","suppressedMessages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"357","messages":"358","suppressedMessages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"360","messages":"361","suppressedMessages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"363","messages":"364","suppressedMessages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","suppressedMessages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"369","messages":"370","suppressedMessages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","suppressedMessages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"375","messages":"376","suppressedMessages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"378","messages":"379","suppressedMessages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"381","messages":"382","suppressedMessages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","suppressedMessages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"387","messages":"388","suppressedMessages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"390","messages":"391","suppressedMessages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"393","messages":"394","suppressedMessages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"396","messages":"397","suppressedMessages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"399","messages":"400","suppressedMessages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"402","messages":"403","suppressedMessages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"405","messages":"406","suppressedMessages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"408","messages":"409","suppressedMessages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"411","messages":"412","suppressedMessages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"414","messages":"415","suppressedMessages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"417","messages":"418","suppressedMessages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"420","messages":"421","suppressedMessages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"423","messages":"424","suppressedMessages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"426","messages":"427","suppressedMessages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"429","messages":"430","suppressedMessages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"432","messages":"433","suppressedMessages":"434","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"435","messages":"436","suppressedMessages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"438","messages":"439","suppressedMessages":"440","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"441","messages":"442","suppressedMessages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"444","messages":"445","suppressedMessages":"446","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"447","messages":"448","suppressedMessages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"450","messages":"451","suppressedMessages":"452","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"453","messages":"454","suppressedMessages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"456","messages":"457","suppressedMessages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"459","messages":"460","suppressedMessages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"462","messages":"463","suppressedMessages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"465","messages":"466","suppressedMessages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"468","messages":"469","suppressedMessages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"471","messages":"472","suppressedMessages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"474","messages":"475","suppressedMessages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"477","messages":"478","suppressedMessages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"480","messages":"481","suppressedMessages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"483","messages":"484","suppressedMessages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"486","messages":"487","suppressedMessages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"489","messages":"490","suppressedMessages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"492","messages":"493","suppressedMessages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"495","messages":"496","suppressedMessages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"498","messages":"499","suppressedMessages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"501","messages":"502","suppressedMessages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"504","messages":"505","suppressedMessages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"507","messages":"508","suppressedMessages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"510","messages":"511","suppressedMessages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"513","messages":"514","suppressedMessages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"516","messages":"517","suppressedMessages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"519","messages":"520","suppressedMessages":"521","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"522","messages":"523","suppressedMessages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"525","messages":"526","suppressedMessages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"528","messages":"529","suppressedMessages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"531","messages":"532","suppressedMessages":"533","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"534","messages":"535","suppressedMessages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"537","messages":"538","suppressedMessages":"539","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"540","messages":"541","suppressedMessages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"543","messages":"544","suppressedMessages":"545","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"546","messages":"547","suppressedMessages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"549","messages":"550","suppressedMessages":"551","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"552","messages":"553","suppressedMessages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"555","messages":"556","suppressedMessages":"557","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"558","messages":"559","suppressedMessages":"560","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"561","messages":"562","suppressedMessages":"563","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"564","messages":"565","suppressedMessages":"566","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"567","messages":"568","suppressedMessages":"569","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"570","messages":"571","suppressedMessages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"573","messages":"574","suppressedMessages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"576","messages":"577","suppressedMessages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"579","messages":"580","suppressedMessages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"582","messages":"583","suppressedMessages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"585","messages":"586","suppressedMessages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"588","messages":"589","suppressedMessages":"590","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"591","messages":"592","suppressedMessages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"594","messages":"595","suppressedMessages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"597","messages":"598","suppressedMessages":"599","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"600","messages":"601","suppressedMessages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"603","messages":"604","suppressedMessages":"605","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"606","messages":"607","suppressedMessages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"609","messages":"610","suppressedMessages":"611","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"612","messages":"613","suppressedMessages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"615","messages":"616","suppressedMessages":"617","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"618","messages":"619","suppressedMessages":"620","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"621","messages":"622","suppressedMessages":"623","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"624","messages":"625","suppressedMessages":"626","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"627","messages":"628","suppressedMessages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"630","messages":"631","suppressedMessages":"632","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"633","messages":"634","suppressedMessages":"635","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"636","messages":"637","suppressedMessages":"638","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"639","messages":"640","suppressedMessages":"641","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"642","messages":"643","suppressedMessages":"644","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"645","messages":"646","suppressedMessages":"647","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"648","messages":"649","suppressedMessages":"650","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"651","messages":"652","suppressedMessages":"653","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"654"},{"filePath":"655","messages":"656","suppressedMessages":"657","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"658","messages":"659","suppressedMessages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"661","messages":"662","suppressedMessages":"663","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"664","messages":"665","suppressedMessages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"667","messages":"668","suppressedMessages":"669","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"670"},{"filePath":"671","messages":"672","suppressedMessages":"673","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"674"},{"filePath":"675","messages":"676","suppressedMessages":"677","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"678","messages":"679","suppressedMessages":"680","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"681","messages":"682","suppressedMessages":"683","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"684","messages":"685","suppressedMessages":"686","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"687","messages":"688","suppressedMessages":"689","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"690","messages":"691","suppressedMessages":"692","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"693","messages":"694","suppressedMessages":"695","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"696","messages":"697","suppressedMessages":"698","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"699","messages":"700","suppressedMessages":"701","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"702","messages":"703","suppressedMessages":"704","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"705","messages":"706","suppressedMessages":"707","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"708","messages":"709","suppressedMessages":"710","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"711","messages":"712","suppressedMessages":"713","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"714","messages":"715","suppressedMessages":"716","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"717","messages":"718","suppressedMessages":"719","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"720","messages":"721","suppressedMessages":"722","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"723","messages":"724","suppressedMessages":"725","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"726","messages":"727","suppressedMessages":"728","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"729","messages":"730","suppressedMessages":"731","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Volumes/D/github/ChatGPT-Next-Web/app/api/auth.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/common.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/config/route.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/client/api.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/client/controller.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/google.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/openai.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/command.ts",[],["732"],"/Volumes/D/github/ChatGPT-Next-Web/app/components/auth.tsx",[],["733"],"/Volumes/D/github/ChatGPT-Next-Web/app/components/button.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/chat-list.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/chat.tsx",["734","735","736","737"],["738","739","740","741"],"import { useDebouncedCallback } from \"use-debounce\";\nimport React, {\n  Fragment,\n  RefObject,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\n\nimport SendWhiteIcon from \"../icons/send-white.svg\";\nimport BrainIcon from \"../icons/brain.svg\";\nimport RenameIcon from \"../icons/rename.svg\";\nimport EditIcon from \"../icons/rename.svg\";\nimport ExportIcon from \"../icons/share.svg\";\nimport ReturnIcon from \"../icons/return.svg\";\nimport CopyIcon from \"../icons/copy.svg\";\nimport SpeakIcon from \"../icons/speak.svg\";\nimport SpeakStopIcon from \"../icons/speak-stop.svg\";\nimport LoadingIcon from \"../icons/three-dots.svg\";\nimport LoadingButtonIcon from \"../icons/loading.svg\";\nimport PromptIcon from \"../icons/prompt.svg\";\nimport MaskIcon from \"../icons/mask.svg\";\nimport MaxIcon from \"../icons/max.svg\";\nimport MinIcon from \"../icons/min.svg\";\nimport ResetIcon from \"../icons/reload.svg\";\nimport ReloadIcon from \"../icons/reload.svg\";\nimport BreakIcon from \"../icons/break.svg\";\nimport SettingsIcon from \"../icons/chat-settings.svg\";\nimport DeleteIcon from \"../icons/clear.svg\";\nimport PinIcon from \"../icons/pin.svg\";\nimport ConfirmIcon from \"../icons/confirm.svg\";\nimport CloseIcon from \"../icons/close.svg\";\nimport CancelIcon from \"../icons/cancel.svg\";\nimport ImageIcon from \"../icons/image.svg\";\n\nimport LightIcon from \"../icons/light.svg\";\nimport DarkIcon from \"../icons/dark.svg\";\nimport AutoIcon from \"../icons/auto.svg\";\nimport BottomIcon from \"../icons/bottom.svg\";\nimport StopIcon from \"../icons/pause.svg\";\nimport RobotIcon from \"../icons/robot.svg\";\nimport SizeIcon from \"../icons/size.svg\";\nimport QualityIcon from \"../icons/hd.svg\";\nimport StyleIcon from \"../icons/palette.svg\";\nimport PluginIcon from \"../icons/plugin.svg\";\nimport ShortcutkeyIcon from \"../icons/shortcutkey.svg\";\nimport McpToolIcon from \"../icons/tool.svg\";\nimport HeadphoneIcon from \"../icons/headphone.svg\";\nimport {\n  BOT_HELLO,\n  ChatMessage,\n  createMessage,\n  DEFAULT_TOPIC,\n  ModelType,\n  SubmitKey,\n  Theme,\n  useAccessStore,\n  useAppConfig,\n  useChatStore,\n  usePluginStore,\n} from \"../store\";\n\nimport {\n  autoGrowTextArea,\n  copyToClipboard,\n  getMessageImages,\n  getMessageTextContent,\n  isDalle3,\n  isVisionModel,\n  safeLocalStorage,\n  getModelSizes,\n  supportsCustomSize,\n  useMobileScreen,\n  selectOrCopy,\n  showPlugins,\n} from \"../utils\";\n\nimport { uploadImage as uploadImageRemote } from \"@/app/utils/chat\";\n\nimport dynamic from \"next/dynamic\";\n\nimport { ChatControllerPool } from \"../client/controller\";\nimport { DalleQuality, DalleStyle, ModelSize } from \"../typing\";\nimport { Prompt, usePromptStore } from \"../store/prompt\";\nimport Locale from \"../locales\";\n\nimport { IconButton } from \"./button\";\nimport styles from \"./chat.module.scss\";\n\nimport {\n  List,\n  ListItem,\n  Modal,\n  Selector,\n  showConfirm,\n  showPrompt,\n  showToast,\n} from \"./ui-lib\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  CHAT_PAGE_SIZE,\n  DEFAULT_TTS_ENGINE,\n  ModelProvider,\n  Path,\n  REQUEST_TIMEOUT_MS,\n  ServiceProvider,\n  UNFINISHED_INPUT,\n} from \"../constant\";\nimport { Avatar } from \"./emoji\";\nimport { ContextPrompts, MaskAvatar, MaskConfig } from \"./mask\";\nimport { useMaskStore } from \"../store/mask\";\nimport { ChatCommandPrefix, useChatCommand, useCommand } from \"../command\";\nimport { prettyObject } from \"../utils/format\";\nimport { ExportMessageModal } from \"./exporter\";\nimport { getClientConfig } from \"../config/client\";\nimport { useAllModels } from \"../utils/hooks\";\nimport { ClientApi, MultimodalContent } from \"../client/api\";\nimport { createTTSPlayer } from \"../utils/audio\";\nimport { MsEdgeTTS, OUTPUT_FORMAT } from \"../utils/ms_edge_tts\";\n\nimport { isEmpty } from \"lodash-es\";\nimport { getModelProvider } from \"../utils/model\";\nimport { RealtimeChat } from \"@/app/components/realtime-chat\";\nimport clsx from \"clsx\";\nimport { getAvailableClientsCount, isMcpEnabled } from \"../mcp/actions\";\n\nconst localStorage = safeLocalStorage();\n\nconst ttsPlayer = createTTSPlayer();\n\nconst Markdown = dynamic(async () => (await import(\"./markdown\")).Markdown, {\n  loading: () => <LoadingIcon />,\n});\n\nconst MCPAction = () => {\n  const navigate = useNavigate();\n  const [count, setCount] = useState<number>(0);\n  const [mcpEnabled, setMcpEnabled] = useState(false);\n\n  useEffect(() => {\n    const checkMcpStatus = async () => {\n      const enabled = await isMcpEnabled();\n      setMcpEnabled(enabled);\n      if (enabled) {\n        const count = await getAvailableClientsCount();\n        setCount(count);\n      }\n    };\n    checkMcpStatus();\n  }, []);\n\n  if (!mcpEnabled) return null;\n\n  return (\n    <ChatAction\n      onClick={() => navigate(Path.McpMarket)}\n      text={`MCP${count ? ` (${count})` : \"\"}`}\n      icon={<McpToolIcon />}\n    />\n  );\n};\n\nexport function SessionConfigModel(props: { onClose: () => void }) {\n  const chatStore = useChatStore();\n  const session = chatStore.currentSession();\n  const maskStore = useMaskStore();\n  const navigate = useNavigate();\n\n  return (\n    <div className=\"modal-mask\">\n      <Modal\n        title={Locale.Context.Edit}\n        onClose={() => props.onClose()}\n        actions={[\n          <IconButton\n            key=\"reset\"\n            icon={<ResetIcon />}\n            bordered\n            text={Locale.Chat.Config.Reset}\n            onClick={async () => {\n              if (await showConfirm(Locale.Memory.ResetConfirm)) {\n                chatStore.updateTargetSession(\n                  session,\n                  (session) => (session.memoryPrompt = \"\"),\n                );\n              }\n            }}\n          />,\n          <IconButton\n            key=\"copy\"\n            icon={<CopyIcon />}\n            bordered\n            text={Locale.Chat.Config.SaveAs}\n            onClick={() => {\n              navigate(Path.Masks);\n              setTimeout(() => {\n                maskStore.create(session.mask);\n              }, 500);\n            }}\n          />,\n        ]}\n      >\n        <MaskConfig\n          mask={session.mask}\n          updateMask={(updater) => {\n            const mask = { ...session.mask };\n            updater(mask);\n            chatStore.updateTargetSession(\n              session,\n              (session) => (session.mask = mask),\n            );\n          }}\n          shouldSyncFromGlobal\n          extraListItems={\n            session.mask.modelConfig.sendMemory ? (\n              <ListItem\n                className=\"copyable\"\n                title={`${Locale.Memory.Title} (${session.lastSummarizeIndex} of ${session.messages.length})`}\n                subTitle={session.memoryPrompt || Locale.Memory.EmptyContent}\n              ></ListItem>\n            ) : (\n              <></>\n            )\n          }\n        ></MaskConfig>\n      </Modal>\n    </div>\n  );\n}\n\nfunction PromptToast(props: {\n  showToast?: boolean;\n  showModal?: boolean;\n  setShowModal: (_: boolean) => void;\n}) {\n  const chatStore = useChatStore();\n  const session = chatStore.currentSession();\n  const context = session.mask.context;\n\n  return (\n    <div className={styles[\"prompt-toast\"]} key=\"prompt-toast\">\n      {props.showToast && context.length > 0 && (\n        <div\n          className={clsx(styles[\"prompt-toast-inner\"], \"clickable\")}\n          role=\"button\"\n          onClick={() => props.setShowModal(true)}\n        >\n          <BrainIcon />\n          <span className={styles[\"prompt-toast-content\"]}>\n            {Locale.Context.Toast(context.length)}\n          </span>\n        </div>\n      )}\n      {props.showModal && (\n        <SessionConfigModel onClose={() => props.setShowModal(false)} />\n      )}\n    </div>\n  );\n}\n\nfunction useSubmitHandler() {\n  const config = useAppConfig();\n  const submitKey = config.submitKey;\n  const isComposing = useRef(false);\n\n  useEffect(() => {\n    const onCompositionStart = () => {\n      isComposing.current = true;\n    };\n    const onCompositionEnd = () => {\n      isComposing.current = false;\n    };\n\n    window.addEventListener(\"compositionstart\", onCompositionStart);\n    window.addEventListener(\"compositionend\", onCompositionEnd);\n\n    return () => {\n      window.removeEventListener(\"compositionstart\", onCompositionStart);\n      window.removeEventListener(\"compositionend\", onCompositionEnd);\n    };\n  }, []);\n\n  const shouldSubmit = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    // Fix Chinese input method \"Enter\" on Safari\n    if (e.keyCode == 229) return false;\n    if (e.key !== \"Enter\") return false;\n    if (e.key === \"Enter\" && (e.nativeEvent.isComposing || isComposing.current))\n      return false;\n    return (\n      (config.submitKey === SubmitKey.AltEnter && e.altKey) ||\n      (config.submitKey === SubmitKey.CtrlEnter && e.ctrlKey) ||\n      (config.submitKey === SubmitKey.ShiftEnter && e.shiftKey) ||\n      (config.submitKey === SubmitKey.MetaEnter && e.metaKey) ||\n      (config.submitKey === SubmitKey.Enter &&\n        !e.altKey &&\n        !e.ctrlKey &&\n        !e.shiftKey &&\n        !e.metaKey)\n    );\n  };\n\n  return {\n    submitKey,\n    shouldSubmit,\n  };\n}\n\nexport type RenderPrompt = Pick<Prompt, \"title\" | \"content\">;\n\nexport function PromptHints(props: {\n  prompts: RenderPrompt[];\n  onPromptSelect: (prompt: RenderPrompt) => void;\n}) {\n  const noPrompts = props.prompts.length === 0;\n  const [selectIndex, setSelectIndex] = useState(0);\n  const selectedRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    setSelectIndex(0);\n  }, [props.prompts.length]);\n\n  useEffect(() => {\n    const onKeyDown = (e: KeyboardEvent) => {\n      if (noPrompts || e.metaKey || e.altKey || e.ctrlKey) {\n        return;\n      }\n      // arrow up / down to select prompt\n      const changeIndex = (delta: number) => {\n        e.stopPropagation();\n        e.preventDefault();\n        const nextIndex = Math.max(\n          0,\n          Math.min(props.prompts.length - 1, selectIndex + delta),\n        );\n        setSelectIndex(nextIndex);\n        selectedRef.current?.scrollIntoView({\n          block: \"center\",\n        });\n      };\n\n      if (e.key === \"ArrowUp\") {\n        changeIndex(1);\n      } else if (e.key === \"ArrowDown\") {\n        changeIndex(-1);\n      } else if (e.key === \"Enter\") {\n        const selectedPrompt = props.prompts.at(selectIndex);\n        if (selectedPrompt) {\n          props.onPromptSelect(selectedPrompt);\n        }\n      }\n    };\n\n    window.addEventListener(\"keydown\", onKeyDown);\n\n    return () => window.removeEventListener(\"keydown\", onKeyDown);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.prompts.length, selectIndex]);\n\n  if (noPrompts) return null;\n  return (\n    <div className={styles[\"prompt-hints\"]}>\n      {props.prompts.map((prompt, i) => (\n        <div\n          ref={i === selectIndex ? selectedRef : null}\n          className={clsx(styles[\"prompt-hint\"], {\n            [styles[\"prompt-hint-selected\"]]: i === selectIndex,\n          })}\n          key={prompt.title + i.toString()}\n          onClick={() => props.onPromptSelect(prompt)}\n          onMouseEnter={() => setSelectIndex(i)}\n        >\n          <div className={styles[\"hint-title\"]}>{prompt.title}</div>\n          <div className={styles[\"hint-content\"]}>{prompt.content}</div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction ClearContextDivider() {\n  const chatStore = useChatStore();\n  const session = chatStore.currentSession();\n\n  return (\n    <div\n      className={styles[\"clear-context\"]}\n      onClick={() =>\n        chatStore.updateTargetSession(\n          session,\n          (session) => (session.clearContextIndex = undefined),\n        )\n      }\n    >\n      <div className={styles[\"clear-context-tips\"]}>{Locale.Context.Clear}</div>\n      <div className={styles[\"clear-context-revert-btn\"]}>\n        {Locale.Context.Revert}\n      </div>\n    </div>\n  );\n}\n\nexport function ChatAction(props: {\n  text: string;\n  icon: JSX.Element;\n  onClick: () => void;\n}) {\n  const iconRef = useRef<HTMLDivElement>(null);\n  const textRef = useRef<HTMLDivElement>(null);\n  const [width, setWidth] = useState({\n    full: 16,\n    icon: 16,\n  });\n\n  function updateWidth() {\n    if (!iconRef.current || !textRef.current) return;\n    const getWidth = (dom: HTMLDivElement) => dom.getBoundingClientRect().width;\n    const textWidth = getWidth(textRef.current);\n    const iconWidth = getWidth(iconRef.current);\n    setWidth({\n      full: textWidth + iconWidth,\n      icon: iconWidth,\n    });\n  }\n\n  return (\n    <div\n      className={clsx(styles[\"chat-input-action\"], \"clickable\")}\n      onClick={() => {\n        props.onClick();\n        setTimeout(updateWidth, 1);\n      }}\n      onMouseEnter={updateWidth}\n      onTouchStart={updateWidth}\n      style={\n        {\n          \"--icon-width\": `${width.icon}px`,\n          \"--full-width\": `${width.full}px`,\n        } as React.CSSProperties\n      }\n    >\n      <div ref={iconRef} className={styles[\"icon\"]}>\n        {props.icon}\n      </div>\n      <div className={styles[\"text\"]} ref={textRef}>\n        {props.text}\n      </div>\n    </div>\n  );\n}\n\nfunction useScrollToBottom(\n  scrollRef: RefObject<HTMLDivElement>,\n  detach: boolean = false,\n  messages: ChatMessage[],\n) {\n  // for auto-scroll\n  const [autoScroll, setAutoScroll] = useState(true);\n  const scrollDomToBottom = useCallback(() => {\n    const dom = scrollRef.current;\n    if (dom) {\n      requestAnimationFrame(() => {\n        setAutoScroll(true);\n        dom.scrollTo(0, dom.scrollHeight);\n      });\n    }\n  }, [scrollRef]);\n\n  // auto scroll\n  useEffect(() => {\n    if (autoScroll && !detach) {\n      scrollDomToBottom();\n    }\n  });\n\n  // auto scroll when messages length changes\n  const lastMessagesLength = useRef(messages.length);\n  useEffect(() => {\n    if (messages.length > lastMessagesLength.current && !detach) {\n      scrollDomToBottom();\n    }\n    lastMessagesLength.current = messages.length;\n  }, [messages.length, detach, scrollDomToBottom]);\n\n  return {\n    scrollRef,\n    autoScroll,\n    setAutoScroll,\n    scrollDomToBottom,\n  };\n}\n\nexport function ChatActions(props: {\n  uploadImage: () => void;\n  setAttachImages: (images: string[]) => void;\n  setUploading: (uploading: boolean) => void;\n  showPromptModal: () => void;\n  scrollToBottom: () => void;\n  showPromptHints: () => void;\n  hitBottom: boolean;\n  uploading: boolean;\n  setShowShortcutKeyModal: React.Dispatch<React.SetStateAction<boolean>>;\n  setUserInput: (input: string) => void;\n  setShowChatSidePanel: React.Dispatch<React.SetStateAction<boolean>>;\n}) {\n  const config = useAppConfig();\n  const navigate = useNavigate();\n  const chatStore = useChatStore();\n  const pluginStore = usePluginStore();\n  const session = chatStore.currentSession();\n\n  // switch themes\n  const theme = config.theme;\n\n  function nextTheme() {\n    const themes = [Theme.Auto, Theme.Light, Theme.Dark];\n    const themeIndex = themes.indexOf(theme);\n    const nextIndex = (themeIndex + 1) % themes.length;\n    const nextTheme = themes[nextIndex];\n    config.update((config) => (config.theme = nextTheme));\n  }\n\n  // stop all responses\n  const couldStop = ChatControllerPool.hasPending();\n  const stopAll = () => ChatControllerPool.stopAll();\n\n  // switch model\n  const currentModel = session.mask.modelConfig.model;\n  const currentProviderName =\n    session.mask.modelConfig?.providerName || ServiceProvider.OpenAI;\n  const allModels = useAllModels();\n  const models = useMemo(() => {\n    const filteredModels = allModels.filter((m) => m.available);\n    const defaultModel = filteredModels.find((m) => m.isDefault);\n\n    if (defaultModel) {\n      const arr = [\n        defaultModel,\n        ...filteredModels.filter((m) => m !== defaultModel),\n      ];\n      return arr;\n    } else {\n      return filteredModels;\n    }\n  }, [allModels]);\n  const currentModelName = useMemo(() => {\n    const model = models.find(\n      (m) =>\n        m.name == currentModel &&\n        m?.provider?.providerName == currentProviderName,\n    );\n    return model?.displayName ?? \"\";\n  }, [models, currentModel, currentProviderName]);\n  const [showModelSelector, setShowModelSelector] = useState(false);\n  const [showPluginSelector, setShowPluginSelector] = useState(false);\n  const [showUploadImage, setShowUploadImage] = useState(false);\n\n  const [showSizeSelector, setShowSizeSelector] = useState(false);\n  const [showQualitySelector, setShowQualitySelector] = useState(false);\n  const [showStyleSelector, setShowStyleSelector] = useState(false);\n  const modelSizes = getModelSizes(currentModel);\n  const dalle3Qualitys: DalleQuality[] = [\"standard\", \"hd\"];\n  const dalle3Styles: DalleStyle[] = [\"vivid\", \"natural\"];\n  const currentSize =\n    session.mask.modelConfig?.size ?? (\"1024x1024\" as ModelSize);\n  const currentQuality = session.mask.modelConfig?.quality ?? \"standard\";\n  const currentStyle = session.mask.modelConfig?.style ?? \"vivid\";\n\n  const isMobileScreen = useMobileScreen();\n\n  useEffect(() => {\n    const show = isVisionModel(currentModel);\n    setShowUploadImage(show);\n    if (!show) {\n      props.setAttachImages([]);\n      props.setUploading(false);\n    }\n\n    // if current model is not available\n    // switch to first available model\n    const isUnavailableModel = !models.some((m) => m.name === currentModel);\n    if (isUnavailableModel && models.length > 0) {\n      // show next model to default model if exist\n      let nextModel = models.find((model) => model.isDefault) || models[0];\n      chatStore.updateTargetSession(session, (session) => {\n        session.mask.modelConfig.model = nextModel.name;\n        session.mask.modelConfig.providerName = nextModel?.provider\n          ?.providerName as ServiceProvider;\n      });\n      showToast(\n        nextModel?.provider?.providerName == \"ByteDance\"\n          ? nextModel.displayName\n          : nextModel.name,\n      );\n    }\n  }, [chatStore, currentModel, models, session]);\n\n  return (\n    <div className={styles[\"chat-input-actions\"]}>\n      <>\n        {couldStop && (\n          <ChatAction\n            onClick={stopAll}\n            text={Locale.Chat.InputActions.Stop}\n            icon={<StopIcon />}\n          />\n        )}\n        {!props.hitBottom && (\n          <ChatAction\n            onClick={props.scrollToBottom}\n            text={Locale.Chat.InputActions.ToBottom}\n            icon={<BottomIcon />}\n          />\n        )}\n        {props.hitBottom && (\n          <ChatAction\n            onClick={props.showPromptModal}\n            text={Locale.Chat.InputActions.Settings}\n            icon={<SettingsIcon />}\n          />\n        )}\n\n        {showUploadImage && (\n          <ChatAction\n            onClick={props.uploadImage}\n            text={Locale.Chat.InputActions.UploadImage}\n            icon={props.uploading ? <LoadingButtonIcon /> : <ImageIcon />}\n          />\n        )}\n        <ChatAction\n          onClick={nextTheme}\n          text={Locale.Chat.InputActions.Theme[theme]}\n          icon={\n            <>\n              {theme === Theme.Auto ? (\n                <AutoIcon />\n              ) : theme === Theme.Light ? (\n                <LightIcon />\n              ) : theme === Theme.Dark ? (\n                <DarkIcon />\n              ) : null}\n            </>\n          }\n        />\n\n        <ChatAction\n          onClick={props.showPromptHints}\n          text={Locale.Chat.InputActions.Prompt}\n          icon={<PromptIcon />}\n        />\n\n        <ChatAction\n          onClick={() => {\n            navigate(Path.Masks);\n          }}\n          text={Locale.Chat.InputActions.Masks}\n          icon={<MaskIcon />}\n        />\n\n        <ChatAction\n          text={Locale.Chat.InputActions.Clear}\n          icon={<BreakIcon />}\n          onClick={() => {\n            chatStore.updateTargetSession(session, (session) => {\n              if (session.clearContextIndex === session.messages.length) {\n                session.clearContextIndex = undefined;\n              } else {\n                session.clearContextIndex = session.messages.length;\n                session.memoryPrompt = \"\"; // will clear memory\n              }\n            });\n          }}\n        />\n\n        <ChatAction\n          onClick={() => setShowModelSelector(true)}\n          text={currentModelName}\n          icon={<RobotIcon />}\n        />\n\n        {showModelSelector && (\n          <Selector\n            defaultSelectedValue={`${currentModel}@${currentProviderName}`}\n            items={models.map((m) => ({\n              title: `${m.displayName}${\n                m?.provider?.providerName\n                  ? \" (\" + m?.provider?.providerName + \")\"\n                  : \"\"\n              }`,\n              value: `${m.name}@${m?.provider?.providerName}`,\n            }))}\n            onClose={() => setShowModelSelector(false)}\n            onSelection={(s) => {\n              if (s.length === 0) return;\n              const [model, providerName] = getModelProvider(s[0]);\n              chatStore.updateTargetSession(session, (session) => {\n                session.mask.modelConfig.model = model as ModelType;\n                session.mask.modelConfig.providerName =\n                  providerName as ServiceProvider;\n                session.mask.syncGlobalConfig = false;\n              });\n              if (providerName == \"ByteDance\") {\n                const selectedModel = models.find(\n                  (m) =>\n                    m.name == model &&\n                    m?.provider?.providerName == providerName,\n                );\n                showToast(selectedModel?.displayName ?? \"\");\n              } else {\n                showToast(model);\n              }\n            }}\n          />\n        )}\n\n        {supportsCustomSize(currentModel) && (\n          <ChatAction\n            onClick={() => setShowSizeSelector(true)}\n            text={currentSize}\n            icon={<SizeIcon />}\n          />\n        )}\n\n        {showSizeSelector && (\n          <Selector\n            defaultSelectedValue={currentSize}\n            items={modelSizes.map((m) => ({\n              title: m,\n              value: m,\n            }))}\n            onClose={() => setShowSizeSelector(false)}\n            onSelection={(s) => {\n              if (s.length === 0) return;\n              const size = s[0];\n              chatStore.updateTargetSession(session, (session) => {\n                session.mask.modelConfig.size = size;\n              });\n              showToast(size);\n            }}\n          />\n        )}\n\n        {isDalle3(currentModel) && (\n          <ChatAction\n            onClick={() => setShowQualitySelector(true)}\n            text={currentQuality}\n            icon={<QualityIcon />}\n          />\n        )}\n\n        {showQualitySelector && (\n          <Selector\n            defaultSelectedValue={currentQuality}\n            items={dalle3Qualitys.map((m) => ({\n              title: m,\n              value: m,\n            }))}\n            onClose={() => setShowQualitySelector(false)}\n            onSelection={(q) => {\n              if (q.length === 0) return;\n              const quality = q[0];\n              chatStore.updateTargetSession(session, (session) => {\n                session.mask.modelConfig.quality = quality;\n              });\n              showToast(quality);\n            }}\n          />\n        )}\n\n        {isDalle3(currentModel) && (\n          <ChatAction\n            onClick={() => setShowStyleSelector(true)}\n            text={currentStyle}\n            icon={<StyleIcon />}\n          />\n        )}\n\n        {showStyleSelector && (\n          <Selector\n            defaultSelectedValue={currentStyle}\n            items={dalle3Styles.map((m) => ({\n              title: m,\n              value: m,\n            }))}\n            onClose={() => setShowStyleSelector(false)}\n            onSelection={(s) => {\n              if (s.length === 0) return;\n              const style = s[0];\n              chatStore.updateTargetSession(session, (session) => {\n                session.mask.modelConfig.style = style;\n              });\n              showToast(style);\n            }}\n          />\n        )}\n\n        {showPlugins(currentProviderName, currentModel) && (\n          <ChatAction\n            onClick={() => {\n              if (pluginStore.getAll().length == 0) {\n                navigate(Path.Plugins);\n              } else {\n                setShowPluginSelector(true);\n              }\n            }}\n            text={Locale.Plugin.Name}\n            icon={<PluginIcon />}\n          />\n        )}\n        {showPluginSelector && (\n          <Selector\n            multiple\n            defaultSelectedValue={chatStore.currentSession().mask?.plugin}\n            items={pluginStore.getAll().map((item) => ({\n              title: `${item?.title}@${item?.version}`,\n              value: item?.id,\n            }))}\n            onClose={() => setShowPluginSelector(false)}\n            onSelection={(s) => {\n              chatStore.updateTargetSession(session, (session) => {\n                session.mask.plugin = s as string[];\n              });\n            }}\n          />\n        )}\n\n        {!isMobileScreen && (\n          <ChatAction\n            onClick={() => props.setShowShortcutKeyModal(true)}\n            text={Locale.Chat.ShortcutKey.Title}\n            icon={<ShortcutkeyIcon />}\n          />\n        )}\n        {!isMobileScreen && <MCPAction />}\n      </>\n      <div className={styles[\"chat-input-actions-end\"]}>\n        {config.realtimeConfig.enable && (\n          <ChatAction\n            onClick={() => props.setShowChatSidePanel(true)}\n            text={\"Realtime Chat\"}\n            icon={<HeadphoneIcon />}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport function EditMessageModal(props: { onClose: () => void }) {\n  const chatStore = useChatStore();\n  const session = chatStore.currentSession();\n  const [messages, setMessages] = useState(session.messages.slice());\n\n  return (\n    <div className=\"modal-mask\">\n      <Modal\n        title={Locale.Chat.EditMessage.Title}\n        onClose={props.onClose}\n        actions={[\n          <IconButton\n            text={Locale.UI.Cancel}\n            icon={<CancelIcon />}\n            key=\"cancel\"\n            onClick={() => {\n              props.onClose();\n            }}\n          />,\n          <IconButton\n            type=\"primary\"\n            text={Locale.UI.Confirm}\n            icon={<ConfirmIcon />}\n            key=\"ok\"\n            onClick={() => {\n              chatStore.updateTargetSession(\n                session,\n                (session) => (session.messages = messages),\n              );\n              props.onClose();\n            }}\n          />,\n        ]}\n      >\n        <List>\n          <ListItem\n            title={Locale.Chat.EditMessage.Topic.Title}\n            subTitle={Locale.Chat.EditMessage.Topic.SubTitle}\n          >\n            <input\n              type=\"text\"\n              value={session.topic}\n              onInput={(e) =>\n                chatStore.updateTargetSession(\n                  session,\n                  (session) => (session.topic = e.currentTarget.value),\n                )\n              }\n            ></input>\n          </ListItem>\n        </List>\n        <ContextPrompts\n          context={messages}\n          updateContext={(updater) => {\n            const newMessages = messages.slice();\n            updater(newMessages);\n            setMessages(newMessages);\n          }}\n        />\n      </Modal>\n    </div>\n  );\n}\n\nexport function DeleteImageButton(props: { deleteImage: () => void }) {\n  return (\n    <div className={styles[\"delete-image\"]} onClick={props.deleteImage}>\n      <DeleteIcon />\n    </div>\n  );\n}\n\nexport function ShortcutKeyModal(props: { onClose: () => void }) {\n  const isMac = navigator.platform.toUpperCase().indexOf(\"MAC\") >= 0;\n  const shortcuts = [\n    {\n      title: Locale.Chat.ShortcutKey.newChat,\n      keys: isMac ? [\"⌘\", \"Shift\", \"O\"] : [\"Ctrl\", \"Shift\", \"O\"],\n    },\n    { title: Locale.Chat.ShortcutKey.focusInput, keys: [\"Shift\", \"Esc\"] },\n    {\n      title: Locale.Chat.ShortcutKey.copyLastCode,\n      keys: isMac ? [\"⌘\", \"Shift\", \";\"] : [\"Ctrl\", \"Shift\", \";\"],\n    },\n    {\n      title: Locale.Chat.ShortcutKey.copyLastMessage,\n      keys: isMac ? [\"⌘\", \"Shift\", \"C\"] : [\"Ctrl\", \"Shift\", \"C\"],\n    },\n    {\n      title: Locale.Chat.ShortcutKey.showShortcutKey,\n      keys: isMac ? [\"⌘\", \"/\"] : [\"Ctrl\", \"/\"],\n    },\n    {\n      title: Locale.Chat.ShortcutKey.clearContext,\n      keys: isMac\n        ? [\"⌘\", \"Shift\", \"backspace\"]\n        : [\"Ctrl\", \"Shift\", \"backspace\"],\n    },\n  ];\n  return (\n    <div className=\"modal-mask\">\n      <Modal\n        title={Locale.Chat.ShortcutKey.Title}\n        onClose={props.onClose}\n        actions={[\n          <IconButton\n            type=\"primary\"\n            text={Locale.UI.Confirm}\n            icon={<ConfirmIcon />}\n            key=\"ok\"\n            onClick={() => {\n              props.onClose();\n            }}\n          />,\n        ]}\n      >\n        <div className={styles[\"shortcut-key-container\"]}>\n          <div className={styles[\"shortcut-key-grid\"]}>\n            {shortcuts.map((shortcut, index) => (\n              <div key={index} className={styles[\"shortcut-key-item\"]}>\n                <div className={styles[\"shortcut-key-title\"]}>\n                  {shortcut.title}\n                </div>\n                <div className={styles[\"shortcut-key-keys\"]}>\n                  {shortcut.keys.map((key, i) => (\n                    <div key={i} className={styles[\"shortcut-key\"]}>\n                      <span>{key}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n\nfunction _Chat() {\n  type RenderMessage = ChatMessage & { preview?: boolean };\n\n  const chatStore = useChatStore();\n  const session = chatStore.currentSession();\n  const config = useAppConfig();\n  const fontSize = config.fontSize;\n  const fontFamily = config.fontFamily;\n\n  const [showExport, setShowExport] = useState(false);\n\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n  const [userInput, setUserInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { submitKey, shouldSubmit } = useSubmitHandler();\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const isScrolledToBottom = scrollRef?.current\n    ? Math.abs(\n        scrollRef.current.scrollHeight -\n          (scrollRef.current.scrollTop + scrollRef.current.clientHeight),\n      ) <= 1\n    : false;\n  const isAttachWithTop = useMemo(() => {\n    const lastMessage = scrollRef.current?.lastElementChild as HTMLElement;\n    // if scrolllRef is not ready or no message, return false\n    if (!scrollRef?.current || !lastMessage) return false;\n    const topDistance =\n      lastMessage!.getBoundingClientRect().top -\n      scrollRef.current.getBoundingClientRect().top;\n    // leave some space for user question\n    return topDistance < 100;\n  }, [scrollRef?.current?.scrollHeight]);\n\n  const isTyping = userInput !== \"\";\n\n  // if user is typing, should auto scroll to bottom\n  // if user is not typing, should auto scroll to bottom only if already at bottom\n  const { setAutoScroll, scrollDomToBottom } = useScrollToBottom(\n    scrollRef,\n    (isScrolledToBottom || isAttachWithTop) && !isTyping,\n    session.messages,\n  );\n  const [hitBottom, setHitBottom] = useState(true);\n  const isMobileScreen = useMobileScreen();\n  const navigate = useNavigate();\n  const [attachImages, setAttachImages] = useState<string[]>([]);\n  const [uploading, setUploading] = useState(false);\n\n  // prompt hints\n  const promptStore = usePromptStore();\n  const [promptHints, setPromptHints] = useState<RenderPrompt[]>([]);\n  const onSearch = useDebouncedCallback(\n    (text: string) => {\n      const matchedPrompts = promptStore.search(text);\n      setPromptHints(matchedPrompts);\n    },\n    100,\n    { leading: true, trailing: true },\n  );\n\n  // auto grow input\n  const [inputRows, setInputRows] = useState(2);\n  const measure = useDebouncedCallback(\n    () => {\n      const rows = inputRef.current ? autoGrowTextArea(inputRef.current) : 1;\n      const inputRows = Math.min(\n        20,\n        Math.max(2 + Number(!isMobileScreen), rows),\n      );\n      setInputRows(inputRows);\n    },\n    100,\n    {\n      leading: true,\n      trailing: true,\n    },\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(measure, [userInput]);\n\n  // chat commands shortcuts\n  const chatCommands = useChatCommand({\n    new: () => chatStore.newSession(),\n    newm: () => navigate(Path.NewChat),\n    prev: () => chatStore.nextSession(-1),\n    next: () => chatStore.nextSession(1),\n    clear: () =>\n      chatStore.updateTargetSession(\n        session,\n        (session) => (session.clearContextIndex = session.messages.length),\n      ),\n    fork: () => chatStore.forkSession(),\n    del: () => chatStore.deleteSession(chatStore.currentSessionIndex),\n  });\n\n  // only search prompts when user input is short\n  const SEARCH_TEXT_LIMIT = 30;\n  const onInput = (text: string) => {\n    setUserInput(text);\n    const n = text.trim().length;\n\n    // clear search results\n    if (n === 0) {\n      setPromptHints([]);\n    } else if (text.match(ChatCommandPrefix)) {\n      setPromptHints(chatCommands.search(text));\n    } else if (!config.disablePromptHint && n < SEARCH_TEXT_LIMIT) {\n      // check if need to trigger auto completion\n      if (text.startsWith(\"/\")) {\n        let searchText = text.slice(1);\n        onSearch(searchText);\n      }\n    }\n  };\n\n  const doSubmit = (userInput: string) => {\n    if (userInput.trim() === \"\" && isEmpty(attachImages)) return;\n    const matchCommand = chatCommands.match(userInput);\n    if (matchCommand.matched) {\n      setUserInput(\"\");\n      setPromptHints([]);\n      matchCommand.invoke();\n      return;\n    }\n    setIsLoading(true);\n    chatStore\n      .onUserInput(userInput, attachImages)\n      .then(() => setIsLoading(false));\n    setAttachImages([]);\n    chatStore.setLastInput(userInput);\n    setUserInput(\"\");\n    setPromptHints([]);\n    if (!isMobileScreen) inputRef.current?.focus();\n    setAutoScroll(true);\n  };\n\n  const onPromptSelect = (prompt: RenderPrompt) => {\n    setTimeout(() => {\n      setPromptHints([]);\n\n      const matchedChatCommand = chatCommands.match(prompt.content);\n      if (matchedChatCommand.matched) {\n        // if user is selecting a chat command, just trigger it\n        matchedChatCommand.invoke();\n        setUserInput(\"\");\n      } else {\n        // or fill the prompt\n        setUserInput(prompt.content);\n      }\n      inputRef.current?.focus();\n    }, 30);\n  };\n\n  // stop response\n  const onUserStop = (messageId: string) => {\n    ChatControllerPool.stop(session.id, messageId);\n  };\n\n  useEffect(() => {\n    chatStore.updateTargetSession(session, (session) => {\n      const stopTiming = Date.now() - REQUEST_TIMEOUT_MS;\n      session.messages.forEach((m) => {\n        // check if should stop all stale messages\n        if (m.isError || new Date(m.date).getTime() < stopTiming) {\n          if (m.streaming) {\n            m.streaming = false;\n          }\n\n          if (m.content.length === 0) {\n            m.isError = true;\n            m.content = prettyObject({\n              error: true,\n              message: \"empty response\",\n            });\n          }\n        }\n      });\n\n      // auto sync mask config from global config\n      if (session.mask.syncGlobalConfig) {\n        console.log(\"[Mask] syncing from global, name = \", session.mask.name);\n        session.mask.modelConfig = { ...config.modelConfig };\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [session]);\n\n  // check if should send message\n  const onInputKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    // if ArrowUp and no userInput, fill with last input\n    if (\n      e.key === \"ArrowUp\" &&\n      userInput.length <= 0 &&\n      !(e.metaKey || e.altKey || e.ctrlKey)\n    ) {\n      setUserInput(chatStore.lastInput ?? \"\");\n      e.preventDefault();\n      return;\n    }\n    if (shouldSubmit(e) && promptHints.length === 0) {\n      doSubmit(userInput);\n      e.preventDefault();\n    }\n  };\n  const onRightClick = (e: any, message: ChatMessage) => {\n    // copy to clipboard\n    if (selectOrCopy(e.currentTarget, getMessageTextContent(message))) {\n      if (userInput.length === 0) {\n        setUserInput(getMessageTextContent(message));\n      }\n\n      e.preventDefault();\n    }\n  };\n\n  const deleteMessage = (msgId?: string) => {\n    chatStore.updateTargetSession(\n      session,\n      (session) =>\n        (session.messages = session.messages.filter((m) => m.id !== msgId)),\n    );\n  };\n\n  const onDelete = (msgId: string) => {\n    deleteMessage(msgId);\n  };\n\n  const onResend = (message: ChatMessage) => {\n    // when it is resending a message\n    // 1. for a user's message, find the next bot response\n    // 2. for a bot's message, find the last user's input\n    // 3. delete original user input and bot's message\n    // 4. resend the user's input\n\n    const resendingIndex = session.messages.findIndex(\n      (m) => m.id === message.id,\n    );\n\n    if (resendingIndex < 0 || resendingIndex >= session.messages.length) {\n      console.error(\"[Chat] failed to find resending message\", message);\n      return;\n    }\n\n    let userMessage: ChatMessage | undefined;\n    let botMessage: ChatMessage | undefined;\n\n    if (message.role === \"assistant\") {\n      // if it is resending a bot's message, find the user input for it\n      botMessage = message;\n      for (let i = resendingIndex; i >= 0; i -= 1) {\n        if (session.messages[i].role === \"user\") {\n          userMessage = session.messages[i];\n          break;\n        }\n      }\n    } else if (message.role === \"user\") {\n      // if it is resending a user's input, find the bot's response\n      userMessage = message;\n      for (let i = resendingIndex; i < session.messages.length; i += 1) {\n        if (session.messages[i].role === \"assistant\") {\n          botMessage = session.messages[i];\n          break;\n        }\n      }\n    }\n\n    if (userMessage === undefined) {\n      console.error(\"[Chat] failed to resend\", message);\n      return;\n    }\n\n    // delete the original messages\n    deleteMessage(userMessage.id);\n    deleteMessage(botMessage?.id);\n\n    // resend the message\n    setIsLoading(true);\n    const textContent = getMessageTextContent(userMessage);\n    const images = getMessageImages(userMessage);\n    chatStore.onUserInput(textContent, images).then(() => setIsLoading(false));\n    inputRef.current?.focus();\n  };\n\n  const onPinMessage = (message: ChatMessage) => {\n    chatStore.updateTargetSession(session, (session) =>\n      session.mask.context.push(message),\n    );\n\n    showToast(Locale.Chat.Actions.PinToastContent, {\n      text: Locale.Chat.Actions.PinToastAction,\n      onClick: () => {\n        setShowPromptModal(true);\n      },\n    });\n  };\n\n  const accessStore = useAccessStore();\n  const [speechStatus, setSpeechStatus] = useState(false);\n  const [speechLoading, setSpeechLoading] = useState(false);\n\n  async function openaiSpeech(text: string) {\n    if (speechStatus) {\n      ttsPlayer.stop();\n      setSpeechStatus(false);\n    } else {\n      var api: ClientApi;\n      api = new ClientApi(ModelProvider.GPT);\n      const config = useAppConfig.getState();\n      setSpeechLoading(true);\n      ttsPlayer.init();\n      let audioBuffer: ArrayBuffer;\n      const { markdownToTxt } = require(\"markdown-to-txt\");\n      const textContent = markdownToTxt(text);\n      if (config.ttsConfig.engine !== DEFAULT_TTS_ENGINE) {\n        const edgeVoiceName = accessStore.edgeVoiceName();\n        const tts = new MsEdgeTTS();\n        await tts.setMetadata(\n          edgeVoiceName,\n          OUTPUT_FORMAT.AUDIO_24KHZ_96KBITRATE_MONO_MP3,\n        );\n        audioBuffer = await tts.toArrayBuffer(textContent);\n      } else {\n        audioBuffer = await api.llm.speech({\n          model: config.ttsConfig.model,\n          input: textContent,\n          voice: config.ttsConfig.voice,\n          speed: config.ttsConfig.speed,\n        });\n      }\n      setSpeechStatus(true);\n      ttsPlayer\n        .play(audioBuffer, () => {\n          setSpeechStatus(false);\n        })\n        .catch((e) => {\n          console.error(\"[OpenAI Speech]\", e);\n          showToast(prettyObject(e));\n          setSpeechStatus(false);\n        })\n        .finally(() => setSpeechLoading(false));\n    }\n  }\n\n  const context: RenderMessage[] = useMemo(() => {\n    return session.mask.hideContext ? [] : session.mask.context.slice();\n  }, [session.mask.context, session.mask.hideContext]);\n\n  if (\n    context.length === 0 &&\n    session.messages.at(0)?.content !== BOT_HELLO.content\n  ) {\n    const copiedHello = Object.assign({}, BOT_HELLO);\n    if (!accessStore.isAuthorized()) {\n      copiedHello.content = Locale.Error.Unauthorized;\n    }\n    context.push(copiedHello);\n  }\n\n  // preview messages\n  const renderMessages = useMemo(() => {\n    return context\n      .concat(session.messages as RenderMessage[])\n      .concat(\n        isLoading\n          ? [\n              {\n                ...createMessage({\n                  role: \"assistant\",\n                  content: \"……\",\n                }),\n                preview: true,\n              },\n            ]\n          : [],\n      )\n      .concat(\n        userInput.length > 0 && config.sendPreviewBubble\n          ? [\n              {\n                ...createMessage({\n                  role: \"user\",\n                  content: userInput,\n                }),\n                preview: true,\n              },\n            ]\n          : [],\n      );\n  }, [\n    config.sendPreviewBubble,\n    context,\n    isLoading,\n    session.messages,\n    userInput,\n  ]);\n\n  const [msgRenderIndex, _setMsgRenderIndex] = useState(\n    Math.max(0, renderMessages.length - CHAT_PAGE_SIZE),\n  );\n\n  function setMsgRenderIndex(newIndex: number) {\n    newIndex = Math.min(renderMessages.length - CHAT_PAGE_SIZE, newIndex);\n    newIndex = Math.max(0, newIndex);\n    _setMsgRenderIndex(newIndex);\n  }\n\n  const messages = useMemo(() => {\n    const endRenderIndex = Math.min(\n      msgRenderIndex + 3 * CHAT_PAGE_SIZE,\n      renderMessages.length,\n    );\n    return renderMessages.slice(msgRenderIndex, endRenderIndex);\n  }, [msgRenderIndex, renderMessages]);\n\n  const onChatBodyScroll = (e: HTMLElement) => {\n    const bottomHeight = e.scrollTop + e.clientHeight;\n    const edgeThreshold = e.clientHeight;\n\n    const isTouchTopEdge = e.scrollTop <= edgeThreshold;\n    const isTouchBottomEdge = bottomHeight >= e.scrollHeight - edgeThreshold;\n    const isHitBottom =\n      bottomHeight >= e.scrollHeight - (isMobileScreen ? 4 : 10);\n\n    const prevPageMsgIndex = msgRenderIndex - CHAT_PAGE_SIZE;\n    const nextPageMsgIndex = msgRenderIndex + CHAT_PAGE_SIZE;\n\n    if (isTouchTopEdge && !isTouchBottomEdge) {\n      setMsgRenderIndex(prevPageMsgIndex);\n    } else if (isTouchBottomEdge) {\n      setMsgRenderIndex(nextPageMsgIndex);\n    }\n\n    setHitBottom(isHitBottom);\n    setAutoScroll(isHitBottom);\n  };\n\n  function scrollToBottom() {\n    setMsgRenderIndex(renderMessages.length - CHAT_PAGE_SIZE);\n    scrollDomToBottom();\n  }\n\n  // clear context index = context length + index in messages\n  const clearContextIndex =\n    (session.clearContextIndex ?? -1) >= 0\n      ? session.clearContextIndex! + context.length - msgRenderIndex\n      : -1;\n\n  const [showPromptModal, setShowPromptModal] = useState(false);\n\n  const clientConfig = useMemo(() => getClientConfig(), []);\n\n  const autoFocus = !isMobileScreen; // wont auto focus on mobile screen\n  const showMaxIcon = !isMobileScreen && !clientConfig?.isApp;\n\n  useCommand({\n    fill: setUserInput,\n    submit: (text) => {\n      doSubmit(text);\n    },\n    code: (text) => {\n      if (accessStore.disableFastLink) return;\n      console.log(\"[Command] got code from url: \", text);\n      showConfirm(Locale.URLCommand.Code + `code = ${text}`).then((res) => {\n        if (res) {\n          accessStore.update((access) => (access.accessCode = text));\n        }\n      });\n    },\n    settings: (text) => {\n      if (accessStore.disableFastLink) return;\n\n      try {\n        const payload = JSON.parse(text) as {\n          key?: string;\n          url?: string;\n        };\n\n        console.log(\"[Command] got settings from url: \", payload);\n\n        if (payload.key || payload.url) {\n          showConfirm(\n            Locale.URLCommand.Settings +\n              `\\n${JSON.stringify(payload, null, 4)}`,\n          ).then((res) => {\n            if (!res) return;\n            if (payload.key) {\n              accessStore.update(\n                (access) => (access.openaiApiKey = payload.key!),\n              );\n            }\n            if (payload.url) {\n              accessStore.update((access) => (access.openaiUrl = payload.url!));\n            }\n            accessStore.update((access) => (access.useCustomConfig = true));\n          });\n        }\n      } catch {\n        console.error(\"[Command] failed to get settings from url: \", text);\n      }\n    },\n  });\n\n  // edit / insert message modal\n  const [isEditingMessage, setIsEditingMessage] = useState(false);\n\n  // remember unfinished input\n  useEffect(() => {\n    // try to load from local storage\n    const key = UNFINISHED_INPUT(session.id);\n    const mayBeUnfinishedInput = localStorage.getItem(key);\n    if (mayBeUnfinishedInput && userInput.length === 0) {\n      setUserInput(mayBeUnfinishedInput);\n      localStorage.removeItem(key);\n    }\n\n    const dom = inputRef.current;\n    return () => {\n      localStorage.setItem(key, dom?.value ?? \"\");\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handlePaste = useCallback(\n    async (event: React.ClipboardEvent<HTMLTextAreaElement>) => {\n      const currentModel = chatStore.currentSession().mask.modelConfig.model;\n      if (!isVisionModel(currentModel)) {\n        return;\n      }\n      const items = (event.clipboardData || window.clipboardData).items;\n      for (const item of items) {\n        if (item.kind === \"file\" && item.type.startsWith(\"image/\")) {\n          event.preventDefault();\n          const file = item.getAsFile();\n          if (file) {\n            const images: string[] = [];\n            images.push(...attachImages);\n            images.push(\n              ...(await new Promise<string[]>((res, rej) => {\n                setUploading(true);\n                const imagesData: string[] = [];\n                uploadImageRemote(file)\n                  .then((dataUrl) => {\n                    imagesData.push(dataUrl);\n                    setUploading(false);\n                    res(imagesData);\n                  })\n                  .catch((e) => {\n                    setUploading(false);\n                    rej(e);\n                  });\n              })),\n            );\n            const imagesLength = images.length;\n\n            if (imagesLength > 3) {\n              images.splice(3, imagesLength - 3);\n            }\n            setAttachImages(images);\n          }\n        }\n      }\n    },\n    [attachImages, chatStore],\n  );\n\n  async function uploadImage() {\n    const images: string[] = [];\n    images.push(...attachImages);\n\n    images.push(\n      ...(await new Promise<string[]>((res, rej) => {\n        const fileInput = document.createElement(\"input\");\n        fileInput.type = \"file\";\n        fileInput.accept =\n          \"image/png, image/jpeg, image/webp, image/heic, image/heif\";\n        fileInput.multiple = true;\n        fileInput.onchange = (event: any) => {\n          setUploading(true);\n          const files = event.target.files;\n          const imagesData: string[] = [];\n          for (let i = 0; i < files.length; i++) {\n            const file = event.target.files[i];\n            uploadImageRemote(file)\n              .then((dataUrl) => {\n                imagesData.push(dataUrl);\n                if (\n                  imagesData.length === 3 ||\n                  imagesData.length === files.length\n                ) {\n                  setUploading(false);\n                  res(imagesData);\n                }\n              })\n              .catch((e) => {\n                setUploading(false);\n                rej(e);\n              });\n          }\n        };\n        fileInput.click();\n      })),\n    );\n\n    const imagesLength = images.length;\n    if (imagesLength > 3) {\n      images.splice(3, imagesLength - 3);\n    }\n    setAttachImages(images);\n  }\n\n  // 快捷键 shortcut keys\n  const [showShortcutKeyModal, setShowShortcutKeyModal] = useState(false);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // 打开新聊天 command + shift + o\n      if (\n        (event.metaKey || event.ctrlKey) &&\n        event.shiftKey &&\n        event.key.toLowerCase() === \"o\"\n      ) {\n        event.preventDefault();\n        setTimeout(() => {\n          chatStore.newSession();\n          navigate(Path.Chat);\n        }, 10);\n      }\n      // 聚焦聊天输入 shift + esc\n      else if (event.shiftKey && event.key.toLowerCase() === \"escape\") {\n        event.preventDefault();\n        inputRef.current?.focus();\n      }\n      // 复制最后一个代码块 command + shift + ;\n      else if (\n        (event.metaKey || event.ctrlKey) &&\n        event.shiftKey &&\n        event.code === \"Semicolon\"\n      ) {\n        event.preventDefault();\n        const copyCodeButton =\n          document.querySelectorAll<HTMLElement>(\".copy-code-button\");\n        if (copyCodeButton.length > 0) {\n          copyCodeButton[copyCodeButton.length - 1].click();\n        }\n      }\n      // 复制最后一个回复 command + shift + c\n      else if (\n        (event.metaKey || event.ctrlKey) &&\n        event.shiftKey &&\n        event.key.toLowerCase() === \"c\"\n      ) {\n        event.preventDefault();\n        const lastNonUserMessage = messages\n          .filter((message) => message.role !== \"user\")\n          .pop();\n        if (lastNonUserMessage) {\n          const lastMessageContent = getMessageTextContent(lastNonUserMessage);\n          copyToClipboard(lastMessageContent);\n        }\n      }\n      // 展示快捷键 command + /\n      else if ((event.metaKey || event.ctrlKey) && event.key === \"/\") {\n        event.preventDefault();\n        setShowShortcutKeyModal(true);\n      }\n      // 清除上下文 command + shift + backspace\n      else if (\n        (event.metaKey || event.ctrlKey) &&\n        event.shiftKey &&\n        event.key.toLowerCase() === \"backspace\"\n      ) {\n        event.preventDefault();\n        chatStore.updateTargetSession(session, (session) => {\n          if (session.clearContextIndex === session.messages.length) {\n            session.clearContextIndex = undefined;\n          } else {\n            session.clearContextIndex = session.messages.length;\n            session.memoryPrompt = \"\"; // will clear memory\n          }\n        });\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [messages, chatStore, navigate, session]);\n\n  const [showChatSidePanel, setShowChatSidePanel] = useState(false);\n\n  return (\n    <>\n      <div className={styles.chat} key={session.id}>\n        <div className=\"window-header\" data-tauri-drag-region>\n          {isMobileScreen && (\n            <div className=\"window-actions\">\n              <div className={\"window-action-button\"}>\n                <IconButton\n                  icon={<ReturnIcon />}\n                  bordered\n                  title={Locale.Chat.Actions.ChatList}\n                  onClick={() => navigate(Path.Home)}\n                />\n              </div>\n            </div>\n          )}\n\n          <div\n            className={clsx(\"window-header-title\", styles[\"chat-body-title\"])}\n          >\n            <div\n              className={clsx(\n                \"window-header-main-title\",\n                styles[\"chat-body-main-title\"],\n              )}\n              onClickCapture={() => setIsEditingMessage(true)}\n            >\n              {!session.topic ? DEFAULT_TOPIC : session.topic}\n            </div>\n            <div className=\"window-header-sub-title\">\n              {Locale.Chat.SubTitle(session.messages.length)}\n            </div>\n          </div>\n          <div className=\"window-actions\">\n            <div className=\"window-action-button\">\n              <IconButton\n                icon={<ReloadIcon />}\n                bordered\n                title={Locale.Chat.Actions.RefreshTitle}\n                onClick={() => {\n                  showToast(Locale.Chat.Actions.RefreshToast);\n                  chatStore.summarizeSession(true, session);\n                }}\n              />\n            </div>\n            {!isMobileScreen && (\n              <div className=\"window-action-button\">\n                <IconButton\n                  icon={<RenameIcon />}\n                  bordered\n                  title={Locale.Chat.EditMessage.Title}\n                  aria={Locale.Chat.EditMessage.Title}\n                  onClick={() => setIsEditingMessage(true)}\n                />\n              </div>\n            )}\n            <div className=\"window-action-button\">\n              <IconButton\n                icon={<ExportIcon />}\n                bordered\n                title={Locale.Chat.Actions.Export}\n                onClick={() => {\n                  setShowExport(true);\n                }}\n              />\n            </div>\n            {showMaxIcon && (\n              <div className=\"window-action-button\">\n                <IconButton\n                  icon={config.tightBorder ? <MinIcon /> : <MaxIcon />}\n                  bordered\n                  title={Locale.Chat.Actions.FullScreen}\n                  aria={Locale.Chat.Actions.FullScreen}\n                  onClick={() => {\n                    config.update(\n                      (config) => (config.tightBorder = !config.tightBorder),\n                    );\n                  }}\n                />\n              </div>\n            )}\n          </div>\n\n          <PromptToast\n            showToast={!hitBottom}\n            showModal={showPromptModal}\n            setShowModal={setShowPromptModal}\n          />\n        </div>\n        <div className={styles[\"chat-main\"]}>\n          <div className={styles[\"chat-body-container\"]}>\n            <div\n              className={styles[\"chat-body\"]}\n              ref={scrollRef}\n              onScroll={(e) => onChatBodyScroll(e.currentTarget)}\n              onMouseDown={() => inputRef.current?.blur()}\n              onTouchStart={() => {\n                inputRef.current?.blur();\n                setAutoScroll(false);\n              }}\n            >\n              {messages\n                // TODO\n                // .filter((m) => !m.isMcpResponse)\n                .map((message, i) => {\n                  const isUser = message.role === \"user\";\n                  const isContext = i < context.length;\n                  const showActions =\n                    i > 0 &&\n                    !(message.preview || message.content.length === 0) &&\n                    !isContext;\n                  const showTyping = message.preview || message.streaming;\n\n                  const shouldShowClearContextDivider =\n                    i === clearContextIndex - 1;\n\n                  return (\n                    <Fragment key={message.id}>\n                      <div\n                        className={\n                          isUser\n                            ? styles[\"chat-message-user\"]\n                            : styles[\"chat-message\"]\n                        }\n                      >\n                        <div className={styles[\"chat-message-container\"]}>\n                          <div className={styles[\"chat-message-header\"]}>\n                            <div className={styles[\"chat-message-avatar\"]}>\n                              <div className={styles[\"chat-message-edit\"]}>\n                                <IconButton\n                                  icon={<EditIcon />}\n                                  aria={Locale.Chat.Actions.Edit}\n                                  onClick={async () => {\n                                    const newMessage = await showPrompt(\n                                      Locale.Chat.Actions.Edit,\n                                      getMessageTextContent(message),\n                                      10,\n                                    );\n                                    let newContent:\n                                      | string\n                                      | MultimodalContent[] = newMessage;\n                                    const images = getMessageImages(message);\n                                    if (images.length > 0) {\n                                      newContent = [\n                                        { type: \"text\", text: newMessage },\n                                      ];\n                                      for (let i = 0; i < images.length; i++) {\n                                        newContent.push({\n                                          type: \"image_url\",\n                                          image_url: {\n                                            url: images[i],\n                                          },\n                                        });\n                                      }\n                                    }\n                                    chatStore.updateTargetSession(\n                                      session,\n                                      (session) => {\n                                        const m = session.mask.context\n                                          .concat(session.messages)\n                                          .find((m) => m.id === message.id);\n                                        if (m) {\n                                          m.content = newContent;\n                                        }\n                                      },\n                                    );\n                                  }}\n                                ></IconButton>\n                              </div>\n                              {isUser ? (\n                                <Avatar avatar={config.avatar} />\n                              ) : (\n                                <>\n                                  {[\"system\"].includes(message.role) ? (\n                                    <Avatar avatar=\"2699-fe0f\" />\n                                  ) : (\n                                    <MaskAvatar\n                                      avatar={session.mask.avatar}\n                                      model={\n                                        message.model ||\n                                        session.mask.modelConfig.model\n                                      }\n                                    />\n                                  )}\n                                </>\n                              )}\n                            </div>\n                            {!isUser && (\n                              <div className={styles[\"chat-model-name\"]}>\n                                {message.model}\n                              </div>\n                            )}\n\n                            {showActions && (\n                              <div className={styles[\"chat-message-actions\"]}>\n                                <div className={styles[\"chat-input-actions\"]}>\n                                  {message.streaming ? (\n                                    <ChatAction\n                                      text={Locale.Chat.Actions.Stop}\n                                      icon={<StopIcon />}\n                                      onClick={() =>\n                                        onUserStop(message.id ?? i)\n                                      }\n                                    />\n                                  ) : (\n                                    <>\n                                      <ChatAction\n                                        text={Locale.Chat.Actions.Retry}\n                                        icon={<ResetIcon />}\n                                        onClick={() => onResend(message)}\n                                      />\n\n                                      <ChatAction\n                                        text={Locale.Chat.Actions.Delete}\n                                        icon={<DeleteIcon />}\n                                        onClick={() =>\n                                          onDelete(message.id ?? i)\n                                        }\n                                      />\n\n                                      <ChatAction\n                                        text={Locale.Chat.Actions.Pin}\n                                        icon={<PinIcon />}\n                                        onClick={() => onPinMessage(message)}\n                                      />\n                                      <ChatAction\n                                        text={Locale.Chat.Actions.Copy}\n                                        icon={<CopyIcon />}\n                                        onClick={() =>\n                                          copyToClipboard(\n                                            getMessageTextContent(message),\n                                          )\n                                        }\n                                      />\n                                      {config.ttsConfig.enable && (\n                                        <ChatAction\n                                          text={\n                                            speechStatus\n                                              ? Locale.Chat.Actions.StopSpeech\n                                              : Locale.Chat.Actions.Speech\n                                          }\n                                          icon={\n                                            speechStatus ? (\n                                              <SpeakStopIcon />\n                                            ) : (\n                                              <SpeakIcon />\n                                            )\n                                          }\n                                          onClick={() =>\n                                            openaiSpeech(\n                                              getMessageTextContent(message),\n                                            )\n                                          }\n                                        />\n                                      )}\n                                    </>\n                                  )}\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                          {message?.tools?.length == 0 && showTyping && (\n                            <div className={styles[\"chat-message-status\"]}>\n                              {Locale.Chat.Typing}\n                            </div>\n                          )}\n                          {/*@ts-ignore*/}\n                          {message?.tools?.length > 0 && (\n                            <div className={styles[\"chat-message-tools\"]}>\n                              {message?.tools?.map((tool) => (\n                                <div\n                                  key={tool.id}\n                                  title={tool?.errorMsg}\n                                  className={styles[\"chat-message-tool\"]}\n                                >\n                                  {tool.isError === false ? (\n                                    <ConfirmIcon />\n                                  ) : tool.isError === true ? (\n                                    <CloseIcon />\n                                  ) : (\n                                    <LoadingButtonIcon />\n                                  )}\n                                  <span>{tool?.function?.name}</span>\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                          <div className={styles[\"chat-message-item\"]}>\n                            <Markdown\n                              key={message.streaming ? \"loading\" : \"done\"}\n                              content={getMessageTextContent(message)}\n                              loading={\n                                (message.preview || message.streaming) &&\n                                message.content.length === 0 &&\n                                !isUser\n                              }\n                              //   onContextMenu={(e) => onRightClick(e, message)} // hard to use\n                              onDoubleClickCapture={() => {\n                                if (!isMobileScreen) return;\n                                setUserInput(getMessageTextContent(message));\n                              }}\n                              fontSize={fontSize}\n                              fontFamily={fontFamily}\n                              parentRef={scrollRef}\n                              defaultShow={i >= messages.length - 6}\n                            />\n                            {getMessageImages(message).length == 1 && (\n                              <img\n                                className={styles[\"chat-message-item-image\"]}\n                                src={getMessageImages(message)[0]}\n                                alt=\"\"\n                              />\n                            )}\n                            {getMessageImages(message).length > 1 && (\n                              <div\n                                className={styles[\"chat-message-item-images\"]}\n                                style={\n                                  {\n                                    \"--image-count\":\n                                      getMessageImages(message).length,\n                                  } as React.CSSProperties\n                                }\n                              >\n                                {getMessageImages(message).map(\n                                  (image, index) => {\n                                    return (\n                                      <img\n                                        className={\n                                          styles[\n                                            \"chat-message-item-image-multi\"\n                                          ]\n                                        }\n                                        key={index}\n                                        src={image}\n                                        alt=\"\"\n                                      />\n                                    );\n                                  },\n                                )}\n                              </div>\n                            )}\n                          </div>\n                          {message?.audio_url && (\n                            <div className={styles[\"chat-message-audio\"]}>\n                              <audio src={message.audio_url} controls />\n                            </div>\n                          )}\n\n                          <div className={styles[\"chat-message-action-date\"]}>\n                            {isContext\n                              ? Locale.Chat.IsContext\n                              : message.date.toLocaleString()}\n                          </div>\n                        </div>\n                      </div>\n                      {shouldShowClearContextDivider && <ClearContextDivider />}\n                    </Fragment>\n                  );\n                })}\n            </div>\n            <div className={styles[\"chat-input-panel\"]}>\n              <PromptHints\n                prompts={promptHints}\n                onPromptSelect={onPromptSelect}\n              />\n\n              <ChatActions\n                uploadImage={uploadImage}\n                setAttachImages={setAttachImages}\n                setUploading={setUploading}\n                showPromptModal={() => setShowPromptModal(true)}\n                scrollToBottom={scrollToBottom}\n                hitBottom={hitBottom}\n                uploading={uploading}\n                showPromptHints={() => {\n                  // Click again to close\n                  if (promptHints.length > 0) {\n                    setPromptHints([]);\n                    return;\n                  }\n\n                  inputRef.current?.focus();\n                  setUserInput(\"/\");\n                  onSearch(\"\");\n                }}\n                setShowShortcutKeyModal={setShowShortcutKeyModal}\n                setUserInput={setUserInput}\n                setShowChatSidePanel={setShowChatSidePanel}\n              />\n              <label\n                className={clsx(styles[\"chat-input-panel-inner\"], {\n                  [styles[\"chat-input-panel-inner-attach\"]]:\n                    attachImages.length !== 0,\n                })}\n                htmlFor=\"chat-input\"\n              >\n                <textarea\n                  id=\"chat-input\"\n                  ref={inputRef}\n                  className={styles[\"chat-input\"]}\n                  placeholder={Locale.Chat.Input(submitKey)}\n                  onInput={(e) => onInput(e.currentTarget.value)}\n                  value={userInput}\n                  onKeyDown={onInputKeyDown}\n                  onFocus={scrollToBottom}\n                  onClick={scrollToBottom}\n                  onPaste={handlePaste}\n                  rows={inputRows}\n                  autoFocus={autoFocus}\n                  style={{\n                    fontSize: config.fontSize,\n                    fontFamily: config.fontFamily,\n                  }}\n                />\n                {attachImages.length != 0 && (\n                  <div className={styles[\"attach-images\"]}>\n                    {attachImages.map((image, index) => {\n                      return (\n                        <div\n                          key={index}\n                          className={styles[\"attach-image\"]}\n                          style={{ backgroundImage: `url(\"${image}\")` }}\n                        >\n                          <div className={styles[\"attach-image-mask\"]}>\n                            <DeleteImageButton\n                              deleteImage={() => {\n                                setAttachImages(\n                                  attachImages.filter((_, i) => i !== index),\n                                );\n                              }}\n                            />\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n                <IconButton\n                  icon={<SendWhiteIcon />}\n                  text={Locale.Chat.Send}\n                  className={styles[\"chat-input-send\"]}\n                  type=\"primary\"\n                  onClick={() => doSubmit(userInput)}\n                />\n              </label>\n            </div>\n          </div>\n          <div\n            className={clsx(styles[\"chat-side-panel\"], {\n              [styles[\"mobile\"]]: isMobileScreen,\n              [styles[\"chat-side-panel-show\"]]: showChatSidePanel,\n            })}\n          >\n            {showChatSidePanel && (\n              <RealtimeChat\n                onClose={() => {\n                  setShowChatSidePanel(false);\n                }}\n                onStartVoice={async () => {\n                  console.log(\"start voice\");\n                }}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n      {showExport && (\n        <ExportMessageModal onClose={() => setShowExport(false)} />\n      )}\n\n      {isEditingMessage && (\n        <EditMessageModal\n          onClose={() => {\n            setIsEditingMessage(false);\n          }}\n        />\n      )}\n\n      {showShortcutKeyModal && (\n        <ShortcutKeyModal onClose={() => setShowShortcutKeyModal(false)} />\n      )}\n    </>\n  );\n}\n\nexport function Chat() {\n  const chatStore = useChatStore();\n  const session = chatStore.currentSession();\n  return <_Chat key={session.id}></_Chat>;\n}\n","/Volumes/D/github/ChatGPT-Next-Web/app/components/emoji.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/error.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/exporter.tsx",[],["742","743","744"],"/Volumes/D/github/ChatGPT-Next-Web/app/components/home.tsx",[],["745"],"/Volumes/D/github/ChatGPT-Next-Web/app/components/input-range.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/markdown.tsx",["746"],[],"import ReactMarkdown from \"react-markdown\";\nimport \"katex/dist/katex.min.css\";\nimport RemarkMath from \"remark-math\";\nimport RemarkBreaks from \"remark-breaks\";\nimport RehypeKatex from \"rehype-katex\";\nimport RemarkGfm from \"remark-gfm\";\nimport RehypeHighlight from \"rehype-highlight\";\nimport { useRef, useState, RefObject, useEffect, useMemo } from \"react\";\nimport { copyToClipboard, useWindowSize } from \"../utils\";\nimport mermaid from \"mermaid\";\nimport Locale from \"../locales\";\nimport LoadingIcon from \"../icons/three-dots.svg\";\nimport ReloadButtonIcon from \"../icons/reload.svg\";\nimport React from \"react\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport { showImageModal, FullScreen } from \"./ui-lib\";\nimport {\n  ArtifactsShareButton,\n  HTMLPreview,\n  HTMLPreviewHander,\n} from \"./artifacts\";\nimport { useChatStore } from \"../store\";\nimport { IconButton } from \"./button\";\n\nimport { useAppConfig } from \"../store/config\";\nimport clsx from \"clsx\";\n\nexport function Mermaid(props: { code: string }) {\n  const ref = useRef<HTMLDivElement>(null);\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    if (props.code && ref.current) {\n      mermaid\n        .run({\n          nodes: [ref.current],\n          suppressErrors: true,\n        })\n        .catch((e) => {\n          setHasError(true);\n          console.error(\"[Mermaid] \", e.message);\n        });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.code]);\n\n  function viewSvgInNewWindow() {\n    const svg = ref.current?.querySelector(\"svg\");\n    if (!svg) return;\n    const text = new XMLSerializer().serializeToString(svg);\n    const blob = new Blob([text], { type: \"image/svg+xml\" });\n    showImageModal(URL.createObjectURL(blob));\n  }\n\n  if (hasError) {\n    return null;\n  }\n\n  return (\n    <div\n      className={clsx(\"no-dark\", \"mermaid\")}\n      style={{\n        cursor: \"pointer\",\n        overflow: \"auto\",\n      }}\n      ref={ref}\n      onClick={() => viewSvgInNewWindow()}\n    >\n      {props.code}\n    </div>\n  );\n}\n\nexport function PreCode(props: { children: any }) {\n  const ref = useRef<HTMLPreElement>(null);\n  const previewRef = useRef<HTMLPreviewHander>(null);\n  const [mermaidCode, setMermaidCode] = useState(\"\");\n  const [htmlCode, setHtmlCode] = useState(\"\");\n  const { height } = useWindowSize();\n  const chatStore = useChatStore();\n  const session = chatStore.currentSession();\n\n  const renderArtifacts = useDebouncedCallback(() => {\n    if (!ref.current) return;\n    const mermaidDom = ref.current.querySelector(\"code.language-mermaid\");\n    if (mermaidDom) {\n      setMermaidCode((mermaidDom as HTMLElement).innerText);\n    }\n    const htmlDom = ref.current.querySelector(\"code.language-html\");\n    const refText = ref.current.querySelector(\"code\")?.innerText;\n    if (htmlDom) {\n      setHtmlCode((htmlDom as HTMLElement).innerText);\n    } else if (\n      refText?.startsWith(\"<!DOCTYPE\") ||\n      refText?.startsWith(\"<svg\") ||\n      refText?.startsWith(\"<?xml\")\n    ) {\n      setHtmlCode(refText);\n    }\n  }, 600);\n\n  const config = useAppConfig();\n  const enableArtifacts =\n    session.mask?.enableArtifacts !== false && config.enableArtifacts;\n\n  //Wrap the paragraph for plain-text\n  useEffect(() => {\n    if (ref.current) {\n      const codeElements = ref.current.querySelectorAll(\n        \"code\",\n      ) as NodeListOf<HTMLElement>;\n      const wrapLanguages = [\n        \"\",\n        \"md\",\n        \"markdown\",\n        \"text\",\n        \"txt\",\n        \"plaintext\",\n        \"tex\",\n        \"latex\",\n      ];\n      codeElements.forEach((codeElement) => {\n        let languageClass = codeElement.className.match(/language-(\\w+)/);\n        let name = languageClass ? languageClass[1] : \"\";\n        if (wrapLanguages.includes(name)) {\n          codeElement.style.whiteSpace = \"pre-wrap\";\n        }\n      });\n      setTimeout(renderArtifacts, 1);\n    }\n  }, []);\n\n  return (\n    <>\n      <pre ref={ref}>\n        <span\n          className=\"copy-code-button\"\n          onClick={() => {\n            if (ref.current) {\n              copyToClipboard(\n                ref.current.querySelector(\"code\")?.innerText ?? \"\",\n              );\n            }\n          }}\n        ></span>\n        {props.children}\n      </pre>\n      {mermaidCode.length > 0 && (\n        <Mermaid code={mermaidCode} key={mermaidCode} />\n      )}\n      {htmlCode.length > 0 && enableArtifacts && (\n        <FullScreen className=\"no-dark html\" right={70}>\n          <ArtifactsShareButton\n            style={{ position: \"absolute\", right: 20, top: 10 }}\n            getCode={() => htmlCode}\n          />\n          <IconButton\n            style={{ position: \"absolute\", right: 120, top: 10 }}\n            bordered\n            icon={<ReloadButtonIcon />}\n            shadow\n            onClick={() => previewRef.current?.reload()}\n          />\n          <HTMLPreview\n            ref={previewRef}\n            code={htmlCode}\n            autoHeight={!document.fullscreenElement}\n            height={!document.fullscreenElement ? 600 : height}\n          />\n        </FullScreen>\n      )}\n    </>\n  );\n}\n\nfunction CustomCode(props: { children: any; className?: string }) {\n  const chatStore = useChatStore();\n  const session = chatStore.currentSession();\n  const config = useAppConfig();\n  const enableCodeFold =\n    session.mask?.enableCodeFold !== false && config.enableCodeFold;\n\n  const ref = useRef<HTMLPreElement>(null);\n  const [collapsed, setCollapsed] = useState(true);\n  const [showToggle, setShowToggle] = useState(false);\n\n  useEffect(() => {\n    if (ref.current) {\n      const codeHeight = ref.current.scrollHeight;\n      setShowToggle(codeHeight > 400);\n      ref.current.scrollTop = ref.current.scrollHeight;\n    }\n  }, [props.children]);\n\n  const toggleCollapsed = () => {\n    setCollapsed((collapsed) => !collapsed);\n  };\n  const renderShowMoreButton = () => {\n    if (showToggle && enableCodeFold && collapsed) {\n      return (\n        <div\n          className={clsx(\"show-hide-button\", {\n            collapsed,\n            expanded: !collapsed,\n          })}\n        >\n          <button onClick={toggleCollapsed}>{Locale.NewChat.More}</button>\n        </div>\n      );\n    }\n    return null;\n  };\n  return (\n    <>\n      <code\n        className={clsx(props?.className)}\n        ref={ref}\n        style={{\n          maxHeight: enableCodeFold && collapsed ? \"400px\" : \"none\",\n          overflowY: \"hidden\",\n        }}\n      >\n        {props.children}\n      </code>\n\n      {renderShowMoreButton()}\n    </>\n  );\n}\n\nfunction escapeBrackets(text: string) {\n  const pattern =\n    /(```[\\s\\S]*?```|`.*?`)|\\\\\\[([\\s\\S]*?[^\\\\])\\\\\\]|\\\\\\((.*?)\\\\\\)/g;\n  return text.replace(\n    pattern,\n    (match, codeBlock, squareBracket, roundBracket) => {\n      if (codeBlock) {\n        return codeBlock;\n      } else if (squareBracket) {\n        return `$$${squareBracket}$$`;\n      } else if (roundBracket) {\n        return `$${roundBracket}$`;\n      }\n      return match;\n    },\n  );\n}\n\nfunction tryWrapHtmlCode(text: string) {\n  // try add wrap html code (fixed: html codeblock include 2 newline)\n  // ignore embed codeblock\n  if (text.includes(\"```\")) {\n    return text;\n  }\n  return text\n    .replace(\n      /([`]*?)(\\w*?)([\\n\\r]*?)(<!DOCTYPE html>)/g,\n      (match, quoteStart, lang, newLine, doctype) => {\n        return !quoteStart ? \"\\n```html\\n\" + doctype : match;\n      },\n    )\n    .replace(\n      /(<\\/body>)([\\r\\n\\s]*?)(<\\/html>)([\\n\\r]*)([`]*)([\\n\\r]*?)/g,\n      (match, bodyEnd, space, htmlEnd, newLine, quoteEnd) => {\n        return !quoteEnd ? bodyEnd + space + htmlEnd + \"\\n```\\n\" : match;\n      },\n    );\n}\n\nfunction _MarkDownContent(props: { content: string }) {\n  const escapedContent = useMemo(() => {\n    return tryWrapHtmlCode(escapeBrackets(props.content));\n  }, [props.content]);\n\n  return (\n    <ReactMarkdown\n      remarkPlugins={[RemarkMath, RemarkGfm, RemarkBreaks]}\n      rehypePlugins={[\n        RehypeKatex,\n        [\n          RehypeHighlight,\n          {\n            detect: false,\n            ignoreMissing: true,\n          },\n        ],\n      ]}\n      components={{\n        pre: PreCode,\n        code: CustomCode,\n        p: (pProps) => <p {...pProps} dir=\"auto\" />,\n        a: (aProps) => {\n          const href = aProps.href || \"\";\n          if (/\\.(aac|mp3|opus|wav)$/.test(href)) {\n            return (\n              <figure>\n                <audio controls src={href}></audio>\n              </figure>\n            );\n          }\n          if (/\\.(3gp|3g2|webm|ogv|mpeg|mp4|avi)$/.test(href)) {\n            return (\n              <video controls width=\"99.9%\">\n                <source src={href} />\n              </video>\n            );\n          }\n          const isInternal = /^\\/#/i.test(href);\n          const target = isInternal ? \"_self\" : aProps.target ?? \"_blank\";\n          return <a {...aProps} target={target} />;\n        },\n      }}\n    >\n      {escapedContent}\n    </ReactMarkdown>\n  );\n}\n\nexport const MarkdownContent = React.memo(_MarkDownContent);\n\nexport function Markdown(\n  props: {\n    content: string;\n    loading?: boolean;\n    fontSize?: number;\n    fontFamily?: string;\n    parentRef?: RefObject<HTMLDivElement>;\n    defaultShow?: boolean;\n  } & React.DOMAttributes<HTMLDivElement>,\n) {\n  const mdRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <div\n      className=\"markdown-body\"\n      style={{\n        fontSize: `${props.fontSize ?? 14}px`,\n        fontFamily: props.fontFamily || \"inherit\",\n      }}\n      ref={mdRef}\n      onContextMenu={props.onContextMenu}\n      onDoubleClickCapture={props.onDoubleClickCapture}\n      dir=\"auto\"\n    >\n      {props.loading ? (\n        <LoadingIcon />\n      ) : (\n        <MarkdownContent content={props.content} />\n      )}\n    </div>\n  );\n}\n","/Volumes/D/github/ChatGPT-Next-Web/app/components/mask.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/message-selector.tsx",[],["747","748"],"/Volumes/D/github/ChatGPT-Next-Web/app/components/model-config.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/new-chat.tsx",[],["749"],"/Volumes/D/github/ChatGPT-Next-Web/app/components/settings.tsx",[],["750","751","752"],"/Volumes/D/github/ChatGPT-Next-Web/app/components/sidebar.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/ui-lib.tsx",[],["753","754"],"/Volumes/D/github/ChatGPT-Next-Web/app/config/build.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/config/client.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/config/server.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/constant.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/global.d.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/layout.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/ar.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/bn.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/cn.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/cs.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/de.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/en.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/es.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/fr.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/id.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/index.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/it.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/jp.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/ko.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/no.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/pt.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/ru.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/sk.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/tr.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/tw.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/vi.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/masks/cn.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/masks/en.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/masks/index.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/masks/typing.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/page.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/polyfill.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/store/access.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/store/chat.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/store/config.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/store/index.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/store/mask.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/store/prompt.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/store/sync.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/store/update.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/typing.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/clone.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/cloud/index.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/cloud/upstash.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/cloud/webdav.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/format.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/hooks.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/merge.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/model.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/store.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/sync.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/token.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/upstash/[action]/[...key]/route.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/webdav/[...path]/route.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/anthropic.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/object.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/masks/tw.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/chat.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/alibaba.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/baidu.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/bytedance.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/masks/build.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/baidu.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/cloudflare.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/[provider]/[...path]/route.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/alibaba.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/anthropic.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/artifacts/route.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/azure.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/baidu.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/bytedance.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/deepseek.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/glm.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/google.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/iflytek.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/moonshot.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/openai.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/proxy.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/siliconflow.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/stability.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/tencent/route.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/xai.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/deepseek.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/glm.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/iflytek.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/moonshot.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/siliconflow.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/tencent.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/xai.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/artifacts.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/mcp-market.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/plugin.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/realtime-chat/index.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/realtime-chat/realtime-chat.tsx",["755"],[],"import VoiceIcon from \"@/app/icons/voice.svg\";\nimport VoiceOffIcon from \"@/app/icons/voice-off.svg\";\nimport PowerIcon from \"@/app/icons/power.svg\";\n\nimport styles from \"./realtime-chat.module.scss\";\nimport clsx from \"clsx\";\n\nimport { useState, useRef, useEffect } from \"react\";\n\nimport { useChatStore, createMessage, useAppConfig } from \"@/app/store\";\n\nimport { IconButton } from \"@/app/components/button\";\n\nimport {\n  Modality,\n  RTClient,\n  RTInputAudioItem,\n  RTResponse,\n  TurnDetection,\n} from \"rt-client\";\nimport { AudioHandler } from \"@/app/lib/audio\";\nimport { uploadImage } from \"@/app/utils/chat\";\nimport { VoicePrint } from \"@/app/components/voice-print\";\n\ninterface RealtimeChatProps {\n  onClose?: () => void;\n  onStartVoice?: () => void;\n  onPausedVoice?: () => void;\n}\n\nexport function RealtimeChat({\n  onClose,\n  onStartVoice,\n  onPausedVoice,\n}: RealtimeChatProps) {\n  const chatStore = useChatStore();\n  const session = chatStore.currentSession();\n  const config = useAppConfig();\n  const [status, setStatus] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [modality, setModality] = useState(\"audio\");\n  const [useVAD, setUseVAD] = useState(true);\n  const [frequencies, setFrequencies] = useState<Uint8Array | undefined>();\n\n  const clientRef = useRef<RTClient | null>(null);\n  const audioHandlerRef = useRef<AudioHandler | null>(null);\n  const initRef = useRef(false);\n\n  const temperature = config.realtimeConfig.temperature;\n  const apiKey = config.realtimeConfig.apiKey;\n  const model = config.realtimeConfig.model;\n  const azure = config.realtimeConfig.provider === \"Azure\";\n  const azureEndpoint = config.realtimeConfig.azure.endpoint;\n  const azureDeployment = config.realtimeConfig.azure.deployment;\n  const voice = config.realtimeConfig.voice;\n\n  const handleConnect = async () => {\n    if (isConnecting) return;\n    if (!isConnected) {\n      try {\n        setIsConnecting(true);\n        clientRef.current = azure\n          ? new RTClient(\n              new URL(azureEndpoint),\n              { key: apiKey },\n              { deployment: azureDeployment },\n            )\n          : new RTClient({ key: apiKey }, { model });\n        const modalities: Modality[] =\n          modality === \"audio\" ? [\"text\", \"audio\"] : [\"text\"];\n        const turnDetection: TurnDetection = useVAD\n          ? { type: \"server_vad\" }\n          : null;\n        await clientRef.current.configure({\n          instructions: \"\",\n          voice,\n          input_audio_transcription: { model: \"whisper-1\" },\n          turn_detection: turnDetection,\n          tools: [],\n          temperature,\n          modalities,\n        });\n        startResponseListener();\n\n        setIsConnected(true);\n        // TODO\n        // try {\n        //   const recentMessages = chatStore.getMessagesWithMemory();\n        //   for (const message of recentMessages) {\n        //     const { role, content } = message;\n        //     if (typeof content === \"string\") {\n        //       await clientRef.current.sendItem({\n        //         type: \"message\",\n        //         role: role as any,\n        //         content: [\n        //           {\n        //             type: (role === \"assistant\" ? \"text\" : \"input_text\") as any,\n        //             text: content as string,\n        //           },\n        //         ],\n        //       });\n        //     }\n        //   }\n        //   // await clientRef.current.generateResponse();\n        // } catch (error) {\n        //   console.error(\"Set message failed:\", error);\n        // }\n      } catch (error) {\n        console.error(\"Connection failed:\", error);\n        setStatus(\"Connection failed\");\n      } finally {\n        setIsConnecting(false);\n      }\n    } else {\n      await disconnect();\n    }\n  };\n\n  const disconnect = async () => {\n    if (clientRef.current) {\n      try {\n        await clientRef.current.close();\n        clientRef.current = null;\n        setIsConnected(false);\n      } catch (error) {\n        console.error(\"Disconnect failed:\", error);\n      }\n    }\n  };\n\n  const startResponseListener = async () => {\n    if (!clientRef.current) return;\n\n    try {\n      for await (const serverEvent of clientRef.current.events()) {\n        if (serverEvent.type === \"response\") {\n          await handleResponse(serverEvent);\n        } else if (serverEvent.type === \"input_audio\") {\n          await handleInputAudio(serverEvent);\n        }\n      }\n    } catch (error) {\n      if (clientRef.current) {\n        console.error(\"Response iteration error:\", error);\n      }\n    }\n  };\n\n  const handleResponse = async (response: RTResponse) => {\n    for await (const item of response) {\n      if (item.type === \"message\" && item.role === \"assistant\") {\n        const botMessage = createMessage({\n          role: item.role,\n          content: \"\",\n        });\n        // add bot message first\n        chatStore.updateTargetSession(session, (session) => {\n          session.messages = session.messages.concat([botMessage]);\n        });\n        let hasAudio = false;\n        for await (const content of item) {\n          if (content.type === \"text\") {\n            for await (const text of content.textChunks()) {\n              botMessage.content += text;\n            }\n          } else if (content.type === \"audio\") {\n            const textTask = async () => {\n              for await (const text of content.transcriptChunks()) {\n                botMessage.content += text;\n              }\n            };\n            const audioTask = async () => {\n              audioHandlerRef.current?.startStreamingPlayback();\n              for await (const audio of content.audioChunks()) {\n                hasAudio = true;\n                audioHandlerRef.current?.playChunk(audio);\n              }\n            };\n            await Promise.all([textTask(), audioTask()]);\n          }\n          // update message.content\n          chatStore.updateTargetSession(session, (session) => {\n            session.messages = session.messages.concat();\n          });\n        }\n        if (hasAudio) {\n          // upload audio get audio_url\n          const blob = audioHandlerRef.current?.savePlayFile();\n          uploadImage(blob!).then((audio_url) => {\n            botMessage.audio_url = audio_url;\n            // update text and audio_url\n            chatStore.updateTargetSession(session, (session) => {\n              session.messages = session.messages.concat();\n            });\n          });\n        }\n      }\n    }\n  };\n\n  const handleInputAudio = async (item: RTInputAudioItem) => {\n    await item.waitForCompletion();\n    if (item.transcription) {\n      const userMessage = createMessage({\n        role: \"user\",\n        content: item.transcription,\n      });\n      chatStore.updateTargetSession(session, (session) => {\n        session.messages = session.messages.concat([userMessage]);\n      });\n      // save input audio_url, and update session\n      const { audioStartMillis, audioEndMillis } = item;\n      // upload audio get audio_url\n      const blob = audioHandlerRef.current?.saveRecordFile(\n        audioStartMillis,\n        audioEndMillis,\n      );\n      uploadImage(blob!).then((audio_url) => {\n        userMessage.audio_url = audio_url;\n        chatStore.updateTargetSession(session, (session) => {\n          session.messages = session.messages.concat();\n        });\n      });\n    }\n    // stop streaming play after get input audio.\n    audioHandlerRef.current?.stopStreamingPlayback();\n  };\n\n  const toggleRecording = async () => {\n    if (!isRecording && clientRef.current) {\n      try {\n        if (!audioHandlerRef.current) {\n          audioHandlerRef.current = new AudioHandler();\n          await audioHandlerRef.current.initialize();\n        }\n        await audioHandlerRef.current.startRecording(async (chunk) => {\n          await clientRef.current?.sendAudio(chunk);\n        });\n        setIsRecording(true);\n      } catch (error) {\n        console.error(\"Failed to start recording:\", error);\n      }\n    } else if (audioHandlerRef.current) {\n      try {\n        audioHandlerRef.current.stopRecording();\n        if (!useVAD) {\n          const inputAudio = await clientRef.current?.commitAudio();\n          await handleInputAudio(inputAudio!);\n          await clientRef.current?.generateResponse();\n        }\n        setIsRecording(false);\n      } catch (error) {\n        console.error(\"Failed to stop recording:\", error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    // 防止重复初始化\n    if (initRef.current) return;\n    initRef.current = true;\n\n    const initAudioHandler = async () => {\n      const handler = new AudioHandler();\n      await handler.initialize();\n      audioHandlerRef.current = handler;\n      await handleConnect();\n      await toggleRecording();\n    };\n\n    initAudioHandler().catch((error) => {\n      setStatus(error);\n      console.error(error);\n    });\n\n    return () => {\n      if (isRecording) {\n        toggleRecording();\n      }\n      audioHandlerRef.current?.close().catch(console.error);\n      disconnect();\n    };\n  }, []);\n\n  useEffect(() => {\n    let animationFrameId: number;\n\n    if (isConnected && isRecording) {\n      const animationFrame = () => {\n        if (audioHandlerRef.current) {\n          const freqData = audioHandlerRef.current.getByteFrequencyData();\n          setFrequencies(freqData);\n        }\n        animationFrameId = requestAnimationFrame(animationFrame);\n      };\n\n      animationFrameId = requestAnimationFrame(animationFrame);\n    } else {\n      setFrequencies(undefined);\n    }\n\n    return () => {\n      if (animationFrameId) {\n        cancelAnimationFrame(animationFrameId);\n      }\n    };\n  }, [isConnected, isRecording]);\n\n  // update session params\n  useEffect(() => {\n    clientRef.current?.configure({ voice });\n  }, [voice]);\n  useEffect(() => {\n    clientRef.current?.configure({ temperature });\n  }, [temperature]);\n\n  const handleClose = async () => {\n    onClose?.();\n    if (isRecording) {\n      await toggleRecording();\n    }\n    disconnect().catch(console.error);\n  };\n\n  return (\n    <div className={styles[\"realtime-chat\"]}>\n      <div\n        className={clsx(styles[\"circle-mic\"], {\n          [styles[\"pulse\"]]: isRecording,\n        })}\n      >\n        <VoicePrint frequencies={frequencies} isActive={isRecording} />\n      </div>\n\n      <div className={styles[\"bottom-icons\"]}>\n        <div>\n          <IconButton\n            icon={isRecording ? <VoiceIcon /> : <VoiceOffIcon />}\n            onClick={toggleRecording}\n            disabled={!isConnected}\n            shadow\n            bordered\n          />\n        </div>\n        <div className={styles[\"icon-center\"]}>{status}</div>\n        <div>\n          <IconButton\n            icon={<PowerIcon />}\n            onClick={handleClose}\n            shadow\n            bordered\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Volumes/D/github/ChatGPT-Next-Web/app/components/realtime-chat/realtime-config.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/sd/index.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/sd/sd-panel.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/sd/sd-sidebar.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/sd/sd.tsx",["756","757"],[],"import chatStyles from \"@/app/components/chat.module.scss\";\nimport styles from \"@/app/components/sd/sd.module.scss\";\nimport homeStyles from \"@/app/components/home.module.scss\";\n\nimport { IconButton } from \"@/app/components/button\";\nimport ReturnIcon from \"@/app/icons/return.svg\";\nimport Locale from \"@/app/locales\";\nimport { Path } from \"@/app/constant\";\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  copyToClipboard,\n  getMessageTextContent,\n  useMobileScreen,\n} from \"@/app/utils\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { useAppConfig } from \"@/app/store\";\nimport MinIcon from \"@/app/icons/min.svg\";\nimport MaxIcon from \"@/app/icons/max.svg\";\nimport { getClientConfig } from \"@/app/config/client\";\nimport { ChatAction } from \"@/app/components/chat\";\nimport DeleteIcon from \"@/app/icons/clear.svg\";\nimport CopyIcon from \"@/app/icons/copy.svg\";\nimport PromptIcon from \"@/app/icons/prompt.svg\";\nimport ResetIcon from \"@/app/icons/reload.svg\";\nimport { useSdStore } from \"@/app/store/sd\";\nimport LoadingIcon from \"@/app/icons/three-dots.svg\";\nimport ErrorIcon from \"@/app/icons/delete.svg\";\nimport SDIcon from \"@/app/icons/sd.svg\";\nimport { Property } from \"csstype\";\nimport {\n  showConfirm,\n  showImageModal,\n  showModal,\n} from \"@/app/components/ui-lib\";\nimport { removeImage } from \"@/app/utils/chat\";\nimport { SideBar } from \"./sd-sidebar\";\nimport { WindowContent } from \"@/app/components/home\";\nimport { params } from \"./sd-panel\";\nimport clsx from \"clsx\";\n\nfunction getSdTaskStatus(item: any) {\n  let s: string;\n  let color: Property.Color | undefined = undefined;\n  switch (item.status) {\n    case \"success\":\n      s = Locale.Sd.Status.Success;\n      color = \"green\";\n      break;\n    case \"error\":\n      s = Locale.Sd.Status.Error;\n      color = \"red\";\n      break;\n    case \"wait\":\n      s = Locale.Sd.Status.Wait;\n      color = \"yellow\";\n      break;\n    case \"running\":\n      s = Locale.Sd.Status.Running;\n      color = \"blue\";\n      break;\n    default:\n      s = item.status.toUpperCase();\n  }\n  return (\n    <p className={styles[\"line-1\"]} title={item.error} style={{ color: color }}>\n      <span>\n        {Locale.Sd.Status.Name}: {s}\n      </span>\n      {item.status === \"error\" && (\n        <span\n          className=\"clickable\"\n          onClick={() => {\n            showModal({\n              title: Locale.Sd.Detail,\n              children: (\n                <div style={{ color: color, userSelect: \"text\" }}>\n                  {item.error}\n                </div>\n              ),\n            });\n          }}\n        >\n          - {item.error}\n        </span>\n      )}\n    </p>\n  );\n}\n\nexport function Sd() {\n  const isMobileScreen = useMobileScreen();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const clientConfig = useMemo(() => getClientConfig(), []);\n  const showMaxIcon = !isMobileScreen && !clientConfig?.isApp;\n  const config = useAppConfig();\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const sdStore = useSdStore();\n  const [sdImages, setSdImages] = useState(sdStore.draw);\n  const isSd = location.pathname === Path.Sd;\n\n  useEffect(() => {\n    setSdImages(sdStore.draw);\n  }, [sdStore.currentId]);\n\n  return (\n    <>\n      <SideBar className={clsx({ [homeStyles[\"sidebar-show\"]]: isSd })} />\n      <WindowContent>\n        <div className={chatStyles.chat} key={\"1\"}>\n          <div className=\"window-header\" data-tauri-drag-region>\n            {isMobileScreen && (\n              <div className=\"window-actions\">\n                <div className={\"window-action-button\"}>\n                  <IconButton\n                    icon={<ReturnIcon />}\n                    bordered\n                    title={Locale.Chat.Actions.ChatList}\n                    onClick={() => navigate(Path.Sd)}\n                  />\n                </div>\n              </div>\n            )}\n            <div\n              className={clsx(\n                \"window-header-title\",\n                chatStyles[\"chat-body-title\"],\n              )}\n            >\n              <div className={`window-header-main-title`}>Stability AI</div>\n              <div className=\"window-header-sub-title\">\n                {Locale.Sd.SubTitle(sdImages.length || 0)}\n              </div>\n            </div>\n\n            <div className=\"window-actions\">\n              {showMaxIcon && (\n                <div className=\"window-action-button\">\n                  <IconButton\n                    aria={Locale.Chat.Actions.FullScreen}\n                    icon={config.tightBorder ? <MinIcon /> : <MaxIcon />}\n                    bordered\n                    onClick={() => {\n                      config.update(\n                        (config) => (config.tightBorder = !config.tightBorder),\n                      );\n                    }}\n                  />\n                </div>\n              )}\n              {isMobileScreen && <SDIcon width={50} height={50} />}\n            </div>\n          </div>\n          <div className={chatStyles[\"chat-body\"]} ref={scrollRef}>\n            <div className={styles[\"sd-img-list\"]}>\n              {sdImages.length > 0 ? (\n                sdImages.map((item: any) => {\n                  return (\n                    <div\n                      key={item.id}\n                      style={{ display: \"flex\" }}\n                      className={styles[\"sd-img-item\"]}\n                    >\n                      {item.status === \"success\" ? (\n                        <img\n                          className={styles[\"img\"]}\n                          src={item.img_data}\n                          alt={item.id}\n                          onClick={(e) =>\n                            showImageModal(\n                              item.img_data,\n                              true,\n                              isMobileScreen\n                                ? { width: \"100%\", height: \"fit-content\" }\n                                : { maxWidth: \"100%\", maxHeight: \"100%\" },\n                              isMobileScreen\n                                ? { width: \"100%\", height: \"fit-content\" }\n                                : { width: \"100%\", height: \"100%\" },\n                            )\n                          }\n                        />\n                      ) : item.status === \"error\" ? (\n                        <div className={styles[\"pre-img\"]}>\n                          <ErrorIcon />\n                        </div>\n                      ) : (\n                        <div className={styles[\"pre-img\"]}>\n                          <LoadingIcon />\n                        </div>\n                      )}\n                      <div\n                        style={{ marginLeft: \"10px\" }}\n                        className={styles[\"sd-img-item-info\"]}\n                      >\n                        <p className={styles[\"line-1\"]}>\n                          {Locale.SdPanel.Prompt}:{\" \"}\n                          <span\n                            className=\"clickable\"\n                            title={item.params.prompt}\n                            onClick={() => {\n                              showModal({\n                                title: Locale.Sd.Detail,\n                                children: (\n                                  <div style={{ userSelect: \"text\" }}>\n                                    {item.params.prompt}\n                                  </div>\n                                ),\n                              });\n                            }}\n                          >\n                            {item.params.prompt}\n                          </span>\n                        </p>\n                        <p>\n                          {Locale.SdPanel.AIModel}: {item.model_name}\n                        </p>\n                        {getSdTaskStatus(item)}\n                        <p>{item.created_at}</p>\n                        <div className={chatStyles[\"chat-message-actions\"]}>\n                          <div className={chatStyles[\"chat-input-actions\"]}>\n                            <ChatAction\n                              text={Locale.Sd.Actions.Params}\n                              icon={<PromptIcon />}\n                              onClick={() => {\n                                showModal({\n                                  title: Locale.Sd.GenerateParams,\n                                  children: (\n                                    <div style={{ userSelect: \"text\" }}>\n                                      {Object.keys(item.params).map((key) => {\n                                        let label = key;\n                                        let value = item.params[key];\n                                        switch (label) {\n                                          case \"prompt\":\n                                            label = Locale.SdPanel.Prompt;\n                                            break;\n                                          case \"negative_prompt\":\n                                            label =\n                                              Locale.SdPanel.NegativePrompt;\n                                            break;\n                                          case \"aspect_ratio\":\n                                            label = Locale.SdPanel.AspectRatio;\n                                            break;\n                                          case \"seed\":\n                                            label = \"Seed\";\n                                            value = value || 0;\n                                            break;\n                                          case \"output_format\":\n                                            label = Locale.SdPanel.OutFormat;\n                                            value = value?.toUpperCase();\n                                            break;\n                                          case \"style\":\n                                            label = Locale.SdPanel.ImageStyle;\n                                            value = params\n                                              .find(\n                                                (item) =>\n                                                  item.value === \"style\",\n                                              )\n                                              ?.options?.find(\n                                                (item) => item.value === value,\n                                              )?.name;\n                                            break;\n                                          default:\n                                            break;\n                                        }\n\n                                        return (\n                                          <div\n                                            key={key}\n                                            style={{ margin: \"10px\" }}\n                                          >\n                                            <strong>{label}: </strong>\n                                            {value}\n                                          </div>\n                                        );\n                                      })}\n                                    </div>\n                                  ),\n                                });\n                              }}\n                            />\n                            <ChatAction\n                              text={Locale.Sd.Actions.Copy}\n                              icon={<CopyIcon />}\n                              onClick={() =>\n                                copyToClipboard(\n                                  getMessageTextContent({\n                                    role: \"user\",\n                                    content: item.params.prompt,\n                                  }),\n                                )\n                              }\n                            />\n                            <ChatAction\n                              text={Locale.Sd.Actions.Retry}\n                              icon={<ResetIcon />}\n                              onClick={() => {\n                                const reqData = {\n                                  model: item.model,\n                                  model_name: item.model_name,\n                                  status: \"wait\",\n                                  params: { ...item.params },\n                                  created_at: new Date().toLocaleString(),\n                                  img_data: \"\",\n                                };\n                                sdStore.sendTask(reqData);\n                              }}\n                            />\n                            <ChatAction\n                              text={Locale.Sd.Actions.Delete}\n                              icon={<DeleteIcon />}\n                              onClick={async () => {\n                                if (\n                                  await showConfirm(Locale.Sd.Danger.Delete)\n                                ) {\n                                  // remove img_data + remove item in list\n                                  removeImage(item.img_data).finally(() => {\n                                    sdStore.draw = sdImages.filter(\n                                      (i: any) => i.id !== item.id,\n                                    );\n                                    sdStore.getNextId();\n                                  });\n                                }\n                              }}\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })\n              ) : (\n                <div>{Locale.Sd.EmptyRecord}</div>\n              )}\n            </div>\n          </div>\n        </div>\n      </WindowContent>\n    </>\n  );\n}\n","/Volumes/D/github/ChatGPT-Next-Web/app/components/search-chat.tsx",["758"],[],"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { ErrorBoundary } from \"./error\";\nimport styles from \"./mask.module.scss\";\nimport { useNavigate } from \"react-router-dom\";\nimport { IconButton } from \"./button\";\nimport CloseIcon from \"../icons/close.svg\";\nimport EyeIcon from \"../icons/eye.svg\";\nimport Locale from \"../locales\";\nimport { Path } from \"../constant\";\n\nimport { useChatStore } from \"../store\";\n\ntype Item = {\n  id: number;\n  name: string;\n  content: string;\n};\nexport function SearchChatPage() {\n  const navigate = useNavigate();\n\n  const chatStore = useChatStore();\n\n  const sessions = chatStore.sessions;\n  const selectSession = chatStore.selectSession;\n\n  const [searchResults, setSearchResults] = useState<Item[]>([]);\n\n  const previousValueRef = useRef<string>(\"\");\n  const searchInputRef = useRef<HTMLInputElement>(null);\n  const doSearch = useCallback((text: string) => {\n    const lowerCaseText = text.toLowerCase();\n    const results: Item[] = [];\n\n    sessions.forEach((session, index) => {\n      const fullTextContents: string[] = [];\n\n      session.messages.forEach((message) => {\n        const content = message.content as string;\n        if (!content.toLowerCase || content === \"\") return;\n        const lowerCaseContent = content.toLowerCase();\n\n        // full text search\n        let pos = lowerCaseContent.indexOf(lowerCaseText);\n        while (pos !== -1) {\n          const start = Math.max(0, pos - 35);\n          const end = Math.min(content.length, pos + lowerCaseText.length + 35);\n          fullTextContents.push(content.substring(start, end));\n          pos = lowerCaseContent.indexOf(\n            lowerCaseText,\n            pos + lowerCaseText.length,\n          );\n        }\n      });\n\n      if (fullTextContents.length > 0) {\n        results.push({\n          id: index,\n          name: session.topic,\n          content: fullTextContents.join(\"... \"), // concat content with...\n        });\n      }\n    });\n\n    // sort by length of matching content\n    results.sort((a, b) => b.content.length - a.content.length);\n\n    return results;\n  }, []);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (searchInputRef.current) {\n        const currentValue = searchInputRef.current.value;\n        if (currentValue !== previousValueRef.current) {\n          if (currentValue.length > 0) {\n            const result = doSearch(currentValue);\n            setSearchResults(result);\n          }\n          previousValueRef.current = currentValue;\n        }\n      }\n    }, 1000);\n\n    // Cleanup the interval on component unmount\n    return () => clearInterval(intervalId);\n  }, [doSearch]);\n\n  return (\n    <ErrorBoundary>\n      <div className={styles[\"mask-page\"]}>\n        {/* header */}\n        <div className=\"window-header\">\n          <div className=\"window-header-title\">\n            <div className=\"window-header-main-title\">\n              {Locale.SearchChat.Page.Title}\n            </div>\n            <div className=\"window-header-submai-title\">\n              {Locale.SearchChat.Page.SubTitle(searchResults.length)}\n            </div>\n          </div>\n\n          <div className=\"window-actions\">\n            <div className=\"window-action-button\">\n              <IconButton\n                icon={<CloseIcon />}\n                bordered\n                onClick={() => navigate(-1)}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className={styles[\"mask-page-body\"]}>\n          <div className={styles[\"mask-filter\"]}>\n            {/**搜索输入框 */}\n            <input\n              type=\"text\"\n              className={styles[\"search-bar\"]}\n              placeholder={Locale.SearchChat.Page.Search}\n              autoFocus\n              ref={searchInputRef}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\") {\n                  e.preventDefault();\n                  const searchText = e.currentTarget.value;\n                  if (searchText.length > 0) {\n                    const result = doSearch(searchText);\n                    setSearchResults(result);\n                  }\n                }\n              }}\n            />\n          </div>\n\n          <div>\n            {searchResults.map((item) => (\n              <div\n                className={styles[\"mask-item\"]}\n                key={item.id}\n                onClick={() => {\n                  navigate(Path.Chat);\n                  selectSession(item.id);\n                }}\n                style={{ cursor: \"pointer\" }}\n              >\n                {/** 搜索匹配的文本 */}\n                <div className={styles[\"mask-header\"]}>\n                  <div className={styles[\"mask-title\"]}>\n                    <div className={styles[\"mask-name\"]}>{item.name}</div>\n                    {item.content.slice(0, 70)}\n                  </div>\n                </div>\n                {/** 操作按钮 */}\n                <div className={styles[\"mask-actions\"]}>\n                  <IconButton\n                    icon={<EyeIcon />}\n                    text={Locale.SearchChat.Item.View}\n                  />\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </ErrorBoundary>\n  );\n}\n","/Volumes/D/github/ChatGPT-Next-Web/app/components/tts-config.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/voice-print/index.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/voice-print/voice-print.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/lib/audio.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/da.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/mcp/actions.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/mcp/client.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/mcp/logger.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/mcp/types.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/mcp/utils.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/store/plugin.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/store/sd.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/audio.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/auth-settings-events.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/hmac.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/indexedDB-storage.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/ms_edge_tts.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/stream.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/tencent.ts",[],[],{"ruleId":"759","severity":1,"message":"760","line":32,"column":6,"nodeType":"761","endLine":32,"endColumn":30,"suggestions":"762","suppressions":"763"},{"ruleId":"759","severity":1,"message":"764","line":47,"column":6,"nodeType":"761","endLine":47,"endColumn":8,"suggestions":"765","suppressions":"766"},{"ruleId":"759","severity":1,"message":"767","line":597,"column":6,"nodeType":"761","endLine":597,"endColumn":48,"suggestions":"768"},{"ruleId":"759","severity":1,"message":"769","line":1020,"column":6,"nodeType":"761","endLine":1020,"endColumn":40,"suggestions":"770"},{"ruleId":"771","severity":1,"message":"772","line":1989,"column":31,"nodeType":"773","endLine":1993,"endColumn":33},{"ruleId":"771","severity":1,"message":"772","line":2008,"column":39,"nodeType":"773","endLine":2017,"endColumn":41},{"ruleId":"759","severity":1,"message":"774","line":359,"column":6,"nodeType":"761","endLine":359,"endColumn":41,"suggestions":"775","suppressions":"776"},{"ruleId":"759","severity":1,"message":"777","line":1068,"column":3,"nodeType":"778","endLine":1068,"endColumn":12,"suggestions":"779","suppressions":"780"},{"ruleId":"759","severity":1,"message":"781","line":1175,"column":6,"nodeType":"761","endLine":1175,"endColumn":15,"suggestions":"782","suppressions":"783"},{"ruleId":"759","severity":1,"message":"784","line":1510,"column":6,"nodeType":"761","endLine":1510,"endColumn":8,"suggestions":"785","suppressions":"786"},{"ruleId":"759","severity":1,"message":"767","line":287,"column":6,"nodeType":"761","endLine":287,"endColumn":8,"suggestions":"787","suppressions":"788"},{"ruleId":"771","severity":1,"message":"772","line":581,"column":19,"nodeType":"773","endLine":586,"endColumn":21,"suppressions":"789"},{"ruleId":"771","severity":1,"message":"772","line":598,"column":23,"nodeType":"773","endLine":603,"endColumn":25,"suppressions":"790"},{"ruleId":"759","severity":1,"message":"791","line":234,"column":6,"nodeType":"761","endLine":234,"endColumn":8,"suggestions":"792","suppressions":"793"},{"ruleId":"759","severity":1,"message":"794","line":131,"column":6,"nodeType":"761","endLine":131,"endColumn":8,"suggestions":"795"},{"ruleId":"759","severity":1,"message":"796","line":131,"column":6,"nodeType":"761","endLine":131,"endColumn":8,"suggestions":"797","suppressions":"798"},{"ruleId":"759","severity":1,"message":"799","line":144,"column":6,"nodeType":"761","endLine":144,"endColumn":28,"suggestions":"800","suppressions":"801"},{"ruleId":"759","severity":1,"message":"802","line":72,"column":6,"nodeType":"761","endLine":72,"endColumn":8,"suggestions":"803","suppressions":"804"},{"ruleId":"759","severity":1,"message":"805","line":640,"column":5,"nodeType":"761","endLine":640,"endColumn":7,"suggestions":"806","suppressions":"807"},{"ruleId":"759","severity":1,"message":"808","line":654,"column":6,"nodeType":"761","endLine":654,"endColumn":8,"suggestions":"809","suppressions":"810"},{"ruleId":"759","severity":1,"message":"811","line":673,"column":6,"nodeType":"761","endLine":673,"endColumn":8,"suggestions":"812","suppressions":"813"},{"ruleId":"759","severity":1,"message":"767","line":136,"column":6,"nodeType":"761","endLine":136,"endColumn":8,"suggestions":"814","suppressions":"815"},{"ruleId":"771","severity":1,"message":"772","line":463,"column":9,"nodeType":"773","endLine":471,"endColumn":10,"suppressions":"816"},{"ruleId":"759","severity":1,"message":"817","line":285,"column":6,"nodeType":"761","endLine":285,"endColumn":8,"suggestions":"818"},{"ruleId":"759","severity":1,"message":"819","line":104,"column":6,"nodeType":"761","endLine":104,"endColumn":25,"suggestions":"820"},{"ruleId":"771","severity":1,"message":"772","line":165,"column":25,"nodeType":"773","endLine":181,"endColumn":27},{"ruleId":"759","severity":1,"message":"821","line":68,"column":6,"nodeType":"761","endLine":68,"endColumn":8,"suggestions":"822"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setSearchParams'. Either include it or remove the dependency array.","ArrayExpression",["823"],["824"],"React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["825"],["826"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["827"],"React Hook useMemo has an unnecessary dependency: 'scrollRef.current.scrollHeight'. Either exclude it or remove the dependency array.",["828"],"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","React Hook useEffect has missing dependencies: 'noPrompts' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["829"],["830"],"React Hook useEffect has a missing dependency: 'measure'. Either include it or remove the dependency array.","Identifier",["831"],["832"],"React Hook useEffect has missing dependencies: 'chatStore' and 'config.modelConfig'. Either include them or remove the dependency array.",["833"],["834"],"React Hook useEffect has missing dependencies: 'session.id' and 'userInput.length'. Either include them or remove the dependency array.",["835"],["836"],["837"],["838"],["839"],["840"],"React Hook useEffect has missing dependencies: 'api.llm' and 'config'. Either include them or remove the dependency array.",["841"],["842"],"React Hook useEffect has a missing dependency: 'renderArtifacts'. Either include it or remove the dependency array.",["843"],"React Hook useEffect has missing dependencies: 'props.defaultSelectAll' and 'selectAll'. Either include them or remove the dependency array.",["844"],["845"],"React Hook useEffect has missing dependencies: 'messages' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["846"],["847"],"React Hook useEffect has a missing dependency: 'masks'. Either include it or remove the dependency array.",["848"],["849"],"React Hook useMemo has a missing dependency: 'accessStore'. Either include it or remove the dependency array.",["850"],["851"],"React Hook useEffect has missing dependencies: 'checkUpdate', 'checkUsage', and 'showUsage'. Either include them or remove the dependency array.",["852"],["853"],"React Hook useEffect has missing dependencies: 'accessStore', 'clientConfig?.isApp', and 'navigate'. Either include them or remove the dependency array.",["854"],["855"],["856"],["857"],["858"],"React Hook useEffect has missing dependencies: 'handleConnect', 'isRecording', and 'toggleRecording'. Either include them or remove the dependency array.",["859"],"React Hook useEffect has a missing dependency: 'sdStore.draw'. Either include it or remove the dependency array.",["860"],"React Hook useCallback has a missing dependency: 'sessions'. Either include it or remove the dependency array.",["861"],{"desc":"862","fix":"863"},{"kind":"864","justification":"865"},{"desc":"866","fix":"867"},{"kind":"864","justification":"865"},{"desc":"868","fix":"869"},{"desc":"870","fix":"871"},{"desc":"872","fix":"873"},{"kind":"864","justification":"865"},{"desc":"874","fix":"875"},{"kind":"864","justification":"865"},{"desc":"876","fix":"877"},{"kind":"864","justification":"865"},{"desc":"878","fix":"879"},{"kind":"864","justification":"865"},{"desc":"880","fix":"881"},{"kind":"864","justification":"865"},{"kind":"864","justification":"865"},{"kind":"864","justification":"865"},{"desc":"882","fix":"883"},{"kind":"864","justification":"865"},{"desc":"884","fix":"885"},{"desc":"886","fix":"887"},{"kind":"864","justification":"865"},{"desc":"888","fix":"889"},{"kind":"864","justification":"865"},{"desc":"890","fix":"891"},{"kind":"864","justification":"865"},{"desc":"892","fix":"893"},{"kind":"864","justification":"865"},{"desc":"894","fix":"895"},{"kind":"864","justification":"865"},{"desc":"896","fix":"897"},{"kind":"864","justification":"865"},{"desc":"880","fix":"898"},{"kind":"864","justification":"865"},{"kind":"864","justification":"865"},{"desc":"899","fix":"900"},{"desc":"901","fix":"902"},{"desc":"903","fix":"904"},"Update the dependencies array to be: [searchParams, commands, setSearchParams]",{"range":"905","text":"906"},"directive","","Update the dependencies array to be: [navigate]",{"range":"907","text":"908"},"Update the dependencies array to be: [chatStore, currentModel, models, props, session]",{"range":"909","text":"910"},"Update the dependencies array to be: []",{"range":"911","text":"912"},"Update the dependencies array to be: [noPrompts, props, props.prompts.length, selectIndex]",{"range":"913","text":"914"},"Update the dependencies array to be: [measure]",{"range":"915","text":"916"},"Update the dependencies array to be: [chatStore, config.modelConfig, session]",{"range":"917","text":"918"},"Update the dependencies array to be: [session.id, userInput.length]",{"range":"919","text":"920"},"Update the dependencies array to be: [props]",{"range":"921","text":"922"},"Update the dependencies array to be: [api.llm, config]",{"range":"923","text":"924"},"Update the dependencies array to be: [renderArtifacts]",{"range":"925","text":"926"},"Update the dependencies array to be: [props.defaultSelectAll, selectAll]",{"range":"927","text":"928"},"Update the dependencies array to be: [startIndex, endIndex, props, messages]",{"range":"929","text":"930"},"Update the dependencies array to be: [masks]",{"range":"931","text":"932"},"Update the dependencies array to be: [accessStore]",{"range":"933","text":"934"},"Update the dependencies array to be: [checkUpdate, checkUsage, showUsage]",{"range":"935","text":"936"},"Update the dependencies array to be: [accessStore, clientConfig?.isApp, navigate]",{"range":"937","text":"938"},{"range":"939","text":"922"},"Update the dependencies array to be: [handleConnect, isRecording, toggleRecording]",{"range":"940","text":"941"},"Update the dependencies array to be: [sdStore.currentId, sdStore.draw]",{"range":"942","text":"943"},"Update the dependencies array to be: [sessions]",{"range":"944","text":"945"},[849,873],"[searchParams, commands, setSearchParams]",[1550,1552],"[navigate]",[17720,17762],"[chatStore, currentModel, models, props, session]",[30734,30768],"[]",[10487,10522],"[noPrompts, props, props.prompts.length, selectIndex]",[32205,32216],"[measure]",[35447,35456],"[chatStore, config.modelConfig, session]",[45456,45458],"[session.id, userInput.length]",[7839,7841],"[props]",[6418,6420],"[api.llm, config]",[3890,3892],"[renderArtifacts]",[3682,3684],"[props.defaultSelectAll, selectAll]",[4075,4097],"[startIndex, endIndex, props, messages]",[2320,2322],"[masks]",[19312,19314],"[accessStore]",[19759,19761],"[checkUpdate, checkUsage, showUsage]",[20299,20301],"[accessStore, clientConfig?.isApp, navigate]",[3274,3276],[9133,9135],"[handleConnect, isRecording, toggleRecording]",[3202,3221],"[sdStore.currentId, sdStore.draw]",[2102,2104],"[sessions]"]