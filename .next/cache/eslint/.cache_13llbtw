[{"/Volumes/D/github/ChatGPT-Next-Web/app/api/auth.ts":"1","/Volumes/D/github/ChatGPT-Next-Web/app/api/common.ts":"2","/Volumes/D/github/ChatGPT-Next-Web/app/api/config/route.ts":"3","/Volumes/D/github/ChatGPT-Next-Web/app/api/google/[...path]/route.ts":"4","/Volumes/D/github/ChatGPT-Next-Web/app/api/openai/[...path]/route.ts":"5","/Volumes/D/github/ChatGPT-Next-Web/app/azure.ts":"6","/Volumes/D/github/ChatGPT-Next-Web/app/client/api.ts":"7","/Volumes/D/github/ChatGPT-Next-Web/app/client/controller.ts":"8","/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/google.ts":"9","/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/openai.ts":"10","/Volumes/D/github/ChatGPT-Next-Web/app/command.ts":"11","/Volumes/D/github/ChatGPT-Next-Web/app/components/auth.tsx":"12","/Volumes/D/github/ChatGPT-Next-Web/app/components/button.tsx":"13","/Volumes/D/github/ChatGPT-Next-Web/app/components/chat-list.tsx":"14","/Volumes/D/github/ChatGPT-Next-Web/app/components/chat.tsx":"15","/Volumes/D/github/ChatGPT-Next-Web/app/components/emoji.tsx":"16","/Volumes/D/github/ChatGPT-Next-Web/app/components/error.tsx":"17","/Volumes/D/github/ChatGPT-Next-Web/app/components/exporter.tsx":"18","/Volumes/D/github/ChatGPT-Next-Web/app/components/home.tsx":"19","/Volumes/D/github/ChatGPT-Next-Web/app/components/input-range.tsx":"20","/Volumes/D/github/ChatGPT-Next-Web/app/components/markdown.tsx":"21","/Volumes/D/github/ChatGPT-Next-Web/app/components/mask.tsx":"22","/Volumes/D/github/ChatGPT-Next-Web/app/components/message-selector.tsx":"23","/Volumes/D/github/ChatGPT-Next-Web/app/components/model-config.tsx":"24","/Volumes/D/github/ChatGPT-Next-Web/app/components/new-chat.tsx":"25","/Volumes/D/github/ChatGPT-Next-Web/app/components/settings.tsx":"26","/Volumes/D/github/ChatGPT-Next-Web/app/components/sidebar.tsx":"27","/Volumes/D/github/ChatGPT-Next-Web/app/components/ui-lib.tsx":"28","/Volumes/D/github/ChatGPT-Next-Web/app/config/build.ts":"29","/Volumes/D/github/ChatGPT-Next-Web/app/config/client.ts":"30","/Volumes/D/github/ChatGPT-Next-Web/app/config/server.ts":"31","/Volumes/D/github/ChatGPT-Next-Web/app/constant.ts":"32","/Volumes/D/github/ChatGPT-Next-Web/app/global.d.ts":"33","/Volumes/D/github/ChatGPT-Next-Web/app/layout.tsx":"34","/Volumes/D/github/ChatGPT-Next-Web/app/locales/ar.ts":"35","/Volumes/D/github/ChatGPT-Next-Web/app/locales/bn.ts":"36","/Volumes/D/github/ChatGPT-Next-Web/app/locales/cn.ts":"37","/Volumes/D/github/ChatGPT-Next-Web/app/locales/cs.ts":"38","/Volumes/D/github/ChatGPT-Next-Web/app/locales/de.ts":"39","/Volumes/D/github/ChatGPT-Next-Web/app/locales/en.ts":"40","/Volumes/D/github/ChatGPT-Next-Web/app/locales/es.ts":"41","/Volumes/D/github/ChatGPT-Next-Web/app/locales/fr.ts":"42","/Volumes/D/github/ChatGPT-Next-Web/app/locales/id.ts":"43","/Volumes/D/github/ChatGPT-Next-Web/app/locales/index.ts":"44","/Volumes/D/github/ChatGPT-Next-Web/app/locales/it.ts":"45","/Volumes/D/github/ChatGPT-Next-Web/app/locales/jp.ts":"46","/Volumes/D/github/ChatGPT-Next-Web/app/locales/ko.ts":"47","/Volumes/D/github/ChatGPT-Next-Web/app/locales/no.ts":"48","/Volumes/D/github/ChatGPT-Next-Web/app/locales/pt.ts":"49","/Volumes/D/github/ChatGPT-Next-Web/app/locales/ru.ts":"50","/Volumes/D/github/ChatGPT-Next-Web/app/locales/sk.ts":"51","/Volumes/D/github/ChatGPT-Next-Web/app/locales/tr.ts":"52","/Volumes/D/github/ChatGPT-Next-Web/app/locales/tw.ts":"53","/Volumes/D/github/ChatGPT-Next-Web/app/locales/vi.ts":"54","/Volumes/D/github/ChatGPT-Next-Web/app/masks/cn.ts":"55","/Volumes/D/github/ChatGPT-Next-Web/app/masks/en.ts":"56","/Volumes/D/github/ChatGPT-Next-Web/app/masks/index.ts":"57","/Volumes/D/github/ChatGPT-Next-Web/app/masks/typing.ts":"58","/Volumes/D/github/ChatGPT-Next-Web/app/page.tsx":"59","/Volumes/D/github/ChatGPT-Next-Web/app/polyfill.ts":"60","/Volumes/D/github/ChatGPT-Next-Web/app/store/access.ts":"61","/Volumes/D/github/ChatGPT-Next-Web/app/store/chat.ts":"62","/Volumes/D/github/ChatGPT-Next-Web/app/store/config.ts":"63","/Volumes/D/github/ChatGPT-Next-Web/app/store/index.ts":"64","/Volumes/D/github/ChatGPT-Next-Web/app/store/mask.ts":"65","/Volumes/D/github/ChatGPT-Next-Web/app/store/prompt.ts":"66","/Volumes/D/github/ChatGPT-Next-Web/app/store/sync.ts":"67","/Volumes/D/github/ChatGPT-Next-Web/app/store/update.ts":"68","/Volumes/D/github/ChatGPT-Next-Web/app/typing.ts":"69","/Volumes/D/github/ChatGPT-Next-Web/app/utils/clone.ts":"70","/Volumes/D/github/ChatGPT-Next-Web/app/utils/cloud/index.ts":"71","/Volumes/D/github/ChatGPT-Next-Web/app/utils/cloud/upstash.ts":"72","/Volumes/D/github/ChatGPT-Next-Web/app/utils/cloud/webdav.ts":"73","/Volumes/D/github/ChatGPT-Next-Web/app/utils/cors.ts":"74","/Volumes/D/github/ChatGPT-Next-Web/app/utils/format.ts":"75","/Volumes/D/github/ChatGPT-Next-Web/app/utils/hooks.ts":"76","/Volumes/D/github/ChatGPT-Next-Web/app/utils/merge.ts":"77","/Volumes/D/github/ChatGPT-Next-Web/app/utils/model.ts":"78","/Volumes/D/github/ChatGPT-Next-Web/app/utils/store.ts":"79","/Volumes/D/github/ChatGPT-Next-Web/app/utils/sync.ts":"80","/Volumes/D/github/ChatGPT-Next-Web/app/utils/token.ts":"81","/Volumes/D/github/ChatGPT-Next-Web/app/utils.ts":"82","/Volumes/D/github/ChatGPT-Next-Web/app/api/upstash/[action]/[...key]/route.ts":"83","/Volumes/D/github/ChatGPT-Next-Web/app/api/webdav/[...path]/route.ts":"84","/Volumes/D/github/ChatGPT-Next-Web/app/api/anthropic/[...path]/route.ts":"85","/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/anthropic.ts":"86","/Volumes/D/github/ChatGPT-Next-Web/app/utils/object.ts":"87","/Volumes/D/github/ChatGPT-Next-Web/app/utils/checkers.ts":"88"},{"size":2861,"mtime":1712633899648,"results":"89","hashOfConfig":"90"},{"size":4637,"mtime":1712040068227,"results":"91","hashOfConfig":"90"},{"size":773,"mtime":1706753140074,"results":"92","hashOfConfig":"90"},{"size":2709,"mtime":1706753140075,"results":"93","hashOfConfig":"90"},{"size":2212,"mtime":1706753140075,"results":"94","hashOfConfig":"90"},{"size":262,"mtime":1706753140075,"results":"95","hashOfConfig":"90"},{"size":4853,"mtime":1712633899650,"results":"96","hashOfConfig":"90"},{"size":914,"mtime":1706753140076,"results":"97","hashOfConfig":"90"},{"size":8771,"mtime":1709631522569,"results":"98","hashOfConfig":"90"},{"size":10592,"mtime":1712633899651,"results":"99","hashOfConfig":"90"},{"size":1867,"mtime":1706753140077,"results":"100","hashOfConfig":"90"},{"size":2810,"mtime":1706753140078,"results":"101","hashOfConfig":"90"},{"size":1177,"mtime":1706753140079,"results":"102","hashOfConfig":"90"},{"size":4985,"mtime":1712040068230,"results":"103","hashOfConfig":"90"},{"size":47858,"mtime":1710917773627,"results":"104","hashOfConfig":"90"},{"size":1549,"mtime":1710840278311,"results":"105","hashOfConfig":"90"},{"size":1997,"mtime":1706753140080,"results":"106","hashOfConfig":"90"},{"size":19007,"mtime":1712822468287,"results":"107","hashOfConfig":"90"},{"size":5636,"mtime":1712822468288,"results":"108","hashOfConfig":"90"},{"size":694,"mtime":1706753140082,"results":"109","hashOfConfig":"90"},{"size":5079,"mtime":1712633899653,"results":"110","hashOfConfig":"90"},{"size":19908,"mtime":1712040068232,"results":"111","hashOfConfig":"90"},{"size":7046,"mtime":1712040068233,"results":"112","hashOfConfig":"90"},{"size":6679,"mtime":1709631522573,"results":"113","hashOfConfig":"90"},{"size":5309,"mtime":1706753140084,"results":"114","hashOfConfig":"90"},{"size":41512,"mtime":1712633899655,"results":"115","hashOfConfig":"90"},{"size":7552,"mtime":1706753140085,"results":"116","hashOfConfig":"90"},{"size":11534,"mtime":1710840278314,"results":"117","hashOfConfig":"90"},{"size":1148,"mtime":1706753140086,"results":"118","hashOfConfig":"90"},{"size":607,"mtime":1706753140087,"results":"119","hashOfConfig":"90"},{"size":3386,"mtime":1712822468289,"results":"120","hashOfConfig":"90"},{"size":8835,"mtime":1712822468289,"results":"121","hashOfConfig":"90"},{"size":837,"mtime":1709888999671,"results":"122","hashOfConfig":"90"},{"size":1659,"mtime":1712822468290,"results":"123","hashOfConfig":"90"},{"size":10527,"mtime":1706753140101,"results":"124","hashOfConfig":"90"},{"size":16857,"mtime":1706753140101,"results":"125","hashOfConfig":"90"},{"size":14339,"mtime":1712633899657,"results":"126","hashOfConfig":"90"},{"size":7249,"mtime":1706753140101,"results":"127","hashOfConfig":"90"},{"size":7437,"mtime":1706753140102,"results":"128","hashOfConfig":"90"},{"size":13814,"mtime":1712633899657,"results":"129","hashOfConfig":"90"},{"size":7218,"mtime":1706753140102,"results":"130","hashOfConfig":"90"},{"size":10040,"mtime":1706753140103,"results":"131","hashOfConfig":"90"},{"size":11374,"mtime":1706753140103,"results":"132","hashOfConfig":"90"},{"size":2491,"mtime":1706753140103,"results":"133","hashOfConfig":"90"},{"size":7185,"mtime":1706753140103,"results":"134","hashOfConfig":"90"},{"size":11234,"mtime":1706753140103,"results":"135","hashOfConfig":"90"},{"size":7567,"mtime":1706753140104,"results":"136","hashOfConfig":"90"},{"size":5015,"mtime":1706753140104,"results":"137","hashOfConfig":"90"},{"size":14464,"mtime":1712633899658,"results":"138","hashOfConfig":"90"},{"size":9910,"mtime":1706753140105,"results":"139","hashOfConfig":"90"},{"size":15172,"mtime":1712633899658,"results":"140","hashOfConfig":"90"},{"size":7257,"mtime":1706753140105,"results":"141","hashOfConfig":"90"},{"size":14953,"mtime":1712633899659,"results":"142","hashOfConfig":"90"},{"size":7994,"mtime":1706753140106,"results":"143","hashOfConfig":"90"},{"size":21344,"mtime":1706753140106,"results":"144","hashOfConfig":"90"},{"size":12849,"mtime":1706753140106,"results":"145","hashOfConfig":"90"},{"size":711,"mtime":1706753140107,"results":"146","hashOfConfig":"90"},{"size":207,"mtime":1706753140107,"results":"147","hashOfConfig":"90"},{"size":375,"mtime":1706753140107,"results":"148","hashOfConfig":"90"},{"size":623,"mtime":1706753140107,"results":"149","hashOfConfig":"90"},{"size":3039,"mtime":1712633899659,"results":"150","hashOfConfig":"90"},{"size":21406,"mtime":1712822468290,"results":"151","hashOfConfig":"90"},{"size":3907,"mtime":1709631522583,"results":"152","hashOfConfig":"90"},{"size":102,"mtime":1706753140108,"results":"153","hashOfConfig":"90"},{"size":3153,"mtime":1706753140109,"results":"154","hashOfConfig":"90"},{"size":4569,"mtime":1706753140109,"results":"155","hashOfConfig":"90"},{"size":3535,"mtime":1710840278314,"results":"156","hashOfConfig":"90"},{"size":4783,"mtime":1706753140110,"results":"157","hashOfConfig":"90"},{"size":255,"mtime":1712633899660,"results":"158","hashOfConfig":"90"},{"size":271,"mtime":1706753140112,"results":"159","hashOfConfig":"90"},{"size":787,"mtime":1706753140112,"results":"160","hashOfConfig":"90"},{"size":3220,"mtime":1710840278316,"results":"161","hashOfConfig":"90"},{"size":2392,"mtime":1712040068234,"results":"162","hashOfConfig":"90"},{"size":425,"mtime":1710840278317,"results":"163","hashOfConfig":"90"},{"size":843,"mtime":1706753140113,"results":"164","hashOfConfig":"90"},{"size":505,"mtime":1706753140113,"results":"165","hashOfConfig":"90"},{"size":419,"mtime":1706753140113,"results":"166","hashOfConfig":"90"},{"size":1645,"mtime":1712822468293,"results":"167","hashOfConfig":"90"},{"size":1443,"mtime":1706753140114,"results":"168","hashOfConfig":"90"},{"size":4781,"mtime":1706753140114,"results":"169","hashOfConfig":"90"},{"size":465,"mtime":1706753140114,"results":"170","hashOfConfig":"90"},{"size":7900,"mtime":1712822468291,"results":"171","hashOfConfig":"90"},{"size":1865,"mtime":1710840278309,"results":"172","hashOfConfig":"90"},{"size":3161,"mtime":1712822468284,"results":"173","hashOfConfig":"90"},{"size":4413,"mtime":1712633899647,"results":"174","hashOfConfig":"90"},{"size":11457,"mtime":1712633899650,"results":"175","hashOfConfig":"90"},{"size":397,"mtime":1712633899662,"results":"176","hashOfConfig":"90"},{"size":626,"mtime":1712822468292,"results":"177","hashOfConfig":"90"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1frfbb1",{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","suppressedMessages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","suppressedMessages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","suppressedMessages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","suppressedMessages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","suppressedMessages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","suppressedMessages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","suppressedMessages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"272","messages":"273","suppressedMessages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","suppressedMessages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","suppressedMessages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","suppressedMessages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","suppressedMessages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","suppressedMessages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","suppressedMessages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","suppressedMessages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"296","messages":"297","suppressedMessages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","suppressedMessages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","suppressedMessages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","suppressedMessages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","suppressedMessages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","suppressedMessages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","suppressedMessages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","suppressedMessages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"320","messages":"321","suppressedMessages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","suppressedMessages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"326","messages":"327","suppressedMessages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","suppressedMessages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"332","messages":"333","suppressedMessages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","suppressedMessages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"338","messages":"339","suppressedMessages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"341","messages":"342","suppressedMessages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"344","messages":"345","suppressedMessages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"347","messages":"348","suppressedMessages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"350","messages":"351","suppressedMessages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"353","messages":"354","suppressedMessages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"356","messages":"357","suppressedMessages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"359","messages":"360","suppressedMessages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"362","messages":"363","suppressedMessages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"365","messages":"366","suppressedMessages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"368","messages":"369","suppressedMessages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"371","messages":"372","suppressedMessages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"374","messages":"375","suppressedMessages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"377","messages":"378","suppressedMessages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"380","messages":"381","suppressedMessages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"383","messages":"384","suppressedMessages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"386","messages":"387","suppressedMessages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"389","messages":"390","suppressedMessages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"392","messages":"393","suppressedMessages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"395","messages":"396","suppressedMessages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"398","messages":"399","suppressedMessages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"401","messages":"402","suppressedMessages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"404","messages":"405","suppressedMessages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"407","messages":"408","suppressedMessages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"410","messages":"411","suppressedMessages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"413","messages":"414","suppressedMessages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"416","messages":"417","suppressedMessages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"419","messages":"420","suppressedMessages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"422","messages":"423","suppressedMessages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"425","messages":"426","suppressedMessages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"428","messages":"429","suppressedMessages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"431","messages":"432","suppressedMessages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"434","messages":"435","suppressedMessages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"437","messages":"438","suppressedMessages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"440","messages":"441","suppressedMessages":"442","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Volumes/D/github/ChatGPT-Next-Web/app/api/auth.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/common.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/config/route.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/google/[...path]/route.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/openai/[...path]/route.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/azure.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/client/api.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/client/controller.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/google.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/openai.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/command.ts",[],["443"],"/Volumes/D/github/ChatGPT-Next-Web/app/components/auth.tsx",[],["444"],"/Volumes/D/github/ChatGPT-Next-Web/app/components/button.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/chat-list.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/chat.tsx",["445","446","447"],["448","449","450","451"],"import { useDebouncedCallback } from \"use-debounce\";\nimport React, {\n  useState,\n  useRef,\n  useEffect,\n  useMemo,\n  useCallback,\n  Fragment,\n  RefObject,\n} from \"react\";\n\nimport SendWhiteIcon from \"../icons/send-white.svg\";\nimport BrainIcon from \"../icons/brain.svg\";\nimport RenameIcon from \"../icons/rename.svg\";\nimport ExportIcon from \"../icons/share.svg\";\nimport ReturnIcon from \"../icons/return.svg\";\nimport CopyIcon from \"../icons/copy.svg\";\nimport LoadingIcon from \"../icons/three-dots.svg\";\nimport LoadingButtonIcon from \"../icons/loading.svg\";\nimport PromptIcon from \"../icons/prompt.svg\";\nimport MaskIcon from \"../icons/mask.svg\";\nimport MaxIcon from \"../icons/max.svg\";\nimport MinIcon from \"../icons/min.svg\";\nimport ResetIcon from \"../icons/reload.svg\";\nimport BreakIcon from \"../icons/break.svg\";\nimport SettingsIcon from \"../icons/chat-settings.svg\";\nimport DeleteIcon from \"../icons/clear.svg\";\nimport PinIcon from \"../icons/pin.svg\";\nimport EditIcon from \"../icons/rename.svg\";\nimport ConfirmIcon from \"../icons/confirm.svg\";\nimport CancelIcon from \"../icons/cancel.svg\";\nimport ImageIcon from \"../icons/image.svg\";\n\nimport LightIcon from \"../icons/light.svg\";\nimport DarkIcon from \"../icons/dark.svg\";\nimport AutoIcon from \"../icons/auto.svg\";\nimport BottomIcon from \"../icons/bottom.svg\";\nimport StopIcon from \"../icons/pause.svg\";\nimport RobotIcon from \"../icons/robot.svg\";\n\nimport {\n  ChatMessage,\n  SubmitKey,\n  useChatStore,\n  BOT_HELLO,\n  createMessage,\n  useAccessStore,\n  Theme,\n  useAppConfig,\n  DEFAULT_TOPIC,\n  ModelType,\n} from \"../store\";\n\nimport {\n  copyToClipboard,\n  selectOrCopy,\n  autoGrowTextArea,\n  useMobileScreen,\n  getMessageTextContent,\n  getMessageImages,\n  isVisionModel,\n  compressImage,\n} from \"../utils\";\n\nimport dynamic from \"next/dynamic\";\n\nimport { ChatControllerPool } from \"../client/controller\";\nimport { Prompt, usePromptStore } from \"../store/prompt\";\nimport Locale from \"../locales\";\n\nimport { IconButton } from \"./button\";\nimport styles from \"./chat.module.scss\";\n\nimport {\n  List,\n  ListItem,\n  Modal,\n  Selector,\n  showConfirm,\n  showPrompt,\n  showToast,\n} from \"./ui-lib\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  CHAT_PAGE_SIZE,\n  LAST_INPUT_KEY,\n  Path,\n  REQUEST_TIMEOUT_MS,\n  UNFINISHED_INPUT,\n} from \"../constant\";\nimport { Avatar } from \"./emoji\";\nimport { ContextPrompts, MaskAvatar, MaskConfig } from \"./mask\";\nimport { useMaskStore } from \"../store/mask\";\nimport { ChatCommandPrefix, useChatCommand, useCommand } from \"../command\";\nimport { prettyObject } from \"../utils/format\";\nimport { ExportMessageModal } from \"./exporter\";\nimport { getClientConfig } from \"../config/client\";\nimport { useAllModels } from \"../utils/hooks\";\nimport { MultimodalContent } from \"../client/api\";\n\nconst Markdown = dynamic(async () => (await import(\"./markdown\")).Markdown, {\n  loading: () => <LoadingIcon />,\n});\n\nexport function SessionConfigModel(props: { onClose: () => void }) {\n  const chatStore = useChatStore();\n  const session = chatStore.currentSession();\n  const maskStore = useMaskStore();\n  const navigate = useNavigate();\n\n  return (\n    <div className=\"modal-mask\">\n      <Modal\n        title={Locale.Context.Edit}\n        onClose={() => props.onClose()}\n        actions={[\n          <IconButton\n            key=\"reset\"\n            icon={<ResetIcon />}\n            bordered\n            text={Locale.Chat.Config.Reset}\n            onClick={async () => {\n              if (await showConfirm(Locale.Memory.ResetConfirm)) {\n                chatStore.updateCurrentSession(\n                  (session) => (session.memoryPrompt = \"\"),\n                );\n              }\n            }}\n          />,\n          <IconButton\n            key=\"copy\"\n            icon={<CopyIcon />}\n            bordered\n            text={Locale.Chat.Config.SaveAs}\n            onClick={() => {\n              navigate(Path.Masks);\n              setTimeout(() => {\n                maskStore.create(session.mask);\n              }, 500);\n            }}\n          />,\n        ]}\n      >\n        <MaskConfig\n          mask={session.mask}\n          updateMask={(updater) => {\n            const mask = { ...session.mask };\n            updater(mask);\n            chatStore.updateCurrentSession((session) => (session.mask = mask));\n          }}\n          shouldSyncFromGlobal\n          extraListItems={\n            session.mask.modelConfig.sendMemory ? (\n              <ListItem\n                className=\"copyable\"\n                title={`${Locale.Memory.Title} (${session.lastSummarizeIndex} of ${session.messages.length})`}\n                subTitle={session.memoryPrompt || Locale.Memory.EmptyContent}\n              ></ListItem>\n            ) : (\n              <></>\n            )\n          }\n        ></MaskConfig>\n      </Modal>\n    </div>\n  );\n}\n\nfunction PromptToast(props: {\n  showToast?: boolean;\n  showModal?: boolean;\n  setShowModal: (_: boolean) => void;\n}) {\n  const chatStore = useChatStore();\n  const session = chatStore.currentSession();\n  const context = session.mask.context;\n\n  return (\n    <div className={styles[\"prompt-toast\"]} key=\"prompt-toast\">\n      {props.showToast && (\n        <div\n          className={styles[\"prompt-toast-inner\"] + \" clickable\"}\n          role=\"button\"\n          onClick={() => props.setShowModal(true)}\n        >\n          <BrainIcon />\n          <span className={styles[\"prompt-toast-content\"]}>\n            {Locale.Context.Toast(context.length)}\n          </span>\n        </div>\n      )}\n      {props.showModal && (\n        <SessionConfigModel onClose={() => props.setShowModal(false)} />\n      )}\n    </div>\n  );\n}\n\nfunction useSubmitHandler() {\n  const config = useAppConfig();\n  const submitKey = config.submitKey;\n  const isComposing = useRef(false);\n\n  useEffect(() => {\n    const onCompositionStart = () => {\n      isComposing.current = true;\n    };\n    const onCompositionEnd = () => {\n      isComposing.current = false;\n    };\n\n    window.addEventListener(\"compositionstart\", onCompositionStart);\n    window.addEventListener(\"compositionend\", onCompositionEnd);\n\n    return () => {\n      window.removeEventListener(\"compositionstart\", onCompositionStart);\n      window.removeEventListener(\"compositionend\", onCompositionEnd);\n    };\n  }, []);\n\n  const shouldSubmit = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    // Fix Chinese input method \"Enter\" on Safari\n    if (e.keyCode == 229) return false;\n    if (e.key !== \"Enter\") return false;\n    if (e.key === \"Enter\" && (e.nativeEvent.isComposing || isComposing.current))\n      return false;\n    return (\n      (config.submitKey === SubmitKey.AltEnter && e.altKey) ||\n      (config.submitKey === SubmitKey.CtrlEnter && e.ctrlKey) ||\n      (config.submitKey === SubmitKey.ShiftEnter && e.shiftKey) ||\n      (config.submitKey === SubmitKey.MetaEnter && e.metaKey) ||\n      (config.submitKey === SubmitKey.Enter &&\n        !e.altKey &&\n        !e.ctrlKey &&\n        !e.shiftKey &&\n        !e.metaKey)\n    );\n  };\n\n  return {\n    submitKey,\n    shouldSubmit,\n  };\n}\n\nexport type RenderPompt = Pick<Prompt, \"title\" | \"content\">;\n\nexport function PromptHints(props: {\n  prompts: RenderPompt[];\n  onPromptSelect: (prompt: RenderPompt) => void;\n}) {\n  const noPrompts = props.prompts.length === 0;\n  const [selectIndex, setSelectIndex] = useState(0);\n  const selectedRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    setSelectIndex(0);\n  }, [props.prompts.length]);\n\n  useEffect(() => {\n    const onKeyDown = (e: KeyboardEvent) => {\n      if (noPrompts || e.metaKey || e.altKey || e.ctrlKey) {\n        return;\n      }\n      // arrow up / down to select prompt\n      const changeIndex = (delta: number) => {\n        e.stopPropagation();\n        e.preventDefault();\n        const nextIndex = Math.max(\n          0,\n          Math.min(props.prompts.length - 1, selectIndex + delta),\n        );\n        setSelectIndex(nextIndex);\n        selectedRef.current?.scrollIntoView({\n          block: \"center\",\n        });\n      };\n\n      if (e.key === \"ArrowUp\") {\n        changeIndex(1);\n      } else if (e.key === \"ArrowDown\") {\n        changeIndex(-1);\n      } else if (e.key === \"Enter\") {\n        const selectedPrompt = props.prompts.at(selectIndex);\n        if (selectedPrompt) {\n          props.onPromptSelect(selectedPrompt);\n        }\n      }\n    };\n\n    window.addEventListener(\"keydown\", onKeyDown);\n\n    return () => window.removeEventListener(\"keydown\", onKeyDown);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.prompts.length, selectIndex]);\n\n  if (noPrompts) return null;\n  return (\n    <div className={styles[\"prompt-hints\"]}>\n      {props.prompts.map((prompt, i) => (\n        <div\n          ref={i === selectIndex ? selectedRef : null}\n          className={\n            styles[\"prompt-hint\"] +\n            ` ${i === selectIndex ? styles[\"prompt-hint-selected\"] : \"\"}`\n          }\n          key={prompt.title + i.toString()}\n          onClick={() => props.onPromptSelect(prompt)}\n          onMouseEnter={() => setSelectIndex(i)}\n        >\n          <div className={styles[\"hint-title\"]}>{prompt.title}</div>\n          <div className={styles[\"hint-content\"]}>{prompt.content}</div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction ClearContextDivider() {\n  const chatStore = useChatStore();\n\n  return (\n    <div\n      className={styles[\"clear-context\"]}\n      onClick={() =>\n        chatStore.updateCurrentSession(\n          (session) => (session.clearContextIndex = undefined),\n        )\n      }\n    >\n      <div className={styles[\"clear-context-tips\"]}>{Locale.Context.Clear}</div>\n      <div className={styles[\"clear-context-revert-btn\"]}>\n        {Locale.Context.Revert}\n      </div>\n    </div>\n  );\n}\n\nfunction ChatAction(props: {\n  text: string;\n  icon: JSX.Element;\n  onClick: () => void;\n}) {\n  const iconRef = useRef<HTMLDivElement>(null);\n  const textRef = useRef<HTMLDivElement>(null);\n  const [width, setWidth] = useState({\n    full: 16,\n    icon: 16,\n  });\n\n  function updateWidth() {\n    if (!iconRef.current || !textRef.current) return;\n    const getWidth = (dom: HTMLDivElement) => dom.getBoundingClientRect().width;\n    const textWidth = getWidth(textRef.current);\n    const iconWidth = getWidth(iconRef.current);\n    setWidth({\n      full: textWidth + iconWidth,\n      icon: iconWidth,\n    });\n  }\n\n  return (\n    <div\n      className={`${styles[\"chat-input-action\"]} clickable`}\n      onClick={() => {\n        props.onClick();\n        setTimeout(updateWidth, 1);\n      }}\n      onMouseEnter={updateWidth}\n      onTouchStart={updateWidth}\n      style={\n        {\n          \"--icon-width\": `${width.icon}px`,\n          \"--full-width\": `${width.full}px`,\n        } as React.CSSProperties\n      }\n    >\n      <div ref={iconRef} className={styles[\"icon\"]}>\n        {props.icon}\n      </div>\n      <div className={styles[\"text\"]} ref={textRef}>\n        {props.text}\n      </div>\n    </div>\n  );\n}\n\nfunction useScrollToBottom(\n  scrollRef: RefObject<HTMLDivElement>,\n  detach: boolean = false,\n) {\n  // for auto-scroll\n\n  const [autoScroll, setAutoScroll] = useState(true);\n  function scrollDomToBottom() {\n    const dom = scrollRef.current;\n    if (dom) {\n      requestAnimationFrame(() => {\n        setAutoScroll(true);\n        dom.scrollTo(0, dom.scrollHeight);\n      });\n    }\n  }\n\n  // auto scroll\n  useEffect(() => {\n    if (autoScroll && !detach) {\n      scrollDomToBottom();\n    }\n  });\n\n  return {\n    scrollRef,\n    autoScroll,\n    setAutoScroll,\n    scrollDomToBottom,\n  };\n}\n\nexport function ChatActions(props: {\n  uploadImage: () => void;\n  setAttachImages: (images: string[]) => void;\n  setUploading: (uploading: boolean) => void;\n  showPromptModal: () => void;\n  scrollToBottom: () => void;\n  showPromptHints: () => void;\n  hitBottom: boolean;\n  uploading: boolean;\n}) {\n  const config = useAppConfig();\n  const navigate = useNavigate();\n  const chatStore = useChatStore();\n\n  // switch themes\n  const theme = config.theme;\n  function nextTheme() {\n    const themes = [Theme.Auto, Theme.Light, Theme.Dark];\n    const themeIndex = themes.indexOf(theme);\n    const nextIndex = (themeIndex + 1) % themes.length;\n    const nextTheme = themes[nextIndex];\n    config.update((config) => (config.theme = nextTheme));\n  }\n\n  // stop all responses\n  const couldStop = ChatControllerPool.hasPending();\n  const stopAll = () => ChatControllerPool.stopAll();\n\n  // switch model\n  const currentModel = chatStore.currentSession().mask.modelConfig.model;\n  const allModels = useAllModels();\n  const models = useMemo(\n    () => allModels.filter((m) => m.available),\n    [allModels],\n  );\n  const [showModelSelector, setShowModelSelector] = useState(false);\n  const [showUploadImage, setShowUploadImage] = useState(false);\n\n  useEffect(() => {\n    const show = isVisionModel(currentModel);\n    setShowUploadImage(show);\n    if (!show) {\n      props.setAttachImages([]);\n      props.setUploading(false);\n    }\n\n    // if current model is not available\n    // switch to first available model\n    const isUnavaliableModel = !models.some((m) => m.name === currentModel);\n    if (isUnavaliableModel && models.length > 0) {\n      const nextModel = models[0].name as ModelType;\n      chatStore.updateCurrentSession(\n        (session) => (session.mask.modelConfig.model = nextModel),\n      );\n      showToast(nextModel);\n    }\n  }, [chatStore, currentModel, models]);\n\n  return (\n    <div className={styles[\"chat-input-actions\"]}>\n      {couldStop && (\n        <ChatAction\n          onClick={stopAll}\n          text={Locale.Chat.InputActions.Stop}\n          icon={<StopIcon />}\n        />\n      )}\n      {!props.hitBottom && (\n        <ChatAction\n          onClick={props.scrollToBottom}\n          text={Locale.Chat.InputActions.ToBottom}\n          icon={<BottomIcon />}\n        />\n      )}\n      {props.hitBottom && (\n        <ChatAction\n          onClick={props.showPromptModal}\n          text={Locale.Chat.InputActions.Settings}\n          icon={<SettingsIcon />}\n        />\n      )}\n\n      {showUploadImage && (\n        <ChatAction\n          onClick={props.uploadImage}\n          text={Locale.Chat.InputActions.UploadImage}\n          icon={props.uploading ? <LoadingButtonIcon /> : <ImageIcon />}\n        />\n      )}\n      <ChatAction\n        onClick={nextTheme}\n        text={Locale.Chat.InputActions.Theme[theme]}\n        icon={\n          <>\n            {theme === Theme.Auto ? (\n              <AutoIcon />\n            ) : theme === Theme.Light ? (\n              <LightIcon />\n            ) : theme === Theme.Dark ? (\n              <DarkIcon />\n            ) : null}\n          </>\n        }\n      />\n\n      <ChatAction\n        onClick={props.showPromptHints}\n        text={Locale.Chat.InputActions.Prompt}\n        icon={<PromptIcon />}\n      />\n\n      <ChatAction\n        onClick={() => {\n          navigate(Path.Masks);\n        }}\n        text={Locale.Chat.InputActions.Masks}\n        icon={<MaskIcon />}\n      />\n\n      <ChatAction\n        text={Locale.Chat.InputActions.Clear}\n        icon={<BreakIcon />}\n        onClick={() => {\n          chatStore.updateCurrentSession((session) => {\n            if (session.clearContextIndex === session.messages.length) {\n              session.clearContextIndex = undefined;\n            } else {\n              session.clearContextIndex = session.messages.length;\n              session.memoryPrompt = \"\"; // will clear memory\n            }\n          });\n        }}\n      />\n\n      <ChatAction\n        onClick={() => setShowModelSelector(true)}\n        text={currentModel}\n        icon={<RobotIcon />}\n      />\n\n      {showModelSelector && (\n        <Selector\n          defaultSelectedValue={currentModel}\n          items={models.map((m) => ({\n            title: m.displayName,\n            value: m.name,\n          }))}\n          onClose={() => setShowModelSelector(false)}\n          onSelection={(s) => {\n            if (s.length === 0) return;\n            chatStore.updateCurrentSession((session) => {\n              session.mask.modelConfig.model = s[0] as ModelType;\n              session.mask.syncGlobalConfig = false;\n            });\n            showToast(s[0]);\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport function EditMessageModal(props: { onClose: () => void }) {\n  const chatStore = useChatStore();\n  const session = chatStore.currentSession();\n  const [messages, setMessages] = useState(session.messages.slice());\n\n  return (\n    <div className=\"modal-mask\">\n      <Modal\n        title={Locale.Chat.EditMessage.Title}\n        onClose={props.onClose}\n        actions={[\n          <IconButton\n            text={Locale.UI.Cancel}\n            icon={<CancelIcon />}\n            key=\"cancel\"\n            onClick={() => {\n              props.onClose();\n            }}\n          />,\n          <IconButton\n            type=\"primary\"\n            text={Locale.UI.Confirm}\n            icon={<ConfirmIcon />}\n            key=\"ok\"\n            onClick={() => {\n              chatStore.updateCurrentSession(\n                (session) => (session.messages = messages),\n              );\n              props.onClose();\n            }}\n          />,\n        ]}\n      >\n        <List>\n          <ListItem\n            title={Locale.Chat.EditMessage.Topic.Title}\n            subTitle={Locale.Chat.EditMessage.Topic.SubTitle}\n          >\n            <input\n              type=\"text\"\n              value={session.topic}\n              onInput={(e) =>\n                chatStore.updateCurrentSession(\n                  (session) => (session.topic = e.currentTarget.value),\n                )\n              }\n            ></input>\n          </ListItem>\n        </List>\n        <ContextPrompts\n          context={messages}\n          updateContext={(updater) => {\n            const newMessages = messages.slice();\n            updater(newMessages);\n            setMessages(newMessages);\n          }}\n        />\n      </Modal>\n    </div>\n  );\n}\n\nexport function DeleteImageButton(props: { deleteImage: () => void }) {\n  return (\n    <div className={styles[\"delete-image\"]} onClick={props.deleteImage}>\n      <DeleteIcon />\n    </div>\n  );\n}\n\nfunction _Chat() {\n  type RenderMessage = ChatMessage & { preview?: boolean };\n\n  const chatStore = useChatStore();\n  const session = chatStore.currentSession();\n  const config = useAppConfig();\n  const fontSize = config.fontSize;\n\n  const [showExport, setShowExport] = useState(false);\n\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n  const [userInput, setUserInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { submitKey, shouldSubmit } = useSubmitHandler();\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const isScrolledToBottom = scrollRef?.current\n    ? Math.abs(\n        scrollRef.current.scrollHeight -\n          (scrollRef.current.scrollTop + scrollRef.current.clientHeight),\n      ) <= 1\n    : false;\n  const { setAutoScroll, scrollDomToBottom } = useScrollToBottom(\n    scrollRef,\n    isScrolledToBottom,\n  );\n  const [hitBottom, setHitBottom] = useState(true);\n  const isMobileScreen = useMobileScreen();\n  const navigate = useNavigate();\n  const [attachImages, setAttachImages] = useState<string[]>([]);\n  const [uploading, setUploading] = useState(false);\n\n  // prompt hints\n  const promptStore = usePromptStore();\n  const [promptHints, setPromptHints] = useState<RenderPompt[]>([]);\n  const onSearch = useDebouncedCallback(\n    (text: string) => {\n      const matchedPrompts = promptStore.search(text);\n      setPromptHints(matchedPrompts);\n    },\n    100,\n    { leading: true, trailing: true },\n  );\n\n  // auto grow input\n  const [inputRows, setInputRows] = useState(2);\n  const measure = useDebouncedCallback(\n    () => {\n      const rows = inputRef.current ? autoGrowTextArea(inputRef.current) : 1;\n      const inputRows = Math.min(\n        20,\n        Math.max(2 + Number(!isMobileScreen), rows),\n      );\n      setInputRows(inputRows);\n    },\n    100,\n    {\n      leading: true,\n      trailing: true,\n    },\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(measure, [userInput]);\n\n  // chat commands shortcuts\n  const chatCommands = useChatCommand({\n    new: () => chatStore.newSession(),\n    newm: () => navigate(Path.NewChat),\n    prev: () => chatStore.nextSession(-1),\n    next: () => chatStore.nextSession(1),\n    clear: () =>\n      chatStore.updateCurrentSession(\n        (session) => (session.clearContextIndex = session.messages.length),\n      ),\n    del: () => chatStore.deleteSession(chatStore.currentSessionIndex),\n  });\n\n  // only search prompts when user input is short\n  const SEARCH_TEXT_LIMIT = 30;\n  const onInput = (text: string) => {\n    setUserInput(text);\n    const n = text.trim().length;\n\n    // clear search results\n    if (n === 0) {\n      setPromptHints([]);\n    } else if (text.startsWith(ChatCommandPrefix)) {\n      setPromptHints(chatCommands.search(text));\n    } else if (!config.disablePromptHint && n < SEARCH_TEXT_LIMIT) {\n      // check if need to trigger auto completion\n      if (text.startsWith(\"/\")) {\n        let searchText = text.slice(1);\n        onSearch(searchText);\n      }\n    }\n  };\n\n  const doSubmit = (userInput: string) => {\n    if (userInput.trim() === \"\") return;\n    const matchCommand = chatCommands.match(userInput);\n    if (matchCommand.matched) {\n      setUserInput(\"\");\n      setPromptHints([]);\n      matchCommand.invoke();\n      return;\n    }\n    setIsLoading(true);\n    chatStore\n      .onUserInput(userInput, attachImages)\n      .then(() => setIsLoading(false));\n    setAttachImages([]);\n    localStorage.setItem(LAST_INPUT_KEY, userInput);\n    setUserInput(\"\");\n    setPromptHints([]);\n    if (!isMobileScreen) inputRef.current?.focus();\n    setAutoScroll(true);\n  };\n\n  const onPromptSelect = (prompt: RenderPompt) => {\n    setTimeout(() => {\n      setPromptHints([]);\n\n      const matchedChatCommand = chatCommands.match(prompt.content);\n      if (matchedChatCommand.matched) {\n        // if user is selecting a chat command, just trigger it\n        matchedChatCommand.invoke();\n        setUserInput(\"\");\n      } else {\n        // or fill the prompt\n        setUserInput(prompt.content);\n      }\n      inputRef.current?.focus();\n    }, 30);\n  };\n\n  // stop response\n  const onUserStop = (messageId: string) => {\n    ChatControllerPool.stop(session.id, messageId);\n  };\n\n  useEffect(() => {\n    chatStore.updateCurrentSession((session) => {\n      const stopTiming = Date.now() - REQUEST_TIMEOUT_MS;\n      session.messages.forEach((m) => {\n        // check if should stop all stale messages\n        if (m.isError || new Date(m.date).getTime() < stopTiming) {\n          if (m.streaming) {\n            m.streaming = false;\n          }\n\n          if (m.content.length === 0) {\n            m.isError = true;\n            m.content = prettyObject({\n              error: true,\n              message: \"empty response\",\n            });\n          }\n        }\n      });\n\n      // auto sync mask config from global config\n      if (session.mask.syncGlobalConfig) {\n        console.log(\"[Mask] syncing from global, name = \", session.mask.name);\n        session.mask.modelConfig = { ...config.modelConfig };\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // check if should send message\n  const onInputKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    // if ArrowUp and no userInput, fill with last input\n    if (\n      e.key === \"ArrowUp\" &&\n      userInput.length <= 0 &&\n      !(e.metaKey || e.altKey || e.ctrlKey)\n    ) {\n      setUserInput(localStorage.getItem(LAST_INPUT_KEY) ?? \"\");\n      e.preventDefault();\n      return;\n    }\n    if (shouldSubmit(e) && promptHints.length === 0) {\n      doSubmit(userInput);\n      e.preventDefault();\n    }\n  };\n  const onRightClick = (e: any, message: ChatMessage) => {\n    // copy to clipboard\n    if (selectOrCopy(e.currentTarget, getMessageTextContent(message))) {\n      if (userInput.length === 0) {\n        setUserInput(getMessageTextContent(message));\n      }\n\n      e.preventDefault();\n    }\n  };\n\n  const deleteMessage = (msgId?: string) => {\n    chatStore.updateCurrentSession(\n      (session) =>\n        (session.messages = session.messages.filter((m) => m.id !== msgId)),\n    );\n  };\n\n  const onDelete = (msgId: string) => {\n    deleteMessage(msgId);\n  };\n\n  const onResend = (message: ChatMessage) => {\n    // when it is resending a message\n    // 1. for a user's message, find the next bot response\n    // 2. for a bot's message, find the last user's input\n    // 3. delete original user input and bot's message\n    // 4. resend the user's input\n\n    const resendingIndex = session.messages.findIndex(\n      (m) => m.id === message.id,\n    );\n\n    if (resendingIndex < 0 || resendingIndex >= session.messages.length) {\n      console.error(\"[Chat] failed to find resending message\", message);\n      return;\n    }\n\n    let userMessage: ChatMessage | undefined;\n    let botMessage: ChatMessage | undefined;\n\n    if (message.role === \"assistant\") {\n      // if it is resending a bot's message, find the user input for it\n      botMessage = message;\n      for (let i = resendingIndex; i >= 0; i -= 1) {\n        if (session.messages[i].role === \"user\") {\n          userMessage = session.messages[i];\n          break;\n        }\n      }\n    } else if (message.role === \"user\") {\n      // if it is resending a user's input, find the bot's response\n      userMessage = message;\n      for (let i = resendingIndex; i < session.messages.length; i += 1) {\n        if (session.messages[i].role === \"assistant\") {\n          botMessage = session.messages[i];\n          break;\n        }\n      }\n    }\n\n    if (userMessage === undefined) {\n      console.error(\"[Chat] failed to resend\", message);\n      return;\n    }\n\n    // delete the original messages\n    deleteMessage(userMessage.id);\n    deleteMessage(botMessage?.id);\n\n    // resend the message\n    setIsLoading(true);\n    const textContent = getMessageTextContent(userMessage);\n    const images = getMessageImages(userMessage);\n    chatStore.onUserInput(textContent, images).then(() => setIsLoading(false));\n    inputRef.current?.focus();\n  };\n\n  const onPinMessage = (message: ChatMessage) => {\n    chatStore.updateCurrentSession((session) =>\n      session.mask.context.push(message),\n    );\n\n    showToast(Locale.Chat.Actions.PinToastContent, {\n      text: Locale.Chat.Actions.PinToastAction,\n      onClick: () => {\n        setShowPromptModal(true);\n      },\n    });\n  };\n\n  const context: RenderMessage[] = useMemo(() => {\n    return session.mask.hideContext ? [] : session.mask.context.slice();\n  }, [session.mask.context, session.mask.hideContext]);\n  const accessStore = useAccessStore();\n\n  if (\n    context.length === 0 &&\n    session.messages.at(0)?.content !== BOT_HELLO.content\n  ) {\n    const copiedHello = Object.assign({}, BOT_HELLO);\n    if (!accessStore.isAuthorized()) {\n      copiedHello.content = Locale.Error.Unauthorized;\n    }\n    context.push(copiedHello);\n  }\n\n  // preview messages\n  const renderMessages = useMemo(() => {\n    return context\n      .concat(session.messages as RenderMessage[])\n      .concat(\n        isLoading\n          ? [\n              {\n                ...createMessage({\n                  role: \"assistant\",\n                  content: \"……\",\n                }),\n                preview: true,\n              },\n            ]\n          : [],\n      )\n      .concat(\n        userInput.length > 0 && config.sendPreviewBubble\n          ? [\n              {\n                ...createMessage({\n                  role: \"user\",\n                  content: userInput,\n                }),\n                preview: true,\n              },\n            ]\n          : [],\n      );\n  }, [\n    config.sendPreviewBubble,\n    context,\n    isLoading,\n    session.messages,\n    userInput,\n  ]);\n\n  const [msgRenderIndex, _setMsgRenderIndex] = useState(\n    Math.max(0, renderMessages.length - CHAT_PAGE_SIZE),\n  );\n  function setMsgRenderIndex(newIndex: number) {\n    newIndex = Math.min(renderMessages.length - CHAT_PAGE_SIZE, newIndex);\n    newIndex = Math.max(0, newIndex);\n    _setMsgRenderIndex(newIndex);\n  }\n\n  const messages = useMemo(() => {\n    const endRenderIndex = Math.min(\n      msgRenderIndex + 3 * CHAT_PAGE_SIZE,\n      renderMessages.length,\n    );\n    return renderMessages.slice(msgRenderIndex, endRenderIndex);\n  }, [msgRenderIndex, renderMessages]);\n\n  const onChatBodyScroll = (e: HTMLElement) => {\n    const bottomHeight = e.scrollTop + e.clientHeight;\n    const edgeThreshold = e.clientHeight;\n\n    const isTouchTopEdge = e.scrollTop <= edgeThreshold;\n    const isTouchBottomEdge = bottomHeight >= e.scrollHeight - edgeThreshold;\n    const isHitBottom =\n      bottomHeight >= e.scrollHeight - (isMobileScreen ? 4 : 10);\n\n    const prevPageMsgIndex = msgRenderIndex - CHAT_PAGE_SIZE;\n    const nextPageMsgIndex = msgRenderIndex + CHAT_PAGE_SIZE;\n\n    if (isTouchTopEdge && !isTouchBottomEdge) {\n      setMsgRenderIndex(prevPageMsgIndex);\n    } else if (isTouchBottomEdge) {\n      setMsgRenderIndex(nextPageMsgIndex);\n    }\n\n    setHitBottom(isHitBottom);\n    setAutoScroll(isHitBottom);\n  };\n  function scrollToBottom() {\n    setMsgRenderIndex(renderMessages.length - CHAT_PAGE_SIZE);\n    scrollDomToBottom();\n  }\n\n  // clear context index = context length + index in messages\n  const clearContextIndex =\n    (session.clearContextIndex ?? -1) >= 0\n      ? session.clearContextIndex! + context.length - msgRenderIndex\n      : -1;\n\n  const [showPromptModal, setShowPromptModal] = useState(false);\n\n  const clientConfig = useMemo(() => getClientConfig(), []);\n\n  const autoFocus = !isMobileScreen; // wont auto focus on mobile screen\n  const showMaxIcon = !isMobileScreen && !clientConfig?.isApp;\n\n  useCommand({\n    fill: setUserInput,\n    submit: (text) => {\n      doSubmit(text);\n    },\n    code: (text) => {\n      if (accessStore.disableFastLink) return;\n      console.log(\"[Command] got code from url: \", text);\n      showConfirm(Locale.URLCommand.Code + `code = ${text}`).then((res) => {\n        if (res) {\n          accessStore.update((access) => (access.accessCode = text));\n        }\n      });\n    },\n    settings: (text) => {\n      if (accessStore.disableFastLink) return;\n\n      try {\n        const payload = JSON.parse(text) as {\n          key?: string;\n          url?: string;\n        };\n\n        console.log(\"[Command] got settings from url: \", payload);\n\n        if (payload.key || payload.url) {\n          showConfirm(\n            Locale.URLCommand.Settings +\n              `\\n${JSON.stringify(payload, null, 4)}`,\n          ).then((res) => {\n            if (!res) return;\n            if (payload.key) {\n              accessStore.update(\n                (access) => (access.openaiApiKey = payload.key!),\n              );\n            }\n            if (payload.url) {\n              accessStore.update((access) => (access.openaiUrl = payload.url!));\n            }\n          });\n        }\n      } catch {\n        console.error(\"[Command] failed to get settings from url: \", text);\n      }\n    },\n  });\n\n  // edit / insert message modal\n  const [isEditingMessage, setIsEditingMessage] = useState(false);\n\n  // remember unfinished input\n  useEffect(() => {\n    // try to load from local storage\n    const key = UNFINISHED_INPUT(session.id);\n    const mayBeUnfinishedInput = localStorage.getItem(key);\n    if (mayBeUnfinishedInput && userInput.length === 0) {\n      setUserInput(mayBeUnfinishedInput);\n      localStorage.removeItem(key);\n    }\n\n    const dom = inputRef.current;\n    return () => {\n      localStorage.setItem(key, dom?.value ?? \"\");\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  \n  const handlePaste = useCallback(\n    async (event: React.ClipboardEvent<HTMLTextAreaElement>) => {\n      const currentModel = chatStore.currentSession().mask.modelConfig.model;\n      if(!isVisionModel(currentModel)){return;}\n      const items = (event.clipboardData || window.clipboardData).items;\n      for (const item of items) {\n        if (item.kind === \"file\" && item.type.startsWith(\"image/\")) {\n          event.preventDefault();\n          const file = item.getAsFile();\n          if (file) {\n            const images: string[] = [];\n            images.push(...attachImages);\n            images.push(\n              ...(await new Promise<string[]>((res, rej) => {\n                setUploading(true);\n                const imagesData: string[] = [];\n                compressImage(file, 256 * 1024)\n                  .then((dataUrl) => {\n                    imagesData.push(dataUrl);\n                    setUploading(false);\n                    res(imagesData);\n                  })\n                  .catch((e) => {\n                    setUploading(false);\n                    rej(e);\n                  });\n              })),\n            );\n            const imagesLength = images.length;\n\n            if (imagesLength > 3) {\n              images.splice(3, imagesLength - 3);\n            }\n            setAttachImages(images);\n          }\n        }\n      }\n    },\n    [attachImages, chatStore],\n  );\n\n  async function uploadImage() {\n    const images: string[] = [];\n    images.push(...attachImages);\n\n    images.push(\n      ...(await new Promise<string[]>((res, rej) => {\n        const fileInput = document.createElement(\"input\");\n        fileInput.type = \"file\";\n        fileInput.accept =\n          \"image/png, image/jpeg, image/webp, image/heic, image/heif\";\n        fileInput.multiple = true;\n        fileInput.onchange = (event: any) => {\n          setUploading(true);\n          const files = event.target.files;\n          const imagesData: string[] = [];\n          for (let i = 0; i < files.length; i++) {\n            const file = event.target.files[i];\n            compressImage(file, 256 * 1024)\n              .then((dataUrl) => {\n                imagesData.push(dataUrl);\n                if (\n                  imagesData.length === 3 ||\n                  imagesData.length === files.length\n                ) {\n                  setUploading(false);\n                  res(imagesData);\n                }\n              })\n              .catch((e) => {\n                setUploading(false);\n                rej(e);\n              });\n          }\n        };\n        fileInput.click();\n      })),\n    );\n\n    const imagesLength = images.length;\n    if (imagesLength > 3) {\n      images.splice(3, imagesLength - 3);\n    }\n    setAttachImages(images);\n  }\n\n  return (\n    <div className={styles.chat} key={session.id}>\n      <div className=\"window-header\" data-tauri-drag-region>\n        {isMobileScreen && (\n          <div className=\"window-actions\">\n            <div className={\"window-action-button\"}>\n              <IconButton\n                icon={<ReturnIcon />}\n                bordered\n                title={Locale.Chat.Actions.ChatList}\n                onClick={() => navigate(Path.Home)}\n              />\n            </div>\n          </div>\n        )}\n\n        <div className={`window-header-title ${styles[\"chat-body-title\"]}`}>\n          <div\n            className={`window-header-main-title ${styles[\"chat-body-main-title\"]}`}\n            onClickCapture={() => setIsEditingMessage(true)}\n          >\n            {!session.topic ? DEFAULT_TOPIC : session.topic}\n          </div>\n          <div className=\"window-header-sub-title\">\n            {Locale.Chat.SubTitle(session.messages.length)}\n          </div>\n        </div>\n        <div className=\"window-actions\">\n          {!isMobileScreen && (\n            <div className=\"window-action-button\">\n              <IconButton\n                icon={<RenameIcon />}\n                bordered\n                onClick={() => setIsEditingMessage(true)}\n              />\n            </div>\n          )}\n          <div className=\"window-action-button\">\n            <IconButton\n              icon={<ExportIcon />}\n              bordered\n              title={Locale.Chat.Actions.Export}\n              onClick={() => {\n                setShowExport(true);\n              }}\n            />\n          </div>\n          {showMaxIcon && (\n            <div className=\"window-action-button\">\n              <IconButton\n                icon={config.tightBorder ? <MinIcon /> : <MaxIcon />}\n                bordered\n                onClick={() => {\n                  config.update(\n                    (config) => (config.tightBorder = !config.tightBorder),\n                  );\n                }}\n              />\n            </div>\n          )}\n        </div>\n\n        <PromptToast\n          showToast={!hitBottom}\n          showModal={showPromptModal}\n          setShowModal={setShowPromptModal}\n        />\n      </div>\n\n      <div\n        className={styles[\"chat-body\"]}\n        ref={scrollRef}\n        onScroll={(e) => onChatBodyScroll(e.currentTarget)}\n        onMouseDown={() => inputRef.current?.blur()}\n        onTouchStart={() => {\n          inputRef.current?.blur();\n          setAutoScroll(false);\n        }}\n      >\n        {messages.map((message, i) => {\n          const isUser = message.role === \"user\";\n          const isContext = i < context.length;\n          const showActions =\n            i > 0 &&\n            !(message.preview || message.content.length === 0) &&\n            !isContext;\n          const showTyping = message.preview || message.streaming;\n\n          const shouldShowClearContextDivider = i === clearContextIndex - 1;\n\n          return (\n            <Fragment key={message.id}>\n              <div\n                className={\n                  isUser ? styles[\"chat-message-user\"] : styles[\"chat-message\"]\n                }\n              >\n                <div className={styles[\"chat-message-container\"]}>\n                  <div className={styles[\"chat-message-header\"]}>\n                    <div className={styles[\"chat-message-avatar\"]}>\n                      <div className={styles[\"chat-message-edit\"]}>\n                        <IconButton\n                          icon={<EditIcon />}\n                          onClick={async () => {\n                            const newMessage = await showPrompt(\n                              Locale.Chat.Actions.Edit,\n                              getMessageTextContent(message),\n                              10,\n                            );\n                            let newContent: string | MultimodalContent[] =\n                              newMessage;\n                            const images = getMessageImages(message);\n                            if (images.length > 0) {\n                              newContent = [{ type: \"text\", text: newMessage }];\n                              for (let i = 0; i < images.length; i++) {\n                                newContent.push({\n                                  type: \"image_url\",\n                                  image_url: {\n                                    url: images[i],\n                                  },\n                                });\n                              }\n                            }\n                            chatStore.updateCurrentSession((session) => {\n                              const m = session.mask.context\n                                .concat(session.messages)\n                                .find((m) => m.id === message.id);\n                              if (m) {\n                                m.content = newContent;\n                              }\n                            });\n                          }}\n                        ></IconButton>\n                      </div>\n                      {isUser ? (\n                        <Avatar avatar={config.avatar} />\n                      ) : (\n                        <>\n                          {[\"system\"].includes(message.role) ? (\n                            <Avatar avatar=\"2699-fe0f\" />\n                          ) : (\n                            <MaskAvatar\n                              avatar={session.mask.avatar}\n                              model={\n                                message.model || session.mask.modelConfig.model\n                              }\n                            />\n                          )}\n                        </>\n                      )}\n                    </div>\n\n                    {showActions && (\n                      <div className={styles[\"chat-message-actions\"]}>\n                        <div className={styles[\"chat-input-actions\"]}>\n                          {message.streaming ? (\n                            <ChatAction\n                              text={Locale.Chat.Actions.Stop}\n                              icon={<StopIcon />}\n                              onClick={() => onUserStop(message.id ?? i)}\n                            />\n                          ) : (\n                            <>\n                              <ChatAction\n                                text={Locale.Chat.Actions.Retry}\n                                icon={<ResetIcon />}\n                                onClick={() => onResend(message)}\n                              />\n\n                              <ChatAction\n                                text={Locale.Chat.Actions.Delete}\n                                icon={<DeleteIcon />}\n                                onClick={() => onDelete(message.id ?? i)}\n                              />\n\n                              <ChatAction\n                                text={Locale.Chat.Actions.Pin}\n                                icon={<PinIcon />}\n                                onClick={() => onPinMessage(message)}\n                              />\n                              <ChatAction\n                                text={Locale.Chat.Actions.Copy}\n                                icon={<CopyIcon />}\n                                onClick={() =>\n                                  copyToClipboard(\n                                    getMessageTextContent(message),\n                                  )\n                                }\n                              />\n                            </>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                  {showTyping && (\n                    <div className={styles[\"chat-message-status\"]}>\n                      {Locale.Chat.Typing}\n                    </div>\n                  )}\n                  <div className={styles[\"chat-message-item\"]}>\n                    <Markdown\n                      content={getMessageTextContent(message)}\n                      loading={\n                        (message.preview || message.streaming) &&\n                        message.content.length === 0 &&\n                        !isUser\n                      }\n                      onContextMenu={(e) => onRightClick(e, message)}\n                      onDoubleClickCapture={() => {\n                        if (!isMobileScreen) return;\n                        setUserInput(getMessageTextContent(message));\n                      }}\n                      fontSize={fontSize}\n                      parentRef={scrollRef}\n                      defaultShow={i >= messages.length - 6}\n                    />\n                    {getMessageImages(message).length == 1 && (\n                      <img\n                        className={styles[\"chat-message-item-image\"]}\n                        src={getMessageImages(message)[0]}\n                        alt=\"\"\n                      />\n                    )}\n                    {getMessageImages(message).length > 1 && (\n                      <div\n                        className={styles[\"chat-message-item-images\"]}\n                        style={\n                          {\n                            \"--image-count\": getMessageImages(message).length,\n                          } as React.CSSProperties\n                        }\n                      >\n                        {getMessageImages(message).map((image, index) => {\n                          return (\n                            <img\n                              className={\n                                styles[\"chat-message-item-image-multi\"]\n                              }\n                              key={index}\n                              src={image}\n                              alt=\"\"\n                            />\n                          );\n                        })}\n                      </div>\n                    )}\n                  </div>\n\n                  <div className={styles[\"chat-message-action-date\"]}>\n                    {isContext\n                      ? Locale.Chat.IsContext\n                      : message.date.toLocaleString()}\n                  </div>\n                </div>\n              </div>\n              {shouldShowClearContextDivider && <ClearContextDivider />}\n            </Fragment>\n          );\n        })}\n      </div>\n\n      <div className={styles[\"chat-input-panel\"]}>\n        <PromptHints prompts={promptHints} onPromptSelect={onPromptSelect} />\n\n        <ChatActions\n          uploadImage={uploadImage}\n          setAttachImages={setAttachImages}\n          setUploading={setUploading}\n          showPromptModal={() => setShowPromptModal(true)}\n          scrollToBottom={scrollToBottom}\n          hitBottom={hitBottom}\n          uploading={uploading}\n          showPromptHints={() => {\n            // Click again to close\n            if (promptHints.length > 0) {\n              setPromptHints([]);\n              return;\n            }\n\n            inputRef.current?.focus();\n            setUserInput(\"/\");\n            onSearch(\"\");\n          }}\n        />\n        <label\n          className={`${styles[\"chat-input-panel-inner\"]} ${\n            attachImages.length != 0\n              ? styles[\"chat-input-panel-inner-attach\"]\n              : \"\"\n          }`}\n          htmlFor=\"chat-input\"\n        >\n          <textarea\n            id=\"chat-input\"\n            ref={inputRef}\n            className={styles[\"chat-input\"]}\n            placeholder={Locale.Chat.Input(submitKey)}\n            onInput={(e) => onInput(e.currentTarget.value)}\n            value={userInput}\n            onKeyDown={onInputKeyDown}\n            onFocus={scrollToBottom}\n            onClick={scrollToBottom}\n            onPaste={handlePaste}\n            rows={inputRows}\n            autoFocus={autoFocus}\n            style={{\n              fontSize: config.fontSize,\n            }}\n          />\n          {attachImages.length != 0 && (\n            <div className={styles[\"attach-images\"]}>\n              {attachImages.map((image, index) => {\n                return (\n                  <div\n                    key={index}\n                    className={styles[\"attach-image\"]}\n                    style={{ backgroundImage: `url(\"${image}\")` }}\n                  >\n                    <div className={styles[\"attach-image-mask\"]}>\n                      <DeleteImageButton\n                        deleteImage={() => {\n                          setAttachImages(\n                            attachImages.filter((_, i) => i !== index),\n                          );\n                        }}\n                      />\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n          <IconButton\n            icon={<SendWhiteIcon />}\n            text={Locale.Chat.Send}\n            className={styles[\"chat-input-send\"]}\n            type=\"primary\"\n            onClick={() => doSubmit(userInput)}\n          />\n        </label>\n      </div>\n\n      {showExport && (\n        <ExportMessageModal onClose={() => setShowExport(false)} />\n      )}\n\n      {isEditingMessage && (\n        <EditMessageModal\n          onClose={() => {\n            setIsEditingMessage(false);\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport function Chat() {\n  const chatStore = useChatStore();\n  const sessionIndex = chatStore.currentSessionIndex;\n  return <_Chat key={sessionIndex}></_Chat>;\n}\n","/Volumes/D/github/ChatGPT-Next-Web/app/components/emoji.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/error.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/exporter.tsx",[],["452","453","454","455"],"/Volumes/D/github/ChatGPT-Next-Web/app/components/home.tsx",[],["456"],"/Volumes/D/github/ChatGPT-Next-Web/app/components/input-range.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/markdown.tsx",[],["457"],"/Volumes/D/github/ChatGPT-Next-Web/app/components/mask.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/message-selector.tsx",[],["458","459"],"/Volumes/D/github/ChatGPT-Next-Web/app/components/model-config.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/new-chat.tsx",[],["460"],"/Volumes/D/github/ChatGPT-Next-Web/app/components/settings.tsx",[],["461","462","463"],"/Volumes/D/github/ChatGPT-Next-Web/app/components/sidebar.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/components/ui-lib.tsx",[],["464","465"],"/Volumes/D/github/ChatGPT-Next-Web/app/config/build.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/config/client.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/config/server.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/constant.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/global.d.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/layout.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/ar.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/bn.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/cn.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/cs.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/de.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/en.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/es.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/fr.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/id.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/index.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/it.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/jp.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/ko.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/no.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/pt.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/ru.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/sk.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/tr.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/tw.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/locales/vi.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/masks/cn.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/masks/en.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/masks/index.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/masks/typing.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/page.tsx",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/polyfill.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/store/access.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/store/chat.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/store/config.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/store/index.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/store/mask.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/store/prompt.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/store/sync.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/store/update.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/typing.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/clone.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/cloud/index.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/cloud/upstash.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/cloud/webdav.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/cors.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/format.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/hooks.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/merge.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/model.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/store.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/sync.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/token.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/upstash/[action]/[...key]/route.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/webdav/[...path]/route.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/api/anthropic/[...path]/route.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/client/platforms/anthropic.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/object.ts",[],[],"/Volumes/D/github/ChatGPT-Next-Web/app/utils/checkers.ts",[],[],{"ruleId":"466","severity":1,"message":"467","line":32,"column":6,"nodeType":"468","endLine":32,"endColumn":30,"suggestions":"469","suppressions":"470"},{"ruleId":"466","severity":1,"message":"471","line":31,"column":6,"nodeType":"468","endLine":31,"endColumn":8,"suggestions":"472","suppressions":"473"},{"ruleId":"466","severity":1,"message":"474","line":476,"column":6,"nodeType":"468","endLine":476,"endColumn":39,"suggestions":"475"},{"ruleId":"476","severity":1,"message":"477","line":1410,"column":23,"nodeType":"478","endLine":1414,"endColumn":25},{"ruleId":"476","severity":1,"message":"477","line":1427,"column":29,"nodeType":"478","endLine":1434,"endColumn":31},{"ruleId":"466","severity":1,"message":"479","line":295,"column":6,"nodeType":"468","endLine":295,"endColumn":41,"suggestions":"480","suppressions":"481"},{"ruleId":"466","severity":1,"message":"482","line":714,"column":3,"nodeType":"483","endLine":714,"endColumn":12,"suggestions":"484","suppressions":"485"},{"ruleId":"466","severity":1,"message":"486","line":819,"column":6,"nodeType":"468","endLine":819,"endColumn":8,"suggestions":"487","suppressions":"488"},{"ruleId":"466","severity":1,"message":"489","line":1104,"column":6,"nodeType":"468","endLine":1104,"endColumn":8,"suggestions":"490","suppressions":"491"},{"ruleId":"466","severity":1,"message":"474","line":287,"column":6,"nodeType":"468","endLine":287,"endColumn":8,"suggestions":"492","suppressions":"493"},{"ruleId":"476","severity":1,"message":"477","line":419,"column":7,"nodeType":"478","endLine":425,"endColumn":9,"suppressions":"494"},{"ruleId":"476","severity":1,"message":"477","line":595,"column":19,"nodeType":"478","endLine":600,"endColumn":21,"suppressions":"495"},{"ruleId":"476","severity":1,"message":"477","line":612,"column":23,"nodeType":"478","endLine":617,"endColumn":25,"suppressions":"496"},{"ruleId":"466","severity":1,"message":"497","line":188,"column":6,"nodeType":"468","endLine":188,"endColumn":8,"suggestions":"498","suppressions":"499"},{"ruleId":"466","severity":1,"message":"500","line":79,"column":6,"nodeType":"468","endLine":79,"endColumn":15,"suggestions":"501","suppressions":"502"},{"ruleId":"466","severity":1,"message":"503","line":129,"column":6,"nodeType":"468","endLine":129,"endColumn":8,"suggestions":"504","suppressions":"505"},{"ruleId":"466","severity":1,"message":"506","line":142,"column":6,"nodeType":"468","endLine":142,"endColumn":28,"suggestions":"507","suppressions":"508"},{"ruleId":"466","severity":1,"message":"509","line":69,"column":6,"nodeType":"468","endLine":69,"endColumn":8,"suggestions":"510","suppressions":"511"},{"ruleId":"466","severity":1,"message":"512","line":619,"column":5,"nodeType":"468","endLine":619,"endColumn":7,"suggestions":"513","suppressions":"514"},{"ruleId":"466","severity":1,"message":"515","line":633,"column":6,"nodeType":"468","endLine":633,"endColumn":8,"suggestions":"516","suppressions":"517"},{"ruleId":"466","severity":1,"message":"518","line":652,"column":6,"nodeType":"468","endLine":652,"endColumn":8,"suggestions":"519","suppressions":"520"},{"ruleId":"466","severity":1,"message":"474","line":119,"column":6,"nodeType":"468","endLine":119,"endColumn":8,"suggestions":"521","suppressions":"522"},{"ruleId":"476","severity":1,"message":"477","line":428,"column":9,"nodeType":"478","endLine":434,"endColumn":10,"suppressions":"523"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setSearchParams'. Either include it or remove the dependency array.","ArrayExpression",["524"],["525"],"React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["526"],["527"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["528"],"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","React Hook useEffect has missing dependencies: 'noPrompts' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["529"],["530"],"React Hook useEffect has a missing dependency: 'measure'. Either include it or remove the dependency array.","Identifier",["531"],["532"],"React Hook useEffect has missing dependencies: 'chatStore' and 'config.modelConfig'. Either include them or remove the dependency array.",["533"],["534"],"React Hook useEffect has missing dependencies: 'session.id' and 'userInput.length'. Either include them or remove the dependency array.",["535"],["536"],["537"],["538"],["539"],["540"],["541"],"React Hook useEffect has missing dependencies: 'api.llm' and 'config'. Either include them or remove the dependency array.",["542"],["543"],"React Hook useEffect has a missing dependency: 'renderMermaid'. Either include it or remove the dependency array.",["544"],["545"],"React Hook useEffect has missing dependencies: 'props.defaultSelectAll' and 'selectAll'. Either include them or remove the dependency array.",["546"],["547"],"React Hook useEffect has missing dependencies: 'messages' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["548"],["549"],"React Hook useEffect has a missing dependency: 'masks'. Either include it or remove the dependency array.",["550"],["551"],"React Hook useMemo has a missing dependency: 'accessStore'. Either include it or remove the dependency array.",["552"],["553"],"React Hook useEffect has missing dependencies: 'checkUpdate', 'checkUsage', and 'showUsage'. Either include them or remove the dependency array.",["554"],["555"],"React Hook useEffect has missing dependencies: 'accessStore', 'clientConfig?.isApp', and 'navigate'. Either include them or remove the dependency array.",["556"],["557"],["558"],["559"],["560"],{"desc":"561","fix":"562"},{"kind":"563","justification":"564"},{"desc":"565","fix":"566"},{"kind":"563","justification":"564"},{"desc":"567","fix":"568"},{"desc":"569","fix":"570"},{"kind":"563","justification":"564"},{"desc":"571","fix":"572"},{"kind":"563","justification":"564"},{"desc":"573","fix":"574"},{"kind":"563","justification":"564"},{"desc":"575","fix":"576"},{"kind":"563","justification":"564"},{"desc":"577","fix":"578"},{"kind":"563","justification":"564"},{"kind":"563","justification":"564"},{"kind":"563","justification":"564"},{"kind":"563","justification":"564"},{"desc":"579","fix":"580"},{"kind":"563","justification":"564"},{"desc":"581","fix":"582"},{"kind":"563","justification":"564"},{"desc":"583","fix":"584"},{"kind":"563","justification":"564"},{"desc":"585","fix":"586"},{"kind":"563","justification":"564"},{"desc":"587","fix":"588"},{"kind":"563","justification":"564"},{"desc":"589","fix":"590"},{"kind":"563","justification":"564"},{"desc":"591","fix":"592"},{"kind":"563","justification":"564"},{"desc":"593","fix":"594"},{"kind":"563","justification":"564"},{"desc":"577","fix":"595"},{"kind":"563","justification":"564"},{"kind":"563","justification":"564"},"Update the dependencies array to be: [searchParams, commands, setSearchParams]",{"range":"596","text":"597"},"directive","","Update the dependencies array to be: [navigate]",{"range":"598","text":"599"},"Update the dependencies array to be: [chatStore, currentModel, models, props]",{"range":"600","text":"601"},"Update the dependencies array to be: [noPrompts, props, props.prompts.length, selectIndex]",{"range":"602","text":"603"},"Update the dependencies array to be: [measure]",{"range":"604","text":"605"},"Update the dependencies array to be: [chatStore, config.modelConfig]",{"range":"606","text":"607"},"Update the dependencies array to be: [session.id, userInput.length]",{"range":"608","text":"609"},"Update the dependencies array to be: [props]",{"range":"610","text":"611"},"Update the dependencies array to be: [api.llm, config]",{"range":"612","text":"613"},"Update the dependencies array to be: [refText, renderMermaid]",{"range":"614","text":"615"},"Update the dependencies array to be: [props.defaultSelectAll, selectAll]",{"range":"616","text":"617"},"Update the dependencies array to be: [startIndex, endIndex, props, messages]",{"range":"618","text":"619"},"Update the dependencies array to be: [masks]",{"range":"620","text":"621"},"Update the dependencies array to be: [accessStore]",{"range":"622","text":"623"},"Update the dependencies array to be: [checkUpdate, checkUsage, showUsage]",{"range":"624","text":"625"},"Update the dependencies array to be: [accessStore, clientConfig?.isApp, navigate]",{"range":"626","text":"627"},{"range":"628","text":"611"},[849,873],"[searchParams, commands, setSearchParams]",[904,906],"[navigate]",[13330,13363],"[chatStore, currentModel, models, props]",[8497,8532],"[noPrompts, props, props.prompts.length, selectIndex]",[20034,20045],"[measure]",[23204,23206],"[chatStore, config.modelConfig]",[31637,31639],"[session.id, userInput.length]",[7926,7928],"[props]",[5238,5240],"[api.llm, config]",[2244,2253],"[refText, renderMermaid]",[3631,3633],"[props.defaultSelectAll, selectAll]",[4024,4046],"[startIndex, endIndex, props, messages]",[2275,2277],"[masks]",[18525,18527],"[accessStore]",[18972,18974],"[checkUpdate, checkUsage, showUsage]",[19512,19514],"[accessStore, clientConfig?.isApp, navigate]",[3016,3018]]