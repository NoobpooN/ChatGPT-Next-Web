"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_mermaid_dist_pieDiagram-a5166659_js"],{

/***/ "(app-pages-browser)/./node_modules/mermaid/dist/pieDiagram-a5166659.js":
/*!**********************************************************!*\
  !*** ./node_modules/mermaid/dist/pieDiagram-a5166659.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   diagram: function() { return /* binding */ diagram; }\n/* harmony export */ });\n/* harmony import */ var _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mermaid-934d9bea.js */ \"(app-pages-browser)/./node_modules/mermaid/dist/mermaid-934d9bea.js\");\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ \"(app-pages-browser)/./node_modules/d3/src/index.js\");\n/* harmony import */ var ts_dedent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ts-dedent */ \"(app-pages-browser)/./node_modules/ts-dedent/esm/index.js\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs */ \"(app-pages-browser)/./node_modules/dayjs/dayjs.min.js\");\n/* harmony import */ var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @braintree/sanitize-url */ \"(app-pages-browser)/./node_modules/@braintree/sanitize-url/dist/index.js\");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! dompurify */ \"(app-pages-browser)/./node_modules/dompurify/dist/purify.js\");\n\n\n\n\n\n\n\n\n\n\n\nvar parser = function() {\n    var o = function(k, v, o2, l) {\n        for(o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v);\n        return o2;\n    }, $V0 = [\n        1,\n        3\n    ], $V1 = [\n        1,\n        4\n    ], $V2 = [\n        1,\n        5\n    ], $V3 = [\n        1,\n        6\n    ], $V4 = [\n        1,\n        10,\n        12,\n        14,\n        16,\n        18,\n        19,\n        20,\n        21,\n        22\n    ], $V5 = [\n        2,\n        4\n    ], $V6 = [\n        1,\n        5,\n        10,\n        12,\n        14,\n        16,\n        18,\n        19,\n        20,\n        21,\n        22\n    ], $V7 = [\n        20,\n        21,\n        22\n    ], $V8 = [\n        2,\n        7\n    ], $V9 = [\n        1,\n        12\n    ], $Va = [\n        1,\n        13\n    ], $Vb = [\n        1,\n        14\n    ], $Vc = [\n        1,\n        15\n    ], $Vd = [\n        1,\n        16\n    ], $Ve = [\n        1,\n        17\n    ];\n    var parser2 = {\n        trace: function trace() {},\n        yy: {},\n        symbols_: {\n            \"error\": 2,\n            \"start\": 3,\n            \"eol\": 4,\n            \"PIE\": 5,\n            \"document\": 6,\n            \"showData\": 7,\n            \"line\": 8,\n            \"statement\": 9,\n            \"txt\": 10,\n            \"value\": 11,\n            \"title\": 12,\n            \"title_value\": 13,\n            \"acc_title\": 14,\n            \"acc_title_value\": 15,\n            \"acc_descr\": 16,\n            \"acc_descr_value\": 17,\n            \"acc_descr_multiline_value\": 18,\n            \"section\": 19,\n            \"NEWLINE\": 20,\n            \";\": 21,\n            \"EOF\": 22,\n            \"$accept\": 0,\n            \"$end\": 1\n        },\n        terminals_: {\n            2: \"error\",\n            5: \"PIE\",\n            7: \"showData\",\n            10: \"txt\",\n            11: \"value\",\n            12: \"title\",\n            13: \"title_value\",\n            14: \"acc_title\",\n            15: \"acc_title_value\",\n            16: \"acc_descr\",\n            17: \"acc_descr_value\",\n            18: \"acc_descr_multiline_value\",\n            19: \"section\",\n            20: \"NEWLINE\",\n            21: \";\",\n            22: \"EOF\"\n        },\n        productions_: [\n            0,\n            [\n                3,\n                2\n            ],\n            [\n                3,\n                2\n            ],\n            [\n                3,\n                3\n            ],\n            [\n                6,\n                0\n            ],\n            [\n                6,\n                2\n            ],\n            [\n                8,\n                2\n            ],\n            [\n                9,\n                0\n            ],\n            [\n                9,\n                2\n            ],\n            [\n                9,\n                2\n            ],\n            [\n                9,\n                2\n            ],\n            [\n                9,\n                2\n            ],\n            [\n                9,\n                1\n            ],\n            [\n                9,\n                1\n            ],\n            [\n                4,\n                1\n            ],\n            [\n                4,\n                1\n            ],\n            [\n                4,\n                1\n            ]\n        ],\n        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n            var $0 = $$.length - 1;\n            switch(yystate){\n                case 3:\n                    yy.setShowData(true);\n                    break;\n                case 6:\n                    this.$ = $$[$0 - 1];\n                    break;\n                case 8:\n                    yy.addSection($$[$0 - 1], yy.cleanupValue($$[$0]));\n                    break;\n                case 9:\n                    this.$ = $$[$0].trim();\n                    yy.setDiagramTitle(this.$);\n                    break;\n                case 10:\n                    this.$ = $$[$0].trim();\n                    yy.setAccTitle(this.$);\n                    break;\n                case 11:\n                case 12:\n                    this.$ = $$[$0].trim();\n                    yy.setAccDescription(this.$);\n                    break;\n                case 13:\n                    yy.addSection($$[$0].substr(8));\n                    this.$ = $$[$0].substr(8);\n                    break;\n            }\n        },\n        table: [\n            {\n                3: 1,\n                4: 2,\n                5: $V0,\n                20: $V1,\n                21: $V2,\n                22: $V3\n            },\n            {\n                1: [\n                    3\n                ]\n            },\n            {\n                3: 7,\n                4: 2,\n                5: $V0,\n                20: $V1,\n                21: $V2,\n                22: $V3\n            },\n            o($V4, $V5, {\n                6: 8,\n                7: [\n                    1,\n                    9\n                ]\n            }),\n            o($V6, [\n                2,\n                14\n            ]),\n            o($V6, [\n                2,\n                15\n            ]),\n            o($V6, [\n                2,\n                16\n            ]),\n            {\n                1: [\n                    2,\n                    1\n                ]\n            },\n            o($V7, $V8, {\n                8: 10,\n                9: 11,\n                1: [\n                    2,\n                    2\n                ],\n                10: $V9,\n                12: $Va,\n                14: $Vb,\n                16: $Vc,\n                18: $Vd,\n                19: $Ve\n            }),\n            o($V4, $V5, {\n                6: 18\n            }),\n            o($V4, [\n                2,\n                5\n            ]),\n            {\n                4: 19,\n                20: $V1,\n                21: $V2,\n                22: $V3\n            },\n            {\n                11: [\n                    1,\n                    20\n                ]\n            },\n            {\n                13: [\n                    1,\n                    21\n                ]\n            },\n            {\n                15: [\n                    1,\n                    22\n                ]\n            },\n            {\n                17: [\n                    1,\n                    23\n                ]\n            },\n            o($V7, [\n                2,\n                12\n            ]),\n            o($V7, [\n                2,\n                13\n            ]),\n            o($V7, $V8, {\n                8: 10,\n                9: 11,\n                1: [\n                    2,\n                    3\n                ],\n                10: $V9,\n                12: $Va,\n                14: $Vb,\n                16: $Vc,\n                18: $Vd,\n                19: $Ve\n            }),\n            o($V4, [\n                2,\n                6\n            ]),\n            o($V7, [\n                2,\n                8\n            ]),\n            o($V7, [\n                2,\n                9\n            ]),\n            o($V7, [\n                2,\n                10\n            ]),\n            o($V7, [\n                2,\n                11\n            ])\n        ],\n        defaultActions: {\n            7: [\n                2,\n                1\n            ]\n        },\n        parseError: function parseError(str, hash) {\n            if (hash.recoverable) {\n                this.trace(str);\n            } else {\n                var error = new Error(str);\n                error.hash = hash;\n                throw error;\n            }\n        },\n        parse: function parse(input) {\n            var self = this, stack = [\n                0\n            ], tstack = [], vstack = [\n                null\n            ], lstack = [], table = this.table, yytext = \"\", yylineno = 0, yyleng = 0, TERROR = 2, EOF = 1;\n            var args = lstack.slice.call(arguments, 1);\n            var lexer2 = Object.create(this.lexer);\n            var sharedState = {\n                yy: {}\n            };\n            for(var k in this.yy){\n                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n                    sharedState.yy[k] = this.yy[k];\n                }\n            }\n            lexer2.setInput(input, sharedState.yy);\n            sharedState.yy.lexer = lexer2;\n            sharedState.yy.parser = this;\n            if (typeof lexer2.yylloc == \"undefined\") {\n                lexer2.yylloc = {};\n            }\n            var yyloc = lexer2.yylloc;\n            lstack.push(yyloc);\n            var ranges = lexer2.options && lexer2.options.ranges;\n            if (typeof sharedState.yy.parseError === \"function\") {\n                this.parseError = sharedState.yy.parseError;\n            } else {\n                this.parseError = Object.getPrototypeOf(this).parseError;\n            }\n            function lex() {\n                var token;\n                token = tstack.pop() || lexer2.lex() || EOF;\n                if (typeof token !== \"number\") {\n                    if (token instanceof Array) {\n                        tstack = token;\n                        token = tstack.pop();\n                    }\n                    token = self.symbols_[token] || token;\n                }\n                return token;\n            }\n            var symbol, state, action, r, yyval = {}, p, len, newState, expected;\n            while(true){\n                state = stack[stack.length - 1];\n                if (this.defaultActions[state]) {\n                    action = this.defaultActions[state];\n                } else {\n                    if (symbol === null || typeof symbol == \"undefined\") {\n                        symbol = lex();\n                    }\n                    action = table[state] && table[state][symbol];\n                }\n                if (typeof action === \"undefined\" || !action.length || !action[0]) {\n                    var errStr = \"\";\n                    expected = [];\n                    for(p in table[state]){\n                        if (this.terminals_[p] && p > TERROR) {\n                            expected.push(\"'\" + this.terminals_[p] + \"'\");\n                        }\n                    }\n                    if (lexer2.showPosition) {\n                        errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n                    } else {\n                        errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n                    }\n                    this.parseError(errStr, {\n                        text: lexer2.match,\n                        token: this.terminals_[symbol] || symbol,\n                        line: lexer2.yylineno,\n                        loc: yyloc,\n                        expected\n                    });\n                }\n                if (action[0] instanceof Array && action.length > 1) {\n                    throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n                }\n                switch(action[0]){\n                    case 1:\n                        stack.push(symbol);\n                        vstack.push(lexer2.yytext);\n                        lstack.push(lexer2.yylloc);\n                        stack.push(action[1]);\n                        symbol = null;\n                        {\n                            yyleng = lexer2.yyleng;\n                            yytext = lexer2.yytext;\n                            yylineno = lexer2.yylineno;\n                            yyloc = lexer2.yylloc;\n                        }\n                        break;\n                    case 2:\n                        len = this.productions_[action[1]][1];\n                        yyval.$ = vstack[vstack.length - len];\n                        yyval._$ = {\n                            first_line: lstack[lstack.length - (len || 1)].first_line,\n                            last_line: lstack[lstack.length - 1].last_line,\n                            first_column: lstack[lstack.length - (len || 1)].first_column,\n                            last_column: lstack[lstack.length - 1].last_column\n                        };\n                        if (ranges) {\n                            yyval._$.range = [\n                                lstack[lstack.length - (len || 1)].range[0],\n                                lstack[lstack.length - 1].range[1]\n                            ];\n                        }\n                        r = this.performAction.apply(yyval, [\n                            yytext,\n                            yyleng,\n                            yylineno,\n                            sharedState.yy,\n                            action[1],\n                            vstack,\n                            lstack\n                        ].concat(args));\n                        if (typeof r !== \"undefined\") {\n                            return r;\n                        }\n                        if (len) {\n                            stack = stack.slice(0, -1 * len * 2);\n                            vstack = vstack.slice(0, -1 * len);\n                            lstack = lstack.slice(0, -1 * len);\n                        }\n                        stack.push(this.productions_[action[1]][0]);\n                        vstack.push(yyval.$);\n                        lstack.push(yyval._$);\n                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n                        stack.push(newState);\n                        break;\n                    case 3:\n                        return true;\n                }\n            }\n            return true;\n        }\n    };\n    var lexer = function() {\n        var lexer2 = {\n            EOF: 1,\n            parseError: function parseError(str, hash) {\n                if (this.yy.parser) {\n                    this.yy.parser.parseError(str, hash);\n                } else {\n                    throw new Error(str);\n                }\n            },\n            // resets the lexer, sets new input\n            setInput: function(input, yy) {\n                this.yy = yy || this.yy || {};\n                this._input = input;\n                this._more = this._backtrack = this.done = false;\n                this.yylineno = this.yyleng = 0;\n                this.yytext = this.matched = this.match = \"\";\n                this.conditionStack = [\n                    \"INITIAL\"\n                ];\n                this.yylloc = {\n                    first_line: 1,\n                    first_column: 0,\n                    last_line: 1,\n                    last_column: 0\n                };\n                if (this.options.ranges) {\n                    this.yylloc.range = [\n                        0,\n                        0\n                    ];\n                }\n                this.offset = 0;\n                return this;\n            },\n            // consumes and returns one char from the input\n            input: function() {\n                var ch = this._input[0];\n                this.yytext += ch;\n                this.yyleng++;\n                this.offset++;\n                this.match += ch;\n                this.matched += ch;\n                var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n                if (lines) {\n                    this.yylineno++;\n                    this.yylloc.last_line++;\n                } else {\n                    this.yylloc.last_column++;\n                }\n                if (this.options.ranges) {\n                    this.yylloc.range[1]++;\n                }\n                this._input = this._input.slice(1);\n                return ch;\n            },\n            // unshifts one char (or a string) into the input\n            unput: function(ch) {\n                var len = ch.length;\n                var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n                this._input = ch + this._input;\n                this.yytext = this.yytext.substr(0, this.yytext.length - len);\n                this.offset -= len;\n                var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n                this.match = this.match.substr(0, this.match.length - 1);\n                this.matched = this.matched.substr(0, this.matched.length - 1);\n                if (lines.length - 1) {\n                    this.yylineno -= lines.length - 1;\n                }\n                var r = this.yylloc.range;\n                this.yylloc = {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.yylineno + 1,\n                    first_column: this.yylloc.first_column,\n                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n                };\n                if (this.options.ranges) {\n                    this.yylloc.range = [\n                        r[0],\n                        r[0] + this.yyleng - len\n                    ];\n                }\n                this.yyleng = this.yytext.length;\n                return this;\n            },\n            // When called from action, caches matched text and appends it on next action\n            more: function() {\n                this._more = true;\n                return this;\n            },\n            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n            reject: function() {\n                if (this.options.backtrack_lexer) {\n                    this._backtrack = true;\n                } else {\n                    return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n                        text: \"\",\n                        token: null,\n                        line: this.yylineno\n                    });\n                }\n                return this;\n            },\n            // retain first n characters of the match\n            less: function(n) {\n                this.unput(this.match.slice(n));\n            },\n            // displays already matched input, i.e. for error messages\n            pastInput: function() {\n                var past = this.matched.substr(0, this.matched.length - this.match.length);\n                return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n            },\n            // displays upcoming input, i.e. for error messages\n            upcomingInput: function() {\n                var next = this.match;\n                if (next.length < 20) {\n                    next += this._input.substr(0, 20 - next.length);\n                }\n                return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n            },\n            // displays the character position where the lexing error occurred, i.e. for error messages\n            showPosition: function() {\n                var pre = this.pastInput();\n                var c = new Array(pre.length + 1).join(\"-\");\n                return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n            },\n            // test the lexed token: return FALSE when not a match, otherwise return token\n            test_match: function(match, indexed_rule) {\n                var token, lines, backup;\n                if (this.options.backtrack_lexer) {\n                    backup = {\n                        yylineno: this.yylineno,\n                        yylloc: {\n                            first_line: this.yylloc.first_line,\n                            last_line: this.last_line,\n                            first_column: this.yylloc.first_column,\n                            last_column: this.yylloc.last_column\n                        },\n                        yytext: this.yytext,\n                        match: this.match,\n                        matches: this.matches,\n                        matched: this.matched,\n                        yyleng: this.yyleng,\n                        offset: this.offset,\n                        _more: this._more,\n                        _input: this._input,\n                        yy: this.yy,\n                        conditionStack: this.conditionStack.slice(0),\n                        done: this.done\n                    };\n                    if (this.options.ranges) {\n                        backup.yylloc.range = this.yylloc.range.slice(0);\n                    }\n                }\n                lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n                if (lines) {\n                    this.yylineno += lines.length;\n                }\n                this.yylloc = {\n                    first_line: this.yylloc.last_line,\n                    last_line: this.yylineno + 1,\n                    first_column: this.yylloc.last_column,\n                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n                };\n                this.yytext += match[0];\n                this.match += match[0];\n                this.matches = match;\n                this.yyleng = this.yytext.length;\n                if (this.options.ranges) {\n                    this.yylloc.range = [\n                        this.offset,\n                        this.offset += this.yyleng\n                    ];\n                }\n                this._more = false;\n                this._backtrack = false;\n                this._input = this._input.slice(match[0].length);\n                this.matched += match[0];\n                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n                if (this.done && this._input) {\n                    this.done = false;\n                }\n                if (token) {\n                    return token;\n                } else if (this._backtrack) {\n                    for(var k in backup){\n                        this[k] = backup[k];\n                    }\n                    return false;\n                }\n                return false;\n            },\n            // return next match in input\n            next: function() {\n                if (this.done) {\n                    return this.EOF;\n                }\n                if (!this._input) {\n                    this.done = true;\n                }\n                var token, match, tempMatch, index;\n                if (!this._more) {\n                    this.yytext = \"\";\n                    this.match = \"\";\n                }\n                var rules = this._currentRules();\n                for(var i = 0; i < rules.length; i++){\n                    tempMatch = this._input.match(this.rules[rules[i]]);\n                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                        match = tempMatch;\n                        index = i;\n                        if (this.options.backtrack_lexer) {\n                            token = this.test_match(tempMatch, rules[i]);\n                            if (token !== false) {\n                                return token;\n                            } else if (this._backtrack) {\n                                match = false;\n                                continue;\n                            } else {\n                                return false;\n                            }\n                        } else if (!this.options.flex) {\n                            break;\n                        }\n                    }\n                }\n                if (match) {\n                    token = this.test_match(match, rules[index]);\n                    if (token !== false) {\n                        return token;\n                    }\n                    return false;\n                }\n                if (this._input === \"\") {\n                    return this.EOF;\n                } else {\n                    return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n                        text: \"\",\n                        token: null,\n                        line: this.yylineno\n                    });\n                }\n            },\n            // return next match that has a token\n            lex: function lex() {\n                var r = this.next();\n                if (r) {\n                    return r;\n                } else {\n                    return this.lex();\n                }\n            },\n            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n            begin: function begin(condition) {\n                this.conditionStack.push(condition);\n            },\n            // pop the previously active lexer condition state off the condition stack\n            popState: function popState() {\n                var n = this.conditionStack.length - 1;\n                if (n > 0) {\n                    return this.conditionStack.pop();\n                } else {\n                    return this.conditionStack[0];\n                }\n            },\n            // produce the lexer rule set which is active for the currently active lexer condition state\n            _currentRules: function _currentRules() {\n                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n                } else {\n                    return this.conditions[\"INITIAL\"].rules;\n                }\n            },\n            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n            topState: function topState(n) {\n                n = this.conditionStack.length - 1 - Math.abs(n || 0);\n                if (n >= 0) {\n                    return this.conditionStack[n];\n                } else {\n                    return \"INITIAL\";\n                }\n            },\n            // alias for begin(condition)\n            pushState: function pushState(condition) {\n                this.begin(condition);\n            },\n            // return the number of states currently on the stack\n            stateStackSize: function stateStackSize() {\n                return this.conditionStack.length;\n            },\n            options: {\n                \"case-insensitive\": true\n            },\n            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n                switch($avoiding_name_collisions){\n                    case 0:\n                        break;\n                    case 1:\n                        break;\n                    case 2:\n                        return 20;\n                    case 3:\n                        break;\n                    case 4:\n                        break;\n                    case 5:\n                        this.begin(\"title\");\n                        return 12;\n                    case 6:\n                        this.popState();\n                        return \"title_value\";\n                    case 7:\n                        this.begin(\"acc_title\");\n                        return 14;\n                    case 8:\n                        this.popState();\n                        return \"acc_title_value\";\n                    case 9:\n                        this.begin(\"acc_descr\");\n                        return 16;\n                    case 10:\n                        this.popState();\n                        return \"acc_descr_value\";\n                    case 11:\n                        this.begin(\"acc_descr_multiline\");\n                        break;\n                    case 12:\n                        this.popState();\n                        break;\n                    case 13:\n                        return \"acc_descr_multiline_value\";\n                    case 14:\n                        this.begin(\"string\");\n                        break;\n                    case 15:\n                        this.popState();\n                        break;\n                    case 16:\n                        return \"txt\";\n                    case 17:\n                        return 5;\n                    case 18:\n                        return 7;\n                    case 19:\n                        return \"value\";\n                    case 20:\n                        return 22;\n                }\n            },\n            rules: [\n                /^(?:%%(?!\\{)[^\\n]*)/i,\n                /^(?:[^\\}]%%[^\\n]*)/i,\n                /^(?:[\\n\\r]+)/i,\n                /^(?:%%[^\\n]*)/i,\n                /^(?:[\\s]+)/i,\n                /^(?:title\\b)/i,\n                /^(?:(?!\\n||)*[^\\n]*)/i,\n                /^(?:accTitle\\s*:\\s*)/i,\n                /^(?:(?!\\n||)*[^\\n]*)/i,\n                /^(?:accDescr\\s*:\\s*)/i,\n                /^(?:(?!\\n||)*[^\\n]*)/i,\n                /^(?:accDescr\\s*\\{\\s*)/i,\n                /^(?:[\\}])/i,\n                /^(?:[^\\}]*)/i,\n                /^(?:[\"])/i,\n                /^(?:[\"])/i,\n                /^(?:[^\"]*)/i,\n                /^(?:pie\\b)/i,\n                /^(?:showData\\b)/i,\n                /^(?::[\\s]*[\\d]+(?:\\.[\\d]+)?)/i,\n                /^(?:$)/i\n            ],\n            conditions: {\n                \"acc_descr_multiline\": {\n                    \"rules\": [\n                        12,\n                        13\n                    ],\n                    \"inclusive\": false\n                },\n                \"acc_descr\": {\n                    \"rules\": [\n                        10\n                    ],\n                    \"inclusive\": false\n                },\n                \"acc_title\": {\n                    \"rules\": [\n                        8\n                    ],\n                    \"inclusive\": false\n                },\n                \"title\": {\n                    \"rules\": [\n                        6\n                    ],\n                    \"inclusive\": false\n                },\n                \"string\": {\n                    \"rules\": [\n                        15,\n                        16\n                    ],\n                    \"inclusive\": false\n                },\n                \"INITIAL\": {\n                    \"rules\": [\n                        0,\n                        1,\n                        2,\n                        3,\n                        4,\n                        5,\n                        7,\n                        9,\n                        11,\n                        14,\n                        17,\n                        18,\n                        19,\n                        20\n                    ],\n                    \"inclusive\": true\n                }\n            }\n        };\n        return lexer2;\n    }();\n    parser2.lexer = lexer;\n    function Parser() {\n        this.yy = {};\n    }\n    Parser.prototype = parser2;\n    parser2.Parser = Parser;\n    return new Parser();\n}();\nparser.parser = parser;\nconst parser$1 = parser;\nconst DEFAULT_PIE_CONFIG = _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.A.pie;\nconst DEFAULT_PIE_DB = {\n    sections: {},\n    showData: false,\n    config: DEFAULT_PIE_CONFIG\n};\nlet sections = DEFAULT_PIE_DB.sections;\nlet showData = DEFAULT_PIE_DB.showData;\nconst config = structuredClone(DEFAULT_PIE_CONFIG);\nconst getConfig = ()=>structuredClone(config);\nconst clear = ()=>{\n    sections = structuredClone(DEFAULT_PIE_DB.sections);\n    showData = DEFAULT_PIE_DB.showData;\n    (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.t)();\n};\nconst addSection = (label, value)=>{\n    label = (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.d)(label, (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n    if (sections[label] === void 0) {\n        sections[label] = value;\n        _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"added new section: \".concat(label, \", with value: \").concat(value));\n    }\n};\nconst getSections = ()=>sections;\nconst cleanupValue = (value)=>{\n    if (value.substring(0, 1) === \":\") {\n        value = value.substring(1).trim();\n    }\n    return Number(value.trim());\n};\nconst setShowData = (toggle)=>{\n    showData = toggle;\n};\nconst getShowData = ()=>showData;\nconst db = {\n    getConfig,\n    clear,\n    setDiagramTitle: _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.q,\n    getDiagramTitle: _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.r,\n    setAccTitle: _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.s,\n    getAccTitle: _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.g,\n    setAccDescription: _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.b,\n    getAccDescription: _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.a,\n    addSection,\n    getSections,\n    cleanupValue,\n    setShowData,\n    getShowData\n};\nconst getStyles = (options)=>\"\\n  .pieCircle{\\n    stroke: \".concat(options.pieStrokeColor, \";\\n    stroke-width : \").concat(options.pieStrokeWidth, \";\\n    opacity : \").concat(options.pieOpacity, \";\\n  }\\n  .pieOuterCircle{\\n    stroke: \").concat(options.pieOuterStrokeColor, \";\\n    stroke-width: \").concat(options.pieOuterStrokeWidth, \";\\n    fill: none;\\n  }\\n  .pieTitleText {\\n    text-anchor: middle;\\n    font-size: \").concat(options.pieTitleTextSize, \";\\n    fill: \").concat(options.pieTitleTextColor, \";\\n    font-family: \").concat(options.fontFamily, \";\\n  }\\n  .slice {\\n    font-family: \").concat(options.fontFamily, \";\\n    fill: \").concat(options.pieSectionTextColor, \";\\n    font-size:\").concat(options.pieSectionTextSize, \";\\n    // fill: white;\\n  }\\n  .legend text {\\n    fill: \").concat(options.pieLegendTextColor, \";\\n    font-family: \").concat(options.fontFamily, \";\\n    font-size: \").concat(options.pieLegendTextSize, \";\\n  }\\n\");\nconst styles = getStyles;\nconst createPieArcs = (sections2)=>{\n    const pieData = Object.entries(sections2).map((element)=>{\n        return {\n            label: element[0],\n            value: element[1]\n        };\n    }).sort((a, b)=>{\n        return b.value - a.value;\n    });\n    const pie$1 = (0,d3__WEBPACK_IMPORTED_MODULE_0__.pie)().value((d3Section)=>d3Section.value);\n    return pie$1(pieData);\n};\nconst draw = (text, id, _version, diagObj)=>{\n    var _a, _b;\n    _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"rendering pie chart\\n\" + text);\n    const db2 = diagObj.db;\n    const globalConfig = (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.c)();\n    const pieConfig = (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.B)(db2.getConfig(), globalConfig.pie);\n    const height = 450;\n    var _ref;\n    const width = (_ref = (_b = (_a = document.getElementById(id)) == null ? void 0 : _a.parentElement) == null ? void 0 : _b.offsetWidth) !== null && _ref !== void 0 ? _ref : pieConfig.useWidth;\n    const svg = (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.z)(id);\n    svg.attr(\"viewBox\", \"0 0 \".concat(width, \" \").concat(height));\n    (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.i)(svg, height, width, pieConfig.useMaxWidth);\n    const MARGIN = 40;\n    const LEGEND_RECT_SIZE = 18;\n    const LEGEND_SPACING = 4;\n    const group = svg.append(\"g\");\n    group.attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n    const { themeVariables } = globalConfig;\n    let [outerStrokeWidth] = (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.C)(themeVariables.pieOuterStrokeWidth);\n    outerStrokeWidth !== null && outerStrokeWidth !== void 0 ? outerStrokeWidth : outerStrokeWidth = 2;\n    const textPosition = pieConfig.textPosition;\n    const radius = Math.min(width, height) / 2 - MARGIN;\n    const arcGenerator = (0,d3__WEBPACK_IMPORTED_MODULE_0__.arc)().innerRadius(0).outerRadius(radius);\n    const labelArcGenerator = (0,d3__WEBPACK_IMPORTED_MODULE_0__.arc)().innerRadius(radius * textPosition).outerRadius(radius * textPosition);\n    group.append(\"circle\").attr(\"cx\", 0).attr(\"cy\", 0).attr(\"r\", radius + outerStrokeWidth / 2).attr(\"class\", \"pieOuterCircle\");\n    const sections2 = db2.getSections();\n    const arcs = createPieArcs(sections2);\n    const myGeneratedColors = [\n        themeVariables.pie1,\n        themeVariables.pie2,\n        themeVariables.pie3,\n        themeVariables.pie4,\n        themeVariables.pie5,\n        themeVariables.pie6,\n        themeVariables.pie7,\n        themeVariables.pie8,\n        themeVariables.pie9,\n        themeVariables.pie10,\n        themeVariables.pie11,\n        themeVariables.pie12\n    ];\n    const color = (0,d3__WEBPACK_IMPORTED_MODULE_0__.scaleOrdinal)(myGeneratedColors);\n    group.selectAll(\"mySlices\").data(arcs).enter().append(\"path\").attr(\"d\", arcGenerator).attr(\"fill\", (datum)=>{\n        return color(datum.data.label);\n    }).attr(\"class\", \"pieCircle\");\n    let sum = 0;\n    Object.keys(sections2).forEach((key)=>{\n        sum += sections2[key];\n    });\n    group.selectAll(\"mySlices\").data(arcs).enter().append(\"text\").text((datum)=>{\n        return (datum.data.value / sum * 100).toFixed(0) + \"%\";\n    }).attr(\"transform\", (datum)=>{\n        return \"translate(\" + labelArcGenerator.centroid(datum) + \")\";\n    }).style(\"text-anchor\", \"middle\").attr(\"class\", \"slice\");\n    group.append(\"text\").text(db2.getDiagramTitle()).attr(\"x\", 0).attr(\"y\", -(height - 50) / 2).attr(\"class\", \"pieTitleText\");\n    const legend = group.selectAll(\".legend\").data(color.domain()).enter().append(\"g\").attr(\"class\", \"legend\").attr(\"transform\", (_datum, index)=>{\n        const height2 = LEGEND_RECT_SIZE + LEGEND_SPACING;\n        const offset = height2 * color.domain().length / 2;\n        const horizontal = 12 * LEGEND_RECT_SIZE;\n        const vertical = index * height2 - offset;\n        return \"translate(\" + horizontal + \",\" + vertical + \")\";\n    });\n    legend.append(\"rect\").attr(\"width\", LEGEND_RECT_SIZE).attr(\"height\", LEGEND_RECT_SIZE).style(\"fill\", color).style(\"stroke\", color);\n    legend.data(arcs).append(\"text\").attr(\"x\", LEGEND_RECT_SIZE + LEGEND_SPACING).attr(\"y\", LEGEND_RECT_SIZE - LEGEND_SPACING).text((datum)=>{\n        const { label, value } = datum.data;\n        if (db2.getShowData()) {\n            return \"\".concat(label, \" [\").concat(value, \"]\");\n        }\n        return label;\n    });\n};\nconst renderer = {\n    draw\n};\nconst diagram = {\n    parser: parser$1,\n    db,\n    renderer,\n    styles\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mermaid/dist/pieDiagram-a5166659.js\n"));

/***/ })

}]);