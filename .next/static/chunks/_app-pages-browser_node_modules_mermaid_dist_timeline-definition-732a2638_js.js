"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_mermaid_dist_timeline-definition-732a2638_js"],{

/***/ "(app-pages-browser)/./node_modules/mermaid/dist/timeline-definition-732a2638.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mermaid/dist/timeline-definition-732a2638.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   diagram: function() { return /* binding */ diagram; }\n/* harmony export */ });\n/* harmony import */ var _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mermaid-934d9bea.js */ \"(app-pages-browser)/./node_modules/mermaid/dist/mermaid-934d9bea.js\");\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ \"(app-pages-browser)/./node_modules/d3/src/index.js\");\n/* harmony import */ var khroma__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! khroma */ \"(app-pages-browser)/./node_modules/khroma/dist/methods/is_dark.js\");\n/* harmony import */ var khroma__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! khroma */ \"(app-pages-browser)/./node_modules/khroma/dist/methods/lighten.js\");\n/* harmony import */ var khroma__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! khroma */ \"(app-pages-browser)/./node_modules/khroma/dist/methods/darken.js\");\n/* harmony import */ var ts_dedent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ts-dedent */ \"(app-pages-browser)/./node_modules/ts-dedent/esm/index.js\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs */ \"(app-pages-browser)/./node_modules/dayjs/dayjs.min.js\");\n/* harmony import */ var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @braintree/sanitize-url */ \"(app-pages-browser)/./node_modules/@braintree/sanitize-url/dist/index.js\");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! dompurify */ \"(app-pages-browser)/./node_modules/dompurify/dist/purify.js\");\n\n\n\n\n\n\n\n\n\n\n\nvar parser = function() {\n    var o = function(k, v, o2, l) {\n        for(o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v);\n        return o2;\n    }, $V0 = [\n        6,\n        8,\n        10,\n        11,\n        12,\n        14,\n        16,\n        17,\n        20,\n        21\n    ], $V1 = [\n        1,\n        9\n    ], $V2 = [\n        1,\n        10\n    ], $V3 = [\n        1,\n        11\n    ], $V4 = [\n        1,\n        12\n    ], $V5 = [\n        1,\n        13\n    ], $V6 = [\n        1,\n        16\n    ], $V7 = [\n        1,\n        17\n    ];\n    var parser2 = {\n        trace: function trace() {},\n        yy: {},\n        symbols_: {\n            \"error\": 2,\n            \"start\": 3,\n            \"timeline\": 4,\n            \"document\": 5,\n            \"EOF\": 6,\n            \"line\": 7,\n            \"SPACE\": 8,\n            \"statement\": 9,\n            \"NEWLINE\": 10,\n            \"title\": 11,\n            \"acc_title\": 12,\n            \"acc_title_value\": 13,\n            \"acc_descr\": 14,\n            \"acc_descr_value\": 15,\n            \"acc_descr_multiline_value\": 16,\n            \"section\": 17,\n            \"period_statement\": 18,\n            \"event_statement\": 19,\n            \"period\": 20,\n            \"event\": 21,\n            \"$accept\": 0,\n            \"$end\": 1\n        },\n        terminals_: {\n            2: \"error\",\n            4: \"timeline\",\n            6: \"EOF\",\n            8: \"SPACE\",\n            10: \"NEWLINE\",\n            11: \"title\",\n            12: \"acc_title\",\n            13: \"acc_title_value\",\n            14: \"acc_descr\",\n            15: \"acc_descr_value\",\n            16: \"acc_descr_multiline_value\",\n            17: \"section\",\n            20: \"period\",\n            21: \"event\"\n        },\n        productions_: [\n            0,\n            [\n                3,\n                3\n            ],\n            [\n                5,\n                0\n            ],\n            [\n                5,\n                2\n            ],\n            [\n                7,\n                2\n            ],\n            [\n                7,\n                1\n            ],\n            [\n                7,\n                1\n            ],\n            [\n                7,\n                1\n            ],\n            [\n                9,\n                1\n            ],\n            [\n                9,\n                2\n            ],\n            [\n                9,\n                2\n            ],\n            [\n                9,\n                1\n            ],\n            [\n                9,\n                1\n            ],\n            [\n                9,\n                1\n            ],\n            [\n                9,\n                1\n            ],\n            [\n                18,\n                1\n            ],\n            [\n                19,\n                1\n            ]\n        ],\n        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n            var $0 = $$.length - 1;\n            switch(yystate){\n                case 1:\n                    return $$[$0 - 1];\n                case 2:\n                    this.$ = [];\n                    break;\n                case 3:\n                    $$[$0 - 1].push($$[$0]);\n                    this.$ = $$[$0 - 1];\n                    break;\n                case 4:\n                case 5:\n                    this.$ = $$[$0];\n                    break;\n                case 6:\n                case 7:\n                    this.$ = [];\n                    break;\n                case 8:\n                    yy.getCommonDb().setDiagramTitle($$[$0].substr(6));\n                    this.$ = $$[$0].substr(6);\n                    break;\n                case 9:\n                    this.$ = $$[$0].trim();\n                    yy.getCommonDb().setAccTitle(this.$);\n                    break;\n                case 10:\n                case 11:\n                    this.$ = $$[$0].trim();\n                    yy.getCommonDb().setAccDescription(this.$);\n                    break;\n                case 12:\n                    yy.addSection($$[$0].substr(8));\n                    this.$ = $$[$0].substr(8);\n                    break;\n                case 15:\n                    yy.addTask($$[$0], 0, \"\");\n                    this.$ = $$[$0];\n                    break;\n                case 16:\n                    yy.addEvent($$[$0].substr(2));\n                    this.$ = $$[$0];\n                    break;\n            }\n        },\n        table: [\n            {\n                3: 1,\n                4: [\n                    1,\n                    2\n                ]\n            },\n            {\n                1: [\n                    3\n                ]\n            },\n            o($V0, [\n                2,\n                2\n            ], {\n                5: 3\n            }),\n            {\n                6: [\n                    1,\n                    4\n                ],\n                7: 5,\n                8: [\n                    1,\n                    6\n                ],\n                9: 7,\n                10: [\n                    1,\n                    8\n                ],\n                11: $V1,\n                12: $V2,\n                14: $V3,\n                16: $V4,\n                17: $V5,\n                18: 14,\n                19: 15,\n                20: $V6,\n                21: $V7\n            },\n            o($V0, [\n                2,\n                7\n            ], {\n                1: [\n                    2,\n                    1\n                ]\n            }),\n            o($V0, [\n                2,\n                3\n            ]),\n            {\n                9: 18,\n                11: $V1,\n                12: $V2,\n                14: $V3,\n                16: $V4,\n                17: $V5,\n                18: 14,\n                19: 15,\n                20: $V6,\n                21: $V7\n            },\n            o($V0, [\n                2,\n                5\n            ]),\n            o($V0, [\n                2,\n                6\n            ]),\n            o($V0, [\n                2,\n                8\n            ]),\n            {\n                13: [\n                    1,\n                    19\n                ]\n            },\n            {\n                15: [\n                    1,\n                    20\n                ]\n            },\n            o($V0, [\n                2,\n                11\n            ]),\n            o($V0, [\n                2,\n                12\n            ]),\n            o($V0, [\n                2,\n                13\n            ]),\n            o($V0, [\n                2,\n                14\n            ]),\n            o($V0, [\n                2,\n                15\n            ]),\n            o($V0, [\n                2,\n                16\n            ]),\n            o($V0, [\n                2,\n                4\n            ]),\n            o($V0, [\n                2,\n                9\n            ]),\n            o($V0, [\n                2,\n                10\n            ])\n        ],\n        defaultActions: {},\n        parseError: function parseError(str, hash) {\n            if (hash.recoverable) {\n                this.trace(str);\n            } else {\n                var error = new Error(str);\n                error.hash = hash;\n                throw error;\n            }\n        },\n        parse: function parse(input) {\n            var self = this, stack = [\n                0\n            ], tstack = [], vstack = [\n                null\n            ], lstack = [], table = this.table, yytext = \"\", yylineno = 0, yyleng = 0, TERROR = 2, EOF = 1;\n            var args = lstack.slice.call(arguments, 1);\n            var lexer2 = Object.create(this.lexer);\n            var sharedState = {\n                yy: {}\n            };\n            for(var k in this.yy){\n                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n                    sharedState.yy[k] = this.yy[k];\n                }\n            }\n            lexer2.setInput(input, sharedState.yy);\n            sharedState.yy.lexer = lexer2;\n            sharedState.yy.parser = this;\n            if (typeof lexer2.yylloc == \"undefined\") {\n                lexer2.yylloc = {};\n            }\n            var yyloc = lexer2.yylloc;\n            lstack.push(yyloc);\n            var ranges = lexer2.options && lexer2.options.ranges;\n            if (typeof sharedState.yy.parseError === \"function\") {\n                this.parseError = sharedState.yy.parseError;\n            } else {\n                this.parseError = Object.getPrototypeOf(this).parseError;\n            }\n            function lex() {\n                var token;\n                token = tstack.pop() || lexer2.lex() || EOF;\n                if (typeof token !== \"number\") {\n                    if (token instanceof Array) {\n                        tstack = token;\n                        token = tstack.pop();\n                    }\n                    token = self.symbols_[token] || token;\n                }\n                return token;\n            }\n            var symbol, state, action, r, yyval = {}, p, len, newState, expected;\n            while(true){\n                state = stack[stack.length - 1];\n                if (this.defaultActions[state]) {\n                    action = this.defaultActions[state];\n                } else {\n                    if (symbol === null || typeof symbol == \"undefined\") {\n                        symbol = lex();\n                    }\n                    action = table[state] && table[state][symbol];\n                }\n                if (typeof action === \"undefined\" || !action.length || !action[0]) {\n                    var errStr = \"\";\n                    expected = [];\n                    for(p in table[state]){\n                        if (this.terminals_[p] && p > TERROR) {\n                            expected.push(\"'\" + this.terminals_[p] + \"'\");\n                        }\n                    }\n                    if (lexer2.showPosition) {\n                        errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n                    } else {\n                        errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n                    }\n                    this.parseError(errStr, {\n                        text: lexer2.match,\n                        token: this.terminals_[symbol] || symbol,\n                        line: lexer2.yylineno,\n                        loc: yyloc,\n                        expected\n                    });\n                }\n                if (action[0] instanceof Array && action.length > 1) {\n                    throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n                }\n                switch(action[0]){\n                    case 1:\n                        stack.push(symbol);\n                        vstack.push(lexer2.yytext);\n                        lstack.push(lexer2.yylloc);\n                        stack.push(action[1]);\n                        symbol = null;\n                        {\n                            yyleng = lexer2.yyleng;\n                            yytext = lexer2.yytext;\n                            yylineno = lexer2.yylineno;\n                            yyloc = lexer2.yylloc;\n                        }\n                        break;\n                    case 2:\n                        len = this.productions_[action[1]][1];\n                        yyval.$ = vstack[vstack.length - len];\n                        yyval._$ = {\n                            first_line: lstack[lstack.length - (len || 1)].first_line,\n                            last_line: lstack[lstack.length - 1].last_line,\n                            first_column: lstack[lstack.length - (len || 1)].first_column,\n                            last_column: lstack[lstack.length - 1].last_column\n                        };\n                        if (ranges) {\n                            yyval._$.range = [\n                                lstack[lstack.length - (len || 1)].range[0],\n                                lstack[lstack.length - 1].range[1]\n                            ];\n                        }\n                        r = this.performAction.apply(yyval, [\n                            yytext,\n                            yyleng,\n                            yylineno,\n                            sharedState.yy,\n                            action[1],\n                            vstack,\n                            lstack\n                        ].concat(args));\n                        if (typeof r !== \"undefined\") {\n                            return r;\n                        }\n                        if (len) {\n                            stack = stack.slice(0, -1 * len * 2);\n                            vstack = vstack.slice(0, -1 * len);\n                            lstack = lstack.slice(0, -1 * len);\n                        }\n                        stack.push(this.productions_[action[1]][0]);\n                        vstack.push(yyval.$);\n                        lstack.push(yyval._$);\n                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n                        stack.push(newState);\n                        break;\n                    case 3:\n                        return true;\n                }\n            }\n            return true;\n        }\n    };\n    var lexer = function() {\n        var lexer2 = {\n            EOF: 1,\n            parseError: function parseError(str, hash) {\n                if (this.yy.parser) {\n                    this.yy.parser.parseError(str, hash);\n                } else {\n                    throw new Error(str);\n                }\n            },\n            // resets the lexer, sets new input\n            setInput: function(input, yy) {\n                this.yy = yy || this.yy || {};\n                this._input = input;\n                this._more = this._backtrack = this.done = false;\n                this.yylineno = this.yyleng = 0;\n                this.yytext = this.matched = this.match = \"\";\n                this.conditionStack = [\n                    \"INITIAL\"\n                ];\n                this.yylloc = {\n                    first_line: 1,\n                    first_column: 0,\n                    last_line: 1,\n                    last_column: 0\n                };\n                if (this.options.ranges) {\n                    this.yylloc.range = [\n                        0,\n                        0\n                    ];\n                }\n                this.offset = 0;\n                return this;\n            },\n            // consumes and returns one char from the input\n            input: function() {\n                var ch = this._input[0];\n                this.yytext += ch;\n                this.yyleng++;\n                this.offset++;\n                this.match += ch;\n                this.matched += ch;\n                var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n                if (lines) {\n                    this.yylineno++;\n                    this.yylloc.last_line++;\n                } else {\n                    this.yylloc.last_column++;\n                }\n                if (this.options.ranges) {\n                    this.yylloc.range[1]++;\n                }\n                this._input = this._input.slice(1);\n                return ch;\n            },\n            // unshifts one char (or a string) into the input\n            unput: function(ch) {\n                var len = ch.length;\n                var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n                this._input = ch + this._input;\n                this.yytext = this.yytext.substr(0, this.yytext.length - len);\n                this.offset -= len;\n                var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n                this.match = this.match.substr(0, this.match.length - 1);\n                this.matched = this.matched.substr(0, this.matched.length - 1);\n                if (lines.length - 1) {\n                    this.yylineno -= lines.length - 1;\n                }\n                var r = this.yylloc.range;\n                this.yylloc = {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.yylineno + 1,\n                    first_column: this.yylloc.first_column,\n                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n                };\n                if (this.options.ranges) {\n                    this.yylloc.range = [\n                        r[0],\n                        r[0] + this.yyleng - len\n                    ];\n                }\n                this.yyleng = this.yytext.length;\n                return this;\n            },\n            // When called from action, caches matched text and appends it on next action\n            more: function() {\n                this._more = true;\n                return this;\n            },\n            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n            reject: function() {\n                if (this.options.backtrack_lexer) {\n                    this._backtrack = true;\n                } else {\n                    return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n                        text: \"\",\n                        token: null,\n                        line: this.yylineno\n                    });\n                }\n                return this;\n            },\n            // retain first n characters of the match\n            less: function(n) {\n                this.unput(this.match.slice(n));\n            },\n            // displays already matched input, i.e. for error messages\n            pastInput: function() {\n                var past = this.matched.substr(0, this.matched.length - this.match.length);\n                return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n            },\n            // displays upcoming input, i.e. for error messages\n            upcomingInput: function() {\n                var next = this.match;\n                if (next.length < 20) {\n                    next += this._input.substr(0, 20 - next.length);\n                }\n                return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n            },\n            // displays the character position where the lexing error occurred, i.e. for error messages\n            showPosition: function() {\n                var pre = this.pastInput();\n                var c = new Array(pre.length + 1).join(\"-\");\n                return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n            },\n            // test the lexed token: return FALSE when not a match, otherwise return token\n            test_match: function(match, indexed_rule) {\n                var token, lines, backup;\n                if (this.options.backtrack_lexer) {\n                    backup = {\n                        yylineno: this.yylineno,\n                        yylloc: {\n                            first_line: this.yylloc.first_line,\n                            last_line: this.last_line,\n                            first_column: this.yylloc.first_column,\n                            last_column: this.yylloc.last_column\n                        },\n                        yytext: this.yytext,\n                        match: this.match,\n                        matches: this.matches,\n                        matched: this.matched,\n                        yyleng: this.yyleng,\n                        offset: this.offset,\n                        _more: this._more,\n                        _input: this._input,\n                        yy: this.yy,\n                        conditionStack: this.conditionStack.slice(0),\n                        done: this.done\n                    };\n                    if (this.options.ranges) {\n                        backup.yylloc.range = this.yylloc.range.slice(0);\n                    }\n                }\n                lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n                if (lines) {\n                    this.yylineno += lines.length;\n                }\n                this.yylloc = {\n                    first_line: this.yylloc.last_line,\n                    last_line: this.yylineno + 1,\n                    first_column: this.yylloc.last_column,\n                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n                };\n                this.yytext += match[0];\n                this.match += match[0];\n                this.matches = match;\n                this.yyleng = this.yytext.length;\n                if (this.options.ranges) {\n                    this.yylloc.range = [\n                        this.offset,\n                        this.offset += this.yyleng\n                    ];\n                }\n                this._more = false;\n                this._backtrack = false;\n                this._input = this._input.slice(match[0].length);\n                this.matched += match[0];\n                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n                if (this.done && this._input) {\n                    this.done = false;\n                }\n                if (token) {\n                    return token;\n                } else if (this._backtrack) {\n                    for(var k in backup){\n                        this[k] = backup[k];\n                    }\n                    return false;\n                }\n                return false;\n            },\n            // return next match in input\n            next: function() {\n                if (this.done) {\n                    return this.EOF;\n                }\n                if (!this._input) {\n                    this.done = true;\n                }\n                var token, match, tempMatch, index;\n                if (!this._more) {\n                    this.yytext = \"\";\n                    this.match = \"\";\n                }\n                var rules = this._currentRules();\n                for(var i = 0; i < rules.length; i++){\n                    tempMatch = this._input.match(this.rules[rules[i]]);\n                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                        match = tempMatch;\n                        index = i;\n                        if (this.options.backtrack_lexer) {\n                            token = this.test_match(tempMatch, rules[i]);\n                            if (token !== false) {\n                                return token;\n                            } else if (this._backtrack) {\n                                match = false;\n                                continue;\n                            } else {\n                                return false;\n                            }\n                        } else if (!this.options.flex) {\n                            break;\n                        }\n                    }\n                }\n                if (match) {\n                    token = this.test_match(match, rules[index]);\n                    if (token !== false) {\n                        return token;\n                    }\n                    return false;\n                }\n                if (this._input === \"\") {\n                    return this.EOF;\n                } else {\n                    return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n                        text: \"\",\n                        token: null,\n                        line: this.yylineno\n                    });\n                }\n            },\n            // return next match that has a token\n            lex: function lex() {\n                var r = this.next();\n                if (r) {\n                    return r;\n                } else {\n                    return this.lex();\n                }\n            },\n            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n            begin: function begin(condition) {\n                this.conditionStack.push(condition);\n            },\n            // pop the previously active lexer condition state off the condition stack\n            popState: function popState() {\n                var n = this.conditionStack.length - 1;\n                if (n > 0) {\n                    return this.conditionStack.pop();\n                } else {\n                    return this.conditionStack[0];\n                }\n            },\n            // produce the lexer rule set which is active for the currently active lexer condition state\n            _currentRules: function _currentRules() {\n                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n                } else {\n                    return this.conditions[\"INITIAL\"].rules;\n                }\n            },\n            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n            topState: function topState(n) {\n                n = this.conditionStack.length - 1 - Math.abs(n || 0);\n                if (n >= 0) {\n                    return this.conditionStack[n];\n                } else {\n                    return \"INITIAL\";\n                }\n            },\n            // alias for begin(condition)\n            pushState: function pushState(condition) {\n                this.begin(condition);\n            },\n            // return the number of states currently on the stack\n            stateStackSize: function stateStackSize() {\n                return this.conditionStack.length;\n            },\n            options: {\n                \"case-insensitive\": true\n            },\n            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n                switch($avoiding_name_collisions){\n                    case 0:\n                        break;\n                    case 1:\n                        break;\n                    case 2:\n                        return 10;\n                    case 3:\n                        break;\n                    case 4:\n                        break;\n                    case 5:\n                        return 4;\n                    case 6:\n                        return 11;\n                    case 7:\n                        this.begin(\"acc_title\");\n                        return 12;\n                    case 8:\n                        this.popState();\n                        return \"acc_title_value\";\n                    case 9:\n                        this.begin(\"acc_descr\");\n                        return 14;\n                    case 10:\n                        this.popState();\n                        return \"acc_descr_value\";\n                    case 11:\n                        this.begin(\"acc_descr_multiline\");\n                        break;\n                    case 12:\n                        this.popState();\n                        break;\n                    case 13:\n                        return \"acc_descr_multiline_value\";\n                    case 14:\n                        return 17;\n                    case 15:\n                        return 21;\n                    case 16:\n                        return 20;\n                    case 17:\n                        return 6;\n                    case 18:\n                        return \"INVALID\";\n                }\n            },\n            rules: [\n                /^(?:%(?!\\{)[^\\n]*)/i,\n                /^(?:[^\\}]%%[^\\n]*)/i,\n                /^(?:[\\n]+)/i,\n                /^(?:\\s+)/i,\n                /^(?:#[^\\n]*)/i,\n                /^(?:timeline\\b)/i,\n                /^(?:title\\s[^#\\n;]+)/i,\n                /^(?:accTitle\\s*:\\s*)/i,\n                /^(?:(?!\\n||)*[^\\n]*)/i,\n                /^(?:accDescr\\s*:\\s*)/i,\n                /^(?:(?!\\n||)*[^\\n]*)/i,\n                /^(?:accDescr\\s*\\{\\s*)/i,\n                /^(?:[\\}])/i,\n                /^(?:[^\\}]*)/i,\n                /^(?:section\\s[^#:\\n;]+)/i,\n                /^(?::\\s[^#:\\n;]+)/i,\n                /^(?:[^#:\\n;]+)/i,\n                /^(?:$)/i,\n                /^(?:.)/i\n            ],\n            conditions: {\n                \"acc_descr_multiline\": {\n                    \"rules\": [\n                        12,\n                        13\n                    ],\n                    \"inclusive\": false\n                },\n                \"acc_descr\": {\n                    \"rules\": [\n                        10\n                    ],\n                    \"inclusive\": false\n                },\n                \"acc_title\": {\n                    \"rules\": [\n                        8\n                    ],\n                    \"inclusive\": false\n                },\n                \"INITIAL\": {\n                    \"rules\": [\n                        0,\n                        1,\n                        2,\n                        3,\n                        4,\n                        5,\n                        6,\n                        7,\n                        9,\n                        11,\n                        14,\n                        15,\n                        16,\n                        17,\n                        18\n                    ],\n                    \"inclusive\": true\n                }\n            }\n        };\n        return lexer2;\n    }();\n    parser2.lexer = lexer;\n    function Parser() {\n        this.yy = {};\n    }\n    Parser.prototype = parser2;\n    parser2.Parser = Parser;\n    return new Parser();\n}();\nparser.parser = parser;\nconst parser$1 = parser;\nlet currentSection = \"\";\nlet currentTaskId = 0;\nconst sections = [];\nconst tasks = [];\nconst rawTasks = [];\nconst getCommonDb = ()=>_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.K;\nconst clear = function() {\n    sections.length = 0;\n    tasks.length = 0;\n    currentSection = \"\";\n    rawTasks.length = 0;\n    (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.t)();\n};\nconst addSection = function(txt) {\n    currentSection = txt;\n    sections.push(txt);\n};\nconst getSections = function() {\n    return sections;\n};\nconst getTasks = function() {\n    let allItemsProcessed = compileTasks();\n    const maxDepth = 100;\n    let iterationCount = 0;\n    while(!allItemsProcessed && iterationCount < maxDepth){\n        allItemsProcessed = compileTasks();\n        iterationCount++;\n    }\n    tasks.push(...rawTasks);\n    return tasks;\n};\nconst addTask = function(period, length, event) {\n    const rawTask = {\n        id: currentTaskId++,\n        section: currentSection,\n        type: currentSection,\n        task: period,\n        score: length ? length : 0,\n        //if event is defined, then add it the events array\n        events: event ? [\n            event\n        ] : []\n    };\n    rawTasks.push(rawTask);\n};\nconst addEvent = function(event) {\n    const currentTask = rawTasks.find((task)=>task.id === currentTaskId - 1);\n    currentTask.events.push(event);\n};\nconst addTaskOrg = function(descr) {\n    const newTask = {\n        section: currentSection,\n        type: currentSection,\n        description: descr,\n        task: descr,\n        classes: []\n    };\n    tasks.push(newTask);\n};\nconst compileTasks = function() {\n    const compileTask = function(pos) {\n        return rawTasks[pos].processed;\n    };\n    let allProcessed = true;\n    for (const [i, rawTask] of rawTasks.entries()){\n        compileTask(i);\n        allProcessed = allProcessed && rawTask.processed;\n    }\n    return allProcessed;\n};\nconst timelineDb = {\n    clear,\n    getCommonDb,\n    addSection,\n    getSections,\n    getTasks,\n    addTask,\n    addTaskOrg,\n    addEvent\n};\nconst db = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    addEvent,\n    addSection,\n    addTask,\n    addTaskOrg,\n    clear,\n    default: timelineDb,\n    getCommonDb,\n    getSections,\n    getTasks\n}, Symbol.toStringTag, {\n    value: \"Module\"\n}));\nconst MAX_SECTIONS = 12;\nconst drawRect = function(elem, rectData) {\n    const rectElem = elem.append(\"rect\");\n    rectElem.attr(\"x\", rectData.x);\n    rectElem.attr(\"y\", rectData.y);\n    rectElem.attr(\"fill\", rectData.fill);\n    rectElem.attr(\"stroke\", rectData.stroke);\n    rectElem.attr(\"width\", rectData.width);\n    rectElem.attr(\"height\", rectData.height);\n    rectElem.attr(\"rx\", rectData.rx);\n    rectElem.attr(\"ry\", rectData.ry);\n    if (rectData.class !== void 0) {\n        rectElem.attr(\"class\", rectData.class);\n    }\n    return rectElem;\n};\nconst drawFace = function(element, faceData) {\n    const radius = 15;\n    const circleElement = element.append(\"circle\").attr(\"cx\", faceData.cx).attr(\"cy\", faceData.cy).attr(\"class\", \"face\").attr(\"r\", radius).attr(\"stroke-width\", 2).attr(\"overflow\", \"visible\");\n    const face = element.append(\"g\");\n    face.append(\"circle\").attr(\"cx\", faceData.cx - radius / 3).attr(\"cy\", faceData.cy - radius / 3).attr(\"r\", 1.5).attr(\"stroke-width\", 2).attr(\"fill\", \"#666\").attr(\"stroke\", \"#666\");\n    face.append(\"circle\").attr(\"cx\", faceData.cx + radius / 3).attr(\"cy\", faceData.cy - radius / 3).attr(\"r\", 1.5).attr(\"stroke-width\", 2).attr(\"fill\", \"#666\").attr(\"stroke\", \"#666\");\n    function smile(face2) {\n        const arc$1 = (0,d3__WEBPACK_IMPORTED_MODULE_0__.arc)().startAngle(Math.PI / 2).endAngle(3 * (Math.PI / 2)).innerRadius(radius / 2).outerRadius(radius / 2.2);\n        face2.append(\"path\").attr(\"class\", \"mouth\").attr(\"d\", arc$1).attr(\"transform\", \"translate(\" + faceData.cx + \",\" + (faceData.cy + 2) + \")\");\n    }\n    function sad(face2) {\n        const arc$1 = (0,d3__WEBPACK_IMPORTED_MODULE_0__.arc)().startAngle(3 * Math.PI / 2).endAngle(5 * (Math.PI / 2)).innerRadius(radius / 2).outerRadius(radius / 2.2);\n        face2.append(\"path\").attr(\"class\", \"mouth\").attr(\"d\", arc$1).attr(\"transform\", \"translate(\" + faceData.cx + \",\" + (faceData.cy + 7) + \")\");\n    }\n    function ambivalent(face2) {\n        face2.append(\"line\").attr(\"class\", \"mouth\").attr(\"stroke\", 2).attr(\"x1\", faceData.cx - 5).attr(\"y1\", faceData.cy + 7).attr(\"x2\", faceData.cx + 5).attr(\"y2\", faceData.cy + 7).attr(\"class\", \"mouth\").attr(\"stroke-width\", \"1px\").attr(\"stroke\", \"#666\");\n    }\n    if (faceData.score > 3) {\n        smile(face);\n    } else if (faceData.score < 3) {\n        sad(face);\n    } else {\n        ambivalent(face);\n    }\n    return circleElement;\n};\nconst drawCircle = function(element, circleData) {\n    const circleElement = element.append(\"circle\");\n    circleElement.attr(\"cx\", circleData.cx);\n    circleElement.attr(\"cy\", circleData.cy);\n    circleElement.attr(\"class\", \"actor-\" + circleData.pos);\n    circleElement.attr(\"fill\", circleData.fill);\n    circleElement.attr(\"stroke\", circleData.stroke);\n    circleElement.attr(\"r\", circleData.r);\n    if (circleElement.class !== void 0) {\n        circleElement.attr(\"class\", circleElement.class);\n    }\n    if (circleData.title !== void 0) {\n        circleElement.append(\"title\").text(circleData.title);\n    }\n    return circleElement;\n};\nconst drawText = function(elem, textData) {\n    const nText = textData.text.replace(/<br\\s*\\/?>/gi, \" \");\n    const textElem = elem.append(\"text\");\n    textElem.attr(\"x\", textData.x);\n    textElem.attr(\"y\", textData.y);\n    textElem.attr(\"class\", \"legend\");\n    textElem.style(\"text-anchor\", textData.anchor);\n    if (textData.class !== void 0) {\n        textElem.attr(\"class\", textData.class);\n    }\n    const span = textElem.append(\"tspan\");\n    span.attr(\"x\", textData.x + textData.textMargin * 2);\n    span.text(nText);\n    return textElem;\n};\nconst drawLabel = function(elem, txtObject) {\n    function genPoints(x, y, width, height, cut) {\n        return x + \",\" + y + \" \" + (x + width) + \",\" + y + \" \" + (x + width) + \",\" + (y + height - cut) + \" \" + (x + width - cut * 1.2) + \",\" + (y + height) + \" \" + x + \",\" + (y + height);\n    }\n    const polygon = elem.append(\"polygon\");\n    polygon.attr(\"points\", genPoints(txtObject.x, txtObject.y, 50, 20, 7));\n    polygon.attr(\"class\", \"labelBox\");\n    txtObject.y = txtObject.y + txtObject.labelMargin;\n    txtObject.x = txtObject.x + 0.5 * txtObject.labelMargin;\n    drawText(elem, txtObject);\n};\nconst drawSection = function(elem, section, conf) {\n    const g = elem.append(\"g\");\n    const rect = getNoteRect();\n    rect.x = section.x;\n    rect.y = section.y;\n    rect.fill = section.fill;\n    rect.width = conf.width;\n    rect.height = conf.height;\n    rect.class = \"journey-section section-type-\" + section.num;\n    rect.rx = 3;\n    rect.ry = 3;\n    drawRect(g, rect);\n    _drawTextCandidateFunc(conf)(section.text, g, rect.x, rect.y, rect.width, rect.height, {\n        class: \"journey-section section-type-\" + section.num\n    }, conf, section.colour);\n};\nlet taskCount = -1;\nconst drawTask = function(elem, task, conf) {\n    const center = task.x + conf.width / 2;\n    const g = elem.append(\"g\");\n    taskCount++;\n    const maxHeight = 300 + 5 * 30;\n    g.append(\"line\").attr(\"id\", \"task\" + taskCount).attr(\"x1\", center).attr(\"y1\", task.y).attr(\"x2\", center).attr(\"y2\", maxHeight).attr(\"class\", \"task-line\").attr(\"stroke-width\", \"1px\").attr(\"stroke-dasharray\", \"4 2\").attr(\"stroke\", \"#666\");\n    drawFace(g, {\n        cx: center,\n        cy: 300 + (5 - task.score) * 30,\n        score: task.score\n    });\n    const rect = getNoteRect();\n    rect.x = task.x;\n    rect.y = task.y;\n    rect.fill = task.fill;\n    rect.width = conf.width;\n    rect.height = conf.height;\n    rect.class = \"task task-type-\" + task.num;\n    rect.rx = 3;\n    rect.ry = 3;\n    drawRect(g, rect);\n    task.x + 14;\n    _drawTextCandidateFunc(conf)(task.task, g, rect.x, rect.y, rect.width, rect.height, {\n        class: \"task\"\n    }, conf, task.colour);\n};\nconst drawBackgroundRect = function(elem, bounds) {\n    const rectElem = drawRect(elem, {\n        x: bounds.startx,\n        y: bounds.starty,\n        width: bounds.stopx - bounds.startx,\n        height: bounds.stopy - bounds.starty,\n        fill: bounds.fill,\n        class: \"rect\"\n    });\n    rectElem.lower();\n};\nconst getTextObj = function() {\n    return {\n        x: 0,\n        y: 0,\n        fill: void 0,\n        \"text-anchor\": \"start\",\n        width: 100,\n        height: 100,\n        textMargin: 0,\n        rx: 0,\n        ry: 0\n    };\n};\nconst getNoteRect = function() {\n    return {\n        x: 0,\n        y: 0,\n        width: 100,\n        anchor: \"start\",\n        height: 100,\n        rx: 0,\n        ry: 0\n    };\n};\nconst _drawTextCandidateFunc = function() {\n    function byText(content, g, x, y, width, height, textAttrs, colour) {\n        const text = g.append(\"text\").attr(\"x\", x + width / 2).attr(\"y\", y + height / 2 + 5).style(\"font-color\", colour).style(\"text-anchor\", \"middle\").text(content);\n        _setTextAttrs(text, textAttrs);\n    }\n    function byTspan(content, g, x, y, width, height, textAttrs, conf, colour) {\n        const { taskFontSize, taskFontFamily } = conf;\n        const lines = content.split(/<br\\s*\\/?>/gi);\n        for(let i = 0; i < lines.length; i++){\n            const dy = i * taskFontSize - taskFontSize * (lines.length - 1) / 2;\n            const text = g.append(\"text\").attr(\"x\", x + width / 2).attr(\"y\", y).attr(\"fill\", colour).style(\"text-anchor\", \"middle\").style(\"font-size\", taskFontSize).style(\"font-family\", taskFontFamily);\n            text.append(\"tspan\").attr(\"x\", x + width / 2).attr(\"dy\", dy).text(lines[i]);\n            text.attr(\"y\", y + height / 2).attr(\"dominant-baseline\", \"central\").attr(\"alignment-baseline\", \"central\");\n            _setTextAttrs(text, textAttrs);\n        }\n    }\n    function byFo(content, g, x, y, width, height, textAttrs, conf) {\n        const body = g.append(\"switch\");\n        const f = body.append(\"foreignObject\").attr(\"x\", x).attr(\"y\", y).attr(\"width\", width).attr(\"height\", height).attr(\"position\", \"fixed\");\n        const text = f.append(\"xhtml:div\").style(\"display\", \"table\").style(\"height\", \"100%\").style(\"width\", \"100%\");\n        text.append(\"div\").attr(\"class\", \"label\").style(\"display\", \"table-cell\").style(\"text-align\", \"center\").style(\"vertical-align\", \"middle\").text(content);\n        byTspan(content, body, x, y, width, height, textAttrs, conf);\n        _setTextAttrs(text, textAttrs);\n    }\n    function _setTextAttrs(toText, fromTextAttrsDict) {\n        for(const key in fromTextAttrsDict){\n            if (key in fromTextAttrsDict) {\n                toText.attr(key, fromTextAttrsDict[key]);\n            }\n        }\n    }\n    return function(conf) {\n        return conf.textPlacement === \"fo\" ? byFo : conf.textPlacement === \"old\" ? byText : byTspan;\n    };\n}();\nconst initGraphics = function(graphics) {\n    graphics.append(\"defs\").append(\"marker\").attr(\"id\", \"arrowhead\").attr(\"refX\", 5).attr(\"refY\", 2).attr(\"markerWidth\", 6).attr(\"markerHeight\", 4).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 0,0 V 4 L6,2 Z\");\n};\nfunction wrap(text, width) {\n    text.each(function() {\n        var text2 = (0,d3__WEBPACK_IMPORTED_MODULE_0__.select)(this), words = text2.text().split(/(\\s+|<br>)/).reverse(), word, line = [], lineHeight = 1.1, y = text2.attr(\"y\"), dy = parseFloat(text2.attr(\"dy\")), tspan = text2.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n        for(let j = 0; j < words.length; j++){\n            word = words[words.length - 1 - j];\n            line.push(word);\n            tspan.text(line.join(\" \").trim());\n            if (tspan.node().getComputedTextLength() > width || word === \"<br>\") {\n                line.pop();\n                tspan.text(line.join(\" \").trim());\n                if (word === \"<br>\") {\n                    line = [\n                        \"\"\n                    ];\n                } else {\n                    line = [\n                        word\n                    ];\n                }\n                tspan = text2.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", lineHeight + \"em\").text(word);\n            }\n        }\n    });\n}\nconst drawNode = function(elem, node, fullSection, conf) {\n    const section = fullSection % MAX_SECTIONS - 1;\n    const nodeElem = elem.append(\"g\");\n    node.section = section;\n    nodeElem.attr(\"class\", (node.class ? node.class + \" \" : \"\") + \"timeline-node \" + (\"section-\" + section));\n    const bkgElem = nodeElem.append(\"g\");\n    const textElem = nodeElem.append(\"g\");\n    const txt = textElem.append(\"text\").text(node.descr).attr(\"dy\", \"1em\").attr(\"alignment-baseline\", \"middle\").attr(\"dominant-baseline\", \"middle\").attr(\"text-anchor\", \"middle\").call(wrap, node.width);\n    const bbox = txt.node().getBBox();\n    const fontSize = conf.fontSize && conf.fontSize.replace ? conf.fontSize.replace(\"px\", \"\") : conf.fontSize;\n    node.height = bbox.height + fontSize * 1.1 * 0.5 + node.padding;\n    node.height = Math.max(node.height, node.maxHeight);\n    node.width = node.width + 2 * node.padding;\n    textElem.attr(\"transform\", \"translate(\" + node.width / 2 + \", \" + node.padding / 2 + \")\");\n    defaultBkg(bkgElem, node, section);\n    return node;\n};\nconst getVirtualNodeHeight = function(elem, node, conf) {\n    const textElem = elem.append(\"g\");\n    const txt = textElem.append(\"text\").text(node.descr).attr(\"dy\", \"1em\").attr(\"alignment-baseline\", \"middle\").attr(\"dominant-baseline\", \"middle\").attr(\"text-anchor\", \"middle\").call(wrap, node.width);\n    const bbox = txt.node().getBBox();\n    const fontSize = conf.fontSize && conf.fontSize.replace ? conf.fontSize.replace(\"px\", \"\") : conf.fontSize;\n    textElem.remove();\n    return bbox.height + fontSize * 1.1 * 0.5 + node.padding;\n};\nconst defaultBkg = function(elem, node, section) {\n    const rd = 5;\n    elem.append(\"path\").attr(\"id\", \"node-\" + node.id).attr(\"class\", \"node-bkg node-\" + node.type).attr(\"d\", \"M0 \".concat(node.height - rd, \" v\").concat(-node.height + 2 * rd, \" q0,-5 5,-5 h\").concat(node.width - 2 * rd, \" q5,0 5,5 v\").concat(node.height - rd, \" H0 Z\"));\n    elem.append(\"line\").attr(\"class\", \"node-line-\" + section).attr(\"x1\", 0).attr(\"y1\", node.height).attr(\"x2\", node.width).attr(\"y2\", node.height);\n};\nconst svgDraw = {\n    drawRect,\n    drawCircle,\n    drawSection,\n    drawText,\n    drawLabel,\n    drawTask,\n    drawBackgroundRect,\n    getTextObj,\n    getNoteRect,\n    initGraphics,\n    drawNode,\n    getVirtualNodeHeight\n};\nconst draw = function(text, id, version, diagObj) {\n    var _a, _b;\n    const conf = (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.c)();\n    var _conf_leftMargin;\n    const LEFT_MARGIN = (_conf_leftMargin = conf.leftMargin) !== null && _conf_leftMargin !== void 0 ? _conf_leftMargin : 50;\n    _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"timeline\", diagObj.db);\n    const securityLevel = conf.securityLevel;\n    let sandboxElement;\n    if (securityLevel === \"sandbox\") {\n        sandboxElement = (0,d3__WEBPACK_IMPORTED_MODULE_0__.select)(\"#i\" + id);\n    }\n    const root = securityLevel === \"sandbox\" ? (0,d3__WEBPACK_IMPORTED_MODULE_0__.select)(sandboxElement.nodes()[0].contentDocument.body) : (0,d3__WEBPACK_IMPORTED_MODULE_0__.select)(\"body\");\n    const svg = root.select(\"#\" + id);\n    svg.append(\"g\");\n    const tasks2 = diagObj.db.getTasks();\n    const title = diagObj.db.getCommonDb().getDiagramTitle();\n    _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"task\", tasks2);\n    svgDraw.initGraphics(svg);\n    const sections2 = diagObj.db.getSections();\n    _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"sections\", sections2);\n    let maxSectionHeight = 0;\n    let maxTaskHeight = 0;\n    let depthY = 0;\n    let sectionBeginY = 0;\n    let masterX = 50 + LEFT_MARGIN;\n    let masterY = 50;\n    sectionBeginY = 50;\n    let sectionNumber = 0;\n    let hasSections = true;\n    sections2.forEach(function(section) {\n        const sectionNode = {\n            number: sectionNumber,\n            descr: section,\n            section: sectionNumber,\n            width: 150,\n            padding: 20,\n            maxHeight: maxSectionHeight\n        };\n        const sectionHeight = svgDraw.getVirtualNodeHeight(svg, sectionNode, conf);\n        _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"sectionHeight before draw\", sectionHeight);\n        maxSectionHeight = Math.max(maxSectionHeight, sectionHeight + 20);\n    });\n    let maxEventCount = 0;\n    let maxEventLineLength = 0;\n    _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"tasks.length\", tasks2.length);\n    for (const [i, task] of tasks2.entries()){\n        const taskNode = {\n            number: i,\n            descr: task,\n            section: task.section,\n            width: 150,\n            padding: 20,\n            maxHeight: maxTaskHeight\n        };\n        const taskHeight = svgDraw.getVirtualNodeHeight(svg, taskNode, conf);\n        _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"taskHeight before draw\", taskHeight);\n        maxTaskHeight = Math.max(maxTaskHeight, taskHeight + 20);\n        maxEventCount = Math.max(maxEventCount, task.events.length);\n        let maxEventLineLengthTemp = 0;\n        for(let j = 0; j < task.events.length; j++){\n            const event = task.events[j];\n            const eventNode = {\n                descr: event,\n                section: task.section,\n                number: task.section,\n                width: 150,\n                padding: 20,\n                maxHeight: 50\n            };\n            maxEventLineLengthTemp += svgDraw.getVirtualNodeHeight(svg, eventNode, conf);\n        }\n        maxEventLineLength = Math.max(maxEventLineLength, maxEventLineLengthTemp);\n    }\n    _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"maxSectionHeight before draw\", maxSectionHeight);\n    _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"maxTaskHeight before draw\", maxTaskHeight);\n    if (sections2 && sections2.length > 0) {\n        sections2.forEach((section)=>{\n            const tasksForSection = tasks2.filter((task)=>task.section === section);\n            const sectionNode = {\n                number: sectionNumber,\n                descr: section,\n                section: sectionNumber,\n                width: 200 * Math.max(tasksForSection.length, 1) - 50,\n                padding: 20,\n                maxHeight: maxSectionHeight\n            };\n            _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"sectionNode\", sectionNode);\n            const sectionNodeWrapper = svg.append(\"g\");\n            const node = svgDraw.drawNode(sectionNodeWrapper, sectionNode, sectionNumber, conf);\n            _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"sectionNode output\", node);\n            sectionNodeWrapper.attr(\"transform\", \"translate(\".concat(masterX, \", \").concat(sectionBeginY, \")\"));\n            masterY += maxSectionHeight + 50;\n            if (tasksForSection.length > 0) {\n                drawTasks(svg, tasksForSection, sectionNumber, masterX, masterY, maxTaskHeight, conf, maxEventCount, maxEventLineLength, maxSectionHeight, false);\n            }\n            masterX += 200 * Math.max(tasksForSection.length, 1);\n            masterY = sectionBeginY;\n            sectionNumber++;\n        });\n    } else {\n        hasSections = false;\n        drawTasks(svg, tasks2, sectionNumber, masterX, masterY, maxTaskHeight, conf, maxEventCount, maxEventLineLength, maxSectionHeight, true);\n    }\n    const box = svg.node().getBBox();\n    _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"bounds\", box);\n    if (title) {\n        svg.append(\"text\").text(title).attr(\"x\", box.width / 2 - LEFT_MARGIN).attr(\"font-size\", \"4ex\").attr(\"font-weight\", \"bold\").attr(\"y\", 20);\n    }\n    depthY = hasSections ? maxSectionHeight + maxTaskHeight + 150 : maxTaskHeight + 100;\n    const lineWrapper = svg.append(\"g\").attr(\"class\", \"lineWrapper\");\n    lineWrapper.append(\"line\").attr(\"x1\", LEFT_MARGIN).attr(\"y1\", depthY).attr(\"x2\", box.width + 3 * LEFT_MARGIN).attr(\"y2\", depthY).attr(\"stroke-width\", 4).attr(\"stroke\", \"black\").attr(\"marker-end\", \"url(#arrowhead)\");\n    var _ref, _ref1;\n    (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.o)(void 0, svg, (_ref = (_a = conf.timeline) == null ? void 0 : _a.padding) !== null && _ref !== void 0 ? _ref : 50, (_ref1 = (_b = conf.timeline) == null ? void 0 : _b.useMaxWidth) !== null && _ref1 !== void 0 ? _ref1 : false);\n};\nconst drawTasks = function(diagram2, tasks2, sectionColor, masterX, masterY, maxTaskHeight, conf, maxEventCount, maxEventLineLength, maxSectionHeight, isWithoutSections) {\n    var _a;\n    for (const task of tasks2){\n        const taskNode = {\n            descr: task.task,\n            section: sectionColor,\n            number: sectionColor,\n            width: 150,\n            padding: 20,\n            maxHeight: maxTaskHeight\n        };\n        _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"taskNode\", taskNode);\n        const taskWrapper = diagram2.append(\"g\").attr(\"class\", \"taskWrapper\");\n        const node = svgDraw.drawNode(taskWrapper, taskNode, sectionColor, conf);\n        const taskHeight = node.height;\n        _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"taskHeight after draw\", taskHeight);\n        taskWrapper.attr(\"transform\", \"translate(\".concat(masterX, \", \").concat(masterY, \")\"));\n        maxTaskHeight = Math.max(maxTaskHeight, taskHeight);\n        if (task.events) {\n            const lineWrapper = diagram2.append(\"g\").attr(\"class\", \"lineWrapper\");\n            let lineLength = maxTaskHeight;\n            masterY += 100;\n            lineLength = lineLength + drawEvents(diagram2, task.events, sectionColor, masterX, masterY, conf);\n            masterY -= 100;\n            lineWrapper.append(\"line\").attr(\"x1\", masterX + 190 / 2).attr(\"y1\", masterY + maxTaskHeight).attr(\"x2\", masterX + 190 / 2).attr(\"y2\", masterY + maxTaskHeight + (isWithoutSections ? maxTaskHeight : maxSectionHeight) + maxEventLineLength + 120).attr(\"stroke-width\", 2).attr(\"stroke\", \"black\").attr(\"marker-end\", \"url(#arrowhead)\").attr(\"stroke-dasharray\", \"5,5\");\n        }\n        masterX = masterX + 200;\n        if (isWithoutSections && !((_a = conf.timeline) == null ? void 0 : _a.disableMulticolor)) {\n            sectionColor++;\n        }\n    }\n    masterY = masterY - 10;\n};\nconst drawEvents = function(diagram2, events, sectionColor, masterX, masterY, conf) {\n    let maxEventHeight = 0;\n    const eventBeginY = masterY;\n    masterY = masterY + 100;\n    for (const event of events){\n        const eventNode = {\n            descr: event,\n            section: sectionColor,\n            number: sectionColor,\n            width: 150,\n            padding: 20,\n            maxHeight: 50\n        };\n        _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"eventNode\", eventNode);\n        const eventWrapper = diagram2.append(\"g\").attr(\"class\", \"eventWrapper\");\n        const node = svgDraw.drawNode(eventWrapper, eventNode, sectionColor, conf);\n        const eventHeight = node.height;\n        maxEventHeight = maxEventHeight + eventHeight;\n        eventWrapper.attr(\"transform\", \"translate(\".concat(masterX, \", \").concat(masterY, \")\"));\n        masterY = masterY + 10 + eventHeight;\n    }\n    masterY = eventBeginY;\n    return maxEventHeight;\n};\nconst renderer = {\n    setConf: ()=>{},\n    draw\n};\nconst genSections = (options)=>{\n    let sections2 = \"\";\n    for(let i = 0; i < options.THEME_COLOR_LIMIT; i++){\n        options[\"lineColor\" + i] = options[\"lineColor\" + i] || options[\"cScaleInv\" + i];\n        if ((0,khroma__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(options[\"lineColor\" + i])) {\n            options[\"lineColor\" + i] = (0,khroma__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(options[\"lineColor\" + i], 20);\n        } else {\n            options[\"lineColor\" + i] = (0,khroma__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(options[\"lineColor\" + i], 20);\n        }\n    }\n    for(let i = 0; i < options.THEME_COLOR_LIMIT; i++){\n        const sw = \"\" + (17 - 3 * i);\n        sections2 += \"\\n    .section-\".concat(i - 1, \" rect, .section-\").concat(i - 1, \" path, .section-\").concat(i - 1, \" circle, .section-\").concat(i - 1, \" path  {\\n      fill: \").concat(options[\"cScale\" + i], \";\\n    }\\n    .section-\").concat(i - 1, \" text {\\n     fill: \").concat(options[\"cScaleLabel\" + i], \";\\n    }\\n    .node-icon-\").concat(i - 1, \" {\\n      font-size: 40px;\\n      color: \").concat(options[\"cScaleLabel\" + i], \";\\n    }\\n    .section-edge-\").concat(i - 1, \"{\\n      stroke: \").concat(options[\"cScale\" + i], \";\\n    }\\n    .edge-depth-\").concat(i - 1, \"{\\n      stroke-width: \").concat(sw, \";\\n    }\\n    .section-\").concat(i - 1, \" line {\\n      stroke: \").concat(options[\"cScaleInv\" + i], \" ;\\n      stroke-width: 3;\\n    }\\n\\n    .lineWrapper line{\\n      stroke: \").concat(options[\"cScaleLabel\" + i], \" ;\\n    }\\n\\n    .disabled, .disabled circle, .disabled text {\\n      fill: lightgray;\\n    }\\n    .disabled text {\\n      fill: #efefef;\\n    }\\n    \");\n    }\n    return sections2;\n};\nconst getStyles = (options)=>\"\\n  .edge {\\n    stroke-width: 3;\\n  }\\n  \".concat(genSections(options), \"\\n  .section-root rect, .section-root path, .section-root circle  {\\n    fill: \").concat(options.git0, \";\\n  }\\n  .section-root text {\\n    fill: \").concat(options.gitBranchLabel0, \";\\n  }\\n  .icon-container {\\n    height:100%;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n  }\\n  .edge {\\n    fill: none;\\n  }\\n  .eventWrapper  {\\n   filter: brightness(120%);\\n  }\\n\");\nconst styles = getStyles;\nconst diagram = {\n    db,\n    renderer,\n    parser: parser$1,\n    styles\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tZXJtYWlkL2Rpc3QvdGltZWxpbmUtZGVmaW5pdGlvbi03MzJhMjYzOC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQXNIO0FBQ3JGO0FBQ2dCO0FBQzlCO0FBQ0o7QUFDa0I7QUFDZDtBQUNXO0FBQ0Y7QUFDWjtBQUNjO0FBQzlCLElBQUllLFNBQVM7SUFDWCxJQUFJUCxJQUFJLFNBQVNRLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFLEVBQUVaLENBQUM7UUFDMUIsSUFBS1ksS0FBS0EsTUFBTSxDQUFDLEdBQUdaLElBQUlVLEVBQUVHLE1BQU0sRUFBRWIsS0FBS1ksRUFBRSxDQUFDRixDQUFDLENBQUNWLEVBQUUsQ0FBQyxHQUFHVztRQUVsRCxPQUFPQztJQUNULEdBQUdFLE1BQU07UUFBQztRQUFHO1FBQUc7UUFBSTtRQUFJO1FBQUk7UUFBSTtRQUFJO1FBQUk7UUFBSTtLQUFHLEVBQUVDLE1BQU07UUFBQztRQUFHO0tBQUUsRUFBRUMsTUFBTTtRQUFDO1FBQUc7S0FBRyxFQUFFQyxNQUFNO1FBQUM7UUFBRztLQUFHLEVBQUVDLE1BQU07UUFBQztRQUFHO0tBQUcsRUFBRUMsTUFBTTtRQUFDO1FBQUc7S0FBRyxFQUFFQyxNQUFNO1FBQUM7UUFBRztLQUFHLEVBQUVDLE1BQU07UUFBQztRQUFHO0tBQUc7SUFDdkosSUFBSUMsVUFBVTtRQUNaQyxPQUFPLFNBQVNBLFNBQ2hCO1FBQ0FDLElBQUksQ0FBQztRQUNMQyxVQUFVO1lBQUUsU0FBUztZQUFHLFNBQVM7WUFBRyxZQUFZO1lBQUcsWUFBWTtZQUFHLE9BQU87WUFBRyxRQUFRO1lBQUcsU0FBUztZQUFHLGFBQWE7WUFBRyxXQUFXO1lBQUksU0FBUztZQUFJLGFBQWE7WUFBSSxtQkFBbUI7WUFBSSxhQUFhO1lBQUksbUJBQW1CO1lBQUksNkJBQTZCO1lBQUksV0FBVztZQUFJLG9CQUFvQjtZQUFJLG1CQUFtQjtZQUFJLFVBQVU7WUFB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LENBQUMsZ0JBQWdCNEQsRUFBRSxFQUFDLDZCQUl6QjVELE9BRkU0RCxJQUFJLEdBQUUsNkNBSUhBLE9BRkw1RCxPQUFPLENBQUMsZ0JBQWdCNEQsRUFBRSxFQUFDLGdDQUcxQjVELE9BREk0RCxJQUFJLEdBQUUscUJBR1JBLE9BRkY1RCxPQUFPLENBQUMsV0FBVzRELEVBQUUsRUFBQyw4QkFHaEJ1TyxPQURKdk8sSUFBSSxHQUFFLDJCQUdUQSxPQUZPdU8sSUFBRywyQkFHVG5TLE9BREQ0RCxJQUFJLEdBQUUsMkJBTUw1RCxPQUxBQSxPQUFPLENBQUMsY0FBYzRELEVBQUUsRUFBQywrRUFLRSxPQUEzQjVELE9BQU8sQ0FBQyxnQkFBZ0I0RCxFQUFFLEVBQUM7SUFVekM7SUFDQSxPQUFPNkw7QUFDVDtBQUNBLE1BQU0yQyxZQUFZLENBQUNwUyxVQUFZLDZDQU1uQkEsT0FGUmlTLFlBQVlqUyxVQUFTLG1GQUtiQSxPQUhBQSxRQUFRcVMsSUFBSSxFQUFDLDhDQUdXLE9BQXhCclMsUUFBUXNTLGVBQWUsRUFBQztBQWVwQyxNQUFNQyxTQUFTSDtBQUNmLE1BQU1JLFVBQVU7SUFDZHpMO0lBQ0FnTDtJQUNBdFcsUUFBUWtKO0lBQ1I0TjtBQUNGO0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21lcm1haWQvZGlzdC90aW1lbGluZS1kZWZpbml0aW9uLTczMmEyNjM4LmpzPzExMjYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSyBhcyBjb21tb25EYiwgdCBhcyBjbGVhciQxLCBjIGFzIGdldENvbmZpZywgbCBhcyBsb2csIG8gYXMgc2V0dXBHcmFwaFZpZXdib3ggfSBmcm9tIFwiLi9tZXJtYWlkLTkzNGQ5YmVhLmpzXCI7XG5pbXBvcnQgeyBzZWxlY3QsIGFyYyB9IGZyb20gXCJkM1wiO1xuaW1wb3J0IHsgaXNEYXJrLCBsaWdodGVuLCBkYXJrZW4gfSBmcm9tIFwia2hyb21hXCI7XG5pbXBvcnQgXCJ0cy1kZWRlbnRcIjtcbmltcG9ydCBcImRheWpzXCI7XG5pbXBvcnQgXCJAYnJhaW50cmVlL3Nhbml0aXplLXVybFwiO1xuaW1wb3J0IFwiZG9tcHVyaWZ5XCI7XG5pbXBvcnQgXCJsb2Rhc2gtZXMvbWVtb2l6ZS5qc1wiO1xuaW1wb3J0IFwibG9kYXNoLWVzL21lcmdlLmpzXCI7XG5pbXBvcnQgXCJzdHlsaXNcIjtcbmltcG9ydCBcImxvZGFzaC1lcy9pc0VtcHR5LmpzXCI7XG52YXIgcGFyc2VyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBvID0gZnVuY3Rpb24oaywgdiwgbzIsIGwpIHtcbiAgICBmb3IgKG8yID0gbzIgfHwge30sIGwgPSBrLmxlbmd0aDsgbC0tOyBvMltrW2xdXSA9IHYpXG4gICAgICA7XG4gICAgcmV0dXJuIG8yO1xuICB9LCAkVjAgPSBbNiwgOCwgMTAsIDExLCAxMiwgMTQsIDE2LCAxNywgMjAsIDIxXSwgJFYxID0gWzEsIDldLCAkVjIgPSBbMSwgMTBdLCAkVjMgPSBbMSwgMTFdLCAkVjQgPSBbMSwgMTJdLCAkVjUgPSBbMSwgMTNdLCAkVjYgPSBbMSwgMTZdLCAkVjcgPSBbMSwgMTddO1xuICB2YXIgcGFyc2VyMiA9IHtcbiAgICB0cmFjZTogZnVuY3Rpb24gdHJhY2UoKSB7XG4gICAgfSxcbiAgICB5eToge30sXG4gICAgc3ltYm9sc186IHsgXCJlcnJvclwiOiAyLCBcInN0YXJ0XCI6IDMsIFwidGltZWxpbmVcIjogNCwgXCJkb2N1bWVudFwiOiA1LCBcIkVPRlwiOiA2LCBcImxpbmVcIjogNywgXCJTUEFDRVwiOiA4LCBcInN0YXRlbWVudFwiOiA5LCBcIk5FV0xJTkVcIjogMTAsIFwidGl0bGVcIjogMTEsIFwiYWNjX3RpdGxlXCI6IDEyLCBcImFjY190aXRsZV92YWx1ZVwiOiAxMywgXCJhY2NfZGVzY3JcIjogMTQsIFwiYWNjX2Rlc2NyX3ZhbHVlXCI6IDE1LCBcImFjY19kZXNjcl9tdWx0aWxpbmVfdmFsdWVcIjogMTYsIFwic2VjdGlvblwiOiAxNywgXCJwZXJpb2Rfc3RhdGVtZW50XCI6IDE4LCBcImV2ZW50X3N0YXRlbWVudFwiOiAxOSwgXCJwZXJpb2RcIjogMjAsIFwiZXZlbnRcIjogMjEsIFwiJGFjY2VwdFwiOiAwLCBcIiRlbmRcIjogMSB9LFxuICAgIHRlcm1pbmFsc186IHsgMjogXCJlcnJvclwiLCA0OiBcInRpbWVsaW5lXCIsIDY6IFwiRU9GXCIsIDg6IFwiU1BBQ0VcIiwgMTA6IFwiTkVXTElORVwiLCAxMTogXCJ0aXRsZVwiLCAxMjogXCJhY2NfdGl0bGVcIiwgMTM6IFwiYWNjX3RpdGxlX3ZhbHVlXCIsIDE0OiBcImFjY19kZXNjclwiLCAxNTogXCJhY2NfZGVzY3JfdmFsdWVcIiwgMTY6IFwiYWNjX2Rlc2NyX211bHRpbGluZV92YWx1ZVwiLCAxNzogXCJzZWN0aW9uXCIsIDIwOiBcInBlcmlvZFwiLCAyMTogXCJldmVudFwiIH0sXG4gICAgcHJvZHVjdGlvbnNfOiBbMCwgWzMsIDNdLCBbNSwgMF0sIFs1LCAyXSwgWzcsIDJdLCBbNywgMV0sIFs3LCAxXSwgWzcsIDFdLCBbOSwgMV0sIFs5LCAyXSwgWzksIDJdLCBbOSwgMV0sIFs5LCAxXSwgWzksIDFdLCBbOSwgMV0sIFsxOCwgMV0sIFsxOSwgMV1dLFxuICAgIHBlcmZvcm1BY3Rpb246IGZ1bmN0aW9uIGFub255bW91cyh5eXRleHQsIHl5bGVuZywgeXlsaW5lbm8sIHl5LCB5eXN0YXRlLCAkJCwgXyQpIHtcbiAgICAgIHZhciAkMCA9ICQkLmxlbmd0aCAtIDE7XG4gICAgICBzd2l0Y2ggKHl5c3RhdGUpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHJldHVybiAkJFskMCAtIDFdO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgdGhpcy4kID0gW107XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcbiAgICAgICAgICB0aGlzLiQgPSAkJFskMCAtIDFdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgIHRoaXMuJCA9IFtdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgeXkuZ2V0Q29tbW9uRGIoKS5zZXREaWFncmFtVGl0bGUoJCRbJDBdLnN1YnN0cig2KSk7XG4gICAgICAgICAgdGhpcy4kID0gJCRbJDBdLnN1YnN0cig2KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA5OlxuICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXS50cmltKCk7XG4gICAgICAgICAgeXkuZ2V0Q29tbW9uRGIoKS5zZXRBY2NUaXRsZSh0aGlzLiQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEwOlxuICAgICAgICBjYXNlIDExOlxuICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXS50cmltKCk7XG4gICAgICAgICAgeXkuZ2V0Q29tbW9uRGIoKS5zZXRBY2NEZXNjcmlwdGlvbih0aGlzLiQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgIHl5LmFkZFNlY3Rpb24oJCRbJDBdLnN1YnN0cig4KSk7XG4gICAgICAgICAgdGhpcy4kID0gJCRbJDBdLnN1YnN0cig4KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICB5eS5hZGRUYXNrKCQkWyQwXSwgMCwgXCJcIik7XG4gICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgIHl5LmFkZEV2ZW50KCQkWyQwXS5zdWJzdHIoMikpO1xuICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9LFxuICAgIHRhYmxlOiBbeyAzOiAxLCA0OiBbMSwgMl0gfSwgeyAxOiBbM10gfSwgbygkVjAsIFsyLCAyXSwgeyA1OiAzIH0pLCB7IDY6IFsxLCA0XSwgNzogNSwgODogWzEsIDZdLCA5OiA3LCAxMDogWzEsIDhdLCAxMTogJFYxLCAxMjogJFYyLCAxNDogJFYzLCAxNjogJFY0LCAxNzogJFY1LCAxODogMTQsIDE5OiAxNSwgMjA6ICRWNiwgMjE6ICRWNyB9LCBvKCRWMCwgWzIsIDddLCB7IDE6IFsyLCAxXSB9KSwgbygkVjAsIFsyLCAzXSksIHsgOTogMTgsIDExOiAkVjEsIDEyOiAkVjIsIDE0OiAkVjMsIDE2OiAkVjQsIDE3OiAkVjUsIDE4OiAxNCwgMTk6IDE1LCAyMDogJFY2LCAyMTogJFY3IH0sIG8oJFYwLCBbMiwgNV0pLCBvKCRWMCwgWzIsIDZdKSwgbygkVjAsIFsyLCA4XSksIHsgMTM6IFsxLCAxOV0gfSwgeyAxNTogWzEsIDIwXSB9LCBvKCRWMCwgWzIsIDExXSksIG8oJFYwLCBbMiwgMTJdKSwgbygkVjAsIFsyLCAxM10pLCBvKCRWMCwgWzIsIDE0XSksIG8oJFYwLCBbMiwgMTVdKSwgbygkVjAsIFsyLCAxNl0pLCBvKCRWMCwgWzIsIDRdKSwgbygkVjAsIFsyLCA5XSksIG8oJFYwLCBbMiwgMTBdKV0sXG4gICAgZGVmYXVsdEFjdGlvbnM6IHt9LFxuICAgIHBhcnNlRXJyb3I6IGZ1bmN0aW9uIHBhcnNlRXJyb3Ioc3RyLCBoYXNoKSB7XG4gICAgICBpZiAoaGFzaC5yZWNvdmVyYWJsZSkge1xuICAgICAgICB0aGlzLnRyYWNlKHN0cik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3Ioc3RyKTtcbiAgICAgICAgZXJyb3IuaGFzaCA9IGhhc2g7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH0sXG4gICAgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlKGlucHV0KSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXMsIHN0YWNrID0gWzBdLCB0c3RhY2sgPSBbXSwgdnN0YWNrID0gW251bGxdLCBsc3RhY2sgPSBbXSwgdGFibGUgPSB0aGlzLnRhYmxlLCB5eXRleHQgPSBcIlwiLCB5eWxpbmVubyA9IDAsIHl5bGVuZyA9IDAsIFRFUlJPUiA9IDIsIEVPRiA9IDE7XG4gICAgICB2YXIgYXJncyA9IGxzdGFjay5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICB2YXIgbGV4ZXIyID0gT2JqZWN0LmNyZWF0ZSh0aGlzLmxleGVyKTtcbiAgICAgIHZhciBzaGFyZWRTdGF0ZSA9IHsgeXk6IHt9IH07XG4gICAgICBmb3IgKHZhciBrIGluIHRoaXMueXkpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLnl5LCBrKSkge1xuICAgICAgICAgIHNoYXJlZFN0YXRlLnl5W2tdID0gdGhpcy55eVtrXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV4ZXIyLnNldElucHV0KGlucHV0LCBzaGFyZWRTdGF0ZS55eSk7XG4gICAgICBzaGFyZWRTdGF0ZS55eS5sZXhlciA9IGxleGVyMjtcbiAgICAgIHNoYXJlZFN0YXRlLnl5LnBhcnNlciA9IHRoaXM7XG4gICAgICBpZiAodHlwZW9mIGxleGVyMi55eWxsb2MgPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBsZXhlcjIueXlsbG9jID0ge307XG4gICAgICB9XG4gICAgICB2YXIgeXlsb2MgPSBsZXhlcjIueXlsbG9jO1xuICAgICAgbHN0YWNrLnB1c2goeXlsb2MpO1xuICAgICAgdmFyIHJhbmdlcyA9IGxleGVyMi5vcHRpb25zICYmIGxleGVyMi5vcHRpb25zLnJhbmdlcztcbiAgICAgIGlmICh0eXBlb2Ygc2hhcmVkU3RhdGUueXkucGFyc2VFcnJvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRoaXMucGFyc2VFcnJvciA9IHNoYXJlZFN0YXRlLnl5LnBhcnNlRXJyb3I7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBhcnNlRXJyb3IgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykucGFyc2VFcnJvcjtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGxleCgpIHtcbiAgICAgICAgdmFyIHRva2VuO1xuICAgICAgICB0b2tlbiA9IHRzdGFjay5wb3AoKSB8fCBsZXhlcjIubGV4KCkgfHwgRU9GO1xuICAgICAgICBpZiAodHlwZW9mIHRva2VuICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgaWYgKHRva2VuIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIHRzdGFjayA9IHRva2VuO1xuICAgICAgICAgICAgdG9rZW4gPSB0c3RhY2sucG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRva2VuID0gc2VsZi5zeW1ib2xzX1t0b2tlbl0gfHwgdG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgfVxuICAgICAgdmFyIHN5bWJvbCwgc3RhdGUsIGFjdGlvbiwgciwgeXl2YWwgPSB7fSwgcCwgbGVuLCBuZXdTdGF0ZSwgZXhwZWN0ZWQ7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBzdGF0ZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAodGhpcy5kZWZhdWx0QWN0aW9uc1tzdGF0ZV0pIHtcbiAgICAgICAgICBhY3Rpb24gPSB0aGlzLmRlZmF1bHRBY3Rpb25zW3N0YXRlXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoc3ltYm9sID09PSBudWxsIHx8IHR5cGVvZiBzeW1ib2wgPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgc3ltYm9sID0gbGV4KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFjdGlvbiA9IHRhYmxlW3N0YXRlXSAmJiB0YWJsZVtzdGF0ZV1bc3ltYm9sXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhYWN0aW9uLmxlbmd0aCB8fCAhYWN0aW9uWzBdKSB7XG4gICAgICAgICAgdmFyIGVyclN0ciA9IFwiXCI7XG4gICAgICAgICAgZXhwZWN0ZWQgPSBbXTtcbiAgICAgICAgICBmb3IgKHAgaW4gdGFibGVbc3RhdGVdKSB7XG4gICAgICAgICAgICBpZiAodGhpcy50ZXJtaW5hbHNfW3BdICYmIHAgPiBURVJST1IpIHtcbiAgICAgICAgICAgICAgZXhwZWN0ZWQucHVzaChcIidcIiArIHRoaXMudGVybWluYWxzX1twXSArIFwiJ1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGxleGVyMi5zaG93UG9zaXRpb24pIHtcbiAgICAgICAgICAgIGVyclN0ciA9IFwiUGFyc2UgZXJyb3Igb24gbGluZSBcIiArICh5eWxpbmVubyArIDEpICsgXCI6XFxuXCIgKyBsZXhlcjIuc2hvd1Bvc2l0aW9uKCkgKyBcIlxcbkV4cGVjdGluZyBcIiArIGV4cGVjdGVkLmpvaW4oXCIsIFwiKSArIFwiLCBnb3QgJ1wiICsgKHRoaXMudGVybWluYWxzX1tzeW1ib2xdIHx8IHN5bWJvbCkgKyBcIidcIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXJyU3RyID0gXCJQYXJzZSBlcnJvciBvbiBsaW5lIFwiICsgKHl5bGluZW5vICsgMSkgKyBcIjogVW5leHBlY3RlZCBcIiArIChzeW1ib2wgPT0gRU9GID8gXCJlbmQgb2YgaW5wdXRcIiA6IFwiJ1wiICsgKHRoaXMudGVybWluYWxzX1tzeW1ib2xdIHx8IHN5bWJvbCkgKyBcIidcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucGFyc2VFcnJvcihlcnJTdHIsIHtcbiAgICAgICAgICAgIHRleHQ6IGxleGVyMi5tYXRjaCxcbiAgICAgICAgICAgIHRva2VuOiB0aGlzLnRlcm1pbmFsc19bc3ltYm9sXSB8fCBzeW1ib2wsXG4gICAgICAgICAgICBsaW5lOiBsZXhlcjIueXlsaW5lbm8sXG4gICAgICAgICAgICBsb2M6IHl5bG9jLFxuICAgICAgICAgICAgZXhwZWN0ZWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9uWzBdIGluc3RhbmNlb2YgQXJyYXkgJiYgYWN0aW9uLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYXJzZSBFcnJvcjogbXVsdGlwbGUgYWN0aW9ucyBwb3NzaWJsZSBhdCBzdGF0ZTogXCIgKyBzdGF0ZSArIFwiLCB0b2tlbjogXCIgKyBzeW1ib2wpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoYWN0aW9uWzBdKSB7XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgc3RhY2sucHVzaChzeW1ib2wpO1xuICAgICAgICAgICAgdnN0YWNrLnB1c2gobGV4ZXIyLnl5dGV4dCk7XG4gICAgICAgICAgICBsc3RhY2sucHVzaChsZXhlcjIueXlsbG9jKTtcbiAgICAgICAgICAgIHN0YWNrLnB1c2goYWN0aW9uWzFdKTtcbiAgICAgICAgICAgIHN5bWJvbCA9IG51bGw7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHl5bGVuZyA9IGxleGVyMi55eWxlbmc7XG4gICAgICAgICAgICAgIHl5dGV4dCA9IGxleGVyMi55eXRleHQ7XG4gICAgICAgICAgICAgIHl5bGluZW5vID0gbGV4ZXIyLnl5bGluZW5vO1xuICAgICAgICAgICAgICB5eWxvYyA9IGxleGVyMi55eWxsb2M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBsZW4gPSB0aGlzLnByb2R1Y3Rpb25zX1thY3Rpb25bMV1dWzFdO1xuICAgICAgICAgICAgeXl2YWwuJCA9IHZzdGFja1t2c3RhY2subGVuZ3RoIC0gbGVuXTtcbiAgICAgICAgICAgIHl5dmFsLl8kID0ge1xuICAgICAgICAgICAgICBmaXJzdF9saW5lOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIChsZW4gfHwgMSldLmZpcnN0X2xpbmUsXG4gICAgICAgICAgICAgIGxhc3RfbGluZTogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAxXS5sYXN0X2xpbmUsXG4gICAgICAgICAgICAgIGZpcnN0X2NvbHVtbjogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAobGVuIHx8IDEpXS5maXJzdF9jb2x1bW4sXG4gICAgICAgICAgICAgIGxhc3RfY29sdW1uOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIDFdLmxhc3RfY29sdW1uXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHJhbmdlcykge1xuICAgICAgICAgICAgICB5eXZhbC5fJC5yYW5nZSA9IFtcbiAgICAgICAgICAgICAgICBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIChsZW4gfHwgMSldLnJhbmdlWzBdLFxuICAgICAgICAgICAgICAgIGxzdGFja1tsc3RhY2subGVuZ3RoIC0gMV0ucmFuZ2VbMV1cbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHIgPSB0aGlzLnBlcmZvcm1BY3Rpb24uYXBwbHkoeXl2YWwsIFtcbiAgICAgICAgICAgICAgeXl0ZXh0LFxuICAgICAgICAgICAgICB5eWxlbmcsXG4gICAgICAgICAgICAgIHl5bGluZW5vLFxuICAgICAgICAgICAgICBzaGFyZWRTdGF0ZS55eSxcbiAgICAgICAgICAgICAgYWN0aW9uWzFdLFxuICAgICAgICAgICAgICB2c3RhY2ssXG4gICAgICAgICAgICAgIGxzdGFja1xuICAgICAgICAgICAgXS5jb25jYXQoYXJncykpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgICAgICBzdGFjayA9IHN0YWNrLnNsaWNlKDAsIC0xICogbGVuICogMik7XG4gICAgICAgICAgICAgIHZzdGFjayA9IHZzdGFjay5zbGljZSgwLCAtMSAqIGxlbik7XG4gICAgICAgICAgICAgIGxzdGFjayA9IGxzdGFjay5zbGljZSgwLCAtMSAqIGxlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFjay5wdXNoKHRoaXMucHJvZHVjdGlvbnNfW2FjdGlvblsxXV1bMF0pO1xuICAgICAgICAgICAgdnN0YWNrLnB1c2goeXl2YWwuJCk7XG4gICAgICAgICAgICBsc3RhY2sucHVzaCh5eXZhbC5fJCk7XG4gICAgICAgICAgICBuZXdTdGF0ZSA9IHRhYmxlW3N0YWNrW3N0YWNrLmxlbmd0aCAtIDJdXVtzdGFja1tzdGFjay5sZW5ndGggLSAxXV07XG4gICAgICAgICAgICBzdGFjay5wdXNoKG5ld1N0YXRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIHZhciBsZXhlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZXhlcjIgPSB7XG4gICAgICBFT0Y6IDEsXG4gICAgICBwYXJzZUVycm9yOiBmdW5jdGlvbiBwYXJzZUVycm9yKHN0ciwgaGFzaCkge1xuICAgICAgICBpZiAodGhpcy55eS5wYXJzZXIpIHtcbiAgICAgICAgICB0aGlzLnl5LnBhcnNlci5wYXJzZUVycm9yKHN0ciwgaGFzaCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHN0cik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyByZXNldHMgdGhlIGxleGVyLCBzZXRzIG5ldyBpbnB1dFxuICAgICAgc2V0SW5wdXQ6IGZ1bmN0aW9uKGlucHV0LCB5eSkge1xuICAgICAgICB0aGlzLnl5ID0geXkgfHwgdGhpcy55eSB8fCB7fTtcbiAgICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcbiAgICAgICAgdGhpcy5fbW9yZSA9IHRoaXMuX2JhY2t0cmFjayA9IHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnl5bGluZW5vID0gdGhpcy55eWxlbmcgPSAwO1xuICAgICAgICB0aGlzLnl5dGV4dCA9IHRoaXMubWF0Y2hlZCA9IHRoaXMubWF0Y2ggPSBcIlwiO1xuICAgICAgICB0aGlzLmNvbmRpdGlvblN0YWNrID0gW1wiSU5JVElBTFwiXTtcbiAgICAgICAgdGhpcy55eWxsb2MgPSB7XG4gICAgICAgICAgZmlyc3RfbGluZTogMSxcbiAgICAgICAgICBmaXJzdF9jb2x1bW46IDAsXG4gICAgICAgICAgbGFzdF9saW5lOiAxLFxuICAgICAgICAgIGxhc3RfY29sdW1uOiAwXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmFuZ2VzKSB7XG4gICAgICAgICAgdGhpcy55eWxsb2MucmFuZ2UgPSBbMCwgMF07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICAvLyBjb25zdW1lcyBhbmQgcmV0dXJucyBvbmUgY2hhciBmcm9tIHRoZSBpbnB1dFxuICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2ggPSB0aGlzLl9pbnB1dFswXTtcbiAgICAgICAgdGhpcy55eXRleHQgKz0gY2g7XG4gICAgICAgIHRoaXMueXlsZW5nKys7XG4gICAgICAgIHRoaXMub2Zmc2V0Kys7XG4gICAgICAgIHRoaXMubWF0Y2ggKz0gY2g7XG4gICAgICAgIHRoaXMubWF0Y2hlZCArPSBjaDtcbiAgICAgICAgdmFyIGxpbmVzID0gY2gubWF0Y2goLyg/Olxcclxcbj98XFxuKS4qL2cpO1xuICAgICAgICBpZiAobGluZXMpIHtcbiAgICAgICAgICB0aGlzLnl5bGluZW5vKys7XG4gICAgICAgICAgdGhpcy55eWxsb2MubGFzdF9saW5lKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy55eWxsb2MubGFzdF9jb2x1bW4rKztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykge1xuICAgICAgICAgIHRoaXMueXlsbG9jLnJhbmdlWzFdKys7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW5wdXQgPSB0aGlzLl9pbnB1dC5zbGljZSgxKTtcbiAgICAgICAgcmV0dXJuIGNoO1xuICAgICAgfSxcbiAgICAgIC8vIHVuc2hpZnRzIG9uZSBjaGFyIChvciBhIHN0cmluZykgaW50byB0aGUgaW5wdXRcbiAgICAgIHVucHV0OiBmdW5jdGlvbihjaCkge1xuICAgICAgICB2YXIgbGVuID0gY2gubGVuZ3RoO1xuICAgICAgICB2YXIgbGluZXMgPSBjaC5zcGxpdCgvKD86XFxyXFxuP3xcXG4pL2cpO1xuICAgICAgICB0aGlzLl9pbnB1dCA9IGNoICsgdGhpcy5faW5wdXQ7XG4gICAgICAgIHRoaXMueXl0ZXh0ID0gdGhpcy55eXRleHQuc3Vic3RyKDAsIHRoaXMueXl0ZXh0Lmxlbmd0aCAtIGxlbik7XG4gICAgICAgIHRoaXMub2Zmc2V0IC09IGxlbjtcbiAgICAgICAgdmFyIG9sZExpbmVzID0gdGhpcy5tYXRjaC5zcGxpdCgvKD86XFxyXFxuP3xcXG4pL2cpO1xuICAgICAgICB0aGlzLm1hdGNoID0gdGhpcy5tYXRjaC5zdWJzdHIoMCwgdGhpcy5tYXRjaC5sZW5ndGggLSAxKTtcbiAgICAgICAgdGhpcy5tYXRjaGVkID0gdGhpcy5tYXRjaGVkLnN1YnN0cigwLCB0aGlzLm1hdGNoZWQubGVuZ3RoIC0gMSk7XG4gICAgICAgIGlmIChsaW5lcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgdGhpcy55eWxpbmVubyAtPSBsaW5lcy5sZW5ndGggLSAxO1xuICAgICAgICB9XG4gICAgICAgIHZhciByID0gdGhpcy55eWxsb2MucmFuZ2U7XG4gICAgICAgIHRoaXMueXlsbG9jID0ge1xuICAgICAgICAgIGZpcnN0X2xpbmU6IHRoaXMueXlsbG9jLmZpcnN0X2xpbmUsXG4gICAgICAgICAgbGFzdF9saW5lOiB0aGlzLnl5bGluZW5vICsgMSxcbiAgICAgICAgICBmaXJzdF9jb2x1bW46IHRoaXMueXlsbG9jLmZpcnN0X2NvbHVtbixcbiAgICAgICAgICBsYXN0X2NvbHVtbjogbGluZXMgPyAobGluZXMubGVuZ3RoID09PSBvbGRMaW5lcy5sZW5ndGggPyB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4gOiAwKSArIG9sZExpbmVzW29sZExpbmVzLmxlbmd0aCAtIGxpbmVzLmxlbmd0aF0ubGVuZ3RoIC0gbGluZXNbMF0ubGVuZ3RoIDogdGhpcy55eWxsb2MuZmlyc3RfY29sdW1uIC0gbGVuXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmFuZ2VzKSB7XG4gICAgICAgICAgdGhpcy55eWxsb2MucmFuZ2UgPSBbclswXSwgclswXSArIHRoaXMueXlsZW5nIC0gbGVuXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnl5bGVuZyA9IHRoaXMueXl0ZXh0Lmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuICAgICAgLy8gV2hlbiBjYWxsZWQgZnJvbSBhY3Rpb24sIGNhY2hlcyBtYXRjaGVkIHRleHQgYW5kIGFwcGVuZHMgaXQgb24gbmV4dCBhY3Rpb25cbiAgICAgIG1vcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9tb3JlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuICAgICAgLy8gV2hlbiBjYWxsZWQgZnJvbSBhY3Rpb24sIHNpZ25hbHMgdGhlIGxleGVyIHRoYXQgdGhpcyBydWxlIGZhaWxzIHRvIG1hdGNoIHRoZSBpbnB1dCwgc28gdGhlIG5leHQgbWF0Y2hpbmcgcnVsZSAocmVnZXgpIHNob3VsZCBiZSB0ZXN0ZWQgaW5zdGVhZC5cbiAgICAgIHJlamVjdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYmFja3RyYWNrX2xleGVyKSB7XG4gICAgICAgICAgdGhpcy5fYmFja3RyYWNrID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUVycm9yKFwiTGV4aWNhbCBlcnJvciBvbiBsaW5lIFwiICsgKHRoaXMueXlsaW5lbm8gKyAxKSArIFwiLiBZb3UgY2FuIG9ubHkgaW52b2tlIHJlamVjdCgpIGluIHRoZSBsZXhlciB3aGVuIHRoZSBsZXhlciBpcyBvZiB0aGUgYmFja3RyYWNraW5nIHBlcnN1YXNpb24gKG9wdGlvbnMuYmFja3RyYWNrX2xleGVyID0gdHJ1ZSkuXFxuXCIgKyB0aGlzLnNob3dQb3NpdGlvbigpLCB7XG4gICAgICAgICAgICB0ZXh0OiBcIlwiLFxuICAgICAgICAgICAgdG9rZW46IG51bGwsXG4gICAgICAgICAgICBsaW5lOiB0aGlzLnl5bGluZW5vXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuICAgICAgLy8gcmV0YWluIGZpcnN0IG4gY2hhcmFjdGVycyBvZiB0aGUgbWF0Y2hcbiAgICAgIGxlc3M6IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgdGhpcy51bnB1dCh0aGlzLm1hdGNoLnNsaWNlKG4pKTtcbiAgICAgIH0sXG4gICAgICAvLyBkaXNwbGF5cyBhbHJlYWR5IG1hdGNoZWQgaW5wdXQsIGkuZS4gZm9yIGVycm9yIG1lc3NhZ2VzXG4gICAgICBwYXN0SW5wdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcGFzdCA9IHRoaXMubWF0Y2hlZC5zdWJzdHIoMCwgdGhpcy5tYXRjaGVkLmxlbmd0aCAtIHRoaXMubWF0Y2gubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIChwYXN0Lmxlbmd0aCA+IDIwID8gXCIuLi5cIiA6IFwiXCIpICsgcGFzdC5zdWJzdHIoLTIwKS5yZXBsYWNlKC9cXG4vZywgXCJcIik7XG4gICAgICB9LFxuICAgICAgLy8gZGlzcGxheXMgdXBjb21pbmcgaW5wdXQsIGkuZS4gZm9yIGVycm9yIG1lc3NhZ2VzXG4gICAgICB1cGNvbWluZ0lucHV0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG5leHQgPSB0aGlzLm1hdGNoO1xuICAgICAgICBpZiAobmV4dC5sZW5ndGggPCAyMCkge1xuICAgICAgICAgIG5leHQgKz0gdGhpcy5faW5wdXQuc3Vic3RyKDAsIDIwIC0gbmV4dC5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAobmV4dC5zdWJzdHIoMCwgMjApICsgKG5leHQubGVuZ3RoID4gMjAgPyBcIi4uLlwiIDogXCJcIikpLnJlcGxhY2UoL1xcbi9nLCBcIlwiKTtcbiAgICAgIH0sXG4gICAgICAvLyBkaXNwbGF5cyB0aGUgY2hhcmFjdGVyIHBvc2l0aW9uIHdoZXJlIHRoZSBsZXhpbmcgZXJyb3Igb2NjdXJyZWQsIGkuZS4gZm9yIGVycm9yIG1lc3NhZ2VzXG4gICAgICBzaG93UG9zaXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcHJlID0gdGhpcy5wYXN0SW5wdXQoKTtcbiAgICAgICAgdmFyIGMgPSBuZXcgQXJyYXkocHJlLmxlbmd0aCArIDEpLmpvaW4oXCItXCIpO1xuICAgICAgICByZXR1cm4gcHJlICsgdGhpcy51cGNvbWluZ0lucHV0KCkgKyBcIlxcblwiICsgYyArIFwiXlwiO1xuICAgICAgfSxcbiAgICAgIC8vIHRlc3QgdGhlIGxleGVkIHRva2VuOiByZXR1cm4gRkFMU0Ugd2hlbiBub3QgYSBtYXRjaCwgb3RoZXJ3aXNlIHJldHVybiB0b2tlblxuICAgICAgdGVzdF9tYXRjaDogZnVuY3Rpb24obWF0Y2gsIGluZGV4ZWRfcnVsZSkge1xuICAgICAgICB2YXIgdG9rZW4sIGxpbmVzLCBiYWNrdXA7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYmFja3RyYWNrX2xleGVyKSB7XG4gICAgICAgICAgYmFja3VwID0ge1xuICAgICAgICAgICAgeXlsaW5lbm86IHRoaXMueXlsaW5lbm8sXG4gICAgICAgICAgICB5eWxsb2M6IHtcbiAgICAgICAgICAgICAgZmlyc3RfbGluZTogdGhpcy55eWxsb2MuZmlyc3RfbGluZSxcbiAgICAgICAgICAgICAgbGFzdF9saW5lOiB0aGlzLmxhc3RfbGluZSxcbiAgICAgICAgICAgICAgZmlyc3RfY29sdW1uOiB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4sXG4gICAgICAgICAgICAgIGxhc3RfY29sdW1uOiB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHl5dGV4dDogdGhpcy55eXRleHQsXG4gICAgICAgICAgICBtYXRjaDogdGhpcy5tYXRjaCxcbiAgICAgICAgICAgIG1hdGNoZXM6IHRoaXMubWF0Y2hlcyxcbiAgICAgICAgICAgIG1hdGNoZWQ6IHRoaXMubWF0Y2hlZCxcbiAgICAgICAgICAgIHl5bGVuZzogdGhpcy55eWxlbmcsXG4gICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgX21vcmU6IHRoaXMuX21vcmUsXG4gICAgICAgICAgICBfaW5wdXQ6IHRoaXMuX2lucHV0LFxuICAgICAgICAgICAgeXk6IHRoaXMueXksXG4gICAgICAgICAgICBjb25kaXRpb25TdGFjazogdGhpcy5jb25kaXRpb25TdGFjay5zbGljZSgwKSxcbiAgICAgICAgICAgIGRvbmU6IHRoaXMuZG9uZVxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHtcbiAgICAgICAgICAgIGJhY2t1cC55eWxsb2MucmFuZ2UgPSB0aGlzLnl5bGxvYy5yYW5nZS5zbGljZSgwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGluZXMgPSBtYXRjaFswXS5tYXRjaCgvKD86XFxyXFxuP3xcXG4pLiovZyk7XG4gICAgICAgIGlmIChsaW5lcykge1xuICAgICAgICAgIHRoaXMueXlsaW5lbm8gKz0gbGluZXMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMueXlsbG9jID0ge1xuICAgICAgICAgIGZpcnN0X2xpbmU6IHRoaXMueXlsbG9jLmxhc3RfbGluZSxcbiAgICAgICAgICBsYXN0X2xpbmU6IHRoaXMueXlsaW5lbm8gKyAxLFxuICAgICAgICAgIGZpcnN0X2NvbHVtbjogdGhpcy55eWxsb2MubGFzdF9jb2x1bW4sXG4gICAgICAgICAgbGFzdF9jb2x1bW46IGxpbmVzID8gbGluZXNbbGluZXMubGVuZ3RoIC0gMV0ubGVuZ3RoIC0gbGluZXNbbGluZXMubGVuZ3RoIC0gMV0ubWF0Y2goL1xccj9cXG4/LylbMF0ubGVuZ3RoIDogdGhpcy55eWxsb2MubGFzdF9jb2x1bW4gKyBtYXRjaFswXS5sZW5ndGhcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy55eXRleHQgKz0gbWF0Y2hbMF07XG4gICAgICAgIHRoaXMubWF0Y2ggKz0gbWF0Y2hbMF07XG4gICAgICAgIHRoaXMubWF0Y2hlcyA9IG1hdGNoO1xuICAgICAgICB0aGlzLnl5bGVuZyA9IHRoaXMueXl0ZXh0Lmxlbmd0aDtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHtcbiAgICAgICAgICB0aGlzLnl5bGxvYy5yYW5nZSA9IFt0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKz0gdGhpcy55eWxlbmddO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21vcmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fYmFja3RyYWNrID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lucHV0ID0gdGhpcy5faW5wdXQuc2xpY2UobWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5tYXRjaGVkICs9IG1hdGNoWzBdO1xuICAgICAgICB0b2tlbiA9IHRoaXMucGVyZm9ybUFjdGlvbi5jYWxsKHRoaXMsIHRoaXMueXksIHRoaXMsIGluZGV4ZWRfcnVsZSwgdGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgaWYgKHRoaXMuZG9uZSAmJiB0aGlzLl9pbnB1dCkge1xuICAgICAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9iYWNrdHJhY2spIHtcbiAgICAgICAgICBmb3IgKHZhciBrIGluIGJhY2t1cCkge1xuICAgICAgICAgICAgdGhpc1trXSA9IGJhY2t1cFtrXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0sXG4gICAgICAvLyByZXR1cm4gbmV4dCBtYXRjaCBpbiBpbnB1dFxuICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5FT0Y7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9pbnB1dCkge1xuICAgICAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRva2VuLCBtYXRjaCwgdGVtcE1hdGNoLCBpbmRleDtcbiAgICAgICAgaWYgKCF0aGlzLl9tb3JlKSB7XG4gICAgICAgICAgdGhpcy55eXRleHQgPSBcIlwiO1xuICAgICAgICAgIHRoaXMubWF0Y2ggPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIHZhciBydWxlcyA9IHRoaXMuX2N1cnJlbnRSdWxlcygpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdGVtcE1hdGNoID0gdGhpcy5faW5wdXQubWF0Y2godGhpcy5ydWxlc1tydWxlc1tpXV0pO1xuICAgICAgICAgIGlmICh0ZW1wTWF0Y2ggJiYgKCFtYXRjaCB8fCB0ZW1wTWF0Y2hbMF0ubGVuZ3RoID4gbWF0Y2hbMF0ubGVuZ3RoKSkge1xuICAgICAgICAgICAgbWF0Y2ggPSB0ZW1wTWF0Y2g7XG4gICAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJhY2t0cmFja19sZXhlcikge1xuICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMudGVzdF9tYXRjaCh0ZW1wTWF0Y2gsIHJ1bGVzW2ldKTtcbiAgICAgICAgICAgICAgaWYgKHRva2VuICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9iYWNrdHJhY2spIHtcbiAgICAgICAgICAgICAgICBtYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5vcHRpb25zLmZsZXgpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIHRva2VuID0gdGhpcy50ZXN0X21hdGNoKG1hdGNoLCBydWxlc1tpbmRleF0pO1xuICAgICAgICAgIGlmICh0b2tlbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pbnB1dCA9PT0gXCJcIikge1xuICAgICAgICAgIHJldHVybiB0aGlzLkVPRjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUVycm9yKFwiTGV4aWNhbCBlcnJvciBvbiBsaW5lIFwiICsgKHRoaXMueXlsaW5lbm8gKyAxKSArIFwiLiBVbnJlY29nbml6ZWQgdGV4dC5cXG5cIiArIHRoaXMuc2hvd1Bvc2l0aW9uKCksIHtcbiAgICAgICAgICAgIHRleHQ6IFwiXCIsXG4gICAgICAgICAgICB0b2tlbjogbnVsbCxcbiAgICAgICAgICAgIGxpbmU6IHRoaXMueXlsaW5lbm9cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIHJldHVybiBuZXh0IG1hdGNoIHRoYXQgaGFzIGEgdG9rZW5cbiAgICAgIGxleDogZnVuY3Rpb24gbGV4KCkge1xuICAgICAgICB2YXIgciA9IHRoaXMubmV4dCgpO1xuICAgICAgICBpZiAocikge1xuICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLmxleCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gYWN0aXZhdGVzIGEgbmV3IGxleGVyIGNvbmRpdGlvbiBzdGF0ZSAocHVzaGVzIHRoZSBuZXcgbGV4ZXIgY29uZGl0aW9uIHN0YXRlIG9udG8gdGhlIGNvbmRpdGlvbiBzdGFjaylcbiAgICAgIGJlZ2luOiBmdW5jdGlvbiBiZWdpbihjb25kaXRpb24pIHtcbiAgICAgICAgdGhpcy5jb25kaXRpb25TdGFjay5wdXNoKGNvbmRpdGlvbik7XG4gICAgICB9LFxuICAgICAgLy8gcG9wIHRoZSBwcmV2aW91c2x5IGFjdGl2ZSBsZXhlciBjb25kaXRpb24gc3RhdGUgb2ZmIHRoZSBjb25kaXRpb24gc3RhY2tcbiAgICAgIHBvcFN0YXRlOiBmdW5jdGlvbiBwb3BTdGF0ZSgpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAtIDE7XG4gICAgICAgIGlmIChuID4gMCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvblN0YWNrLnBvcCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvblN0YWNrWzBdO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gcHJvZHVjZSB0aGUgbGV4ZXIgcnVsZSBzZXQgd2hpY2ggaXMgYWN0aXZlIGZvciB0aGUgY3VycmVudGx5IGFjdGl2ZSBsZXhlciBjb25kaXRpb24gc3RhdGVcbiAgICAgIF9jdXJyZW50UnVsZXM6IGZ1bmN0aW9uIF9jdXJyZW50UnVsZXMoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAmJiB0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25zW3RoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggLSAxXV0ucnVsZXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uc1tcIklOSVRJQUxcIl0ucnVsZXM7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyByZXR1cm4gdGhlIGN1cnJlbnRseSBhY3RpdmUgbGV4ZXIgY29uZGl0aW9uIHN0YXRlOyB3aGVuIGFuIGluZGV4IGFyZ3VtZW50IGlzIHByb3ZpZGVkIGl0IHByb2R1Y2VzIHRoZSBOLXRoIHByZXZpb3VzIGNvbmRpdGlvbiBzdGF0ZSwgaWYgYXZhaWxhYmxlXG4gICAgICB0b3BTdGF0ZTogZnVuY3Rpb24gdG9wU3RhdGUobikge1xuICAgICAgICBuID0gdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggLSAxIC0gTWF0aC5hYnMobiB8fCAwKTtcbiAgICAgICAgaWYgKG4gPj0gMCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvblN0YWNrW25dO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcIklOSVRJQUxcIjtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIGFsaWFzIGZvciBiZWdpbihjb25kaXRpb24pXG4gICAgICBwdXNoU3RhdGU6IGZ1bmN0aW9uIHB1c2hTdGF0ZShjb25kaXRpb24pIHtcbiAgICAgICAgdGhpcy5iZWdpbihjb25kaXRpb24pO1xuICAgICAgfSxcbiAgICAgIC8vIHJldHVybiB0aGUgbnVtYmVyIG9mIHN0YXRlcyBjdXJyZW50bHkgb24gdGhlIHN0YWNrXG4gICAgICBzdGF0ZVN0YWNrU2l6ZTogZnVuY3Rpb24gc3RhdGVTdGFja1NpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aDtcbiAgICAgIH0sXG4gICAgICBvcHRpb25zOiB7IFwiY2FzZS1pbnNlbnNpdGl2ZVwiOiB0cnVlIH0sXG4gICAgICBwZXJmb3JtQWN0aW9uOiBmdW5jdGlvbiBhbm9ueW1vdXMoeXksIHl5XywgJGF2b2lkaW5nX25hbWVfY29sbGlzaW9ucywgWVlfU1RBUlQpIHtcbiAgICAgICAgc3dpdGNoICgkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zKSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuIDEwO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIHJldHVybiA0O1xuICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIHJldHVybiAxMTtcbiAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICB0aGlzLmJlZ2luKFwiYWNjX3RpdGxlXCIpO1xuICAgICAgICAgICAgcmV0dXJuIDEyO1xuICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiBcImFjY190aXRsZV92YWx1ZVwiO1xuICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIHRoaXMuYmVnaW4oXCJhY2NfZGVzY3JcIik7XG4gICAgICAgICAgICByZXR1cm4gMTQ7XG4gICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiBcImFjY19kZXNjcl92YWx1ZVwiO1xuICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICB0aGlzLmJlZ2luKFwiYWNjX2Rlc2NyX211bHRpbGluZVwiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgcmV0dXJuIFwiYWNjX2Rlc2NyX211bHRpbGluZV92YWx1ZVwiO1xuICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICByZXR1cm4gMTc7XG4gICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgIHJldHVybiAyMTtcbiAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAgcmV0dXJuIDIwO1xuICAgICAgICAgIGNhc2UgMTc6XG4gICAgICAgICAgICByZXR1cm4gNjtcbiAgICAgICAgICBjYXNlIDE4OlxuICAgICAgICAgICAgcmV0dXJuIFwiSU5WQUxJRFwiO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcnVsZXM6IFsvXig/OiUoPyFcXHspW15cXG5dKikvaSwgL14oPzpbXlxcfV0lJVteXFxuXSopL2ksIC9eKD86W1xcbl0rKS9pLCAvXig/OlxccyspL2ksIC9eKD86I1teXFxuXSopL2ksIC9eKD86dGltZWxpbmVcXGIpL2ksIC9eKD86dGl0bGVcXHNbXiNcXG47XSspL2ksIC9eKD86YWNjVGl0bGVcXHMqOlxccyopL2ksIC9eKD86KD8hXFxufHwpKlteXFxuXSopL2ksIC9eKD86YWNjRGVzY3JcXHMqOlxccyopL2ksIC9eKD86KD8hXFxufHwpKlteXFxuXSopL2ksIC9eKD86YWNjRGVzY3JcXHMqXFx7XFxzKikvaSwgL14oPzpbXFx9XSkvaSwgL14oPzpbXlxcfV0qKS9pLCAvXig/OnNlY3Rpb25cXHNbXiM6XFxuO10rKS9pLCAvXig/OjpcXHNbXiM6XFxuO10rKS9pLCAvXig/OlteIzpcXG47XSspL2ksIC9eKD86JCkvaSwgL14oPzouKS9pXSxcbiAgICAgIGNvbmRpdGlvbnM6IHsgXCJhY2NfZGVzY3JfbXVsdGlsaW5lXCI6IHsgXCJydWxlc1wiOiBbMTIsIDEzXSwgXCJpbmNsdXNpdmVcIjogZmFsc2UgfSwgXCJhY2NfZGVzY3JcIjogeyBcInJ1bGVzXCI6IFsxMF0sIFwiaW5jbHVzaXZlXCI6IGZhbHNlIH0sIFwiYWNjX3RpdGxlXCI6IHsgXCJydWxlc1wiOiBbOF0sIFwiaW5jbHVzaXZlXCI6IGZhbHNlIH0sIFwiSU5JVElBTFwiOiB7IFwicnVsZXNcIjogWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDksIDExLCAxNCwgMTUsIDE2LCAxNywgMThdLCBcImluY2x1c2l2ZVwiOiB0cnVlIH0gfVxuICAgIH07XG4gICAgcmV0dXJuIGxleGVyMjtcbiAgfSgpO1xuICBwYXJzZXIyLmxleGVyID0gbGV4ZXI7XG4gIGZ1bmN0aW9uIFBhcnNlcigpIHtcbiAgICB0aGlzLnl5ID0ge307XG4gIH1cbiAgUGFyc2VyLnByb3RvdHlwZSA9IHBhcnNlcjI7XG4gIHBhcnNlcjIuUGFyc2VyID0gUGFyc2VyO1xuICByZXR1cm4gbmV3IFBhcnNlcigpO1xufSgpO1xucGFyc2VyLnBhcnNlciA9IHBhcnNlcjtcbmNvbnN0IHBhcnNlciQxID0gcGFyc2VyO1xubGV0IGN1cnJlbnRTZWN0aW9uID0gXCJcIjtcbmxldCBjdXJyZW50VGFza0lkID0gMDtcbmNvbnN0IHNlY3Rpb25zID0gW107XG5jb25zdCB0YXNrcyA9IFtdO1xuY29uc3QgcmF3VGFza3MgPSBbXTtcbmNvbnN0IGdldENvbW1vbkRiID0gKCkgPT4gY29tbW9uRGI7XG5jb25zdCBjbGVhciA9IGZ1bmN0aW9uKCkge1xuICBzZWN0aW9ucy5sZW5ndGggPSAwO1xuICB0YXNrcy5sZW5ndGggPSAwO1xuICBjdXJyZW50U2VjdGlvbiA9IFwiXCI7XG4gIHJhd1Rhc2tzLmxlbmd0aCA9IDA7XG4gIGNsZWFyJDEoKTtcbn07XG5jb25zdCBhZGRTZWN0aW9uID0gZnVuY3Rpb24odHh0KSB7XG4gIGN1cnJlbnRTZWN0aW9uID0gdHh0O1xuICBzZWN0aW9ucy5wdXNoKHR4dCk7XG59O1xuY29uc3QgZ2V0U2VjdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHNlY3Rpb25zO1xufTtcbmNvbnN0IGdldFRhc2tzID0gZnVuY3Rpb24oKSB7XG4gIGxldCBhbGxJdGVtc1Byb2Nlc3NlZCA9IGNvbXBpbGVUYXNrcygpO1xuICBjb25zdCBtYXhEZXB0aCA9IDEwMDtcbiAgbGV0IGl0ZXJhdGlvbkNvdW50ID0gMDtcbiAgd2hpbGUgKCFhbGxJdGVtc1Byb2Nlc3NlZCAmJiBpdGVyYXRpb25Db3VudCA8IG1heERlcHRoKSB7XG4gICAgYWxsSXRlbXNQcm9jZXNzZWQgPSBjb21waWxlVGFza3MoKTtcbiAgICBpdGVyYXRpb25Db3VudCsrO1xuICB9XG4gIHRhc2tzLnB1c2goLi4ucmF3VGFza3MpO1xuICByZXR1cm4gdGFza3M7XG59O1xuY29uc3QgYWRkVGFzayA9IGZ1bmN0aW9uKHBlcmlvZCwgbGVuZ3RoLCBldmVudCkge1xuICBjb25zdCByYXdUYXNrID0ge1xuICAgIGlkOiBjdXJyZW50VGFza0lkKyssXG4gICAgc2VjdGlvbjogY3VycmVudFNlY3Rpb24sXG4gICAgdHlwZTogY3VycmVudFNlY3Rpb24sXG4gICAgdGFzazogcGVyaW9kLFxuICAgIHNjb3JlOiBsZW5ndGggPyBsZW5ndGggOiAwLFxuICAgIC8vaWYgZXZlbnQgaXMgZGVmaW5lZCwgdGhlbiBhZGQgaXQgdGhlIGV2ZW50cyBhcnJheVxuICAgIGV2ZW50czogZXZlbnQgPyBbZXZlbnRdIDogW11cbiAgfTtcbiAgcmF3VGFza3MucHVzaChyYXdUYXNrKTtcbn07XG5jb25zdCBhZGRFdmVudCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGNvbnN0IGN1cnJlbnRUYXNrID0gcmF3VGFza3MuZmluZCgodGFzaykgPT4gdGFzay5pZCA9PT0gY3VycmVudFRhc2tJZCAtIDEpO1xuICBjdXJyZW50VGFzay5ldmVudHMucHVzaChldmVudCk7XG59O1xuY29uc3QgYWRkVGFza09yZyA9IGZ1bmN0aW9uKGRlc2NyKSB7XG4gIGNvbnN0IG5ld1Rhc2sgPSB7XG4gICAgc2VjdGlvbjogY3VycmVudFNlY3Rpb24sXG4gICAgdHlwZTogY3VycmVudFNlY3Rpb24sXG4gICAgZGVzY3JpcHRpb246IGRlc2NyLFxuICAgIHRhc2s6IGRlc2NyLFxuICAgIGNsYXNzZXM6IFtdXG4gIH07XG4gIHRhc2tzLnB1c2gobmV3VGFzayk7XG59O1xuY29uc3QgY29tcGlsZVRhc2tzID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGNvbXBpbGVUYXNrID0gZnVuY3Rpb24ocG9zKSB7XG4gICAgcmV0dXJuIHJhd1Rhc2tzW3Bvc10ucHJvY2Vzc2VkO1xuICB9O1xuICBsZXQgYWxsUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgZm9yIChjb25zdCBbaSwgcmF3VGFza10gb2YgcmF3VGFza3MuZW50cmllcygpKSB7XG4gICAgY29tcGlsZVRhc2soaSk7XG4gICAgYWxsUHJvY2Vzc2VkID0gYWxsUHJvY2Vzc2VkICYmIHJhd1Rhc2sucHJvY2Vzc2VkO1xuICB9XG4gIHJldHVybiBhbGxQcm9jZXNzZWQ7XG59O1xuY29uc3QgdGltZWxpbmVEYiA9IHtcbiAgY2xlYXIsXG4gIGdldENvbW1vbkRiLFxuICBhZGRTZWN0aW9uLFxuICBnZXRTZWN0aW9ucyxcbiAgZ2V0VGFza3MsXG4gIGFkZFRhc2ssXG4gIGFkZFRhc2tPcmcsXG4gIGFkZEV2ZW50XG59O1xuY29uc3QgZGIgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmZyZWV6ZSgvKiBAX19QVVJFX18gKi8gT2JqZWN0LmRlZmluZVByb3BlcnR5KHtcbiAgX19wcm90b19fOiBudWxsLFxuICBhZGRFdmVudCxcbiAgYWRkU2VjdGlvbixcbiAgYWRkVGFzayxcbiAgYWRkVGFza09yZyxcbiAgY2xlYXIsXG4gIGRlZmF1bHQ6IHRpbWVsaW5lRGIsXG4gIGdldENvbW1vbkRiLFxuICBnZXRTZWN0aW9ucyxcbiAgZ2V0VGFza3Ncbn0sIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogXCJNb2R1bGVcIiB9KSk7XG5jb25zdCBNQVhfU0VDVElPTlMgPSAxMjtcbmNvbnN0IGRyYXdSZWN0ID0gZnVuY3Rpb24oZWxlbSwgcmVjdERhdGEpIHtcbiAgY29uc3QgcmVjdEVsZW0gPSBlbGVtLmFwcGVuZChcInJlY3RcIik7XG4gIHJlY3RFbGVtLmF0dHIoXCJ4XCIsIHJlY3REYXRhLngpO1xuICByZWN0RWxlbS5hdHRyKFwieVwiLCByZWN0RGF0YS55KTtcbiAgcmVjdEVsZW0uYXR0cihcImZpbGxcIiwgcmVjdERhdGEuZmlsbCk7XG4gIHJlY3RFbGVtLmF0dHIoXCJzdHJva2VcIiwgcmVjdERhdGEuc3Ryb2tlKTtcbiAgcmVjdEVsZW0uYXR0cihcIndpZHRoXCIsIHJlY3REYXRhLndpZHRoKTtcbiAgcmVjdEVsZW0uYXR0cihcImhlaWdodFwiLCByZWN0RGF0YS5oZWlnaHQpO1xuICByZWN0RWxlbS5hdHRyKFwicnhcIiwgcmVjdERhdGEucngpO1xuICByZWN0RWxlbS5hdHRyKFwicnlcIiwgcmVjdERhdGEucnkpO1xuICBpZiAocmVjdERhdGEuY2xhc3MgIT09IHZvaWQgMCkge1xuICAgIHJlY3RFbGVtLmF0dHIoXCJjbGFzc1wiLCByZWN0RGF0YS5jbGFzcyk7XG4gIH1cbiAgcmV0dXJuIHJlY3RFbGVtO1xufTtcbmNvbnN0IGRyYXdGYWNlID0gZnVuY3Rpb24oZWxlbWVudCwgZmFjZURhdGEpIHtcbiAgY29uc3QgcmFkaXVzID0gMTU7XG4gIGNvbnN0IGNpcmNsZUVsZW1lbnQgPSBlbGVtZW50LmFwcGVuZChcImNpcmNsZVwiKS5hdHRyKFwiY3hcIiwgZmFjZURhdGEuY3gpLmF0dHIoXCJjeVwiLCBmYWNlRGF0YS5jeSkuYXR0cihcImNsYXNzXCIsIFwiZmFjZVwiKS5hdHRyKFwiclwiLCByYWRpdXMpLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMikuYXR0cihcIm92ZXJmbG93XCIsIFwidmlzaWJsZVwiKTtcbiAgY29uc3QgZmFjZSA9IGVsZW1lbnQuYXBwZW5kKFwiZ1wiKTtcbiAgZmFjZS5hcHBlbmQoXCJjaXJjbGVcIikuYXR0cihcImN4XCIsIGZhY2VEYXRhLmN4IC0gcmFkaXVzIC8gMykuYXR0cihcImN5XCIsIGZhY2VEYXRhLmN5IC0gcmFkaXVzIC8gMykuYXR0cihcInJcIiwgMS41KS5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDIpLmF0dHIoXCJmaWxsXCIsIFwiIzY2NlwiKS5hdHRyKFwic3Ryb2tlXCIsIFwiIzY2NlwiKTtcbiAgZmFjZS5hcHBlbmQoXCJjaXJjbGVcIikuYXR0cihcImN4XCIsIGZhY2VEYXRhLmN4ICsgcmFkaXVzIC8gMykuYXR0cihcImN5XCIsIGZhY2VEYXRhLmN5IC0gcmFkaXVzIC8gMykuYXR0cihcInJcIiwgMS41KS5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDIpLmF0dHIoXCJmaWxsXCIsIFwiIzY2NlwiKS5hdHRyKFwic3Ryb2tlXCIsIFwiIzY2NlwiKTtcbiAgZnVuY3Rpb24gc21pbGUoZmFjZTIpIHtcbiAgICBjb25zdCBhcmMkMSA9IGFyYygpLnN0YXJ0QW5nbGUoTWF0aC5QSSAvIDIpLmVuZEFuZ2xlKDMgKiAoTWF0aC5QSSAvIDIpKS5pbm5lclJhZGl1cyhyYWRpdXMgLyAyKS5vdXRlclJhZGl1cyhyYWRpdXMgLyAyLjIpO1xuICAgIGZhY2UyLmFwcGVuZChcInBhdGhcIikuYXR0cihcImNsYXNzXCIsIFwibW91dGhcIikuYXR0cihcImRcIiwgYXJjJDEpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBmYWNlRGF0YS5jeCArIFwiLFwiICsgKGZhY2VEYXRhLmN5ICsgMikgKyBcIilcIik7XG4gIH1cbiAgZnVuY3Rpb24gc2FkKGZhY2UyKSB7XG4gICAgY29uc3QgYXJjJDEgPSBhcmMoKS5zdGFydEFuZ2xlKDMgKiBNYXRoLlBJIC8gMikuZW5kQW5nbGUoNSAqIChNYXRoLlBJIC8gMikpLmlubmVyUmFkaXVzKHJhZGl1cyAvIDIpLm91dGVyUmFkaXVzKHJhZGl1cyAvIDIuMik7XG4gICAgZmFjZTIuYXBwZW5kKFwicGF0aFwiKS5hdHRyKFwiY2xhc3NcIiwgXCJtb3V0aFwiKS5hdHRyKFwiZFwiLCBhcmMkMSkuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIGZhY2VEYXRhLmN4ICsgXCIsXCIgKyAoZmFjZURhdGEuY3kgKyA3KSArIFwiKVwiKTtcbiAgfVxuICBmdW5jdGlvbiBhbWJpdmFsZW50KGZhY2UyKSB7XG4gICAgZmFjZTIuYXBwZW5kKFwibGluZVwiKS5hdHRyKFwiY2xhc3NcIiwgXCJtb3V0aFwiKS5hdHRyKFwic3Ryb2tlXCIsIDIpLmF0dHIoXCJ4MVwiLCBmYWNlRGF0YS5jeCAtIDUpLmF0dHIoXCJ5MVwiLCBmYWNlRGF0YS5jeSArIDcpLmF0dHIoXCJ4MlwiLCBmYWNlRGF0YS5jeCArIDUpLmF0dHIoXCJ5MlwiLCBmYWNlRGF0YS5jeSArIDcpLmF0dHIoXCJjbGFzc1wiLCBcIm1vdXRoXCIpLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgXCIxcHhcIikuYXR0cihcInN0cm9rZVwiLCBcIiM2NjZcIik7XG4gIH1cbiAgaWYgKGZhY2VEYXRhLnNjb3JlID4gMykge1xuICAgIHNtaWxlKGZhY2UpO1xuICB9IGVsc2UgaWYgKGZhY2VEYXRhLnNjb3JlIDwgMykge1xuICAgIHNhZChmYWNlKTtcbiAgfSBlbHNlIHtcbiAgICBhbWJpdmFsZW50KGZhY2UpO1xuICB9XG4gIHJldHVybiBjaXJjbGVFbGVtZW50O1xufTtcbmNvbnN0IGRyYXdDaXJjbGUgPSBmdW5jdGlvbihlbGVtZW50LCBjaXJjbGVEYXRhKSB7XG4gIGNvbnN0IGNpcmNsZUVsZW1lbnQgPSBlbGVtZW50LmFwcGVuZChcImNpcmNsZVwiKTtcbiAgY2lyY2xlRWxlbWVudC5hdHRyKFwiY3hcIiwgY2lyY2xlRGF0YS5jeCk7XG4gIGNpcmNsZUVsZW1lbnQuYXR0cihcImN5XCIsIGNpcmNsZURhdGEuY3kpO1xuICBjaXJjbGVFbGVtZW50LmF0dHIoXCJjbGFzc1wiLCBcImFjdG9yLVwiICsgY2lyY2xlRGF0YS5wb3MpO1xuICBjaXJjbGVFbGVtZW50LmF0dHIoXCJmaWxsXCIsIGNpcmNsZURhdGEuZmlsbCk7XG4gIGNpcmNsZUVsZW1lbnQuYXR0cihcInN0cm9rZVwiLCBjaXJjbGVEYXRhLnN0cm9rZSk7XG4gIGNpcmNsZUVsZW1lbnQuYXR0cihcInJcIiwgY2lyY2xlRGF0YS5yKTtcbiAgaWYgKGNpcmNsZUVsZW1lbnQuY2xhc3MgIT09IHZvaWQgMCkge1xuICAgIGNpcmNsZUVsZW1lbnQuYXR0cihcImNsYXNzXCIsIGNpcmNsZUVsZW1lbnQuY2xhc3MpO1xuICB9XG4gIGlmIChjaXJjbGVEYXRhLnRpdGxlICE9PSB2b2lkIDApIHtcbiAgICBjaXJjbGVFbGVtZW50LmFwcGVuZChcInRpdGxlXCIpLnRleHQoY2lyY2xlRGF0YS50aXRsZSk7XG4gIH1cbiAgcmV0dXJuIGNpcmNsZUVsZW1lbnQ7XG59O1xuY29uc3QgZHJhd1RleHQgPSBmdW5jdGlvbihlbGVtLCB0ZXh0RGF0YSkge1xuICBjb25zdCBuVGV4dCA9IHRleHREYXRhLnRleHQucmVwbGFjZSgvPGJyXFxzKlxcLz8+L2dpLCBcIiBcIik7XG4gIGNvbnN0IHRleHRFbGVtID0gZWxlbS5hcHBlbmQoXCJ0ZXh0XCIpO1xuICB0ZXh0RWxlbS5hdHRyKFwieFwiLCB0ZXh0RGF0YS54KTtcbiAgdGV4dEVsZW0uYXR0cihcInlcIiwgdGV4dERhdGEueSk7XG4gIHRleHRFbGVtLmF0dHIoXCJjbGFzc1wiLCBcImxlZ2VuZFwiKTtcbiAgdGV4dEVsZW0uc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCB0ZXh0RGF0YS5hbmNob3IpO1xuICBpZiAodGV4dERhdGEuY2xhc3MgIT09IHZvaWQgMCkge1xuICAgIHRleHRFbGVtLmF0dHIoXCJjbGFzc1wiLCB0ZXh0RGF0YS5jbGFzcyk7XG4gIH1cbiAgY29uc3Qgc3BhbiA9IHRleHRFbGVtLmFwcGVuZChcInRzcGFuXCIpO1xuICBzcGFuLmF0dHIoXCJ4XCIsIHRleHREYXRhLnggKyB0ZXh0RGF0YS50ZXh0TWFyZ2luICogMik7XG4gIHNwYW4udGV4dChuVGV4dCk7XG4gIHJldHVybiB0ZXh0RWxlbTtcbn07XG5jb25zdCBkcmF3TGFiZWwgPSBmdW5jdGlvbihlbGVtLCB0eHRPYmplY3QpIHtcbiAgZnVuY3Rpb24gZ2VuUG9pbnRzKHgsIHksIHdpZHRoLCBoZWlnaHQsIGN1dCkge1xuICAgIHJldHVybiB4ICsgXCIsXCIgKyB5ICsgXCIgXCIgKyAoeCArIHdpZHRoKSArIFwiLFwiICsgeSArIFwiIFwiICsgKHggKyB3aWR0aCkgKyBcIixcIiArICh5ICsgaGVpZ2h0IC0gY3V0KSArIFwiIFwiICsgKHggKyB3aWR0aCAtIGN1dCAqIDEuMikgKyBcIixcIiArICh5ICsgaGVpZ2h0KSArIFwiIFwiICsgeCArIFwiLFwiICsgKHkgKyBoZWlnaHQpO1xuICB9XG4gIGNvbnN0IHBvbHlnb24gPSBlbGVtLmFwcGVuZChcInBvbHlnb25cIik7XG4gIHBvbHlnb24uYXR0cihcInBvaW50c1wiLCBnZW5Qb2ludHModHh0T2JqZWN0LngsIHR4dE9iamVjdC55LCA1MCwgMjAsIDcpKTtcbiAgcG9seWdvbi5hdHRyKFwiY2xhc3NcIiwgXCJsYWJlbEJveFwiKTtcbiAgdHh0T2JqZWN0LnkgPSB0eHRPYmplY3QueSArIHR4dE9iamVjdC5sYWJlbE1hcmdpbjtcbiAgdHh0T2JqZWN0LnggPSB0eHRPYmplY3QueCArIDAuNSAqIHR4dE9iamVjdC5sYWJlbE1hcmdpbjtcbiAgZHJhd1RleHQoZWxlbSwgdHh0T2JqZWN0KTtcbn07XG5jb25zdCBkcmF3U2VjdGlvbiA9IGZ1bmN0aW9uKGVsZW0sIHNlY3Rpb24sIGNvbmYpIHtcbiAgY29uc3QgZyA9IGVsZW0uYXBwZW5kKFwiZ1wiKTtcbiAgY29uc3QgcmVjdCA9IGdldE5vdGVSZWN0KCk7XG4gIHJlY3QueCA9IHNlY3Rpb24ueDtcbiAgcmVjdC55ID0gc2VjdGlvbi55O1xuICByZWN0LmZpbGwgPSBzZWN0aW9uLmZpbGw7XG4gIHJlY3Qud2lkdGggPSBjb25mLndpZHRoO1xuICByZWN0LmhlaWdodCA9IGNvbmYuaGVpZ2h0O1xuICByZWN0LmNsYXNzID0gXCJqb3VybmV5LXNlY3Rpb24gc2VjdGlvbi10eXBlLVwiICsgc2VjdGlvbi5udW07XG4gIHJlY3QucnggPSAzO1xuICByZWN0LnJ5ID0gMztcbiAgZHJhd1JlY3QoZywgcmVjdCk7XG4gIF9kcmF3VGV4dENhbmRpZGF0ZUZ1bmMoY29uZikoXG4gICAgc2VjdGlvbi50ZXh0LFxuICAgIGcsXG4gICAgcmVjdC54LFxuICAgIHJlY3QueSxcbiAgICByZWN0LndpZHRoLFxuICAgIHJlY3QuaGVpZ2h0LFxuICAgIHsgY2xhc3M6IFwiam91cm5leS1zZWN0aW9uIHNlY3Rpb24tdHlwZS1cIiArIHNlY3Rpb24ubnVtIH0sXG4gICAgY29uZixcbiAgICBzZWN0aW9uLmNvbG91clxuICApO1xufTtcbmxldCB0YXNrQ291bnQgPSAtMTtcbmNvbnN0IGRyYXdUYXNrID0gZnVuY3Rpb24oZWxlbSwgdGFzaywgY29uZikge1xuICBjb25zdCBjZW50ZXIgPSB0YXNrLnggKyBjb25mLndpZHRoIC8gMjtcbiAgY29uc3QgZyA9IGVsZW0uYXBwZW5kKFwiZ1wiKTtcbiAgdGFza0NvdW50Kys7XG4gIGNvbnN0IG1heEhlaWdodCA9IDMwMCArIDUgKiAzMDtcbiAgZy5hcHBlbmQoXCJsaW5lXCIpLmF0dHIoXCJpZFwiLCBcInRhc2tcIiArIHRhc2tDb3VudCkuYXR0cihcIngxXCIsIGNlbnRlcikuYXR0cihcInkxXCIsIHRhc2sueSkuYXR0cihcIngyXCIsIGNlbnRlcikuYXR0cihcInkyXCIsIG1heEhlaWdodCkuYXR0cihcImNsYXNzXCIsIFwidGFzay1saW5lXCIpLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgXCIxcHhcIikuYXR0cihcInN0cm9rZS1kYXNoYXJyYXlcIiwgXCI0IDJcIikuYXR0cihcInN0cm9rZVwiLCBcIiM2NjZcIik7XG4gIGRyYXdGYWNlKGcsIHtcbiAgICBjeDogY2VudGVyLFxuICAgIGN5OiAzMDAgKyAoNSAtIHRhc2suc2NvcmUpICogMzAsXG4gICAgc2NvcmU6IHRhc2suc2NvcmVcbiAgfSk7XG4gIGNvbnN0IHJlY3QgPSBnZXROb3RlUmVjdCgpO1xuICByZWN0LnggPSB0YXNrLng7XG4gIHJlY3QueSA9IHRhc2sueTtcbiAgcmVjdC5maWxsID0gdGFzay5maWxsO1xuICByZWN0LndpZHRoID0gY29uZi53aWR0aDtcbiAgcmVjdC5oZWlnaHQgPSBjb25mLmhlaWdodDtcbiAgcmVjdC5jbGFzcyA9IFwidGFzayB0YXNrLXR5cGUtXCIgKyB0YXNrLm51bTtcbiAgcmVjdC5yeCA9IDM7XG4gIHJlY3QucnkgPSAzO1xuICBkcmF3UmVjdChnLCByZWN0KTtcbiAgdGFzay54ICsgMTQ7XG4gIF9kcmF3VGV4dENhbmRpZGF0ZUZ1bmMoY29uZikoXG4gICAgdGFzay50YXNrLFxuICAgIGcsXG4gICAgcmVjdC54LFxuICAgIHJlY3QueSxcbiAgICByZWN0LndpZHRoLFxuICAgIHJlY3QuaGVpZ2h0LFxuICAgIHsgY2xhc3M6IFwidGFza1wiIH0sXG4gICAgY29uZixcbiAgICB0YXNrLmNvbG91clxuICApO1xufTtcbmNvbnN0IGRyYXdCYWNrZ3JvdW5kUmVjdCA9IGZ1bmN0aW9uKGVsZW0sIGJvdW5kcykge1xuICBjb25zdCByZWN0RWxlbSA9IGRyYXdSZWN0KGVsZW0sIHtcbiAgICB4OiBib3VuZHMuc3RhcnR4LFxuICAgIHk6IGJvdW5kcy5zdGFydHksXG4gICAgd2lkdGg6IGJvdW5kcy5zdG9weCAtIGJvdW5kcy5zdGFydHgsXG4gICAgaGVpZ2h0OiBib3VuZHMuc3RvcHkgLSBib3VuZHMuc3RhcnR5LFxuICAgIGZpbGw6IGJvdW5kcy5maWxsLFxuICAgIGNsYXNzOiBcInJlY3RcIlxuICB9KTtcbiAgcmVjdEVsZW0ubG93ZXIoKTtcbn07XG5jb25zdCBnZXRUZXh0T2JqID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIGZpbGw6IHZvaWQgMCxcbiAgICBcInRleHQtYW5jaG9yXCI6IFwic3RhcnRcIixcbiAgICB3aWR0aDogMTAwLFxuICAgIGhlaWdodDogMTAwLFxuICAgIHRleHRNYXJnaW46IDAsXG4gICAgcng6IDAsXG4gICAgcnk6IDBcbiAgfTtcbn07XG5jb25zdCBnZXROb3RlUmVjdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHg6IDAsXG4gICAgeTogMCxcbiAgICB3aWR0aDogMTAwLFxuICAgIGFuY2hvcjogXCJzdGFydFwiLFxuICAgIGhlaWdodDogMTAwLFxuICAgIHJ4OiAwLFxuICAgIHJ5OiAwXG4gIH07XG59O1xuY29uc3QgX2RyYXdUZXh0Q2FuZGlkYXRlRnVuYyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBieVRleHQoY29udGVudCwgZywgeCwgeSwgd2lkdGgsIGhlaWdodCwgdGV4dEF0dHJzLCBjb2xvdXIpIHtcbiAgICBjb25zdCB0ZXh0ID0gZy5hcHBlbmQoXCJ0ZXh0XCIpLmF0dHIoXCJ4XCIsIHggKyB3aWR0aCAvIDIpLmF0dHIoXCJ5XCIsIHkgKyBoZWlnaHQgLyAyICsgNSkuc3R5bGUoXCJmb250LWNvbG9yXCIsIGNvbG91cikuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKS50ZXh0KGNvbnRlbnQpO1xuICAgIF9zZXRUZXh0QXR0cnModGV4dCwgdGV4dEF0dHJzKTtcbiAgfVxuICBmdW5jdGlvbiBieVRzcGFuKGNvbnRlbnQsIGcsIHgsIHksIHdpZHRoLCBoZWlnaHQsIHRleHRBdHRycywgY29uZiwgY29sb3VyKSB7XG4gICAgY29uc3QgeyB0YXNrRm9udFNpemUsIHRhc2tGb250RmFtaWx5IH0gPSBjb25mO1xuICAgIGNvbnN0IGxpbmVzID0gY29udGVudC5zcGxpdCgvPGJyXFxzKlxcLz8+L2dpKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBkeSA9IGkgKiB0YXNrRm9udFNpemUgLSB0YXNrRm9udFNpemUgKiAobGluZXMubGVuZ3RoIC0gMSkgLyAyO1xuICAgICAgY29uc3QgdGV4dCA9IGcuYXBwZW5kKFwidGV4dFwiKS5hdHRyKFwieFwiLCB4ICsgd2lkdGggLyAyKS5hdHRyKFwieVwiLCB5KS5hdHRyKFwiZmlsbFwiLCBjb2xvdXIpLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIikuc3R5bGUoXCJmb250LXNpemVcIiwgdGFza0ZvbnRTaXplKS5zdHlsZShcImZvbnQtZmFtaWx5XCIsIHRhc2tGb250RmFtaWx5KTtcbiAgICAgIHRleHQuYXBwZW5kKFwidHNwYW5cIikuYXR0cihcInhcIiwgeCArIHdpZHRoIC8gMikuYXR0cihcImR5XCIsIGR5KS50ZXh0KGxpbmVzW2ldKTtcbiAgICAgIHRleHQuYXR0cihcInlcIiwgeSArIGhlaWdodCAvIDIpLmF0dHIoXCJkb21pbmFudC1iYXNlbGluZVwiLCBcImNlbnRyYWxcIikuYXR0cihcImFsaWdubWVudC1iYXNlbGluZVwiLCBcImNlbnRyYWxcIik7XG4gICAgICBfc2V0VGV4dEF0dHJzKHRleHQsIHRleHRBdHRycyk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGJ5Rm8oY29udGVudCwgZywgeCwgeSwgd2lkdGgsIGhlaWdodCwgdGV4dEF0dHJzLCBjb25mKSB7XG4gICAgY29uc3QgYm9keSA9IGcuYXBwZW5kKFwic3dpdGNoXCIpO1xuICAgIGNvbnN0IGYgPSBib2R5LmFwcGVuZChcImZvcmVpZ25PYmplY3RcIikuYXR0cihcInhcIiwgeCkuYXR0cihcInlcIiwgeSkuYXR0cihcIndpZHRoXCIsIHdpZHRoKS5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodCkuYXR0cihcInBvc2l0aW9uXCIsIFwiZml4ZWRcIik7XG4gICAgY29uc3QgdGV4dCA9IGYuYXBwZW5kKFwieGh0bWw6ZGl2XCIpLnN0eWxlKFwiZGlzcGxheVwiLCBcInRhYmxlXCIpLnN0eWxlKFwiaGVpZ2h0XCIsIFwiMTAwJVwiKS5zdHlsZShcIndpZHRoXCIsIFwiMTAwJVwiKTtcbiAgICB0ZXh0LmFwcGVuZChcImRpdlwiKS5hdHRyKFwiY2xhc3NcIiwgXCJsYWJlbFwiKS5zdHlsZShcImRpc3BsYXlcIiwgXCJ0YWJsZS1jZWxsXCIpLnN0eWxlKFwidGV4dC1hbGlnblwiLCBcImNlbnRlclwiKS5zdHlsZShcInZlcnRpY2FsLWFsaWduXCIsIFwibWlkZGxlXCIpLnRleHQoY29udGVudCk7XG4gICAgYnlUc3Bhbihjb250ZW50LCBib2R5LCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCB0ZXh0QXR0cnMsIGNvbmYpO1xuICAgIF9zZXRUZXh0QXR0cnModGV4dCwgdGV4dEF0dHJzKTtcbiAgfVxuICBmdW5jdGlvbiBfc2V0VGV4dEF0dHJzKHRvVGV4dCwgZnJvbVRleHRBdHRyc0RpY3QpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBmcm9tVGV4dEF0dHJzRGljdCkge1xuICAgICAgaWYgKGtleSBpbiBmcm9tVGV4dEF0dHJzRGljdCkge1xuICAgICAgICB0b1RleHQuYXR0cihrZXksIGZyb21UZXh0QXR0cnNEaWN0W2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oY29uZikge1xuICAgIHJldHVybiBjb25mLnRleHRQbGFjZW1lbnQgPT09IFwiZm9cIiA/IGJ5Rm8gOiBjb25mLnRleHRQbGFjZW1lbnQgPT09IFwib2xkXCIgPyBieVRleHQgOiBieVRzcGFuO1xuICB9O1xufSgpO1xuY29uc3QgaW5pdEdyYXBoaWNzID0gZnVuY3Rpb24oZ3JhcGhpY3MpIHtcbiAgZ3JhcGhpY3MuYXBwZW5kKFwiZGVmc1wiKS5hcHBlbmQoXCJtYXJrZXJcIikuYXR0cihcImlkXCIsIFwiYXJyb3doZWFkXCIpLmF0dHIoXCJyZWZYXCIsIDUpLmF0dHIoXCJyZWZZXCIsIDIpLmF0dHIoXCJtYXJrZXJXaWR0aFwiLCA2KS5hdHRyKFwibWFya2VySGVpZ2h0XCIsIDQpLmF0dHIoXCJvcmllbnRcIiwgXCJhdXRvXCIpLmFwcGVuZChcInBhdGhcIikuYXR0cihcImRcIiwgXCJNIDAsMCBWIDQgTDYsMiBaXCIpO1xufTtcbmZ1bmN0aW9uIHdyYXAodGV4dCwgd2lkdGgpIHtcbiAgdGV4dC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIHZhciB0ZXh0MiA9IHNlbGVjdCh0aGlzKSwgd29yZHMgPSB0ZXh0Mi50ZXh0KCkuc3BsaXQoLyhcXHMrfDxicj4pLykucmV2ZXJzZSgpLCB3b3JkLCBsaW5lID0gW10sIGxpbmVIZWlnaHQgPSAxLjEsIHkgPSB0ZXh0Mi5hdHRyKFwieVwiKSwgZHkgPSBwYXJzZUZsb2F0KHRleHQyLmF0dHIoXCJkeVwiKSksIHRzcGFuID0gdGV4dDIudGV4dChudWxsKS5hcHBlbmQoXCJ0c3BhblwiKS5hdHRyKFwieFwiLCAwKS5hdHRyKFwieVwiLCB5KS5hdHRyKFwiZHlcIiwgZHkgKyBcImVtXCIpO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgd29yZHMubGVuZ3RoOyBqKyspIHtcbiAgICAgIHdvcmQgPSB3b3Jkc1t3b3Jkcy5sZW5ndGggLSAxIC0gal07XG4gICAgICBsaW5lLnB1c2god29yZCk7XG4gICAgICB0c3Bhbi50ZXh0KGxpbmUuam9pbihcIiBcIikudHJpbSgpKTtcbiAgICAgIGlmICh0c3Bhbi5ub2RlKCkuZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoKCkgPiB3aWR0aCB8fCB3b3JkID09PSBcIjxicj5cIikge1xuICAgICAgICBsaW5lLnBvcCgpO1xuICAgICAgICB0c3Bhbi50ZXh0KGxpbmUuam9pbihcIiBcIikudHJpbSgpKTtcbiAgICAgICAgaWYgKHdvcmQgPT09IFwiPGJyPlwiKSB7XG4gICAgICAgICAgbGluZSA9IFtcIlwiXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsaW5lID0gW3dvcmRdO1xuICAgICAgICB9XG4gICAgICAgIHRzcGFuID0gdGV4dDIuYXBwZW5kKFwidHNwYW5cIikuYXR0cihcInhcIiwgMCkuYXR0cihcInlcIiwgeSkuYXR0cihcImR5XCIsIGxpbmVIZWlnaHQgKyBcImVtXCIpLnRleHQod29yZCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbmNvbnN0IGRyYXdOb2RlID0gZnVuY3Rpb24oZWxlbSwgbm9kZSwgZnVsbFNlY3Rpb24sIGNvbmYpIHtcbiAgY29uc3Qgc2VjdGlvbiA9IGZ1bGxTZWN0aW9uICUgTUFYX1NFQ1RJT05TIC0gMTtcbiAgY29uc3Qgbm9kZUVsZW0gPSBlbGVtLmFwcGVuZChcImdcIik7XG4gIG5vZGUuc2VjdGlvbiA9IHNlY3Rpb247XG4gIG5vZGVFbGVtLmF0dHIoXG4gICAgXCJjbGFzc1wiLFxuICAgIChub2RlLmNsYXNzID8gbm9kZS5jbGFzcyArIFwiIFwiIDogXCJcIikgKyBcInRpbWVsaW5lLW5vZGUgXCIgKyAoXCJzZWN0aW9uLVwiICsgc2VjdGlvbilcbiAgKTtcbiAgY29uc3QgYmtnRWxlbSA9IG5vZGVFbGVtLmFwcGVuZChcImdcIik7XG4gIGNvbnN0IHRleHRFbGVtID0gbm9kZUVsZW0uYXBwZW5kKFwiZ1wiKTtcbiAgY29uc3QgdHh0ID0gdGV4dEVsZW0uYXBwZW5kKFwidGV4dFwiKS50ZXh0KG5vZGUuZGVzY3IpLmF0dHIoXCJkeVwiLCBcIjFlbVwiKS5hdHRyKFwiYWxpZ25tZW50LWJhc2VsaW5lXCIsIFwibWlkZGxlXCIpLmF0dHIoXCJkb21pbmFudC1iYXNlbGluZVwiLCBcIm1pZGRsZVwiKS5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIikuY2FsbCh3cmFwLCBub2RlLndpZHRoKTtcbiAgY29uc3QgYmJveCA9IHR4dC5ub2RlKCkuZ2V0QkJveCgpO1xuICBjb25zdCBmb250U2l6ZSA9IGNvbmYuZm9udFNpemUgJiYgY29uZi5mb250U2l6ZS5yZXBsYWNlID8gY29uZi5mb250U2l6ZS5yZXBsYWNlKFwicHhcIiwgXCJcIikgOiBjb25mLmZvbnRTaXplO1xuICBub2RlLmhlaWdodCA9IGJib3guaGVpZ2h0ICsgZm9udFNpemUgKiAxLjEgKiAwLjUgKyBub2RlLnBhZGRpbmc7XG4gIG5vZGUuaGVpZ2h0ID0gTWF0aC5tYXgobm9kZS5oZWlnaHQsIG5vZGUubWF4SGVpZ2h0KTtcbiAgbm9kZS53aWR0aCA9IG5vZGUud2lkdGggKyAyICogbm9kZS5wYWRkaW5nO1xuICB0ZXh0RWxlbS5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbm9kZS53aWR0aCAvIDIgKyBcIiwgXCIgKyBub2RlLnBhZGRpbmcgLyAyICsgXCIpXCIpO1xuICBkZWZhdWx0QmtnKGJrZ0VsZW0sIG5vZGUsIHNlY3Rpb24pO1xuICByZXR1cm4gbm9kZTtcbn07XG5jb25zdCBnZXRWaXJ0dWFsTm9kZUhlaWdodCA9IGZ1bmN0aW9uKGVsZW0sIG5vZGUsIGNvbmYpIHtcbiAgY29uc3QgdGV4dEVsZW0gPSBlbGVtLmFwcGVuZChcImdcIik7XG4gIGNvbnN0IHR4dCA9IHRleHRFbGVtLmFwcGVuZChcInRleHRcIikudGV4dChub2RlLmRlc2NyKS5hdHRyKFwiZHlcIiwgXCIxZW1cIikuYXR0cihcImFsaWdubWVudC1iYXNlbGluZVwiLCBcIm1pZGRsZVwiKS5hdHRyKFwiZG9taW5hbnQtYmFzZWxpbmVcIiwgXCJtaWRkbGVcIikuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpLmNhbGwod3JhcCwgbm9kZS53aWR0aCk7XG4gIGNvbnN0IGJib3ggPSB0eHQubm9kZSgpLmdldEJCb3goKTtcbiAgY29uc3QgZm9udFNpemUgPSBjb25mLmZvbnRTaXplICYmIGNvbmYuZm9udFNpemUucmVwbGFjZSA/IGNvbmYuZm9udFNpemUucmVwbGFjZShcInB4XCIsIFwiXCIpIDogY29uZi5mb250U2l6ZTtcbiAgdGV4dEVsZW0ucmVtb3ZlKCk7XG4gIHJldHVybiBiYm94LmhlaWdodCArIGZvbnRTaXplICogMS4xICogMC41ICsgbm9kZS5wYWRkaW5nO1xufTtcbmNvbnN0IGRlZmF1bHRCa2cgPSBmdW5jdGlvbihlbGVtLCBub2RlLCBzZWN0aW9uKSB7XG4gIGNvbnN0IHJkID0gNTtcbiAgZWxlbS5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJpZFwiLCBcIm5vZGUtXCIgKyBub2RlLmlkKS5hdHRyKFwiY2xhc3NcIiwgXCJub2RlLWJrZyBub2RlLVwiICsgbm9kZS50eXBlKS5hdHRyKFxuICAgIFwiZFwiLFxuICAgIGBNMCAke25vZGUuaGVpZ2h0IC0gcmR9IHYkey1ub2RlLmhlaWdodCArIDIgKiByZH0gcTAsLTUgNSwtNSBoJHtub2RlLndpZHRoIC0gMiAqIHJkfSBxNSwwIDUsNSB2JHtub2RlLmhlaWdodCAtIHJkfSBIMCBaYFxuICApO1xuICBlbGVtLmFwcGVuZChcImxpbmVcIikuYXR0cihcImNsYXNzXCIsIFwibm9kZS1saW5lLVwiICsgc2VjdGlvbikuYXR0cihcIngxXCIsIDApLmF0dHIoXCJ5MVwiLCBub2RlLmhlaWdodCkuYXR0cihcIngyXCIsIG5vZGUud2lkdGgpLmF0dHIoXCJ5MlwiLCBub2RlLmhlaWdodCk7XG59O1xuY29uc3Qgc3ZnRHJhdyA9IHtcbiAgZHJhd1JlY3QsXG4gIGRyYXdDaXJjbGUsXG4gIGRyYXdTZWN0aW9uLFxuICBkcmF3VGV4dCxcbiAgZHJhd0xhYmVsLFxuICBkcmF3VGFzayxcbiAgZHJhd0JhY2tncm91bmRSZWN0LFxuICBnZXRUZXh0T2JqLFxuICBnZXROb3RlUmVjdCxcbiAgaW5pdEdyYXBoaWNzLFxuICBkcmF3Tm9kZSxcbiAgZ2V0VmlydHVhbE5vZGVIZWlnaHRcbn07XG5jb25zdCBkcmF3ID0gZnVuY3Rpb24odGV4dCwgaWQsIHZlcnNpb24sIGRpYWdPYmopIHtcbiAgdmFyIF9hLCBfYjtcbiAgY29uc3QgY29uZiA9IGdldENvbmZpZygpO1xuICBjb25zdCBMRUZUX01BUkdJTiA9IGNvbmYubGVmdE1hcmdpbiA/PyA1MDtcbiAgbG9nLmRlYnVnKFwidGltZWxpbmVcIiwgZGlhZ09iai5kYik7XG4gIGNvbnN0IHNlY3VyaXR5TGV2ZWwgPSBjb25mLnNlY3VyaXR5TGV2ZWw7XG4gIGxldCBzYW5kYm94RWxlbWVudDtcbiAgaWYgKHNlY3VyaXR5TGV2ZWwgPT09IFwic2FuZGJveFwiKSB7XG4gICAgc2FuZGJveEVsZW1lbnQgPSBzZWxlY3QoXCIjaVwiICsgaWQpO1xuICB9XG4gIGNvbnN0IHJvb3QgPSBzZWN1cml0eUxldmVsID09PSBcInNhbmRib3hcIiA/IHNlbGVjdChzYW5kYm94RWxlbWVudC5ub2RlcygpWzBdLmNvbnRlbnREb2N1bWVudC5ib2R5KSA6IHNlbGVjdChcImJvZHlcIik7XG4gIGNvbnN0IHN2ZyA9IHJvb3Quc2VsZWN0KFwiI1wiICsgaWQpO1xuICBzdmcuYXBwZW5kKFwiZ1wiKTtcbiAgY29uc3QgdGFza3MyID0gZGlhZ09iai5kYi5nZXRUYXNrcygpO1xuICBjb25zdCB0aXRsZSA9IGRpYWdPYmouZGIuZ2V0Q29tbW9uRGIoKS5nZXREaWFncmFtVGl0bGUoKTtcbiAgbG9nLmRlYnVnKFwidGFza1wiLCB0YXNrczIpO1xuICBzdmdEcmF3LmluaXRHcmFwaGljcyhzdmcpO1xuICBjb25zdCBzZWN0aW9uczIgPSBkaWFnT2JqLmRiLmdldFNlY3Rpb25zKCk7XG4gIGxvZy5kZWJ1ZyhcInNlY3Rpb25zXCIsIHNlY3Rpb25zMik7XG4gIGxldCBtYXhTZWN0aW9uSGVpZ2h0ID0gMDtcbiAgbGV0IG1heFRhc2tIZWlnaHQgPSAwO1xuICBsZXQgZGVwdGhZID0gMDtcbiAgbGV0IHNlY3Rpb25CZWdpblkgPSAwO1xuICBsZXQgbWFzdGVyWCA9IDUwICsgTEVGVF9NQVJHSU47XG4gIGxldCBtYXN0ZXJZID0gNTA7XG4gIHNlY3Rpb25CZWdpblkgPSA1MDtcbiAgbGV0IHNlY3Rpb25OdW1iZXIgPSAwO1xuICBsZXQgaGFzU2VjdGlvbnMgPSB0cnVlO1xuICBzZWN0aW9uczIuZm9yRWFjaChmdW5jdGlvbihzZWN0aW9uKSB7XG4gICAgY29uc3Qgc2VjdGlvbk5vZGUgPSB7XG4gICAgICBudW1iZXI6IHNlY3Rpb25OdW1iZXIsXG4gICAgICBkZXNjcjogc2VjdGlvbixcbiAgICAgIHNlY3Rpb246IHNlY3Rpb25OdW1iZXIsXG4gICAgICB3aWR0aDogMTUwLFxuICAgICAgcGFkZGluZzogMjAsXG4gICAgICBtYXhIZWlnaHQ6IG1heFNlY3Rpb25IZWlnaHRcbiAgICB9O1xuICAgIGNvbnN0IHNlY3Rpb25IZWlnaHQgPSBzdmdEcmF3LmdldFZpcnR1YWxOb2RlSGVpZ2h0KHN2Zywgc2VjdGlvbk5vZGUsIGNvbmYpO1xuICAgIGxvZy5kZWJ1ZyhcInNlY3Rpb25IZWlnaHQgYmVmb3JlIGRyYXdcIiwgc2VjdGlvbkhlaWdodCk7XG4gICAgbWF4U2VjdGlvbkhlaWdodCA9IE1hdGgubWF4KG1heFNlY3Rpb25IZWlnaHQsIHNlY3Rpb25IZWlnaHQgKyAyMCk7XG4gIH0pO1xuICBsZXQgbWF4RXZlbnRDb3VudCA9IDA7XG4gIGxldCBtYXhFdmVudExpbmVMZW5ndGggPSAwO1xuICBsb2cuZGVidWcoXCJ0YXNrcy5sZW5ndGhcIiwgdGFza3MyLmxlbmd0aCk7XG4gIGZvciAoY29uc3QgW2ksIHRhc2tdIG9mIHRhc2tzMi5lbnRyaWVzKCkpIHtcbiAgICBjb25zdCB0YXNrTm9kZSA9IHtcbiAgICAgIG51bWJlcjogaSxcbiAgICAgIGRlc2NyOiB0YXNrLFxuICAgICAgc2VjdGlvbjogdGFzay5zZWN0aW9uLFxuICAgICAgd2lkdGg6IDE1MCxcbiAgICAgIHBhZGRpbmc6IDIwLFxuICAgICAgbWF4SGVpZ2h0OiBtYXhUYXNrSGVpZ2h0XG4gICAgfTtcbiAgICBjb25zdCB0YXNrSGVpZ2h0ID0gc3ZnRHJhdy5nZXRWaXJ0dWFsTm9kZUhlaWdodChzdmcsIHRhc2tOb2RlLCBjb25mKTtcbiAgICBsb2cuZGVidWcoXCJ0YXNrSGVpZ2h0IGJlZm9yZSBkcmF3XCIsIHRhc2tIZWlnaHQpO1xuICAgIG1heFRhc2tIZWlnaHQgPSBNYXRoLm1heChtYXhUYXNrSGVpZ2h0LCB0YXNrSGVpZ2h0ICsgMjApO1xuICAgIG1heEV2ZW50Q291bnQgPSBNYXRoLm1heChtYXhFdmVudENvdW50LCB0YXNrLmV2ZW50cy5sZW5ndGgpO1xuICAgIGxldCBtYXhFdmVudExpbmVMZW5ndGhUZW1wID0gMDtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRhc2suZXZlbnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICBjb25zdCBldmVudCA9IHRhc2suZXZlbnRzW2pdO1xuICAgICAgY29uc3QgZXZlbnROb2RlID0ge1xuICAgICAgICBkZXNjcjogZXZlbnQsXG4gICAgICAgIHNlY3Rpb246IHRhc2suc2VjdGlvbixcbiAgICAgICAgbnVtYmVyOiB0YXNrLnNlY3Rpb24sXG4gICAgICAgIHdpZHRoOiAxNTAsXG4gICAgICAgIHBhZGRpbmc6IDIwLFxuICAgICAgICBtYXhIZWlnaHQ6IDUwXG4gICAgICB9O1xuICAgICAgbWF4RXZlbnRMaW5lTGVuZ3RoVGVtcCArPSBzdmdEcmF3LmdldFZpcnR1YWxOb2RlSGVpZ2h0KHN2ZywgZXZlbnROb2RlLCBjb25mKTtcbiAgICB9XG4gICAgbWF4RXZlbnRMaW5lTGVuZ3RoID0gTWF0aC5tYXgobWF4RXZlbnRMaW5lTGVuZ3RoLCBtYXhFdmVudExpbmVMZW5ndGhUZW1wKTtcbiAgfVxuICBsb2cuZGVidWcoXCJtYXhTZWN0aW9uSGVpZ2h0IGJlZm9yZSBkcmF3XCIsIG1heFNlY3Rpb25IZWlnaHQpO1xuICBsb2cuZGVidWcoXCJtYXhUYXNrSGVpZ2h0IGJlZm9yZSBkcmF3XCIsIG1heFRhc2tIZWlnaHQpO1xuICBpZiAoc2VjdGlvbnMyICYmIHNlY3Rpb25zMi5sZW5ndGggPiAwKSB7XG4gICAgc2VjdGlvbnMyLmZvckVhY2goKHNlY3Rpb24pID0+IHtcbiAgICAgIGNvbnN0IHRhc2tzRm9yU2VjdGlvbiA9IHRhc2tzMi5maWx0ZXIoKHRhc2spID0+IHRhc2suc2VjdGlvbiA9PT0gc2VjdGlvbik7XG4gICAgICBjb25zdCBzZWN0aW9uTm9kZSA9IHtcbiAgICAgICAgbnVtYmVyOiBzZWN0aW9uTnVtYmVyLFxuICAgICAgICBkZXNjcjogc2VjdGlvbixcbiAgICAgICAgc2VjdGlvbjogc2VjdGlvbk51bWJlcixcbiAgICAgICAgd2lkdGg6IDIwMCAqIE1hdGgubWF4KHRhc2tzRm9yU2VjdGlvbi5sZW5ndGgsIDEpIC0gNTAsXG4gICAgICAgIHBhZGRpbmc6IDIwLFxuICAgICAgICBtYXhIZWlnaHQ6IG1heFNlY3Rpb25IZWlnaHRcbiAgICAgIH07XG4gICAgICBsb2cuZGVidWcoXCJzZWN0aW9uTm9kZVwiLCBzZWN0aW9uTm9kZSk7XG4gICAgICBjb25zdCBzZWN0aW9uTm9kZVdyYXBwZXIgPSBzdmcuYXBwZW5kKFwiZ1wiKTtcbiAgICAgIGNvbnN0IG5vZGUgPSBzdmdEcmF3LmRyYXdOb2RlKHNlY3Rpb25Ob2RlV3JhcHBlciwgc2VjdGlvbk5vZGUsIHNlY3Rpb25OdW1iZXIsIGNvbmYpO1xuICAgICAgbG9nLmRlYnVnKFwic2VjdGlvbk5vZGUgb3V0cHV0XCIsIG5vZGUpO1xuICAgICAgc2VjdGlvbk5vZGVXcmFwcGVyLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke21hc3Rlclh9LCAke3NlY3Rpb25CZWdpbll9KWApO1xuICAgICAgbWFzdGVyWSArPSBtYXhTZWN0aW9uSGVpZ2h0ICsgNTA7XG4gICAgICBpZiAodGFza3NGb3JTZWN0aW9uLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZHJhd1Rhc2tzKFxuICAgICAgICAgIHN2ZyxcbiAgICAgICAgICB0YXNrc0ZvclNlY3Rpb24sXG4gICAgICAgICAgc2VjdGlvbk51bWJlcixcbiAgICAgICAgICBtYXN0ZXJYLFxuICAgICAgICAgIG1hc3RlclksXG4gICAgICAgICAgbWF4VGFza0hlaWdodCxcbiAgICAgICAgICBjb25mLFxuICAgICAgICAgIG1heEV2ZW50Q291bnQsXG4gICAgICAgICAgbWF4RXZlbnRMaW5lTGVuZ3RoLFxuICAgICAgICAgIG1heFNlY3Rpb25IZWlnaHQsXG4gICAgICAgICAgZmFsc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIG1hc3RlclggKz0gMjAwICogTWF0aC5tYXgodGFza3NGb3JTZWN0aW9uLmxlbmd0aCwgMSk7XG4gICAgICBtYXN0ZXJZID0gc2VjdGlvbkJlZ2luWTtcbiAgICAgIHNlY3Rpb25OdW1iZXIrKztcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBoYXNTZWN0aW9ucyA9IGZhbHNlO1xuICAgIGRyYXdUYXNrcyhcbiAgICAgIHN2ZyxcbiAgICAgIHRhc2tzMixcbiAgICAgIHNlY3Rpb25OdW1iZXIsXG4gICAgICBtYXN0ZXJYLFxuICAgICAgbWFzdGVyWSxcbiAgICAgIG1heFRhc2tIZWlnaHQsXG4gICAgICBjb25mLFxuICAgICAgbWF4RXZlbnRDb3VudCxcbiAgICAgIG1heEV2ZW50TGluZUxlbmd0aCxcbiAgICAgIG1heFNlY3Rpb25IZWlnaHQsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgfVxuICBjb25zdCBib3ggPSBzdmcubm9kZSgpLmdldEJCb3goKTtcbiAgbG9nLmRlYnVnKFwiYm91bmRzXCIsIGJveCk7XG4gIGlmICh0aXRsZSkge1xuICAgIHN2Zy5hcHBlbmQoXCJ0ZXh0XCIpLnRleHQodGl0bGUpLmF0dHIoXCJ4XCIsIGJveC53aWR0aCAvIDIgLSBMRUZUX01BUkdJTikuYXR0cihcImZvbnQtc2l6ZVwiLCBcIjRleFwiKS5hdHRyKFwiZm9udC13ZWlnaHRcIiwgXCJib2xkXCIpLmF0dHIoXCJ5XCIsIDIwKTtcbiAgfVxuICBkZXB0aFkgPSBoYXNTZWN0aW9ucyA/IG1heFNlY3Rpb25IZWlnaHQgKyBtYXhUYXNrSGVpZ2h0ICsgMTUwIDogbWF4VGFza0hlaWdodCArIDEwMDtcbiAgY29uc3QgbGluZVdyYXBwZXIgPSBzdmcuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgXCJsaW5lV3JhcHBlclwiKTtcbiAgbGluZVdyYXBwZXIuYXBwZW5kKFwibGluZVwiKS5hdHRyKFwieDFcIiwgTEVGVF9NQVJHSU4pLmF0dHIoXCJ5MVwiLCBkZXB0aFkpLmF0dHIoXCJ4MlwiLCBib3gud2lkdGggKyAzICogTEVGVF9NQVJHSU4pLmF0dHIoXCJ5MlwiLCBkZXB0aFkpLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgNCkuYXR0cihcInN0cm9rZVwiLCBcImJsYWNrXCIpLmF0dHIoXCJtYXJrZXItZW5kXCIsIFwidXJsKCNhcnJvd2hlYWQpXCIpO1xuICBzZXR1cEdyYXBoVmlld2JveChcbiAgICB2b2lkIDAsXG4gICAgc3ZnLFxuICAgICgoX2EgPSBjb25mLnRpbWVsaW5lKSA9PSBudWxsID8gdm9pZCAwIDogX2EucGFkZGluZykgPz8gNTAsXG4gICAgKChfYiA9IGNvbmYudGltZWxpbmUpID09IG51bGwgPyB2b2lkIDAgOiBfYi51c2VNYXhXaWR0aCkgPz8gZmFsc2VcbiAgKTtcbn07XG5jb25zdCBkcmF3VGFza3MgPSBmdW5jdGlvbihkaWFncmFtMiwgdGFza3MyLCBzZWN0aW9uQ29sb3IsIG1hc3RlclgsIG1hc3RlclksIG1heFRhc2tIZWlnaHQsIGNvbmYsIG1heEV2ZW50Q291bnQsIG1heEV2ZW50TGluZUxlbmd0aCwgbWF4U2VjdGlvbkhlaWdodCwgaXNXaXRob3V0U2VjdGlvbnMpIHtcbiAgdmFyIF9hO1xuICBmb3IgKGNvbnN0IHRhc2sgb2YgdGFza3MyKSB7XG4gICAgY29uc3QgdGFza05vZGUgPSB7XG4gICAgICBkZXNjcjogdGFzay50YXNrLFxuICAgICAgc2VjdGlvbjogc2VjdGlvbkNvbG9yLFxuICAgICAgbnVtYmVyOiBzZWN0aW9uQ29sb3IsXG4gICAgICB3aWR0aDogMTUwLFxuICAgICAgcGFkZGluZzogMjAsXG4gICAgICBtYXhIZWlnaHQ6IG1heFRhc2tIZWlnaHRcbiAgICB9O1xuICAgIGxvZy5kZWJ1ZyhcInRhc2tOb2RlXCIsIHRhc2tOb2RlKTtcbiAgICBjb25zdCB0YXNrV3JhcHBlciA9IGRpYWdyYW0yLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwidGFza1dyYXBwZXJcIik7XG4gICAgY29uc3Qgbm9kZSA9IHN2Z0RyYXcuZHJhd05vZGUodGFza1dyYXBwZXIsIHRhc2tOb2RlLCBzZWN0aW9uQ29sb3IsIGNvbmYpO1xuICAgIGNvbnN0IHRhc2tIZWlnaHQgPSBub2RlLmhlaWdodDtcbiAgICBsb2cuZGVidWcoXCJ0YXNrSGVpZ2h0IGFmdGVyIGRyYXdcIiwgdGFza0hlaWdodCk7XG4gICAgdGFza1dyYXBwZXIuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bWFzdGVyWH0sICR7bWFzdGVyWX0pYCk7XG4gICAgbWF4VGFza0hlaWdodCA9IE1hdGgubWF4KG1heFRhc2tIZWlnaHQsIHRhc2tIZWlnaHQpO1xuICAgIGlmICh0YXNrLmV2ZW50cykge1xuICAgICAgY29uc3QgbGluZVdyYXBwZXIgPSBkaWFncmFtMi5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcImxpbmVXcmFwcGVyXCIpO1xuICAgICAgbGV0IGxpbmVMZW5ndGggPSBtYXhUYXNrSGVpZ2h0O1xuICAgICAgbWFzdGVyWSArPSAxMDA7XG4gICAgICBsaW5lTGVuZ3RoID0gbGluZUxlbmd0aCArIGRyYXdFdmVudHMoZGlhZ3JhbTIsIHRhc2suZXZlbnRzLCBzZWN0aW9uQ29sb3IsIG1hc3RlclgsIG1hc3RlclksIGNvbmYpO1xuICAgICAgbWFzdGVyWSAtPSAxMDA7XG4gICAgICBsaW5lV3JhcHBlci5hcHBlbmQoXCJsaW5lXCIpLmF0dHIoXCJ4MVwiLCBtYXN0ZXJYICsgMTkwIC8gMikuYXR0cihcInkxXCIsIG1hc3RlclkgKyBtYXhUYXNrSGVpZ2h0KS5hdHRyKFwieDJcIiwgbWFzdGVyWCArIDE5MCAvIDIpLmF0dHIoXG4gICAgICAgIFwieTJcIixcbiAgICAgICAgbWFzdGVyWSArIG1heFRhc2tIZWlnaHQgKyAoaXNXaXRob3V0U2VjdGlvbnMgPyBtYXhUYXNrSGVpZ2h0IDogbWF4U2VjdGlvbkhlaWdodCkgKyBtYXhFdmVudExpbmVMZW5ndGggKyAxMjBcbiAgICAgICkuYXR0cihcInN0cm9rZS13aWR0aFwiLCAyKS5hdHRyKFwic3Ryb2tlXCIsIFwiYmxhY2tcIikuYXR0cihcIm1hcmtlci1lbmRcIiwgXCJ1cmwoI2Fycm93aGVhZClcIikuYXR0cihcInN0cm9rZS1kYXNoYXJyYXlcIiwgXCI1LDVcIik7XG4gICAgfVxuICAgIG1hc3RlclggPSBtYXN0ZXJYICsgMjAwO1xuICAgIGlmIChpc1dpdGhvdXRTZWN0aW9ucyAmJiAhKChfYSA9IGNvbmYudGltZWxpbmUpID09IG51bGwgPyB2b2lkIDAgOiBfYS5kaXNhYmxlTXVsdGljb2xvcikpIHtcbiAgICAgIHNlY3Rpb25Db2xvcisrO1xuICAgIH1cbiAgfVxuICBtYXN0ZXJZID0gbWFzdGVyWSAtIDEwO1xufTtcbmNvbnN0IGRyYXdFdmVudHMgPSBmdW5jdGlvbihkaWFncmFtMiwgZXZlbnRzLCBzZWN0aW9uQ29sb3IsIG1hc3RlclgsIG1hc3RlclksIGNvbmYpIHtcbiAgbGV0IG1heEV2ZW50SGVpZ2h0ID0gMDtcbiAgY29uc3QgZXZlbnRCZWdpblkgPSBtYXN0ZXJZO1xuICBtYXN0ZXJZID0gbWFzdGVyWSArIDEwMDtcbiAgZm9yIChjb25zdCBldmVudCBvZiBldmVudHMpIHtcbiAgICBjb25zdCBldmVudE5vZGUgPSB7XG4gICAgICBkZXNjcjogZXZlbnQsXG4gICAgICBzZWN0aW9uOiBzZWN0aW9uQ29sb3IsXG4gICAgICBudW1iZXI6IHNlY3Rpb25Db2xvcixcbiAgICAgIHdpZHRoOiAxNTAsXG4gICAgICBwYWRkaW5nOiAyMCxcbiAgICAgIG1heEhlaWdodDogNTBcbiAgICB9O1xuICAgIGxvZy5kZWJ1ZyhcImV2ZW50Tm9kZVwiLCBldmVudE5vZGUpO1xuICAgIGNvbnN0IGV2ZW50V3JhcHBlciA9IGRpYWdyYW0yLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwiZXZlbnRXcmFwcGVyXCIpO1xuICAgIGNvbnN0IG5vZGUgPSBzdmdEcmF3LmRyYXdOb2RlKGV2ZW50V3JhcHBlciwgZXZlbnROb2RlLCBzZWN0aW9uQ29sb3IsIGNvbmYpO1xuICAgIGNvbnN0IGV2ZW50SGVpZ2h0ID0gbm9kZS5oZWlnaHQ7XG4gICAgbWF4RXZlbnRIZWlnaHQgPSBtYXhFdmVudEhlaWdodCArIGV2ZW50SGVpZ2h0O1xuICAgIGV2ZW50V3JhcHBlci5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHttYXN0ZXJYfSwgJHttYXN0ZXJZfSlgKTtcbiAgICBtYXN0ZXJZID0gbWFzdGVyWSArIDEwICsgZXZlbnRIZWlnaHQ7XG4gIH1cbiAgbWFzdGVyWSA9IGV2ZW50QmVnaW5ZO1xuICByZXR1cm4gbWF4RXZlbnRIZWlnaHQ7XG59O1xuY29uc3QgcmVuZGVyZXIgPSB7XG4gIHNldENvbmY6ICgpID0+IHtcbiAgfSxcbiAgZHJhd1xufTtcbmNvbnN0IGdlblNlY3Rpb25zID0gKG9wdGlvbnMpID0+IHtcbiAgbGV0IHNlY3Rpb25zMiA9IFwiXCI7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgb3B0aW9ucy5USEVNRV9DT0xPUl9MSU1JVDsgaSsrKSB7XG4gICAgb3B0aW9uc1tcImxpbmVDb2xvclwiICsgaV0gPSBvcHRpb25zW1wibGluZUNvbG9yXCIgKyBpXSB8fCBvcHRpb25zW1wiY1NjYWxlSW52XCIgKyBpXTtcbiAgICBpZiAoaXNEYXJrKG9wdGlvbnNbXCJsaW5lQ29sb3JcIiArIGldKSkge1xuICAgICAgb3B0aW9uc1tcImxpbmVDb2xvclwiICsgaV0gPSBsaWdodGVuKG9wdGlvbnNbXCJsaW5lQ29sb3JcIiArIGldLCAyMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnNbXCJsaW5lQ29sb3JcIiArIGldID0gZGFya2VuKG9wdGlvbnNbXCJsaW5lQ29sb3JcIiArIGldLCAyMCk7XG4gICAgfVxuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgb3B0aW9ucy5USEVNRV9DT0xPUl9MSU1JVDsgaSsrKSB7XG4gICAgY29uc3Qgc3cgPSBcIlwiICsgKDE3IC0gMyAqIGkpO1xuICAgIHNlY3Rpb25zMiArPSBgXG4gICAgLnNlY3Rpb24tJHtpIC0gMX0gcmVjdCwgLnNlY3Rpb24tJHtpIC0gMX0gcGF0aCwgLnNlY3Rpb24tJHtpIC0gMX0gY2lyY2xlLCAuc2VjdGlvbi0ke2kgLSAxfSBwYXRoICB7XG4gICAgICBmaWxsOiAke29wdGlvbnNbXCJjU2NhbGVcIiArIGldfTtcbiAgICB9XG4gICAgLnNlY3Rpb24tJHtpIC0gMX0gdGV4dCB7XG4gICAgIGZpbGw6ICR7b3B0aW9uc1tcImNTY2FsZUxhYmVsXCIgKyBpXX07XG4gICAgfVxuICAgIC5ub2RlLWljb24tJHtpIC0gMX0ge1xuICAgICAgZm9udC1zaXplOiA0MHB4O1xuICAgICAgY29sb3I6ICR7b3B0aW9uc1tcImNTY2FsZUxhYmVsXCIgKyBpXX07XG4gICAgfVxuICAgIC5zZWN0aW9uLWVkZ2UtJHtpIC0gMX17XG4gICAgICBzdHJva2U6ICR7b3B0aW9uc1tcImNTY2FsZVwiICsgaV19O1xuICAgIH1cbiAgICAuZWRnZS1kZXB0aC0ke2kgLSAxfXtcbiAgICAgIHN0cm9rZS13aWR0aDogJHtzd307XG4gICAgfVxuICAgIC5zZWN0aW9uLSR7aSAtIDF9IGxpbmUge1xuICAgICAgc3Ryb2tlOiAke29wdGlvbnNbXCJjU2NhbGVJbnZcIiArIGldfSA7XG4gICAgICBzdHJva2Utd2lkdGg6IDM7XG4gICAgfVxuXG4gICAgLmxpbmVXcmFwcGVyIGxpbmV7XG4gICAgICBzdHJva2U6ICR7b3B0aW9uc1tcImNTY2FsZUxhYmVsXCIgKyBpXX0gO1xuICAgIH1cblxuICAgIC5kaXNhYmxlZCwgLmRpc2FibGVkIGNpcmNsZSwgLmRpc2FibGVkIHRleHQge1xuICAgICAgZmlsbDogbGlnaHRncmF5O1xuICAgIH1cbiAgICAuZGlzYWJsZWQgdGV4dCB7XG4gICAgICBmaWxsOiAjZWZlZmVmO1xuICAgIH1cbiAgICBgO1xuICB9XG4gIHJldHVybiBzZWN0aW9uczI7XG59O1xuY29uc3QgZ2V0U3R5bGVzID0gKG9wdGlvbnMpID0+IGBcbiAgLmVkZ2Uge1xuICAgIHN0cm9rZS13aWR0aDogMztcbiAgfVxuICAke2dlblNlY3Rpb25zKG9wdGlvbnMpfVxuICAuc2VjdGlvbi1yb290IHJlY3QsIC5zZWN0aW9uLXJvb3QgcGF0aCwgLnNlY3Rpb24tcm9vdCBjaXJjbGUgIHtcbiAgICBmaWxsOiAke29wdGlvbnMuZ2l0MH07XG4gIH1cbiAgLnNlY3Rpb24tcm9vdCB0ZXh0IHtcbiAgICBmaWxsOiAke29wdGlvbnMuZ2l0QnJhbmNoTGFiZWwwfTtcbiAgfVxuICAuaWNvbi1jb250YWluZXIge1xuICAgIGhlaWdodDoxMDAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuICAuZWRnZSB7XG4gICAgZmlsbDogbm9uZTtcbiAgfVxuICAuZXZlbnRXcmFwcGVyICB7XG4gICBmaWx0ZXI6IGJyaWdodG5lc3MoMTIwJSk7XG4gIH1cbmA7XG5jb25zdCBzdHlsZXMgPSBnZXRTdHlsZXM7XG5jb25zdCBkaWFncmFtID0ge1xuICBkYixcbiAgcmVuZGVyZXIsXG4gIHBhcnNlcjogcGFyc2VyJDEsXG4gIHN0eWxlc1xufTtcbmV4cG9ydCB7XG4gIGRpYWdyYW1cbn07XG4iXSwibmFtZXMiOlsiSyIsImNvbW1vbkRiIiwidCIsImNsZWFyJDEiLCJjIiwiZ2V0Q29uZmlnIiwibCIsImxvZyIsIm8iLCJzZXR1cEdyYXBoVmlld2JveCIsInNlbGVjdCIsImFyYyIsImlzRGFyayIsImxpZ2h0ZW4iLCJkYXJrZW4iLCJwYXJzZXIiLCJrIiwidiIsIm8yIiwibGVuZ3RoIiwiJFYwIiwiJFYxIiwiJFYyIiwiJFYzIiwiJFY0IiwiJFY1IiwiJFY2IiwiJFY3IiwicGFyc2VyMiIsInRyYWNlIiwieXkiLCJzeW1ib2xzXyIsInRlcm1pbmFsc18iLCJwcm9kdWN0aW9uc18iLCJwZXJmb3JtQWN0aW9uIiwiYW5vbnltb3VzIiwieXl0ZXh0IiwieXlsZW5nIiwieXlsaW5lbm8iLCJ5eXN0YXRlIiwiJCQiLCJfJCIsIiQwIiwiJCIsInB1c2giLCJnZXRDb21tb25EYiIsInNldERpYWdyYW1UaXRsZSIsInN1YnN0ciIsInRyaW0iLCJzZXRBY2NUaXRsZSIsInNldEFjY0Rlc2NyaXB0aW9uIiwiYWRkU2VjdGlvbiIsImFkZFRhc2siLCJhZGRFdmVudCIsInRhYmxlIiwiZGVmYXVsdEFjdGlvbnMiLCJwYXJzZUVycm9yIiwic3RyIiwiaGFzaCIsInJlY292ZXJhYmxlIiwiZXJyb3IiLCJFcnJvciIsInBhcnNlIiwiaW5wdXQiLCJzZWxmIiwic3RhY2siLCJ0c3RhY2siLCJ2c3RhY2siLCJsc3RhY2siLCJURVJST1IiLCJFT0YiLCJhcmdzIiwic2xpY2UiLCJjYWxsIiwiYXJndW1lbnRzIiwibGV4ZXIyIiwiT2JqZWN0IiwiY3JlYXRlIiwibGV4ZXIiLCJzaGFyZWRTdGF0ZSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5Iiwic2V0SW5wdXQiLCJ5eWxsb2MiLCJ5eWxvYyIsInJhbmdlcyIsIm9wdGlvbnMiLCJnZXRQcm90b3R5cGVPZiIsImxleCIsInRva2VuIiwicG9wIiwiQXJyYXkiLCJzeW1ib2wiLCJzdGF0ZSIsImFjdGlvbiIsInIiLCJ5eXZhbCIsInAiLCJsZW4iLCJuZXdTdGF0ZSIsImV4cGVjdGVkIiwiZXJyU3RyIiwic2hvd1Bvc2l0aW9uIiwiam9pbiIsInRleHQiLCJtYXRjaCIsImxpbmUiLCJsb2MiLCJmaXJzdF9saW5lIiwibGFzdF9saW5lIiwiZmlyc3RfY29sdW1uIiwibGFzdF9jb2x1bW4iLCJyYW5nZSIsImFwcGx5IiwiY29uY2F0IiwiX2lucHV0IiwiX21vcmUiLCJfYmFja3RyYWNrIiwiZG9uZSIsIm1hdGNoZWQiLCJjb25kaXRpb25TdGFjayIsIm9mZnNldCIsImNoIiwibGluZXMiLCJ1bnB1dCIsInNwbGl0Iiwib2xkTGluZXMiLCJtb3JlIiwicmVqZWN0IiwiYmFja3RyYWNrX2xleGVyIiwibGVzcyIsIm4iLCJwYXN0SW5wdXQiLCJwYXN0IiwicmVwbGFjZSIsInVwY29taW5nSW5wdXQiLCJuZXh0IiwicHJlIiwidGVzdF9tYXRjaCIsImluZGV4ZWRfcnVsZSIsImJhY2t1cCIsIm1hdGNoZXMiLCJ0ZW1wTWF0Y2giLCJpbmRleCIsInJ1bGVzIiwiX2N1cnJlbnRSdWxlcyIsImkiLCJmbGV4IiwiYmVnaW4iLCJjb25kaXRpb24iLCJwb3BTdGF0ZSIsImNvbmRpdGlvbnMiLCJ0b3BTdGF0ZSIsIk1hdGgiLCJhYnMiLCJwdXNoU3RhdGUiLCJzdGF0ZVN0YWNrU2l6ZSIsInl5XyIsIiRhdm9pZGluZ19uYW1lX2NvbGxpc2lvbnMiLCJZWV9TVEFSVCIsIlBhcnNlciIsInBhcnNlciQxIiwiY3VycmVudFNlY3Rpb24iLCJjdXJyZW50VGFza0lkIiwic2VjdGlvbnMiLCJ0YXNrcyIsInJhd1Rhc2tzIiwiY2xlYXIiLCJ0eHQiLCJnZXRTZWN0aW9ucyIsImdldFRhc2tzIiwiYWxsSXRlbXNQcm9jZXNzZWQiLCJjb21waWxlVGFza3MiLCJtYXhEZXB0aCIsIml0ZXJhdGlvbkNvdW50IiwicGVyaW9kIiwiZXZlbnQiLCJyYXdUYXNrIiwiaWQiLCJzZWN0aW9uIiwidHlwZSIsInRhc2siLCJzY29yZSIsImV2ZW50cyIsImN1cnJlbnRUYXNrIiwiZmluZCIsImFkZFRhc2tPcmciLCJkZXNjciIsIm5ld1Rhc2siLCJkZXNjcmlwdGlvbiIsImNsYXNzZXMiLCJjb21waWxlVGFzayIsInBvcyIsInByb2Nlc3NlZCIsImFsbFByb2Nlc3NlZCIsImVudHJpZXMiLCJ0aW1lbGluZURiIiwiZGIiLCJmcmVlemUiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwiTUFYX1NFQ1RJT05TIiwiZHJhd1JlY3QiLCJlbGVtIiwicmVjdERhdGEiLCJyZWN0RWxlbSIsImFwcGVuZCIsImF0dHIiLCJ4IiwieSIsImZpbGwiLCJzdHJva2UiLCJ3aWR0aCIsImhlaWdodCIsInJ4IiwicnkiLCJjbGFzcyIsImRyYXdGYWNlIiwiZWxlbWVudCIsImZhY2VEYXRhIiwicmFkaXVzIiwiY2lyY2xlRWxlbWVudCIsImN4IiwiY3kiLCJmYWNlIiwic21pbGUiLCJmYWNlMiIsImFyYyQxIiwic3RhcnRBbmdsZSIsIlBJIiwiZW5kQW5nbGUiLCJpbm5lclJhZGl1cyIsIm91dGVyUmFkaXVzIiwic2FkIiwiYW1iaXZhbGVudCIsImRyYXdDaXJjbGUiLCJjaXJjbGVEYXRhIiwidGl0bGUiLCJkcmF3VGV4dCIsInRleHREYXRhIiwiblRleHQiLCJ0ZXh0RWxlbSIsInN0eWxlIiwiYW5jaG9yIiwic3BhbiIsInRleHRNYXJnaW4iLCJkcmF3TGFiZWwiLCJ0eHRPYmplY3QiLCJnZW5Qb2ludHMiLCJjdXQiLCJwb2x5Z29uIiwibGFiZWxNYXJnaW4iLCJkcmF3U2VjdGlvbiIsImNvbmYiLCJnIiwicmVjdCIsImdldE5vdGVSZWN0IiwibnVtIiwiX2RyYXdUZXh0Q2FuZGlkYXRlRnVuYyIsImNvbG91ciIsInRhc2tDb3VudCIsImRyYXdUYXNrIiwiY2VudGVyIiwibWF4SGVpZ2h0IiwiZHJhd0JhY2tncm91bmRSZWN0IiwiYm91bmRzIiwic3RhcnR4Iiwic3RhcnR5Iiwic3RvcHgiLCJzdG9weSIsImxvd2VyIiwiZ2V0VGV4dE9iaiIsImJ5VGV4dCIsImNvbnRlbnQiLCJ0ZXh0QXR0cnMiLCJfc2V0VGV4dEF0dHJzIiwiYnlUc3BhbiIsInRhc2tGb250U2l6ZSIsInRhc2tGb250RmFtaWx5IiwiZHkiLCJieUZvIiwiYm9keSIsImYiLCJ0b1RleHQiLCJmcm9tVGV4dEF0dHJzRGljdCIsImtleSIsInRleHRQbGFjZW1lbnQiLCJpbml0R3JhcGhpY3MiLCJncmFwaGljcyIsIndyYXAiLCJlYWNoIiwidGV4dDIiLCJ3b3JkcyIsInJldmVyc2UiLCJ3b3JkIiwibGluZUhlaWdodCIsInBhcnNlRmxvYXQiLCJ0c3BhbiIsImoiLCJub2RlIiwiZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoIiwiZHJhd05vZGUiLCJmdWxsU2VjdGlvbiIsIm5vZGVFbGVtIiwiYmtnRWxlbSIsImJib3giLCJnZXRCQm94IiwiZm9udFNpemUiLCJwYWRkaW5nIiwibWF4IiwiZGVmYXVsdEJrZyIsImdldFZpcnR1YWxOb2RlSGVpZ2h0IiwicmVtb3ZlIiwicmQiLCJzdmdEcmF3IiwiZHJhdyIsInZlcnNpb24iLCJkaWFnT2JqIiwiX2EiLCJfYiIsIkxFRlRfTUFSR0lOIiwibGVmdE1hcmdpbiIsImRlYnVnIiwic2VjdXJpdHlMZXZlbCIsInNhbmRib3hFbGVtZW50Iiwicm9vdCIsIm5vZGVzIiwiY29udGVudERvY3VtZW50Iiwic3ZnIiwidGFza3MyIiwiZ2V0RGlhZ3JhbVRpdGxlIiwic2VjdGlvbnMyIiwibWF4U2VjdGlvbkhlaWdodCIsIm1heFRhc2tIZWlnaHQiLCJkZXB0aFkiLCJzZWN0aW9uQmVnaW5ZIiwibWFzdGVyWCIsIm1hc3RlclkiLCJzZWN0aW9uTnVtYmVyIiwiaGFzU2VjdGlvbnMiLCJmb3JFYWNoIiwic2VjdGlvbk5vZGUiLCJudW1iZXIiLCJzZWN0aW9uSGVpZ2h0IiwibWF4RXZlbnRDb3VudCIsIm1heEV2ZW50TGluZUxlbmd0aCIsInRhc2tOb2RlIiwidGFza0hlaWdodCIsIm1heEV2ZW50TGluZUxlbmd0aFRlbXAiLCJldmVudE5vZGUiLCJ0YXNrc0ZvclNlY3Rpb24iLCJmaWx0ZXIiLCJzZWN0aW9uTm9kZVdyYXBwZXIiLCJkcmF3VGFza3MiLCJib3giLCJsaW5lV3JhcHBlciIsInRpbWVsaW5lIiwidXNlTWF4V2lkdGgiLCJkaWFncmFtMiIsInNlY3Rpb25Db2xvciIsImlzV2l0aG91dFNlY3Rpb25zIiwidGFza1dyYXBwZXIiLCJsaW5lTGVuZ3RoIiwiZHJhd0V2ZW50cyIsImRpc2FibGVNdWx0aWNvbG9yIiwibWF4RXZlbnRIZWlnaHQiLCJldmVudEJlZ2luWSIsImV2ZW50V3JhcHBlciIsImV2ZW50SGVpZ2h0IiwicmVuZGVyZXIiLCJzZXRDb25mIiwiZ2VuU2VjdGlvbnMiLCJUSEVNRV9DT0xPUl9MSU1JVCIsInN3IiwiZ2V0U3R5bGVzIiwiZ2l0MCIsImdpdEJyYW5jaExhYmVsMCIsInN0eWxlcyIsImRpYWdyYW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mermaid/dist/timeline-definition-732a2638.js\n"));

/***/ })

}]);