"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_mermaid_dist_xychartDiagram-f746c04c_js"],{

/***/ "(app-pages-browser)/./node_modules/mermaid/dist/createText-aebacdfe.js":
/*!**********************************************************!*\
  !*** ./node_modules/mermaid/dist/createText-aebacdfe.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: function() { return /* binding */ createText; },\n/* harmony export */   c: function() { return /* binding */ computeDimensionOfText; }\n/* harmony export */ });\n/* harmony import */ var _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mermaid-934d9bea.js */ \"(app-pages-browser)/./node_modules/mermaid/dist/mermaid-934d9bea.js\");\n/* harmony import */ var mdast_util_from_markdown__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mdast-util-from-markdown */ \"(app-pages-browser)/./node_modules/mdast-util-from-markdown/dev/lib/index.js\");\n/* harmony import */ var ts_dedent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ts-dedent */ \"(app-pages-browser)/./node_modules/ts-dedent/esm/index.js\");\n\n\n\nfunction preprocessMarkdown(markdown) {\n    const withoutMultipleNewlines = markdown.replace(/\\n{2,}/g, \"\\n\");\n    const withoutExtraSpaces = (0,ts_dedent__WEBPACK_IMPORTED_MODULE_0__.dedent)(withoutMultipleNewlines);\n    return withoutExtraSpaces;\n}\nfunction markdownToLines(markdown) {\n    const preprocessedMarkdown = preprocessMarkdown(markdown);\n    const { children } = (0,mdast_util_from_markdown__WEBPACK_IMPORTED_MODULE_1__.fromMarkdown)(preprocessedMarkdown);\n    const lines = [\n        []\n    ];\n    let currentLine = 0;\n    function processNode(node) {\n        let parentType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"normal\";\n        if (node.type === \"text\") {\n            const textLines = node.value.split(\"\\n\");\n            textLines.forEach((textLine, index)=>{\n                if (index !== 0) {\n                    currentLine++;\n                    lines.push([]);\n                }\n                textLine.split(\" \").forEach((word)=>{\n                    if (word) {\n                        lines[currentLine].push({\n                            content: word,\n                            type: parentType\n                        });\n                    }\n                });\n            });\n        } else if (node.type === \"strong\" || node.type === \"emphasis\") {\n            node.children.forEach((contentNode)=>{\n                processNode(contentNode, node.type);\n            });\n        }\n    }\n    children.forEach((treeNode)=>{\n        if (treeNode.type === \"paragraph\") {\n            treeNode.children.forEach((contentNode)=>{\n                processNode(contentNode);\n            });\n        }\n    });\n    return lines;\n}\nfunction markdownToHTML(markdown) {\n    const { children } = (0,mdast_util_from_markdown__WEBPACK_IMPORTED_MODULE_1__.fromMarkdown)(markdown);\n    function output(node) {\n        if (node.type === \"text\") {\n            return node.value.replace(/\\n/g, \"<br/>\");\n        } else if (node.type === \"strong\") {\n            return \"<strong>\".concat(node.children.map(output).join(\"\"), \"</strong>\");\n        } else if (node.type === \"emphasis\") {\n            return \"<em>\".concat(node.children.map(output).join(\"\"), \"</em>\");\n        } else if (node.type === \"paragraph\") {\n            return \"<p>\".concat(node.children.map(output).join(\"\"), \"</p>\");\n        }\n        return \"Unsupported markdown: \".concat(node.type);\n    }\n    return children.map(output).join(\"\");\n}\nfunction splitTextToChars(text) {\n    if (Intl.Segmenter) {\n        return [\n            ...new Intl.Segmenter().segment(text)\n        ].map((s)=>s.segment);\n    }\n    return [\n        ...text\n    ];\n}\nfunction splitWordToFitWidth(checkFit, word) {\n    const characters = splitTextToChars(word.content);\n    return splitWordToFitWidthRecursion(checkFit, [], characters, word.type);\n}\nfunction splitWordToFitWidthRecursion(checkFit, usedChars, remainingChars, type) {\n    if (remainingChars.length === 0) {\n        return [\n            {\n                content: usedChars.join(\"\"),\n                type\n            },\n            {\n                content: \"\",\n                type\n            }\n        ];\n    }\n    const [nextChar, ...rest] = remainingChars;\n    const newWord = [\n        ...usedChars,\n        nextChar\n    ];\n    if (checkFit([\n        {\n            content: newWord.join(\"\"),\n            type\n        }\n    ])) {\n        return splitWordToFitWidthRecursion(checkFit, newWord, rest, type);\n    }\n    if (usedChars.length === 0 && nextChar) {\n        usedChars.push(nextChar);\n        remainingChars.shift();\n    }\n    return [\n        {\n            content: usedChars.join(\"\"),\n            type\n        },\n        {\n            content: remainingChars.join(\"\"),\n            type\n        }\n    ];\n}\nfunction splitLineToFitWidth(line, checkFit) {\n    if (line.some((param)=>{\n        let { content } = param;\n        return content.includes(\"\\n\");\n    })) {\n        throw new Error(\"splitLineToFitWidth does not support newlines in the line\");\n    }\n    return splitLineToFitWidthRecursion(line, checkFit);\n}\nfunction splitLineToFitWidthRecursion(words, checkFit) {\n    let lines = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [], newLine = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [];\n    if (words.length === 0) {\n        if (newLine.length > 0) {\n            lines.push(newLine);\n        }\n        return lines.length > 0 ? lines : [];\n    }\n    let joiner = \"\";\n    if (words[0].content === \" \") {\n        joiner = \" \";\n        words.shift();\n    }\n    var _words_shift;\n    const nextWord = (_words_shift = words.shift()) !== null && _words_shift !== void 0 ? _words_shift : {\n        content: \" \",\n        type: \"normal\"\n    };\n    const lineWithNextWord = [\n        ...newLine\n    ];\n    if (joiner !== \"\") {\n        lineWithNextWord.push({\n            content: joiner,\n            type: \"normal\"\n        });\n    }\n    lineWithNextWord.push(nextWord);\n    if (checkFit(lineWithNextWord)) {\n        return splitLineToFitWidthRecursion(words, checkFit, lines, lineWithNextWord);\n    }\n    if (newLine.length > 0) {\n        lines.push(newLine);\n        words.unshift(nextWord);\n    } else if (nextWord.content) {\n        const [line, rest] = splitWordToFitWidth(checkFit, nextWord);\n        lines.push([\n            line\n        ]);\n        if (rest.content) {\n            words.unshift(rest);\n        }\n    }\n    return splitLineToFitWidthRecursion(words, checkFit, lines);\n}\nfunction applyStyle(dom, styleFn) {\n    if (styleFn) {\n        dom.attr(\"style\", styleFn);\n    }\n}\nfunction addHtmlSpan(element, node, width, classes) {\n    let addBackground = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;\n    const fo = element.append(\"foreignObject\");\n    const div = fo.append(\"xhtml:div\");\n    const label = node.label;\n    const labelClass = node.isNode ? \"nodeLabel\" : \"edgeLabel\";\n    div.html('\\n    <span class=\"'.concat(labelClass, \" \").concat(classes, '\" ') + (node.labelStyle ? 'style=\"' + node.labelStyle + '\"' : \"\") + \">\" + label + \"</span>\");\n    applyStyle(div, node.labelStyle);\n    div.style(\"display\", \"table-cell\");\n    div.style(\"white-space\", \"nowrap\");\n    div.style(\"max-width\", width + \"px\");\n    div.attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\");\n    if (addBackground) {\n        div.attr(\"class\", \"labelBkg\");\n    }\n    let bbox = div.node().getBoundingClientRect();\n    if (bbox.width === width) {\n        div.style(\"display\", \"table\");\n        div.style(\"white-space\", \"break-spaces\");\n        div.style(\"width\", width + \"px\");\n        bbox = div.node().getBoundingClientRect();\n    }\n    fo.style(\"width\", bbox.width);\n    fo.style(\"height\", bbox.height);\n    return fo.node();\n}\nfunction createTspan(textElement, lineIndex, lineHeight) {\n    return textElement.append(\"tspan\").attr(\"class\", \"text-outer-tspan\").attr(\"x\", 0).attr(\"y\", lineIndex * lineHeight - 0.1 + \"em\").attr(\"dy\", lineHeight + \"em\");\n}\nfunction computeWidthOfText(parentNode, lineHeight, line) {\n    const testElement = parentNode.append(\"text\");\n    const testSpan = createTspan(testElement, 1, lineHeight);\n    updateTextContentAndStyles(testSpan, line);\n    const textLength = testSpan.node().getComputedTextLength();\n    testElement.remove();\n    return textLength;\n}\nfunction computeDimensionOfText(parentNode, lineHeight, text) {\n    var _a;\n    const testElement = parentNode.append(\"text\");\n    const testSpan = createTspan(testElement, 1, lineHeight);\n    updateTextContentAndStyles(testSpan, [\n        {\n            content: text,\n            type: \"normal\"\n        }\n    ]);\n    const textDimension = (_a = testSpan.node()) == null ? void 0 : _a.getBoundingClientRect();\n    if (textDimension) {\n        testElement.remove();\n    }\n    return textDimension;\n}\nfunction createFormattedText(width, g, structuredText) {\n    let addBackground = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;\n    const lineHeight = 1.1;\n    const labelGroup = g.append(\"g\");\n    const bkg = labelGroup.insert(\"rect\").attr(\"class\", \"background\");\n    const textElement = labelGroup.append(\"text\").attr(\"y\", \"-10.1\");\n    let lineIndex = 0;\n    for (const line of structuredText){\n        const checkWidth = (line2)=>computeWidthOfText(labelGroup, lineHeight, line2) <= width;\n        const linesUnderWidth = checkWidth(line) ? [\n            line\n        ] : splitLineToFitWidth(line, checkWidth);\n        for (const preparedLine of linesUnderWidth){\n            const tspan = createTspan(textElement, lineIndex, lineHeight);\n            updateTextContentAndStyles(tspan, preparedLine);\n            lineIndex++;\n        }\n    }\n    if (addBackground) {\n        const bbox = textElement.node().getBBox();\n        const padding = 2;\n        bkg.attr(\"x\", -padding).attr(\"y\", -padding).attr(\"width\", bbox.width + 2 * padding).attr(\"height\", bbox.height + 2 * padding);\n        return labelGroup.node();\n    } else {\n        return textElement.node();\n    }\n}\nfunction updateTextContentAndStyles(tspan, wrappedLine) {\n    tspan.text(\"\");\n    wrappedLine.forEach((word, index)=>{\n        const innerTspan = tspan.append(\"tspan\").attr(\"font-style\", word.type === \"emphasis\" ? \"italic\" : \"normal\").attr(\"class\", \"text-inner-tspan\").attr(\"font-weight\", word.type === \"strong\" ? \"bold\" : \"normal\");\n        if (index === 0) {\n            innerTspan.text(word.content);\n        } else {\n            innerTspan.text(\" \" + word.content);\n        }\n    });\n}\nconst createText = function(el) {\n    let text = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\", { style = \"\", isTitle = false, classes = \"\", useHtmlLabels = true, isNode = true, width = 200, addSvgBackground = false } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_2__.l.info(\"createText\", text, style, isTitle, classes, useHtmlLabels, isNode, addSvgBackground);\n    if (useHtmlLabels) {\n        const htmlText = markdownToHTML(text);\n        const node = {\n            isNode,\n            label: (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_2__.J)(htmlText).replace(/fa[blrs]?:fa-[\\w-]+/g, (s)=>\"<i class='\".concat(s.replace(\":\", \" \"), \"'></i>\")),\n            labelStyle: style.replace(\"fill:\", \"color:\")\n        };\n        const vertexNode = addHtmlSpan(el, node, width, classes, addSvgBackground);\n        return vertexNode;\n    } else {\n        const structuredText = markdownToLines(text);\n        const svgLabel = createFormattedText(width, el, structuredText, addSvgBackground);\n        return svgLabel;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mermaid/dist/createText-aebacdfe.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mermaid/dist/xychartDiagram-f746c04c.js":
/*!**************************************************************!*\
  !*** ./node_modules/mermaid/dist/xychartDiagram-f746c04c.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   diagram: function() { return /* binding */ diagram; }\n/* harmony export */ });\n/* harmony import */ var _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mermaid-934d9bea.js */ \"(app-pages-browser)/./node_modules/mermaid/dist/mermaid-934d9bea.js\");\n/* harmony import */ var _createText_aebacdfe_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./createText-aebacdfe.js */ \"(app-pages-browser)/./node_modules/mermaid/dist/createText-aebacdfe.js\");\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ \"(app-pages-browser)/./node_modules/d3/src/index.js\");\n/* harmony import */ var ts_dedent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ts-dedent */ \"(app-pages-browser)/./node_modules/ts-dedent/esm/index.js\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs */ \"(app-pages-browser)/./node_modules/dayjs/dayjs.min.js\");\n/* harmony import */ var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @braintree/sanitize-url */ \"(app-pages-browser)/./node_modules/@braintree/sanitize-url/dist/index.js\");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! dompurify */ \"(app-pages-browser)/./node_modules/dompurify/dist/purify.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar parser = function() {\n    var o = function(k, v, o2, l) {\n        for(o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v);\n        return o2;\n    }, $V0 = [\n        1,\n        10,\n        12,\n        14,\n        16,\n        18,\n        19,\n        21,\n        23\n    ], $V1 = [\n        2,\n        6\n    ], $V2 = [\n        1,\n        3\n    ], $V3 = [\n        1,\n        5\n    ], $V4 = [\n        1,\n        6\n    ], $V5 = [\n        1,\n        7\n    ], $V6 = [\n        1,\n        5,\n        10,\n        12,\n        14,\n        16,\n        18,\n        19,\n        21,\n        23,\n        34,\n        35,\n        36\n    ], $V7 = [\n        1,\n        25\n    ], $V8 = [\n        1,\n        26\n    ], $V9 = [\n        1,\n        28\n    ], $Va = [\n        1,\n        29\n    ], $Vb = [\n        1,\n        30\n    ], $Vc = [\n        1,\n        31\n    ], $Vd = [\n        1,\n        32\n    ], $Ve = [\n        1,\n        33\n    ], $Vf = [\n        1,\n        34\n    ], $Vg = [\n        1,\n        35\n    ], $Vh = [\n        1,\n        36\n    ], $Vi = [\n        1,\n        37\n    ], $Vj = [\n        1,\n        43\n    ], $Vk = [\n        1,\n        42\n    ], $Vl = [\n        1,\n        47\n    ], $Vm = [\n        1,\n        50\n    ], $Vn = [\n        1,\n        10,\n        12,\n        14,\n        16,\n        18,\n        19,\n        21,\n        23,\n        34,\n        35,\n        36\n    ], $Vo = [\n        1,\n        10,\n        12,\n        14,\n        16,\n        18,\n        19,\n        21,\n        23,\n        24,\n        26,\n        27,\n        28,\n        34,\n        35,\n        36\n    ], $Vp = [\n        1,\n        10,\n        12,\n        14,\n        16,\n        18,\n        19,\n        21,\n        23,\n        24,\n        26,\n        27,\n        28,\n        34,\n        35,\n        36,\n        41,\n        42,\n        43,\n        44,\n        45,\n        46,\n        47,\n        48,\n        49,\n        50\n    ], $Vq = [\n        1,\n        64\n    ];\n    var parser2 = {\n        trace: function trace() {},\n        yy: {},\n        symbols_: {\n            \"error\": 2,\n            \"start\": 3,\n            \"eol\": 4,\n            \"XYCHART\": 5,\n            \"chartConfig\": 6,\n            \"document\": 7,\n            \"CHART_ORIENTATION\": 8,\n            \"statement\": 9,\n            \"title\": 10,\n            \"text\": 11,\n            \"X_AXIS\": 12,\n            \"parseXAxis\": 13,\n            \"Y_AXIS\": 14,\n            \"parseYAxis\": 15,\n            \"LINE\": 16,\n            \"plotData\": 17,\n            \"BAR\": 18,\n            \"acc_title\": 19,\n            \"acc_title_value\": 20,\n            \"acc_descr\": 21,\n            \"acc_descr_value\": 22,\n            \"acc_descr_multiline_value\": 23,\n            \"SQUARE_BRACES_START\": 24,\n            \"commaSeparatedNumbers\": 25,\n            \"SQUARE_BRACES_END\": 26,\n            \"NUMBER_WITH_DECIMAL\": 27,\n            \"COMMA\": 28,\n            \"xAxisData\": 29,\n            \"bandData\": 30,\n            \"ARROW_DELIMITER\": 31,\n            \"commaSeparatedTexts\": 32,\n            \"yAxisData\": 33,\n            \"NEWLINE\": 34,\n            \"SEMI\": 35,\n            \"EOF\": 36,\n            \"alphaNum\": 37,\n            \"STR\": 38,\n            \"MD_STR\": 39,\n            \"alphaNumToken\": 40,\n            \"AMP\": 41,\n            \"NUM\": 42,\n            \"ALPHA\": 43,\n            \"PLUS\": 44,\n            \"EQUALS\": 45,\n            \"MULT\": 46,\n            \"DOT\": 47,\n            \"BRKT\": 48,\n            \"MINUS\": 49,\n            \"UNDERSCORE\": 50,\n            \"$accept\": 0,\n            \"$end\": 1\n        },\n        terminals_: {\n            2: \"error\",\n            5: \"XYCHART\",\n            8: \"CHART_ORIENTATION\",\n            10: \"title\",\n            12: \"X_AXIS\",\n            14: \"Y_AXIS\",\n            16: \"LINE\",\n            18: \"BAR\",\n            19: \"acc_title\",\n            20: \"acc_title_value\",\n            21: \"acc_descr\",\n            22: \"acc_descr_value\",\n            23: \"acc_descr_multiline_value\",\n            24: \"SQUARE_BRACES_START\",\n            26: \"SQUARE_BRACES_END\",\n            27: \"NUMBER_WITH_DECIMAL\",\n            28: \"COMMA\",\n            31: \"ARROW_DELIMITER\",\n            34: \"NEWLINE\",\n            35: \"SEMI\",\n            36: \"EOF\",\n            38: \"STR\",\n            39: \"MD_STR\",\n            41: \"AMP\",\n            42: \"NUM\",\n            43: \"ALPHA\",\n            44: \"PLUS\",\n            45: \"EQUALS\",\n            46: \"MULT\",\n            47: \"DOT\",\n            48: \"BRKT\",\n            49: \"MINUS\",\n            50: \"UNDERSCORE\"\n        },\n        productions_: [\n            0,\n            [\n                3,\n                2\n            ],\n            [\n                3,\n                3\n            ],\n            [\n                3,\n                2\n            ],\n            [\n                3,\n                1\n            ],\n            [\n                6,\n                1\n            ],\n            [\n                7,\n                0\n            ],\n            [\n                7,\n                2\n            ],\n            [\n                9,\n                2\n            ],\n            [\n                9,\n                2\n            ],\n            [\n                9,\n                2\n            ],\n            [\n                9,\n                2\n            ],\n            [\n                9,\n                2\n            ],\n            [\n                9,\n                3\n            ],\n            [\n                9,\n                2\n            ],\n            [\n                9,\n                3\n            ],\n            [\n                9,\n                2\n            ],\n            [\n                9,\n                2\n            ],\n            [\n                9,\n                1\n            ],\n            [\n                17,\n                3\n            ],\n            [\n                25,\n                3\n            ],\n            [\n                25,\n                1\n            ],\n            [\n                13,\n                1\n            ],\n            [\n                13,\n                2\n            ],\n            [\n                13,\n                1\n            ],\n            [\n                29,\n                1\n            ],\n            [\n                29,\n                3\n            ],\n            [\n                30,\n                3\n            ],\n            [\n                32,\n                3\n            ],\n            [\n                32,\n                1\n            ],\n            [\n                15,\n                1\n            ],\n            [\n                15,\n                2\n            ],\n            [\n                15,\n                1\n            ],\n            [\n                33,\n                3\n            ],\n            [\n                4,\n                1\n            ],\n            [\n                4,\n                1\n            ],\n            [\n                4,\n                1\n            ],\n            [\n                11,\n                1\n            ],\n            [\n                11,\n                1\n            ],\n            [\n                11,\n                1\n            ],\n            [\n                37,\n                1\n            ],\n            [\n                37,\n                2\n            ],\n            [\n                40,\n                1\n            ],\n            [\n                40,\n                1\n            ],\n            [\n                40,\n                1\n            ],\n            [\n                40,\n                1\n            ],\n            [\n                40,\n                1\n            ],\n            [\n                40,\n                1\n            ],\n            [\n                40,\n                1\n            ],\n            [\n                40,\n                1\n            ],\n            [\n                40,\n                1\n            ],\n            [\n                40,\n                1\n            ]\n        ],\n        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n            var $0 = $$.length - 1;\n            switch(yystate){\n                case 5:\n                    yy.setOrientation($$[$0]);\n                    break;\n                case 9:\n                    yy.setDiagramTitle($$[$0].text.trim());\n                    break;\n                case 12:\n                    yy.setLineData({\n                        text: \"\",\n                        type: \"text\"\n                    }, $$[$0]);\n                    break;\n                case 13:\n                    yy.setLineData($$[$0 - 1], $$[$0]);\n                    break;\n                case 14:\n                    yy.setBarData({\n                        text: \"\",\n                        type: \"text\"\n                    }, $$[$0]);\n                    break;\n                case 15:\n                    yy.setBarData($$[$0 - 1], $$[$0]);\n                    break;\n                case 16:\n                    this.$ = $$[$0].trim();\n                    yy.setAccTitle(this.$);\n                    break;\n                case 17:\n                case 18:\n                    this.$ = $$[$0].trim();\n                    yy.setAccDescription(this.$);\n                    break;\n                case 19:\n                    this.$ = $$[$0 - 1];\n                    break;\n                case 20:\n                    this.$ = [\n                        Number($$[$0 - 2]),\n                        ...$$[$0]\n                    ];\n                    break;\n                case 21:\n                    this.$ = [\n                        Number($$[$0])\n                    ];\n                    break;\n                case 22:\n                    yy.setXAxisTitle($$[$0]);\n                    break;\n                case 23:\n                    yy.setXAxisTitle($$[$0 - 1]);\n                    break;\n                case 24:\n                    yy.setXAxisTitle({\n                        type: \"text\",\n                        text: \"\"\n                    });\n                    break;\n                case 25:\n                    yy.setXAxisBand($$[$0]);\n                    break;\n                case 26:\n                    yy.setXAxisRangeData(Number($$[$0 - 2]), Number($$[$0]));\n                    break;\n                case 27:\n                    this.$ = $$[$0 - 1];\n                    break;\n                case 28:\n                    this.$ = [\n                        $$[$0 - 2],\n                        ...$$[$0]\n                    ];\n                    break;\n                case 29:\n                    this.$ = [\n                        $$[$0]\n                    ];\n                    break;\n                case 30:\n                    yy.setYAxisTitle($$[$0]);\n                    break;\n                case 31:\n                    yy.setYAxisTitle($$[$0 - 1]);\n                    break;\n                case 32:\n                    yy.setYAxisTitle({\n                        type: \"text\",\n                        text: \"\"\n                    });\n                    break;\n                case 33:\n                    yy.setYAxisRangeData(Number($$[$0 - 2]), Number($$[$0]));\n                    break;\n                case 37:\n                    this.$ = {\n                        text: $$[$0],\n                        type: \"text\"\n                    };\n                    break;\n                case 38:\n                    this.$ = {\n                        text: $$[$0],\n                        type: \"text\"\n                    };\n                    break;\n                case 39:\n                    this.$ = {\n                        text: $$[$0],\n                        type: \"markdown\"\n                    };\n                    break;\n                case 40:\n                    this.$ = $$[$0];\n                    break;\n                case 41:\n                    this.$ = $$[$0 - 1] + \"\" + $$[$0];\n                    break;\n            }\n        },\n        table: [\n            o($V0, $V1, {\n                3: 1,\n                4: 2,\n                7: 4,\n                5: $V2,\n                34: $V3,\n                35: $V4,\n                36: $V5\n            }),\n            {\n                1: [\n                    3\n                ]\n            },\n            o($V0, $V1, {\n                4: 2,\n                7: 4,\n                3: 8,\n                5: $V2,\n                34: $V3,\n                35: $V4,\n                36: $V5\n            }),\n            o($V0, $V1, {\n                4: 2,\n                7: 4,\n                6: 9,\n                3: 10,\n                5: $V2,\n                8: [\n                    1,\n                    11\n                ],\n                34: $V3,\n                35: $V4,\n                36: $V5\n            }),\n            {\n                1: [\n                    2,\n                    4\n                ],\n                9: 12,\n                10: [\n                    1,\n                    13\n                ],\n                12: [\n                    1,\n                    14\n                ],\n                14: [\n                    1,\n                    15\n                ],\n                16: [\n                    1,\n                    16\n                ],\n                18: [\n                    1,\n                    17\n                ],\n                19: [\n                    1,\n                    18\n                ],\n                21: [\n                    1,\n                    19\n                ],\n                23: [\n                    1,\n                    20\n                ]\n            },\n            o($V6, [\n                2,\n                34\n            ]),\n            o($V6, [\n                2,\n                35\n            ]),\n            o($V6, [\n                2,\n                36\n            ]),\n            {\n                1: [\n                    2,\n                    1\n                ]\n            },\n            o($V0, $V1, {\n                4: 2,\n                7: 4,\n                3: 21,\n                5: $V2,\n                34: $V3,\n                35: $V4,\n                36: $V5\n            }),\n            {\n                1: [\n                    2,\n                    3\n                ]\n            },\n            o($V6, [\n                2,\n                5\n            ]),\n            o($V0, [\n                2,\n                7\n            ], {\n                4: 22,\n                34: $V3,\n                35: $V4,\n                36: $V5\n            }),\n            {\n                11: 23,\n                37: 24,\n                38: $V7,\n                39: $V8,\n                40: 27,\n                41: $V9,\n                42: $Va,\n                43: $Vb,\n                44: $Vc,\n                45: $Vd,\n                46: $Ve,\n                47: $Vf,\n                48: $Vg,\n                49: $Vh,\n                50: $Vi\n            },\n            {\n                11: 39,\n                13: 38,\n                24: $Vj,\n                27: $Vk,\n                29: 40,\n                30: 41,\n                37: 24,\n                38: $V7,\n                39: $V8,\n                40: 27,\n                41: $V9,\n                42: $Va,\n                43: $Vb,\n                44: $Vc,\n                45: $Vd,\n                46: $Ve,\n                47: $Vf,\n                48: $Vg,\n                49: $Vh,\n                50: $Vi\n            },\n            {\n                11: 45,\n                15: 44,\n                27: $Vl,\n                33: 46,\n                37: 24,\n                38: $V7,\n                39: $V8,\n                40: 27,\n                41: $V9,\n                42: $Va,\n                43: $Vb,\n                44: $Vc,\n                45: $Vd,\n                46: $Ve,\n                47: $Vf,\n                48: $Vg,\n                49: $Vh,\n                50: $Vi\n            },\n            {\n                11: 49,\n                17: 48,\n                24: $Vm,\n                37: 24,\n                38: $V7,\n                39: $V8,\n                40: 27,\n                41: $V9,\n                42: $Va,\n                43: $Vb,\n                44: $Vc,\n                45: $Vd,\n                46: $Ve,\n                47: $Vf,\n                48: $Vg,\n                49: $Vh,\n                50: $Vi\n            },\n            {\n                11: 52,\n                17: 51,\n                24: $Vm,\n                37: 24,\n                38: $V7,\n                39: $V8,\n                40: 27,\n                41: $V9,\n                42: $Va,\n                43: $Vb,\n                44: $Vc,\n                45: $Vd,\n                46: $Ve,\n                47: $Vf,\n                48: $Vg,\n                49: $Vh,\n                50: $Vi\n            },\n            {\n                20: [\n                    1,\n                    53\n                ]\n            },\n            {\n                22: [\n                    1,\n                    54\n                ]\n            },\n            o($Vn, [\n                2,\n                18\n            ]),\n            {\n                1: [\n                    2,\n                    2\n                ]\n            },\n            o($Vn, [\n                2,\n                8\n            ]),\n            o($Vn, [\n                2,\n                9\n            ]),\n            o($Vo, [\n                2,\n                37\n            ], {\n                40: 55,\n                41: $V9,\n                42: $Va,\n                43: $Vb,\n                44: $Vc,\n                45: $Vd,\n                46: $Ve,\n                47: $Vf,\n                48: $Vg,\n                49: $Vh,\n                50: $Vi\n            }),\n            o($Vo, [\n                2,\n                38\n            ]),\n            o($Vo, [\n                2,\n                39\n            ]),\n            o($Vp, [\n                2,\n                40\n            ]),\n            o($Vp, [\n                2,\n                42\n            ]),\n            o($Vp, [\n                2,\n                43\n            ]),\n            o($Vp, [\n                2,\n                44\n            ]),\n            o($Vp, [\n                2,\n                45\n            ]),\n            o($Vp, [\n                2,\n                46\n            ]),\n            o($Vp, [\n                2,\n                47\n            ]),\n            o($Vp, [\n                2,\n                48\n            ]),\n            o($Vp, [\n                2,\n                49\n            ]),\n            o($Vp, [\n                2,\n                50\n            ]),\n            o($Vp, [\n                2,\n                51\n            ]),\n            o($Vn, [\n                2,\n                10\n            ]),\n            o($Vn, [\n                2,\n                22\n            ], {\n                30: 41,\n                29: 56,\n                24: $Vj,\n                27: $Vk\n            }),\n            o($Vn, [\n                2,\n                24\n            ]),\n            o($Vn, [\n                2,\n                25\n            ]),\n            {\n                31: [\n                    1,\n                    57\n                ]\n            },\n            {\n                11: 59,\n                32: 58,\n                37: 24,\n                38: $V7,\n                39: $V8,\n                40: 27,\n                41: $V9,\n                42: $Va,\n                43: $Vb,\n                44: $Vc,\n                45: $Vd,\n                46: $Ve,\n                47: $Vf,\n                48: $Vg,\n                49: $Vh,\n                50: $Vi\n            },\n            o($Vn, [\n                2,\n                11\n            ]),\n            o($Vn, [\n                2,\n                30\n            ], {\n                33: 60,\n                27: $Vl\n            }),\n            o($Vn, [\n                2,\n                32\n            ]),\n            {\n                31: [\n                    1,\n                    61\n                ]\n            },\n            o($Vn, [\n                2,\n                12\n            ]),\n            {\n                17: 62,\n                24: $Vm\n            },\n            {\n                25: 63,\n                27: $Vq\n            },\n            o($Vn, [\n                2,\n                14\n            ]),\n            {\n                17: 65,\n                24: $Vm\n            },\n            o($Vn, [\n                2,\n                16\n            ]),\n            o($Vn, [\n                2,\n                17\n            ]),\n            o($Vp, [\n                2,\n                41\n            ]),\n            o($Vn, [\n                2,\n                23\n            ]),\n            {\n                27: [\n                    1,\n                    66\n                ]\n            },\n            {\n                26: [\n                    1,\n                    67\n                ]\n            },\n            {\n                26: [\n                    2,\n                    29\n                ],\n                28: [\n                    1,\n                    68\n                ]\n            },\n            o($Vn, [\n                2,\n                31\n            ]),\n            {\n                27: [\n                    1,\n                    69\n                ]\n            },\n            o($Vn, [\n                2,\n                13\n            ]),\n            {\n                26: [\n                    1,\n                    70\n                ]\n            },\n            {\n                26: [\n                    2,\n                    21\n                ],\n                28: [\n                    1,\n                    71\n                ]\n            },\n            o($Vn, [\n                2,\n                15\n            ]),\n            o($Vn, [\n                2,\n                26\n            ]),\n            o($Vn, [\n                2,\n                27\n            ]),\n            {\n                11: 59,\n                32: 72,\n                37: 24,\n                38: $V7,\n                39: $V8,\n                40: 27,\n                41: $V9,\n                42: $Va,\n                43: $Vb,\n                44: $Vc,\n                45: $Vd,\n                46: $Ve,\n                47: $Vf,\n                48: $Vg,\n                49: $Vh,\n                50: $Vi\n            },\n            o($Vn, [\n                2,\n                33\n            ]),\n            o($Vn, [\n                2,\n                19\n            ]),\n            {\n                25: 73,\n                27: $Vq\n            },\n            {\n                26: [\n                    2,\n                    28\n                ]\n            },\n            {\n                26: [\n                    2,\n                    20\n                ]\n            }\n        ],\n        defaultActions: {\n            8: [\n                2,\n                1\n            ],\n            10: [\n                2,\n                3\n            ],\n            21: [\n                2,\n                2\n            ],\n            72: [\n                2,\n                28\n            ],\n            73: [\n                2,\n                20\n            ]\n        },\n        parseError: function parseError(str, hash) {\n            if (hash.recoverable) {\n                this.trace(str);\n            } else {\n                var error = new Error(str);\n                error.hash = hash;\n                throw error;\n            }\n        },\n        parse: function parse(input) {\n            var self = this, stack = [\n                0\n            ], tstack = [], vstack = [\n                null\n            ], lstack = [], table = this.table, yytext = \"\", yylineno = 0, yyleng = 0, TERROR = 2, EOF = 1;\n            var args = lstack.slice.call(arguments, 1);\n            var lexer2 = Object.create(this.lexer);\n            var sharedState = {\n                yy: {}\n            };\n            for(var k in this.yy){\n                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n                    sharedState.yy[k] = this.yy[k];\n                }\n            }\n            lexer2.setInput(input, sharedState.yy);\n            sharedState.yy.lexer = lexer2;\n            sharedState.yy.parser = this;\n            if (typeof lexer2.yylloc == \"undefined\") {\n                lexer2.yylloc = {};\n            }\n            var yyloc = lexer2.yylloc;\n            lstack.push(yyloc);\n            var ranges = lexer2.options && lexer2.options.ranges;\n            if (typeof sharedState.yy.parseError === \"function\") {\n                this.parseError = sharedState.yy.parseError;\n            } else {\n                this.parseError = Object.getPrototypeOf(this).parseError;\n            }\n            function lex() {\n                var token;\n                token = tstack.pop() || lexer2.lex() || EOF;\n                if (typeof token !== \"number\") {\n                    if (token instanceof Array) {\n                        tstack = token;\n                        token = tstack.pop();\n                    }\n                    token = self.symbols_[token] || token;\n                }\n                return token;\n            }\n            var symbol, state, action, r, yyval = {}, p, len, newState, expected;\n            while(true){\n                state = stack[stack.length - 1];\n                if (this.defaultActions[state]) {\n                    action = this.defaultActions[state];\n                } else {\n                    if (symbol === null || typeof symbol == \"undefined\") {\n                        symbol = lex();\n                    }\n                    action = table[state] && table[state][symbol];\n                }\n                if (typeof action === \"undefined\" || !action.length || !action[0]) {\n                    var errStr = \"\";\n                    expected = [];\n                    for(p in table[state]){\n                        if (this.terminals_[p] && p > TERROR) {\n                            expected.push(\"'\" + this.terminals_[p] + \"'\");\n                        }\n                    }\n                    if (lexer2.showPosition) {\n                        errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n                    } else {\n                        errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n                    }\n                    this.parseError(errStr, {\n                        text: lexer2.match,\n                        token: this.terminals_[symbol] || symbol,\n                        line: lexer2.yylineno,\n                        loc: yyloc,\n                        expected\n                    });\n                }\n                if (action[0] instanceof Array && action.length > 1) {\n                    throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n                }\n                switch(action[0]){\n                    case 1:\n                        stack.push(symbol);\n                        vstack.push(lexer2.yytext);\n                        lstack.push(lexer2.yylloc);\n                        stack.push(action[1]);\n                        symbol = null;\n                        {\n                            yyleng = lexer2.yyleng;\n                            yytext = lexer2.yytext;\n                            yylineno = lexer2.yylineno;\n                            yyloc = lexer2.yylloc;\n                        }\n                        break;\n                    case 2:\n                        len = this.productions_[action[1]][1];\n                        yyval.$ = vstack[vstack.length - len];\n                        yyval._$ = {\n                            first_line: lstack[lstack.length - (len || 1)].first_line,\n                            last_line: lstack[lstack.length - 1].last_line,\n                            first_column: lstack[lstack.length - (len || 1)].first_column,\n                            last_column: lstack[lstack.length - 1].last_column\n                        };\n                        if (ranges) {\n                            yyval._$.range = [\n                                lstack[lstack.length - (len || 1)].range[0],\n                                lstack[lstack.length - 1].range[1]\n                            ];\n                        }\n                        r = this.performAction.apply(yyval, [\n                            yytext,\n                            yyleng,\n                            yylineno,\n                            sharedState.yy,\n                            action[1],\n                            vstack,\n                            lstack\n                        ].concat(args));\n                        if (typeof r !== \"undefined\") {\n                            return r;\n                        }\n                        if (len) {\n                            stack = stack.slice(0, -1 * len * 2);\n                            vstack = vstack.slice(0, -1 * len);\n                            lstack = lstack.slice(0, -1 * len);\n                        }\n                        stack.push(this.productions_[action[1]][0]);\n                        vstack.push(yyval.$);\n                        lstack.push(yyval._$);\n                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n                        stack.push(newState);\n                        break;\n                    case 3:\n                        return true;\n                }\n            }\n            return true;\n        }\n    };\n    var lexer = function() {\n        var lexer2 = {\n            EOF: 1,\n            parseError: function parseError(str, hash) {\n                if (this.yy.parser) {\n                    this.yy.parser.parseError(str, hash);\n                } else {\n                    throw new Error(str);\n                }\n            },\n            // resets the lexer, sets new input\n            setInput: function(input, yy) {\n                this.yy = yy || this.yy || {};\n                this._input = input;\n                this._more = this._backtrack = this.done = false;\n                this.yylineno = this.yyleng = 0;\n                this.yytext = this.matched = this.match = \"\";\n                this.conditionStack = [\n                    \"INITIAL\"\n                ];\n                this.yylloc = {\n                    first_line: 1,\n                    first_column: 0,\n                    last_line: 1,\n                    last_column: 0\n                };\n                if (this.options.ranges) {\n                    this.yylloc.range = [\n                        0,\n                        0\n                    ];\n                }\n                this.offset = 0;\n                return this;\n            },\n            // consumes and returns one char from the input\n            input: function() {\n                var ch = this._input[0];\n                this.yytext += ch;\n                this.yyleng++;\n                this.offset++;\n                this.match += ch;\n                this.matched += ch;\n                var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n                if (lines) {\n                    this.yylineno++;\n                    this.yylloc.last_line++;\n                } else {\n                    this.yylloc.last_column++;\n                }\n                if (this.options.ranges) {\n                    this.yylloc.range[1]++;\n                }\n                this._input = this._input.slice(1);\n                return ch;\n            },\n            // unshifts one char (or a string) into the input\n            unput: function(ch) {\n                var len = ch.length;\n                var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n                this._input = ch + this._input;\n                this.yytext = this.yytext.substr(0, this.yytext.length - len);\n                this.offset -= len;\n                var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n                this.match = this.match.substr(0, this.match.length - 1);\n                this.matched = this.matched.substr(0, this.matched.length - 1);\n                if (lines.length - 1) {\n                    this.yylineno -= lines.length - 1;\n                }\n                var r = this.yylloc.range;\n                this.yylloc = {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.yylineno + 1,\n                    first_column: this.yylloc.first_column,\n                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n                };\n                if (this.options.ranges) {\n                    this.yylloc.range = [\n                        r[0],\n                        r[0] + this.yyleng - len\n                    ];\n                }\n                this.yyleng = this.yytext.length;\n                return this;\n            },\n            // When called from action, caches matched text and appends it on next action\n            more: function() {\n                this._more = true;\n                return this;\n            },\n            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n            reject: function() {\n                if (this.options.backtrack_lexer) {\n                    this._backtrack = true;\n                } else {\n                    return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n                        text: \"\",\n                        token: null,\n                        line: this.yylineno\n                    });\n                }\n                return this;\n            },\n            // retain first n characters of the match\n            less: function(n) {\n                this.unput(this.match.slice(n));\n            },\n            // displays already matched input, i.e. for error messages\n            pastInput: function() {\n                var past = this.matched.substr(0, this.matched.length - this.match.length);\n                return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n            },\n            // displays upcoming input, i.e. for error messages\n            upcomingInput: function() {\n                var next = this.match;\n                if (next.length < 20) {\n                    next += this._input.substr(0, 20 - next.length);\n                }\n                return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n            },\n            // displays the character position where the lexing error occurred, i.e. for error messages\n            showPosition: function() {\n                var pre = this.pastInput();\n                var c = new Array(pre.length + 1).join(\"-\");\n                return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n            },\n            // test the lexed token: return FALSE when not a match, otherwise return token\n            test_match: function(match, indexed_rule) {\n                var token, lines, backup;\n                if (this.options.backtrack_lexer) {\n                    backup = {\n                        yylineno: this.yylineno,\n                        yylloc: {\n                            first_line: this.yylloc.first_line,\n                            last_line: this.last_line,\n                            first_column: this.yylloc.first_column,\n                            last_column: this.yylloc.last_column\n                        },\n                        yytext: this.yytext,\n                        match: this.match,\n                        matches: this.matches,\n                        matched: this.matched,\n                        yyleng: this.yyleng,\n                        offset: this.offset,\n                        _more: this._more,\n                        _input: this._input,\n                        yy: this.yy,\n                        conditionStack: this.conditionStack.slice(0),\n                        done: this.done\n                    };\n                    if (this.options.ranges) {\n                        backup.yylloc.range = this.yylloc.range.slice(0);\n                    }\n                }\n                lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n                if (lines) {\n                    this.yylineno += lines.length;\n                }\n                this.yylloc = {\n                    first_line: this.yylloc.last_line,\n                    last_line: this.yylineno + 1,\n                    first_column: this.yylloc.last_column,\n                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n                };\n                this.yytext += match[0];\n                this.match += match[0];\n                this.matches = match;\n                this.yyleng = this.yytext.length;\n                if (this.options.ranges) {\n                    this.yylloc.range = [\n                        this.offset,\n                        this.offset += this.yyleng\n                    ];\n                }\n                this._more = false;\n                this._backtrack = false;\n                this._input = this._input.slice(match[0].length);\n                this.matched += match[0];\n                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n                if (this.done && this._input) {\n                    this.done = false;\n                }\n                if (token) {\n                    return token;\n                } else if (this._backtrack) {\n                    for(var k in backup){\n                        this[k] = backup[k];\n                    }\n                    return false;\n                }\n                return false;\n            },\n            // return next match in input\n            next: function() {\n                if (this.done) {\n                    return this.EOF;\n                }\n                if (!this._input) {\n                    this.done = true;\n                }\n                var token, match, tempMatch, index;\n                if (!this._more) {\n                    this.yytext = \"\";\n                    this.match = \"\";\n                }\n                var rules = this._currentRules();\n                for(var i = 0; i < rules.length; i++){\n                    tempMatch = this._input.match(this.rules[rules[i]]);\n                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                        match = tempMatch;\n                        index = i;\n                        if (this.options.backtrack_lexer) {\n                            token = this.test_match(tempMatch, rules[i]);\n                            if (token !== false) {\n                                return token;\n                            } else if (this._backtrack) {\n                                match = false;\n                                continue;\n                            } else {\n                                return false;\n                            }\n                        } else if (!this.options.flex) {\n                            break;\n                        }\n                    }\n                }\n                if (match) {\n                    token = this.test_match(match, rules[index]);\n                    if (token !== false) {\n                        return token;\n                    }\n                    return false;\n                }\n                if (this._input === \"\") {\n                    return this.EOF;\n                } else {\n                    return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n                        text: \"\",\n                        token: null,\n                        line: this.yylineno\n                    });\n                }\n            },\n            // return next match that has a token\n            lex: function lex() {\n                var r = this.next();\n                if (r) {\n                    return r;\n                } else {\n                    return this.lex();\n                }\n            },\n            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n            begin: function begin(condition) {\n                this.conditionStack.push(condition);\n            },\n            // pop the previously active lexer condition state off the condition stack\n            popState: function popState() {\n                var n = this.conditionStack.length - 1;\n                if (n > 0) {\n                    return this.conditionStack.pop();\n                } else {\n                    return this.conditionStack[0];\n                }\n            },\n            // produce the lexer rule set which is active for the currently active lexer condition state\n            _currentRules: function _currentRules() {\n                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n                } else {\n                    return this.conditions[\"INITIAL\"].rules;\n                }\n            },\n            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n            topState: function topState(n) {\n                n = this.conditionStack.length - 1 - Math.abs(n || 0);\n                if (n >= 0) {\n                    return this.conditionStack[n];\n                } else {\n                    return \"INITIAL\";\n                }\n            },\n            // alias for begin(condition)\n            pushState: function pushState(condition) {\n                this.begin(condition);\n            },\n            // return the number of states currently on the stack\n            stateStackSize: function stateStackSize() {\n                return this.conditionStack.length;\n            },\n            options: {\n                \"case-insensitive\": true\n            },\n            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n                switch($avoiding_name_collisions){\n                    case 0:\n                        break;\n                    case 1:\n                        break;\n                    case 2:\n                        this.popState();\n                        return 34;\n                    case 3:\n                        this.popState();\n                        return 34;\n                    case 4:\n                        return 34;\n                    case 5:\n                        break;\n                    case 6:\n                        return 10;\n                    case 7:\n                        this.pushState(\"acc_title\");\n                        return 19;\n                    case 8:\n                        this.popState();\n                        return \"acc_title_value\";\n                    case 9:\n                        this.pushState(\"acc_descr\");\n                        return 21;\n                    case 10:\n                        this.popState();\n                        return \"acc_descr_value\";\n                    case 11:\n                        this.pushState(\"acc_descr_multiline\");\n                        break;\n                    case 12:\n                        this.popState();\n                        break;\n                    case 13:\n                        return \"acc_descr_multiline_value\";\n                    case 14:\n                        return 5;\n                    case 15:\n                        return 8;\n                    case 16:\n                        this.pushState(\"axis_data\");\n                        return \"X_AXIS\";\n                    case 17:\n                        this.pushState(\"axis_data\");\n                        return \"Y_AXIS\";\n                    case 18:\n                        this.pushState(\"axis_band_data\");\n                        return 24;\n                    case 19:\n                        return 31;\n                    case 20:\n                        this.pushState(\"data\");\n                        return 16;\n                    case 21:\n                        this.pushState(\"data\");\n                        return 18;\n                    case 22:\n                        this.pushState(\"data_inner\");\n                        return 24;\n                    case 23:\n                        return 27;\n                    case 24:\n                        this.popState();\n                        return 26;\n                    case 25:\n                        this.popState();\n                        break;\n                    case 26:\n                        this.pushState(\"string\");\n                        break;\n                    case 27:\n                        this.popState();\n                        break;\n                    case 28:\n                        return \"STR\";\n                    case 29:\n                        return 24;\n                    case 30:\n                        return 26;\n                    case 31:\n                        return 43;\n                    case 32:\n                        return \"COLON\";\n                    case 33:\n                        return 44;\n                    case 34:\n                        return 28;\n                    case 35:\n                        return 45;\n                    case 36:\n                        return 46;\n                    case 37:\n                        return 48;\n                    case 38:\n                        return 50;\n                    case 39:\n                        return 47;\n                    case 40:\n                        return 41;\n                    case 41:\n                        return 49;\n                    case 42:\n                        return 42;\n                    case 43:\n                        break;\n                    case 44:\n                        return 35;\n                    case 45:\n                        return 36;\n                }\n            },\n            rules: [\n                /^(?:%%(?!\\{)[^\\n]*)/i,\n                /^(?:[^\\}]%%[^\\n]*)/i,\n                /^(?:(\\r?\\n))/i,\n                /^(?:(\\r?\\n))/i,\n                /^(?:[\\n\\r]+)/i,\n                /^(?:%%[^\\n]*)/i,\n                /^(?:title\\b)/i,\n                /^(?:accTitle\\s*:\\s*)/i,\n                /^(?:(?!\\n||)*[^\\n]*)/i,\n                /^(?:accDescr\\s*:\\s*)/i,\n                /^(?:(?!\\n||)*[^\\n]*)/i,\n                /^(?:accDescr\\s*\\{\\s*)/i,\n                /^(?:\\{)/i,\n                /^(?:[^\\}]*)/i,\n                /^(?:xychart-beta\\b)/i,\n                /^(?:(?:vertical|horizontal))/i,\n                /^(?:x-axis\\b)/i,\n                /^(?:y-axis\\b)/i,\n                /^(?:\\[)/i,\n                /^(?:-->)/i,\n                /^(?:line\\b)/i,\n                /^(?:bar\\b)/i,\n                /^(?:\\[)/i,\n                /^(?:[+-]?(?:\\d+(?:\\.\\d+)?|\\.\\d+))/i,\n                /^(?:\\])/i,\n                /^(?:(?:`\\)                                    \\{ this\\.pushState\\(md_string\\); \\}\\n<md_string>\\(\\?:\\(\\?!`\"\\)\\.\\)\\+                  \\{ return MD_STR; \\}\\n<md_string>\\(\\?:`))/i,\n                /^(?:[\"])/i,\n                /^(?:[\"])/i,\n                /^(?:[^\"]*)/i,\n                /^(?:\\[)/i,\n                /^(?:\\])/i,\n                /^(?:[A-Za-z]+)/i,\n                /^(?::)/i,\n                /^(?:\\+)/i,\n                /^(?:,)/i,\n                /^(?:=)/i,\n                /^(?:\\*)/i,\n                /^(?:#)/i,\n                /^(?:[\\_])/i,\n                /^(?:\\.)/i,\n                /^(?:&)/i,\n                /^(?:-)/i,\n                /^(?:[0-9]+)/i,\n                /^(?:\\s+)/i,\n                /^(?:;)/i,\n                /^(?:$)/i\n            ],\n            conditions: {\n                \"data_inner\": {\n                    \"rules\": [\n                        0,\n                        1,\n                        4,\n                        5,\n                        6,\n                        7,\n                        9,\n                        11,\n                        14,\n                        15,\n                        16,\n                        17,\n                        20,\n                        21,\n                        23,\n                        24,\n                        25,\n                        26,\n                        29,\n                        30,\n                        31,\n                        32,\n                        33,\n                        34,\n                        35,\n                        36,\n                        37,\n                        38,\n                        39,\n                        40,\n                        41,\n                        42,\n                        43,\n                        44,\n                        45\n                    ],\n                    \"inclusive\": true\n                },\n                \"data\": {\n                    \"rules\": [\n                        0,\n                        1,\n                        3,\n                        4,\n                        5,\n                        6,\n                        7,\n                        9,\n                        11,\n                        14,\n                        15,\n                        16,\n                        17,\n                        20,\n                        21,\n                        22,\n                        25,\n                        26,\n                        29,\n                        30,\n                        31,\n                        32,\n                        33,\n                        34,\n                        35,\n                        36,\n                        37,\n                        38,\n                        39,\n                        40,\n                        41,\n                        42,\n                        43,\n                        44,\n                        45\n                    ],\n                    \"inclusive\": true\n                },\n                \"axis_band_data\": {\n                    \"rules\": [\n                        0,\n                        1,\n                        4,\n                        5,\n                        6,\n                        7,\n                        9,\n                        11,\n                        14,\n                        15,\n                        16,\n                        17,\n                        20,\n                        21,\n                        24,\n                        25,\n                        26,\n                        29,\n                        30,\n                        31,\n                        32,\n                        33,\n                        34,\n                        35,\n                        36,\n                        37,\n                        38,\n                        39,\n                        40,\n                        41,\n                        42,\n                        43,\n                        44,\n                        45\n                    ],\n                    \"inclusive\": true\n                },\n                \"axis_data\": {\n                    \"rules\": [\n                        0,\n                        1,\n                        2,\n                        4,\n                        5,\n                        6,\n                        7,\n                        9,\n                        11,\n                        14,\n                        15,\n                        16,\n                        17,\n                        18,\n                        19,\n                        20,\n                        21,\n                        23,\n                        25,\n                        26,\n                        29,\n                        30,\n                        31,\n                        32,\n                        33,\n                        34,\n                        35,\n                        36,\n                        37,\n                        38,\n                        39,\n                        40,\n                        41,\n                        42,\n                        43,\n                        44,\n                        45\n                    ],\n                    \"inclusive\": true\n                },\n                \"acc_descr_multiline\": {\n                    \"rules\": [\n                        12,\n                        13\n                    ],\n                    \"inclusive\": false\n                },\n                \"acc_descr\": {\n                    \"rules\": [\n                        10\n                    ],\n                    \"inclusive\": false\n                },\n                \"acc_title\": {\n                    \"rules\": [\n                        8\n                    ],\n                    \"inclusive\": false\n                },\n                \"title\": {\n                    \"rules\": [],\n                    \"inclusive\": false\n                },\n                \"md_string\": {\n                    \"rules\": [],\n                    \"inclusive\": false\n                },\n                \"string\": {\n                    \"rules\": [\n                        27,\n                        28\n                    ],\n                    \"inclusive\": false\n                },\n                \"INITIAL\": {\n                    \"rules\": [\n                        0,\n                        1,\n                        4,\n                        5,\n                        6,\n                        7,\n                        9,\n                        11,\n                        14,\n                        15,\n                        16,\n                        17,\n                        20,\n                        21,\n                        25,\n                        26,\n                        29,\n                        30,\n                        31,\n                        32,\n                        33,\n                        34,\n                        35,\n                        36,\n                        37,\n                        38,\n                        39,\n                        40,\n                        41,\n                        42,\n                        43,\n                        44,\n                        45\n                    ],\n                    \"inclusive\": true\n                }\n            }\n        };\n        return lexer2;\n    }();\n    parser2.lexer = lexer;\n    function Parser() {\n        this.yy = {};\n    }\n    Parser.prototype = parser2;\n    parser2.Parser = Parser;\n    return new Parser();\n}();\nparser.parser = parser;\nconst parser$1 = parser;\nfunction isBarPlot(data) {\n    return data.type === \"bar\";\n}\nfunction isBandAxisData(data) {\n    return data.type === \"band\";\n}\nfunction isLinearAxisData(data) {\n    return data.type === \"linear\";\n}\nclass TextDimensionCalculatorWithFont {\n    getMaxDimension(texts, fontSize) {\n        if (!this.parentGroup) {\n            return {\n                width: texts.reduce((acc, cur)=>Math.max(cur.length, acc), 0) * fontSize,\n                height: fontSize\n            };\n        }\n        const dimension = {\n            width: 0,\n            height: 0\n        };\n        const elem = this.parentGroup.append(\"g\").attr(\"visibility\", \"hidden\").attr(\"font-size\", fontSize);\n        for (const t of texts){\n            const bbox = (0,_createText_aebacdfe_js__WEBPACK_IMPORTED_MODULE_5__.c)(elem, 1, t);\n            const width = bbox ? bbox.width : t.length * fontSize;\n            const height = bbox ? bbox.height : fontSize;\n            dimension.width = Math.max(dimension.width, width);\n            dimension.height = Math.max(dimension.height, height);\n        }\n        elem.remove();\n        return dimension;\n    }\n    constructor(parentGroup){\n        this.parentGroup = parentGroup;\n    }\n}\nconst BAR_WIDTH_TO_TICK_WIDTH_RATIO = 0.7;\nconst MAX_OUTER_PADDING_PERCENT_FOR_WRT_LABEL = 0.2;\nclass BaseAxis {\n    setRange(range) {\n        this.range = range;\n        if (this.axisPosition === \"left\" || this.axisPosition === \"right\") {\n            this.boundingRect.height = range[1] - range[0];\n        } else {\n            this.boundingRect.width = range[1] - range[0];\n        }\n        this.recalculateScale();\n    }\n    getRange() {\n        return [\n            this.range[0] + this.outerPadding,\n            this.range[1] - this.outerPadding\n        ];\n    }\n    setAxisPosition(axisPosition) {\n        this.axisPosition = axisPosition;\n        this.setRange(this.range);\n    }\n    getTickDistance() {\n        const range = this.getRange();\n        return Math.abs(range[0] - range[1]) / this.getTickValues().length;\n    }\n    getAxisOuterPadding() {\n        return this.outerPadding;\n    }\n    getLabelDimension() {\n        return this.textDimensionCalculator.getMaxDimension(this.getTickValues().map((tick)=>tick.toString()), this.axisConfig.labelFontSize);\n    }\n    recalculateOuterPaddingToDrawBar() {\n        if (BAR_WIDTH_TO_TICK_WIDTH_RATIO * this.getTickDistance() > this.outerPadding * 2) {\n            this.outerPadding = Math.floor(BAR_WIDTH_TO_TICK_WIDTH_RATIO * this.getTickDistance() / 2);\n        }\n        this.recalculateScale();\n    }\n    calculateSpaceIfDrawnHorizontally(availableSpace) {\n        let availableHeight = availableSpace.height;\n        if (this.axisConfig.showAxisLine && availableHeight > this.axisConfig.axisLineWidth) {\n            availableHeight -= this.axisConfig.axisLineWidth;\n            this.showAxisLine = true;\n        }\n        if (this.axisConfig.showLabel) {\n            const spaceRequired = this.getLabelDimension();\n            const maxPadding = MAX_OUTER_PADDING_PERCENT_FOR_WRT_LABEL * availableSpace.width;\n            this.outerPadding = Math.min(spaceRequired.width / 2, maxPadding);\n            const heightRequired = spaceRequired.height + this.axisConfig.labelPadding * 2;\n            this.labelTextHeight = spaceRequired.height;\n            if (heightRequired <= availableHeight) {\n                availableHeight -= heightRequired;\n                this.showLabel = true;\n            }\n        }\n        if (this.axisConfig.showTick && availableHeight >= this.axisConfig.tickLength) {\n            this.showTick = true;\n            availableHeight -= this.axisConfig.tickLength;\n        }\n        if (this.axisConfig.showTitle && this.title) {\n            const spaceRequired = this.textDimensionCalculator.getMaxDimension([\n                this.title\n            ], this.axisConfig.titleFontSize);\n            const heightRequired = spaceRequired.height + this.axisConfig.titlePadding * 2;\n            this.titleTextHeight = spaceRequired.height;\n            if (heightRequired <= availableHeight) {\n                availableHeight -= heightRequired;\n                this.showTitle = true;\n            }\n        }\n        this.boundingRect.width = availableSpace.width;\n        this.boundingRect.height = availableSpace.height - availableHeight;\n    }\n    calculateSpaceIfDrawnVertical(availableSpace) {\n        let availableWidth = availableSpace.width;\n        if (this.axisConfig.showAxisLine && availableWidth > this.axisConfig.axisLineWidth) {\n            availableWidth -= this.axisConfig.axisLineWidth;\n            this.showAxisLine = true;\n        }\n        if (this.axisConfig.showLabel) {\n            const spaceRequired = this.getLabelDimension();\n            const maxPadding = MAX_OUTER_PADDING_PERCENT_FOR_WRT_LABEL * availableSpace.height;\n            this.outerPadding = Math.min(spaceRequired.height / 2, maxPadding);\n            const widthRequired = spaceRequired.width + this.axisConfig.labelPadding * 2;\n            if (widthRequired <= availableWidth) {\n                availableWidth -= widthRequired;\n                this.showLabel = true;\n            }\n        }\n        if (this.axisConfig.showTick && availableWidth >= this.axisConfig.tickLength) {\n            this.showTick = true;\n            availableWidth -= this.axisConfig.tickLength;\n        }\n        if (this.axisConfig.showTitle && this.title) {\n            const spaceRequired = this.textDimensionCalculator.getMaxDimension([\n                this.title\n            ], this.axisConfig.titleFontSize);\n            const widthRequired = spaceRequired.height + this.axisConfig.titlePadding * 2;\n            this.titleTextHeight = spaceRequired.height;\n            if (widthRequired <= availableWidth) {\n                availableWidth -= widthRequired;\n                this.showTitle = true;\n            }\n        }\n        this.boundingRect.width = availableSpace.width - availableWidth;\n        this.boundingRect.height = availableSpace.height;\n    }\n    calculateSpace(availableSpace) {\n        if (this.axisPosition === \"left\" || this.axisPosition === \"right\") {\n            this.calculateSpaceIfDrawnVertical(availableSpace);\n        } else {\n            this.calculateSpaceIfDrawnHorizontally(availableSpace);\n        }\n        this.recalculateScale();\n        return {\n            width: this.boundingRect.width,\n            height: this.boundingRect.height\n        };\n    }\n    setBoundingBoxXY(point) {\n        this.boundingRect.x = point.x;\n        this.boundingRect.y = point.y;\n    }\n    getDrawableElementsForLeftAxis() {\n        const drawableElement = [];\n        if (this.showAxisLine) {\n            const x = this.boundingRect.x + this.boundingRect.width - this.axisConfig.axisLineWidth / 2;\n            drawableElement.push({\n                type: \"path\",\n                groupTexts: [\n                    \"left-axis\",\n                    \"axisl-line\"\n                ],\n                data: [\n                    {\n                        path: \"M \".concat(x, \",\").concat(this.boundingRect.y, \" L \").concat(x, \",\").concat(this.boundingRect.y + this.boundingRect.height, \" \"),\n                        strokeFill: this.axisThemeConfig.axisLineColor,\n                        strokeWidth: this.axisConfig.axisLineWidth\n                    }\n                ]\n            });\n        }\n        if (this.showLabel) {\n            drawableElement.push({\n                type: \"text\",\n                groupTexts: [\n                    \"left-axis\",\n                    \"label\"\n                ],\n                data: this.getTickValues().map((tick)=>({\n                        text: tick.toString(),\n                        x: this.boundingRect.x + this.boundingRect.width - (this.showLabel ? this.axisConfig.labelPadding : 0) - (this.showTick ? this.axisConfig.tickLength : 0) - (this.showAxisLine ? this.axisConfig.axisLineWidth : 0),\n                        y: this.getScaleValue(tick),\n                        fill: this.axisThemeConfig.labelColor,\n                        fontSize: this.axisConfig.labelFontSize,\n                        rotation: 0,\n                        verticalPos: \"middle\",\n                        horizontalPos: \"right\"\n                    }))\n            });\n        }\n        if (this.showTick) {\n            const x = this.boundingRect.x + this.boundingRect.width - (this.showAxisLine ? this.axisConfig.axisLineWidth : 0);\n            drawableElement.push({\n                type: \"path\",\n                groupTexts: [\n                    \"left-axis\",\n                    \"ticks\"\n                ],\n                data: this.getTickValues().map((tick)=>({\n                        path: \"M \".concat(x, \",\").concat(this.getScaleValue(tick), \" L \").concat(x - this.axisConfig.tickLength, \",\").concat(this.getScaleValue(tick)),\n                        strokeFill: this.axisThemeConfig.tickColor,\n                        strokeWidth: this.axisConfig.tickWidth\n                    }))\n            });\n        }\n        if (this.showTitle) {\n            drawableElement.push({\n                type: \"text\",\n                groupTexts: [\n                    \"left-axis\",\n                    \"title\"\n                ],\n                data: [\n                    {\n                        text: this.title,\n                        x: this.boundingRect.x + this.axisConfig.titlePadding,\n                        y: this.boundingRect.y + this.boundingRect.height / 2,\n                        fill: this.axisThemeConfig.titleColor,\n                        fontSize: this.axisConfig.titleFontSize,\n                        rotation: 270,\n                        verticalPos: \"top\",\n                        horizontalPos: \"center\"\n                    }\n                ]\n            });\n        }\n        return drawableElement;\n    }\n    getDrawableElementsForBottomAxis() {\n        const drawableElement = [];\n        if (this.showAxisLine) {\n            const y = this.boundingRect.y + this.axisConfig.axisLineWidth / 2;\n            drawableElement.push({\n                type: \"path\",\n                groupTexts: [\n                    \"bottom-axis\",\n                    \"axis-line\"\n                ],\n                data: [\n                    {\n                        path: \"M \".concat(this.boundingRect.x, \",\").concat(y, \" L \").concat(this.boundingRect.x + this.boundingRect.width, \",\").concat(y),\n                        strokeFill: this.axisThemeConfig.axisLineColor,\n                        strokeWidth: this.axisConfig.axisLineWidth\n                    }\n                ]\n            });\n        }\n        if (this.showLabel) {\n            drawableElement.push({\n                type: \"text\",\n                groupTexts: [\n                    \"bottom-axis\",\n                    \"label\"\n                ],\n                data: this.getTickValues().map((tick)=>({\n                        text: tick.toString(),\n                        x: this.getScaleValue(tick),\n                        y: this.boundingRect.y + this.axisConfig.labelPadding + (this.showTick ? this.axisConfig.tickLength : 0) + (this.showAxisLine ? this.axisConfig.axisLineWidth : 0),\n                        fill: this.axisThemeConfig.labelColor,\n                        fontSize: this.axisConfig.labelFontSize,\n                        rotation: 0,\n                        verticalPos: \"top\",\n                        horizontalPos: \"center\"\n                    }))\n            });\n        }\n        if (this.showTick) {\n            const y = this.boundingRect.y + (this.showAxisLine ? this.axisConfig.axisLineWidth : 0);\n            drawableElement.push({\n                type: \"path\",\n                groupTexts: [\n                    \"bottom-axis\",\n                    \"ticks\"\n                ],\n                data: this.getTickValues().map((tick)=>({\n                        path: \"M \".concat(this.getScaleValue(tick), \",\").concat(y, \" L \").concat(this.getScaleValue(tick), \",\").concat(y + this.axisConfig.tickLength),\n                        strokeFill: this.axisThemeConfig.tickColor,\n                        strokeWidth: this.axisConfig.tickWidth\n                    }))\n            });\n        }\n        if (this.showTitle) {\n            drawableElement.push({\n                type: \"text\",\n                groupTexts: [\n                    \"bottom-axis\",\n                    \"title\"\n                ],\n                data: [\n                    {\n                        text: this.title,\n                        x: this.range[0] + (this.range[1] - this.range[0]) / 2,\n                        y: this.boundingRect.y + this.boundingRect.height - this.axisConfig.titlePadding - this.titleTextHeight,\n                        fill: this.axisThemeConfig.titleColor,\n                        fontSize: this.axisConfig.titleFontSize,\n                        rotation: 0,\n                        verticalPos: \"top\",\n                        horizontalPos: \"center\"\n                    }\n                ]\n            });\n        }\n        return drawableElement;\n    }\n    getDrawableElementsForTopAxis() {\n        const drawableElement = [];\n        if (this.showAxisLine) {\n            const y = this.boundingRect.y + this.boundingRect.height - this.axisConfig.axisLineWidth / 2;\n            drawableElement.push({\n                type: \"path\",\n                groupTexts: [\n                    \"top-axis\",\n                    \"axis-line\"\n                ],\n                data: [\n                    {\n                        path: \"M \".concat(this.boundingRect.x, \",\").concat(y, \" L \").concat(this.boundingRect.x + this.boundingRect.width, \",\").concat(y),\n                        strokeFill: this.axisThemeConfig.axisLineColor,\n                        strokeWidth: this.axisConfig.axisLineWidth\n                    }\n                ]\n            });\n        }\n        if (this.showLabel) {\n            drawableElement.push({\n                type: \"text\",\n                groupTexts: [\n                    \"top-axis\",\n                    \"label\"\n                ],\n                data: this.getTickValues().map((tick)=>({\n                        text: tick.toString(),\n                        x: this.getScaleValue(tick),\n                        y: this.boundingRect.y + (this.showTitle ? this.titleTextHeight + this.axisConfig.titlePadding * 2 : 0) + this.axisConfig.labelPadding,\n                        fill: this.axisThemeConfig.labelColor,\n                        fontSize: this.axisConfig.labelFontSize,\n                        rotation: 0,\n                        verticalPos: \"top\",\n                        horizontalPos: \"center\"\n                    }))\n            });\n        }\n        if (this.showTick) {\n            const y = this.boundingRect.y;\n            drawableElement.push({\n                type: \"path\",\n                groupTexts: [\n                    \"top-axis\",\n                    \"ticks\"\n                ],\n                data: this.getTickValues().map((tick)=>({\n                        path: \"M \".concat(this.getScaleValue(tick), \",\").concat(y + this.boundingRect.height - (this.showAxisLine ? this.axisConfig.axisLineWidth : 0), \" L \").concat(this.getScaleValue(tick), \",\").concat(y + this.boundingRect.height - this.axisConfig.tickLength - (this.showAxisLine ? this.axisConfig.axisLineWidth : 0)),\n                        strokeFill: this.axisThemeConfig.tickColor,\n                        strokeWidth: this.axisConfig.tickWidth\n                    }))\n            });\n        }\n        if (this.showTitle) {\n            drawableElement.push({\n                type: \"text\",\n                groupTexts: [\n                    \"top-axis\",\n                    \"title\"\n                ],\n                data: [\n                    {\n                        text: this.title,\n                        x: this.boundingRect.x + this.boundingRect.width / 2,\n                        y: this.boundingRect.y + this.axisConfig.titlePadding,\n                        fill: this.axisThemeConfig.titleColor,\n                        fontSize: this.axisConfig.titleFontSize,\n                        rotation: 0,\n                        verticalPos: \"top\",\n                        horizontalPos: \"center\"\n                    }\n                ]\n            });\n        }\n        return drawableElement;\n    }\n    getDrawableElements() {\n        if (this.axisPosition === \"left\") {\n            return this.getDrawableElementsForLeftAxis();\n        }\n        if (this.axisPosition === \"right\") {\n            throw Error(\"Drawing of right axis is not implemented\");\n        }\n        if (this.axisPosition === \"bottom\") {\n            return this.getDrawableElementsForBottomAxis();\n        }\n        if (this.axisPosition === \"top\") {\n            return this.getDrawableElementsForTopAxis();\n        }\n        return [];\n    }\n    constructor(axisConfig, title, textDimensionCalculator, axisThemeConfig){\n        this.axisConfig = axisConfig;\n        this.title = title;\n        this.textDimensionCalculator = textDimensionCalculator;\n        this.axisThemeConfig = axisThemeConfig;\n        this.boundingRect = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        };\n        this.axisPosition = \"left\";\n        this.showTitle = false;\n        this.showLabel = false;\n        this.showTick = false;\n        this.showAxisLine = false;\n        this.outerPadding = 0;\n        this.titleTextHeight = 0;\n        this.labelTextHeight = 0;\n        this.range = [\n            0,\n            10\n        ];\n        this.boundingRect = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        };\n        this.axisPosition = \"left\";\n    }\n}\nclass BandAxis extends BaseAxis {\n    setRange(range) {\n        super.setRange(range);\n    }\n    recalculateScale() {\n        this.scale = (0,d3__WEBPACK_IMPORTED_MODULE_0__.scaleBand)().domain(this.categories).range(this.getRange()).paddingInner(1).paddingOuter(0).align(0.5);\n        _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__.l.trace(\"BandAxis axis final categories, range: \", this.categories, this.getRange());\n    }\n    getTickValues() {\n        return this.categories;\n    }\n    getScaleValue(value) {\n        return this.scale(value) || this.getRange()[0];\n    }\n    constructor(axisConfig, axisThemeConfig, categories, title, textDimensionCalculator){\n        super(axisConfig, title, textDimensionCalculator, axisThemeConfig);\n        this.categories = categories;\n        this.scale = (0,d3__WEBPACK_IMPORTED_MODULE_0__.scaleBand)().domain(this.categories).range(this.getRange());\n    }\n}\nclass LinearAxis extends BaseAxis {\n    getTickValues() {\n        return this.scale.ticks();\n    }\n    recalculateScale() {\n        const domain = [\n            ...this.domain\n        ];\n        if (this.axisPosition === \"left\") {\n            domain.reverse();\n        }\n        this.scale = (0,d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear)().domain(domain).range(this.getRange());\n    }\n    getScaleValue(value) {\n        return this.scale(value);\n    }\n    constructor(axisConfig, axisThemeConfig, domain, title, textDimensionCalculator){\n        super(axisConfig, title, textDimensionCalculator, axisThemeConfig);\n        this.domain = domain;\n        this.scale = (0,d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear)().domain(this.domain).range(this.getRange());\n    }\n}\nfunction getAxis(data, axisConfig, axisThemeConfig, tmpSVGGroup2) {\n    const textDimansionCalculator = new TextDimensionCalculatorWithFont(tmpSVGGroup2);\n    if (isBandAxisData(data)) {\n        return new BandAxis(axisConfig, axisThemeConfig, data.categories, data.title, textDimansionCalculator);\n    }\n    return new LinearAxis(axisConfig, axisThemeConfig, [\n        data.min,\n        data.max\n    ], data.title, textDimansionCalculator);\n}\nclass ChartTitle {\n    setBoundingBoxXY(point) {\n        this.boundingRect.x = point.x;\n        this.boundingRect.y = point.y;\n    }\n    calculateSpace(availableSpace) {\n        const titleDimension = this.textDimensionCalculator.getMaxDimension([\n            this.chartData.title\n        ], this.chartConfig.titleFontSize);\n        const widthRequired = Math.max(titleDimension.width, availableSpace.width);\n        const heightRequired = titleDimension.height + 2 * this.chartConfig.titlePadding;\n        if (titleDimension.width <= widthRequired && titleDimension.height <= heightRequired && this.chartConfig.showTitle && this.chartData.title) {\n            this.boundingRect.width = widthRequired;\n            this.boundingRect.height = heightRequired;\n            this.showChartTitle = true;\n        }\n        return {\n            width: this.boundingRect.width,\n            height: this.boundingRect.height\n        };\n    }\n    getDrawableElements() {\n        const drawableElem = [];\n        if (this.showChartTitle) {\n            drawableElem.push({\n                groupTexts: [\n                    \"chart-title\"\n                ],\n                type: \"text\",\n                data: [\n                    {\n                        fontSize: this.chartConfig.titleFontSize,\n                        text: this.chartData.title,\n                        verticalPos: \"middle\",\n                        horizontalPos: \"center\",\n                        x: this.boundingRect.x + this.boundingRect.width / 2,\n                        y: this.boundingRect.y + this.boundingRect.height / 2,\n                        fill: this.chartThemeConfig.titleColor,\n                        rotation: 0\n                    }\n                ]\n            });\n        }\n        return drawableElem;\n    }\n    constructor(textDimensionCalculator, chartConfig, chartData, chartThemeConfig){\n        this.textDimensionCalculator = textDimensionCalculator;\n        this.chartConfig = chartConfig;\n        this.chartData = chartData;\n        this.chartThemeConfig = chartThemeConfig;\n        this.boundingRect = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        };\n        this.showChartTitle = false;\n    }\n}\nfunction getChartTitleComponent(chartConfig, chartData, chartThemeConfig, tmpSVGGroup2) {\n    const textDimensionCalculator = new TextDimensionCalculatorWithFont(tmpSVGGroup2);\n    return new ChartTitle(textDimensionCalculator, chartConfig, chartData, chartThemeConfig);\n}\nclass LinePlot {\n    getDrawableElement() {\n        const finalData = this.plotData.data.map((d)=>[\n                this.xAxis.getScaleValue(d[0]),\n                this.yAxis.getScaleValue(d[1])\n            ]);\n        let path;\n        if (this.orientation === \"horizontal\") {\n            path = (0,d3__WEBPACK_IMPORTED_MODULE_0__.line)().y((d)=>d[0]).x((d)=>d[1])(finalData);\n        } else {\n            path = (0,d3__WEBPACK_IMPORTED_MODULE_0__.line)().x((d)=>d[0]).y((d)=>d[1])(finalData);\n        }\n        if (!path) {\n            return [];\n        }\n        return [\n            {\n                groupTexts: [\n                    \"plot\",\n                    \"line-plot-\".concat(this.plotIndex)\n                ],\n                type: \"path\",\n                data: [\n                    {\n                        path,\n                        strokeFill: this.plotData.strokeFill,\n                        strokeWidth: this.plotData.strokeWidth\n                    }\n                ]\n            }\n        ];\n    }\n    constructor(plotData, xAxis, yAxis, orientation, plotIndex2){\n        this.plotData = plotData;\n        this.xAxis = xAxis;\n        this.yAxis = yAxis;\n        this.orientation = orientation;\n        this.plotIndex = plotIndex2;\n    }\n}\nclass BarPlot {\n    getDrawableElement() {\n        const finalData = this.barData.data.map((d)=>[\n                this.xAxis.getScaleValue(d[0]),\n                this.yAxis.getScaleValue(d[1])\n            ]);\n        const barPaddingPercent = 0.05;\n        const barWidth = Math.min(this.xAxis.getAxisOuterPadding() * 2, this.xAxis.getTickDistance()) * (1 - barPaddingPercent);\n        const barWidthHalf = barWidth / 2;\n        if (this.orientation === \"horizontal\") {\n            return [\n                {\n                    groupTexts: [\n                        \"plot\",\n                        \"bar-plot-\".concat(this.plotIndex)\n                    ],\n                    type: \"rect\",\n                    data: finalData.map((data)=>({\n                            x: this.boundingRect.x,\n                            y: data[0] - barWidthHalf,\n                            height: barWidth,\n                            width: data[1] - this.boundingRect.x,\n                            fill: this.barData.fill,\n                            strokeWidth: 0,\n                            strokeFill: this.barData.fill\n                        }))\n                }\n            ];\n        }\n        return [\n            {\n                groupTexts: [\n                    \"plot\",\n                    \"bar-plot-\".concat(this.plotIndex)\n                ],\n                type: \"rect\",\n                data: finalData.map((data)=>({\n                        x: data[0] - barWidthHalf,\n                        y: data[1],\n                        width: barWidth,\n                        height: this.boundingRect.y + this.boundingRect.height - data[1],\n                        fill: this.barData.fill,\n                        strokeWidth: 0,\n                        strokeFill: this.barData.fill\n                    }))\n            }\n        ];\n    }\n    constructor(barData, boundingRect, xAxis, yAxis, orientation, plotIndex2){\n        this.barData = barData;\n        this.boundingRect = boundingRect;\n        this.xAxis = xAxis;\n        this.yAxis = yAxis;\n        this.orientation = orientation;\n        this.plotIndex = plotIndex2;\n    }\n}\nclass BasePlot {\n    setAxes(xAxis, yAxis) {\n        this.xAxis = xAxis;\n        this.yAxis = yAxis;\n    }\n    setBoundingBoxXY(point) {\n        this.boundingRect.x = point.x;\n        this.boundingRect.y = point.y;\n    }\n    calculateSpace(availableSpace) {\n        this.boundingRect.width = availableSpace.width;\n        this.boundingRect.height = availableSpace.height;\n        return {\n            width: this.boundingRect.width,\n            height: this.boundingRect.height\n        };\n    }\n    getDrawableElements() {\n        if (!(this.xAxis && this.yAxis)) {\n            throw Error(\"Axes must be passed to render Plots\");\n        }\n        const drawableElem = [];\n        for (const [i, plot] of this.chartData.plots.entries()){\n            switch(plot.type){\n                case \"line\":\n                    {\n                        const linePlot = new LinePlot(plot, this.xAxis, this.yAxis, this.chartConfig.chartOrientation, i);\n                        drawableElem.push(...linePlot.getDrawableElement());\n                    }\n                    break;\n                case \"bar\":\n                    {\n                        const barPlot = new BarPlot(plot, this.boundingRect, this.xAxis, this.yAxis, this.chartConfig.chartOrientation, i);\n                        drawableElem.push(...barPlot.getDrawableElement());\n                    }\n                    break;\n            }\n        }\n        return drawableElem;\n    }\n    constructor(chartConfig, chartData, chartThemeConfig){\n        this.chartConfig = chartConfig;\n        this.chartData = chartData;\n        this.chartThemeConfig = chartThemeConfig;\n        this.boundingRect = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        };\n    }\n}\nfunction getPlotComponent(chartConfig, chartData, chartThemeConfig) {\n    return new BasePlot(chartConfig, chartData, chartThemeConfig);\n}\nclass Orchestrator {\n    calculateVerticalSpace() {\n        let availableWidth = this.chartConfig.width;\n        let availableHeight = this.chartConfig.height;\n        let plotX = 0;\n        let plotY = 0;\n        let chartWidth = Math.floor(availableWidth * this.chartConfig.plotReservedSpacePercent / 100);\n        let chartHeight = Math.floor(availableHeight * this.chartConfig.plotReservedSpacePercent / 100);\n        let spaceUsed = this.componentStore.plot.calculateSpace({\n            width: chartWidth,\n            height: chartHeight\n        });\n        availableWidth -= spaceUsed.width;\n        availableHeight -= spaceUsed.height;\n        spaceUsed = this.componentStore.title.calculateSpace({\n            width: this.chartConfig.width,\n            height: availableHeight\n        });\n        plotY = spaceUsed.height;\n        availableHeight -= spaceUsed.height;\n        this.componentStore.xAxis.setAxisPosition(\"bottom\");\n        spaceUsed = this.componentStore.xAxis.calculateSpace({\n            width: availableWidth,\n            height: availableHeight\n        });\n        availableHeight -= spaceUsed.height;\n        this.componentStore.yAxis.setAxisPosition(\"left\");\n        spaceUsed = this.componentStore.yAxis.calculateSpace({\n            width: availableWidth,\n            height: availableHeight\n        });\n        plotX = spaceUsed.width;\n        availableWidth -= spaceUsed.width;\n        if (availableWidth > 0) {\n            chartWidth += availableWidth;\n            availableWidth = 0;\n        }\n        if (availableHeight > 0) {\n            chartHeight += availableHeight;\n            availableHeight = 0;\n        }\n        this.componentStore.plot.calculateSpace({\n            width: chartWidth,\n            height: chartHeight\n        });\n        this.componentStore.plot.setBoundingBoxXY({\n            x: plotX,\n            y: plotY\n        });\n        this.componentStore.xAxis.setRange([\n            plotX,\n            plotX + chartWidth\n        ]);\n        this.componentStore.xAxis.setBoundingBoxXY({\n            x: plotX,\n            y: plotY + chartHeight\n        });\n        this.componentStore.yAxis.setRange([\n            plotY,\n            plotY + chartHeight\n        ]);\n        this.componentStore.yAxis.setBoundingBoxXY({\n            x: 0,\n            y: plotY\n        });\n        if (this.chartData.plots.some((p)=>isBarPlot(p))) {\n            this.componentStore.xAxis.recalculateOuterPaddingToDrawBar();\n        }\n    }\n    calculateHorizonatalSpace() {\n        let availableWidth = this.chartConfig.width;\n        let availableHeight = this.chartConfig.height;\n        let titleYEnd = 0;\n        let plotX = 0;\n        let plotY = 0;\n        let chartWidth = Math.floor(availableWidth * this.chartConfig.plotReservedSpacePercent / 100);\n        let chartHeight = Math.floor(availableHeight * this.chartConfig.plotReservedSpacePercent / 100);\n        let spaceUsed = this.componentStore.plot.calculateSpace({\n            width: chartWidth,\n            height: chartHeight\n        });\n        availableWidth -= spaceUsed.width;\n        availableHeight -= spaceUsed.height;\n        spaceUsed = this.componentStore.title.calculateSpace({\n            width: this.chartConfig.width,\n            height: availableHeight\n        });\n        titleYEnd = spaceUsed.height;\n        availableHeight -= spaceUsed.height;\n        this.componentStore.xAxis.setAxisPosition(\"left\");\n        spaceUsed = this.componentStore.xAxis.calculateSpace({\n            width: availableWidth,\n            height: availableHeight\n        });\n        availableWidth -= spaceUsed.width;\n        plotX = spaceUsed.width;\n        this.componentStore.yAxis.setAxisPosition(\"top\");\n        spaceUsed = this.componentStore.yAxis.calculateSpace({\n            width: availableWidth,\n            height: availableHeight\n        });\n        availableHeight -= spaceUsed.height;\n        plotY = titleYEnd + spaceUsed.height;\n        if (availableWidth > 0) {\n            chartWidth += availableWidth;\n            availableWidth = 0;\n        }\n        if (availableHeight > 0) {\n            chartHeight += availableHeight;\n            availableHeight = 0;\n        }\n        this.componentStore.plot.calculateSpace({\n            width: chartWidth,\n            height: chartHeight\n        });\n        this.componentStore.plot.setBoundingBoxXY({\n            x: plotX,\n            y: plotY\n        });\n        this.componentStore.yAxis.setRange([\n            plotX,\n            plotX + chartWidth\n        ]);\n        this.componentStore.yAxis.setBoundingBoxXY({\n            x: plotX,\n            y: titleYEnd\n        });\n        this.componentStore.xAxis.setRange([\n            plotY,\n            plotY + chartHeight\n        ]);\n        this.componentStore.xAxis.setBoundingBoxXY({\n            x: 0,\n            y: plotY\n        });\n        if (this.chartData.plots.some((p)=>isBarPlot(p))) {\n            this.componentStore.xAxis.recalculateOuterPaddingToDrawBar();\n        }\n    }\n    calculateSpace() {\n        if (this.chartConfig.chartOrientation === \"horizontal\") {\n            this.calculateHorizonatalSpace();\n        } else {\n            this.calculateVerticalSpace();\n        }\n    }\n    getDrawableElement() {\n        this.calculateSpace();\n        const drawableElem = [];\n        this.componentStore.plot.setAxes(this.componentStore.xAxis, this.componentStore.yAxis);\n        for (const component of Object.values(this.componentStore)){\n            drawableElem.push(...component.getDrawableElements());\n        }\n        return drawableElem;\n    }\n    constructor(chartConfig, chartData, chartThemeConfig, tmpSVGGroup2){\n        this.chartConfig = chartConfig;\n        this.chartData = chartData;\n        this.componentStore = {\n            title: getChartTitleComponent(chartConfig, chartData, chartThemeConfig, tmpSVGGroup2),\n            plot: getPlotComponent(chartConfig, chartData, chartThemeConfig),\n            xAxis: getAxis(chartData.xAxis, chartConfig.xAxis, {\n                titleColor: chartThemeConfig.xAxisTitleColor,\n                labelColor: chartThemeConfig.xAxisLabelColor,\n                tickColor: chartThemeConfig.xAxisTickColor,\n                axisLineColor: chartThemeConfig.xAxisLineColor\n            }, tmpSVGGroup2),\n            yAxis: getAxis(chartData.yAxis, chartConfig.yAxis, {\n                titleColor: chartThemeConfig.yAxisTitleColor,\n                labelColor: chartThemeConfig.yAxisLabelColor,\n                tickColor: chartThemeConfig.yAxisTickColor,\n                axisLineColor: chartThemeConfig.yAxisLineColor\n            }, tmpSVGGroup2)\n        };\n    }\n}\nclass XYChartBuilder {\n    static build(config, chartData, chartThemeConfig, tmpSVGGroup2) {\n        const orchestrator = new Orchestrator(config, chartData, chartThemeConfig, tmpSVGGroup2);\n        return orchestrator.getDrawableElement();\n    }\n}\nlet plotIndex = 0;\nlet tmpSVGGroup;\nlet xyChartConfig = getChartDefaultConfig();\nlet xyChartThemeConfig = getChartDefaultThemeConfig();\nlet xyChartData = getChartDefaultData();\nlet plotColorPalette = xyChartThemeConfig.plotColorPalette.split(\",\").map((color)=>color.trim());\nlet hasSetXAxis = false;\nlet hasSetYAxis = false;\nfunction getChartDefaultThemeConfig() {\n    const defaultThemeVariables = (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__.D)();\n    const config = (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__.E)();\n    return (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__.B)(defaultThemeVariables.xyChart, config.themeVariables.xyChart);\n}\nfunction getChartDefaultConfig() {\n    const config = (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__.E)();\n    return (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__.B)(_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__.A.xyChart, config.xyChart);\n}\nfunction getChartDefaultData() {\n    return {\n        yAxis: {\n            type: \"linear\",\n            title: \"\",\n            min: Infinity,\n            max: -Infinity\n        },\n        xAxis: {\n            type: \"band\",\n            title: \"\",\n            categories: []\n        },\n        title: \"\",\n        plots: []\n    };\n}\nfunction textSanitizer(text) {\n    const config = (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__.E)();\n    return (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__.d)(text.trim(), config);\n}\nfunction setTmpSVGG(SVGG) {\n    tmpSVGGroup = SVGG;\n}\nfunction setOrientation(orientation) {\n    if (orientation === \"horizontal\") {\n        xyChartConfig.chartOrientation = \"horizontal\";\n    } else {\n        xyChartConfig.chartOrientation = \"vertical\";\n    }\n}\nfunction setXAxisTitle(title) {\n    xyChartData.xAxis.title = textSanitizer(title.text);\n}\nfunction setXAxisRangeData(min, max) {\n    xyChartData.xAxis = {\n        type: \"linear\",\n        title: xyChartData.xAxis.title,\n        min,\n        max\n    };\n    hasSetXAxis = true;\n}\nfunction setXAxisBand(categories) {\n    xyChartData.xAxis = {\n        type: \"band\",\n        title: xyChartData.xAxis.title,\n        categories: categories.map((c)=>textSanitizer(c.text))\n    };\n    hasSetXAxis = true;\n}\nfunction setYAxisTitle(title) {\n    xyChartData.yAxis.title = textSanitizer(title.text);\n}\nfunction setYAxisRangeData(min, max) {\n    xyChartData.yAxis = {\n        type: \"linear\",\n        title: xyChartData.yAxis.title,\n        min,\n        max\n    };\n    hasSetYAxis = true;\n}\nfunction setYAxisRangeFromPlotData(data) {\n    const minValue = Math.min(...data);\n    const maxValue = Math.max(...data);\n    const prevMinValue = isLinearAxisData(xyChartData.yAxis) ? xyChartData.yAxis.min : Infinity;\n    const prevMaxValue = isLinearAxisData(xyChartData.yAxis) ? xyChartData.yAxis.max : -Infinity;\n    xyChartData.yAxis = {\n        type: \"linear\",\n        title: xyChartData.yAxis.title,\n        min: Math.min(prevMinValue, minValue),\n        max: Math.max(prevMaxValue, maxValue)\n    };\n}\nfunction transformDataWithoutCategory(data) {\n    let retData = [];\n    if (data.length === 0) {\n        return retData;\n    }\n    if (!hasSetXAxis) {\n        const prevMinValue = isLinearAxisData(xyChartData.xAxis) ? xyChartData.xAxis.min : Infinity;\n        const prevMaxValue = isLinearAxisData(xyChartData.xAxis) ? xyChartData.xAxis.max : -Infinity;\n        setXAxisRangeData(Math.min(prevMinValue, 1), Math.max(prevMaxValue, data.length));\n    }\n    if (!hasSetYAxis) {\n        setYAxisRangeFromPlotData(data);\n    }\n    if (isBandAxisData(xyChartData.xAxis)) {\n        retData = xyChartData.xAxis.categories.map((c, i)=>[\n                c,\n                data[i]\n            ]);\n    }\n    if (isLinearAxisData(xyChartData.xAxis)) {\n        const min = xyChartData.xAxis.min;\n        const max = xyChartData.xAxis.max;\n        const step = (max - min + 1) / data.length;\n        const categories = [];\n        for(let i = min; i <= max; i += step){\n            categories.push(\"\".concat(i));\n        }\n        retData = categories.map((c, i)=>[\n                c,\n                data[i]\n            ]);\n    }\n    return retData;\n}\nfunction getPlotColorFromPalette(plotIndex2) {\n    return plotColorPalette[plotIndex2 === 0 ? 0 : plotIndex2 % plotColorPalette.length];\n}\nfunction setLineData(title, data) {\n    const plotData = transformDataWithoutCategory(data);\n    xyChartData.plots.push({\n        type: \"line\",\n        strokeFill: getPlotColorFromPalette(plotIndex),\n        strokeWidth: 2,\n        data: plotData\n    });\n    plotIndex++;\n}\nfunction setBarData(title, data) {\n    const plotData = transformDataWithoutCategory(data);\n    xyChartData.plots.push({\n        type: \"bar\",\n        fill: getPlotColorFromPalette(plotIndex),\n        data: plotData\n    });\n    plotIndex++;\n}\nfunction getDrawableElem() {\n    if (xyChartData.plots.length === 0) {\n        throw Error(\"No Plot to render, please provide a plot with some data\");\n    }\n    xyChartData.title = (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__.r)();\n    return XYChartBuilder.build(xyChartConfig, xyChartData, xyChartThemeConfig, tmpSVGGroup);\n}\nfunction getChartThemeConfig() {\n    return xyChartThemeConfig;\n}\nfunction getChartConfig() {\n    return xyChartConfig;\n}\nconst clear = function() {\n    (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__.t)();\n    plotIndex = 0;\n    xyChartConfig = getChartDefaultConfig();\n    xyChartData = getChartDefaultData();\n    xyChartThemeConfig = getChartDefaultThemeConfig();\n    plotColorPalette = xyChartThemeConfig.plotColorPalette.split(\",\").map((color)=>color.trim());\n    hasSetXAxis = false;\n    hasSetYAxis = false;\n};\nconst db = {\n    getDrawableElem,\n    clear,\n    setAccTitle: _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__.s,\n    getAccTitle: _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__.g,\n    setDiagramTitle: _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__.q,\n    getDiagramTitle: _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__.r,\n    getAccDescription: _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__.a,\n    setAccDescription: _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__.b,\n    setOrientation,\n    setXAxisTitle,\n    setXAxisRangeData,\n    setXAxisBand,\n    setYAxisTitle,\n    setYAxisRangeData,\n    setLineData,\n    setBarData,\n    setTmpSVGG,\n    getChartThemeConfig,\n    getChartConfig\n};\nconst draw = (txt, id, _version, diagObj)=>{\n    const db2 = diagObj.db;\n    const themeConfig = db2.getChartThemeConfig();\n    const chartConfig = db2.getChartConfig();\n    function getDominantBaseLine(horizontalPos) {\n        return horizontalPos === \"top\" ? \"text-before-edge\" : \"middle\";\n    }\n    function getTextAnchor(verticalPos) {\n        return verticalPos === \"left\" ? \"start\" : verticalPos === \"right\" ? \"end\" : \"middle\";\n    }\n    function getTextTransformation(data) {\n        return \"translate(\".concat(data.x, \", \").concat(data.y, \") rotate(\").concat(data.rotation || 0, \")\");\n    }\n    _mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(\"Rendering xychart chart\\n\" + txt);\n    const svg = (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__.z)(id);\n    const group = svg.append(\"g\").attr(\"class\", \"main\");\n    const background = group.append(\"rect\").attr(\"width\", chartConfig.width).attr(\"height\", chartConfig.height).attr(\"class\", \"background\");\n    (0,_mermaid_934d9bea_js__WEBPACK_IMPORTED_MODULE_6__.i)(svg, chartConfig.height, chartConfig.width, true);\n    svg.attr(\"viewBox\", \"0 0 \".concat(chartConfig.width, \" \").concat(chartConfig.height));\n    background.attr(\"fill\", themeConfig.backgroundColor);\n    db2.setTmpSVGG(svg.append(\"g\").attr(\"class\", \"mermaid-tmp-group\"));\n    const shapes = db2.getDrawableElem();\n    const groups = {};\n    function getGroup(gList) {\n        let elem = group;\n        let prefix = \"\";\n        for (const [i] of gList.entries()){\n            let parent = group;\n            if (i > 0 && groups[prefix]) {\n                parent = groups[prefix];\n            }\n            prefix += gList[i];\n            elem = groups[prefix];\n            if (!elem) {\n                elem = groups[prefix] = parent.append(\"g\").attr(\"class\", gList[i]);\n            }\n        }\n        return elem;\n    }\n    for (const shape of shapes){\n        if (shape.data.length === 0) {\n            continue;\n        }\n        const shapeGroup = getGroup(shape.groupTexts);\n        switch(shape.type){\n            case \"rect\":\n                shapeGroup.selectAll(\"rect\").data(shape.data).enter().append(\"rect\").attr(\"x\", (data)=>data.x).attr(\"y\", (data)=>data.y).attr(\"width\", (data)=>data.width).attr(\"height\", (data)=>data.height).attr(\"fill\", (data)=>data.fill).attr(\"stroke\", (data)=>data.strokeFill).attr(\"stroke-width\", (data)=>data.strokeWidth);\n                break;\n            case \"text\":\n                shapeGroup.selectAll(\"text\").data(shape.data).enter().append(\"text\").attr(\"x\", 0).attr(\"y\", 0).attr(\"fill\", (data)=>data.fill).attr(\"font-size\", (data)=>data.fontSize).attr(\"dominant-baseline\", (data)=>getDominantBaseLine(data.verticalPos)).attr(\"text-anchor\", (data)=>getTextAnchor(data.horizontalPos)).attr(\"transform\", (data)=>getTextTransformation(data)).text((data)=>data.text);\n                break;\n            case \"path\":\n                shapeGroup.selectAll(\"path\").data(shape.data).enter().append(\"path\").attr(\"d\", (data)=>data.path).attr(\"fill\", (data)=>data.fill ? data.fill : \"none\").attr(\"stroke\", (data)=>data.strokeFill).attr(\"stroke-width\", (data)=>data.strokeWidth);\n                break;\n        }\n    }\n};\nconst renderer = {\n    draw\n};\nconst diagram = {\n    parser: parser$1,\n    db,\n    renderer\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mermaid/dist/xychartDiagram-f746c04c.js\n"));

/***/ })

}]);