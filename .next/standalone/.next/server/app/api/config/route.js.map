{"version":3,"file":"app/api/config/route.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./app/api/config/route.ts","webpack://_N_E/./app/api/config/route.ts?27c9","webpack://_N_E/","webpack://_N_E/./app/config/server.ts","webpack://_N_E/./app/constant.ts","webpack://_N_E/<anon>"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { NextResponse } from \"next/server\";\n\nimport { getServerSideConfig } from \"../../config/server\";\n\nconst serverConfig = getServerSideConfig();\n\n// Danger! Do not hard code any secret value here!\n// 警告！不要在这里写入任何敏感信息！\nconst DANGER_CONFIG = {\n  needCode: serverConfig.needCode,\n  hideUserApiKey: serverConfig.hideUserApiKey,\n  disableGPT4: serverConfig.disableGPT4,\n  hideBalanceQuery: serverConfig.hideBalanceQuery,\n  disableFastLink: serverConfig.disableFastLink,\n  customModels: serverConfig.customModels,\n  defaultModel: serverConfig.defaultModel,\n};\n\ndeclare global {\n  type DangerConfig = typeof DANGER_CONFIG;\n}\n\nasync function handle() {\n  return NextResponse.json(DANGER_CONFIG);\n}\n\nexport const GET = handle;\nexport const POST = handle;\n\nexport const runtime = \"edge\";\n","import { AppRouteRouteModule } from \"next/dist/server/future/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/Volumes/D/github/ChatGPT-Next-Web/app/api/config/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/config/route\",\n        pathname: \"/api/config\",\n        filename: \"route\",\n        bundlePath: \"app/api/config/route\"\n    },\n    resolvedPagePath: \"/Volumes/D/github/ChatGPT-Next-Web/app/api/config/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/config/route\";\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\nexport { routeModule, requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout, originalPathname, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","import { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Fconfig%2Froute&page=%2Fapi%2Fconfig%2Froute&pagePath=private-next-app-dir%2Fapi%2Fconfig%2Froute.ts&appDir=%2FVolumes%2FD%2Fgithub%2FChatGPT-Next-Web%2Fapp&appPaths=%2Fapi%2Fconfig%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!private-next-app-dir/api/config/route.ts?__next_edge_ssr_entry__\";\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule);\n\n//# sourceMappingURL=edge-app-route.js.map","import md5 from \"spark-md5\";\nimport { DEFAULT_MODELS } from \"../constant\";\n\ndeclare global {\n  namespace NodeJS {\n    interface ProcessEnv {\n      PROXY_URL?: string; // docker only\n\n      OPENAI_API_KEY?: string;\n      CODE?: string;\n\n      BASE_URL?: string;\n      OPENAI_ORG_ID?: string; // openai only\n\n      VERCEL?: string;\n      BUILD_MODE?: \"standalone\" | \"export\";\n      BUILD_APP?: string; // is building desktop app\n\n      HIDE_USER_API_KEY?: string; // disable user's api key input\n      DISABLE_GPT4?: string; // allow user to use gpt-4 or not\n      ENABLE_BALANCE_QUERY?: string; // allow user to query balance or not\n      DISABLE_FAST_LINK?: string; // disallow parse settings from url or not\n      CUSTOM_MODELS?: string; // to control custom models\n      DEFAULT_MODEL?: string; // to cnntrol default model in every new chat window\n\n      // azure only\n      AZURE_URL?: string; // https://{azure-url}/openai/deployments/{deploy-name}\n      AZURE_API_KEY?: string;\n      AZURE_API_VERSION?: string;\n\n      // google only\n      GOOGLE_API_KEY?: string;\n      GOOGLE_URL?: string;\n\n      // google tag manager\n      GTM_ID?: string;\n\n      // custom template for preprocessing user input\n      DEFAULT_INPUT_TEMPLATE?: string;\n    }\n  }\n}\n\nconst ACCESS_CODES = (function getAccessCodes(): Set<string> {\n  const code = process.env.CODE;\n\n  try {\n    const codes = (code?.split(\",\") ?? [])\n      .filter((v) => !!v)\n      .map((v) => md5.hash(v.trim()));\n    return new Set(codes);\n  } catch (e) {\n    return new Set();\n  }\n})();\n\nfunction getApiKey(keys?: string) {\n  const apiKeyEnvVar = keys ?? \"\";\n  const apiKeys = apiKeyEnvVar.split(\",\").map((v) => v.trim());\n  const randomIndex = Math.floor(Math.random() * apiKeys.length);\n  const apiKey = apiKeys[randomIndex];\n  if (apiKey) {\n    console.log(\n      `[Server Config] using ${randomIndex + 1} of ${\n        apiKeys.length\n      } api key - ${apiKey}`,\n    );\n  }\n\n  return apiKey;\n}\n\nexport const getServerSideConfig = () => {\n  if (typeof process === \"undefined\") {\n    throw Error(\n      \"[Server Config] you are importing a nodejs-only module outside of nodejs\",\n    );\n  }\n\n  const disableGPT4 = !!process.env.DISABLE_GPT4;\n  let customModels = process.env.CUSTOM_MODELS ?? \"\";\n  let defaultModel = process.env.DEFAULT_MODEL ?? \"\";\n\n  if (disableGPT4) {\n    if (customModels) customModels += \",\";\n    customModels += DEFAULT_MODELS.filter((m) => m.name.startsWith(\"gpt-4\"))\n      .map((m) => \"-\" + m.name)\n      .join(\",\");\n    if (defaultModel.startsWith(\"gpt-4\")) defaultModel = \"\";\n  }\n\n  const isAzure = !!process.env.AZURE_URL;\n  const isGoogle = !!process.env.GOOGLE_API_KEY;\n  const isAnthropic = !!process.env.ANTHROPIC_API_KEY;\n\n  // const apiKeyEnvVar = process.env.OPENAI_API_KEY ?? \"\";\n  // const apiKeys = apiKeyEnvVar.split(\",\").map((v) => v.trim());\n  // const randomIndex = Math.floor(Math.random() * apiKeys.length);\n  // const apiKey = apiKeys[randomIndex];\n  // console.log(\n  //   `[Server Config] using ${randomIndex + 1} of ${apiKeys.length} api key`,\n  // );\n\n  const allowedWebDevEndpoints = (\n    process.env.WHITE_WEBDEV_ENDPOINTS ?? \"\"\n  ).split(\",\");\n\n  return {\n    baseUrl: process.env.BASE_URL,\n    apiKey: getApiKey(process.env.OPENAI_API_KEY),\n    openaiOrgId: process.env.OPENAI_ORG_ID,\n\n    isAzure,\n    azureUrl: process.env.AZURE_URL,\n    azureApiKey: getApiKey(process.env.AZURE_API_KEY),\n    azureApiVersion: process.env.AZURE_API_VERSION,\n\n    isGoogle,\n    googleApiKey: getApiKey(process.env.GOOGLE_API_KEY),\n    googleUrl: process.env.GOOGLE_URL,\n\n    isAnthropic,\n    anthropicApiKey: getApiKey(process.env.ANTHROPIC_API_KEY),\n    anthropicApiVersion: process.env.ANTHROPIC_API_VERSION,\n    anthropicUrl: process.env.ANTHROPIC_URL,\n\n    gtmId: process.env.GTM_ID,\n\n    needCode: ACCESS_CODES.size > 0,\n    code: process.env.CODE,\n    codes: ACCESS_CODES,\n\n    proxyUrl: process.env.PROXY_URL,\n    isVercel: !!process.env.VERCEL,\n\n    hideUserApiKey: !!process.env.HIDE_USER_API_KEY,\n    disableGPT4,\n    hideBalanceQuery: !process.env.ENABLE_BALANCE_QUERY,\n    disableFastLink: !!process.env.DISABLE_FAST_LINK,\n    customModels,\n    defaultModel,\n    allowedWebDevEndpoints,\n  };\n};\n","export const OWNER = \"Yidadaa\";\nexport const REPO = \"ChatGPT-Next-Web\";\nexport const REPO_URL = `https://github.com/${OWNER}/${REPO}`;\nexport const ISSUE_URL = `https://github.com/${OWNER}/${REPO}/issues`;\nexport const UPDATE_URL = `${REPO_URL}#keep-updated`;\nexport const RELEASE_URL = `${REPO_URL}/releases`;\nexport const FETCH_COMMIT_URL = `https://api.github.com/repos/${OWNER}/${REPO}/commits?per_page=1`;\nexport const FETCH_TAG_URL = `https://api.github.com/repos/${OWNER}/${REPO}/tags?per_page=1`;\nexport const RUNTIME_CONFIG_DOM = \"danger-runtime-config\";\n\nexport const DEFAULT_API_HOST = \"https://api.nextchat.dev\";\nexport const OPENAI_BASE_URL = \"https://api.openai.com\";\nexport const ANTHROPIC_BASE_URL = \"https://api.anthropic.com\";\n\nexport const GEMINI_BASE_URL = \"https://generativelanguage.googleapis.com/\";\n\nexport enum Path {\n  Home = \"/\",\n  Chat = \"/chat\",\n  Settings = \"/settings\",\n  NewChat = \"/new-chat\",\n  Masks = \"/masks\",\n  Auth = \"/auth\",\n}\n\nexport enum ApiPath {\n  Cors = \"\",\n  OpenAI = \"/api/openai\",\n  Anthropic = \"/api/anthropic\",\n}\n\nexport enum SlotID {\n  AppBody = \"app-body\",\n  CustomModel = \"custom-model\",\n}\n\nexport enum FileName {\n  Masks = \"masks.json\",\n  Prompts = \"prompts.json\",\n}\n\nexport enum StoreKey {\n  Chat = \"chat-next-web-store\",\n  Access = \"access-control\",\n  Config = \"app-config\",\n  Mask = \"mask-store\",\n  Prompt = \"prompt-store\",\n  Update = \"chat-update\",\n  Sync = \"sync\",\n}\n\nexport const DEFAULT_SIDEBAR_WIDTH = 300;\nexport const MAX_SIDEBAR_WIDTH = 500;\nexport const MIN_SIDEBAR_WIDTH = 230;\nexport const NARROW_SIDEBAR_WIDTH = 100;\n\nexport const ACCESS_CODE_PREFIX = \"nk-\";\n\nexport const LAST_INPUT_KEY = \"last-input\";\nexport const UNFINISHED_INPUT = (id: string) => \"unfinished-input-\" + id;\n\nexport const STORAGE_KEY = \"chatgpt-next-web\";\n\nexport const REQUEST_TIMEOUT_MS = 60000;\n\nexport const EXPORT_MESSAGE_CLASS_NAME = \"export-markdown\";\n\nexport enum ServiceProvider {\n  OpenAI = \"OpenAI\",\n  Azure = \"Azure\",\n  Google = \"Google\",\n  Anthropic = \"Anthropic\",\n}\n\nexport enum ModelProvider {\n  GPT = \"GPT\",\n  GeminiPro = \"GeminiPro\",\n  Claude = \"Claude\",\n}\n\nexport const Anthropic = {\n  ChatPath: \"v1/messages\",\n  ChatPath1: \"v1/complete\",\n  ExampleEndpoint: \"https://api.anthropic.com\",\n  Vision: \"2023-06-01\",\n};\n\nexport const OpenaiPath = {\n  ChatPath: \"v1/chat/completions\",\n  UsagePath: \"dashboard/billing/usage\",\n  SubsPath: \"dashboard/billing/subscription\",\n  ListModelPath: \"v1/models\",\n};\n\nexport const Azure = {\n  ExampleEndpoint: \"https://{resource-url}/openai/deployments/{deploy-id}\",\n};\n\nexport const Google = {\n  ExampleEndpoint: \"https://generativelanguage.googleapis.com/\",\n  ChatPath: (modelName: string) => `v1beta/models/${modelName}:generateContent`,\n};\n\nexport const DEFAULT_INPUT_TEMPLATE = `{{input}}`; // input / time / model / lang\n// export const DEFAULT_SYSTEM_TEMPLATE = `\n// You are ChatGPT, a large language model trained by {{ServiceProvider}}.\n// Knowledge cutoff: {{cutoff}}\n// Current model: {{model}}\n// Current time: {{time}}\n// Latex inline: $x^2$\n// Latex block: $$e=mc^2$$\n// `;\nexport const DEFAULT_SYSTEM_TEMPLATE = `\nYou are ChatGPT, a large language model trained by {{ServiceProvider}}.\nKnowledge cutoff: {{cutoff}}\nCurrent model: {{model}}\nCurrent time: {{time}}\nLatex inline: \\\\(x^2\\\\) \nLatex block: $$e=mc^2$$\n`;\n\nexport const SUMMARIZE_MODEL = \"gpt-3.5-turbo\";\nexport const GEMINI_SUMMARIZE_MODEL = \"gemini-pro\";\n\nexport const KnowledgeCutOffDate: Record<string, string> = {\n  default: \"2021-09\",\n  \"gpt-4-turbo\": \"2023-12\",\n  \"gpt-4-turbo-2024-04-09\": \"2023-12\",\n  \"gpt-4-turbo-preview\": \"2023-12\",\n  \"gpt-4o\": \"2023-10\",\n  \"gpt-4o-2024-05-13\": \"2023-10\",\n  \"gpt-4-vision-preview\": \"2023-04\",\n  // After improvements,\n  // it's now easier to add \"KnowledgeCutOffDate\" instead of stupid hardcoding it, as was done previously.\n  \"gemini-pro\": \"2023-12\",\n  \"gemini-pro-vision\": \"2023-12\",\n};\n\nconst openaiModels = [\n  \"gpt-3.5-turbo\",\n  \"gpt-3.5-turbo-1106\",\n  \"gpt-3.5-turbo-0125\",\n  \"gpt-4\",\n  \"gpt-4-0613\",\n  \"gpt-4-32k\",\n  \"gpt-4-32k-0613\",\n  \"gpt-4-turbo\",\n  \"gpt-4-turbo-preview\",\n  \"gpt-4o\",\n  \"gpt-4o-2024-05-13\",\n  \"gpt-4-vision-preview\",\n  \"gpt-4-turbo-2024-04-09\",\n];\n\nconst googleModels = [\n  \"gemini-1.0-pro\",\n  \"gemini-1.5-pro-latest\",\n  \"gemini-1.5-flash-latest\",\n  \"gemini-pro-vision\",\n];\n\nconst anthropicModels = [\n  \"claude-instant-1.2\",\n  \"claude-2.0\",\n  \"claude-2.1\",\n  \"claude-3-sonnet-20240229\",\n  \"claude-3-opus-20240229\",\n  \"claude-3-haiku-20240307\",\n  \"claude-3-5-sonnet-20240620\",\n];\n\nexport const DEFAULT_MODELS = [\n  ...openaiModels.map((name) => ({\n    name,\n    available: true,\n    provider: {\n      id: \"openai\",\n      providerName: \"OpenAI\",\n      providerType: \"openai\",\n    },\n  })),\n  ...googleModels.map((name) => ({\n    name,\n    available: true,\n    provider: {\n      id: \"google\",\n      providerName: \"Google\",\n      providerType: \"google\",\n    },\n  })),\n  ...anthropicModels.map((name) => ({\n    name,\n    available: true,\n    provider: {\n      id: \"anthropic\",\n      providerName: \"Anthropic\",\n      providerType: \"anthropic\",\n    },\n  })),\n] as const;\n\nexport const CHAT_PAGE_SIZE = 15;\nexport const MAX_RENDER_MSG_COUNT = 45;\n\n// some famous webdav endpoints\nexport const internalAllowedWebDavEndpoints = [\n  \"https://dav.jianguoyun.com/dav/\",\n  \"https://dav.dropdav.com/\",\n  \"https://dav.box.com/dav\",\n  \"https://nanao.teracloud.jp/dav/\",\n  \"https://bora.teracloud.jp/dav/\",\n  \"https://webdav.4shared.com/\",\n  \"https://dav.idrivesync.com\",\n  \"https://webdav.yandex.com\",\n  \"https://app.koofr.net/dav/Koofr\",\n];\n"],"names":["module","exports","require","serverConfig","getServerSideConfig","DANGER_CONFIG","needCode","hideUserApiKey","disableGPT4","hideBalanceQuery","disableFastLink","customModels","defaultModel","handle","NextResponse","json","GET","POST","runtime","routeModule","module_compiled","AppRouteRouteModule","definition","kind","route_kind","x","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","userland","route_namespaceObject","requestAsyncStorage","staticGenerationAsyncStorage","serverHooks","headerHooks","staticGenerationBailout","originalPathname","patchFetch","patch_fetch","XH","ComponentMod","route_next_edge_ssr_entry_namespaceObject","next_edge_app_route_loaderabsolutePagePath_private_next_app_dir_2Fapi_2Fconfig_2Froute_ts_page_2Fapi_2Fconfig_2Froute_appDirLoader_bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGY29uZmlnJTJGcm91dGUmcGFnZT0lMkZhcGklMkZjb25maWclMkZyb3V0ZSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmNvbmZpZyUyRnJvdXRlLnRzJmFwcERpcj0lMkZWb2x1bWVzJTJGRCUyRmdpdGh1YiUyRkNoYXRHUFQtTmV4dC1XZWIlMkZhcHAmYXBwUGF0aHM9JTJGYXBpJTJGY29uZmlnJTJGcm91dGUmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEIQ_3D_3D_nextConfigOutput_standalone_preferredRegion_middlewareConfig_e30_3D_","edge_route_module_wrapper","a","wrap","ACCESS_CODES","code","process","env","CODE","codes","split","filter","v","map","md5","trim","Set","e","getApiKey","keys","apiKeys","apiKeyEnvVar","randomIndex","Math","floor","random","length","apiKey","console","log","Error","DISABLE_GPT4","CUSTOM_MODELS","DEFAULT_MODEL","DEFAULT_MODELS","m","name","startsWith","join","isAzure","AZURE_URL","isGoogle","GOOGLE_API_KEY","isAnthropic","ANTHROPIC_API_KEY","allowedWebDevEndpoints","WHITE_WEBDEV_ENDPOINTS","baseUrl","BASE_URL","OPENAI_API_KEY","openaiOrgId","OPENAI_ORG_ID","azureUrl","azureApiKey","AZURE_API_KEY","azureApiVersion","AZURE_API_VERSION","googleApiKey","googleUrl","GOOGLE_URL","anthropicApiKey","anthropicApiVersion","ANTHROPIC_API_VERSION","anthropicUrl","ANTHROPIC_URL","gtmId","GTM_ID","size","proxyUrl","PROXY_URL","isVercel","VERCEL","HIDE_USER_API_KEY","ENABLE_BALANCE_QUERY","DISABLE_FAST_LINK","OPENAI_BASE_URL","ANTHROPIC_BASE_URL","GEMINI_BASE_URL","Path","ApiPath","SlotID","FileName","StoreKey","ACCESS_CODE_PREFIX","STORAGE_KEY","ServiceProvider","ModelProvider","Anthropic","ChatPath","ChatPath1","ExampleEndpoint","Vision","OpenaiPath","UsagePath","SubsPath","ListModelPath","openaiModels","available","provider","id","providerName","providerType","googleModels","anthropicModels","internalAllowedWebDavEndpoints"],"sourceRoot":""}