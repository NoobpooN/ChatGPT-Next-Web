{"version":3,"file":"app/api/anthropic/[...path]/route.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./app/api/anthropic/[...path]/route.ts","webpack://_N_E/./app/api/anthropic/[...path]/route.ts?3da4","webpack://_N_E/?1ede","webpack://_N_E/./app/utils/cloudflare.ts","webpack://_N_E/<anon>"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { getServerSideConfig } from \"@/app/config/server\";\nimport {\n  ANTHROPIC_BASE_URL,\n  Anthropic,\n  ApiPath,\n  DEFAULT_MODELS,\n  ServiceProvider,\n  ModelProvider,\n} from \"@/app/constant\";\nimport { prettyObject } from \"@/app/utils/format\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { auth } from \"../../auth\";\nimport { isModelAvailableInServer } from \"@/app/utils/model\";\nimport { cloudflareAIGatewayUrl } from \"@/app/utils/cloudflare\";\n\nconst ALLOWD_PATH = new Set([Anthropic.ChatPath, Anthropic.ChatPath1]);\n\nasync function handle(\n  req: NextRequest,\n  { params }: { params: { path: string[] } },\n) {\n  console.log(\"[Anthropic Route] params \", params);\n\n  if (req.method === \"OPTIONS\") {\n    return NextResponse.json({ body: \"OK\" }, { status: 200 });\n  }\n\n  const subpath = params.path.join(\"/\");\n\n  if (!ALLOWD_PATH.has(subpath)) {\n    console.log(\"[Anthropic Route] forbidden path \", subpath);\n    return NextResponse.json(\n      {\n        error: true,\n        msg: \"you are not allowed to request \" + subpath,\n      },\n      {\n        status: 403,\n      },\n    );\n  }\n\n  const authResult = auth(req, ModelProvider.Claude);\n  if (authResult.error) {\n    return NextResponse.json(authResult, {\n      status: 401,\n    });\n  }\n\n  try {\n    const response = await request(req);\n    return response;\n  } catch (e) {\n    console.error(\"[Anthropic] \", e);\n    return NextResponse.json(prettyObject(e));\n  }\n}\n\nexport const GET = handle;\nexport const POST = handle;\n\nexport const runtime = \"edge\";\nexport const preferredRegion = [\n  \"arn1\",\n  \"bom1\",\n  \"cdg1\",\n  \"cle1\",\n  \"cpt1\",\n  \"dub1\",\n  \"fra1\",\n  \"gru1\",\n  \"hnd1\",\n  \"iad1\",\n  \"icn1\",\n  \"kix1\",\n  \"lhr1\",\n  \"pdx1\",\n  \"sfo1\",\n  \"sin1\",\n  \"syd1\",\n];\n\nconst serverConfig = getServerSideConfig();\n\nasync function request(req: NextRequest) {\n  const controller = new AbortController();\n\n  let authHeaderName = \"x-api-key\";\n  let authValue =\n    req.headers.get(authHeaderName) ||\n    req.headers.get(\"Authorization\")?.replaceAll(\"Bearer \", \"\").trim() ||\n    serverConfig.anthropicApiKey ||\n    \"\";\n\n  let path = `${req.nextUrl.pathname}`.replaceAll(ApiPath.Anthropic, \"\");\n\n  let baseUrl =\n    serverConfig.anthropicUrl || serverConfig.baseUrl || ANTHROPIC_BASE_URL;\n\n  if (!baseUrl.startsWith(\"http\")) {\n    baseUrl = `https://${baseUrl}`;\n  }\n\n  if (baseUrl.endsWith(\"/\")) {\n    baseUrl = baseUrl.slice(0, -1);\n  }\n\n  console.log(\"[Proxy] \", path);\n  console.log(\"[Base Url]\", baseUrl);\n\n  const timeoutId = setTimeout(\n    () => {\n      controller.abort();\n    },\n    10 * 60 * 1000,\n  );\n\n  // try rebuild url, when using cloudflare ai gateway in server\n  const fetchUrl = cloudflareAIGatewayUrl(`${baseUrl}${path}`);\n\n  const fetchOptions: RequestInit = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Cache-Control\": \"no-store\",\n      [authHeaderName]: authValue,\n      \"anthropic-version\":\n        req.headers.get(\"anthropic-version\") ||\n        serverConfig.anthropicApiVersion ||\n        Anthropic.Vision,\n    },\n    method: req.method,\n    body: req.body,\n    redirect: \"manual\",\n    // @ts-ignore\n    duplex: \"half\",\n    signal: controller.signal,\n  };\n\n  // #1815 try to refuse some request to some models\n  if (serverConfig.customModels && req.body) {\n    try {\n      const clonedBody = await req.text();\n      fetchOptions.body = clonedBody;\n\n      const jsonBody = JSON.parse(clonedBody) as { model?: string };\n\n      // not undefined and is false\n      if (\n        isModelAvailableInServer(\n          serverConfig.customModels,\n          jsonBody?.model as string,\n          ServiceProvider.Anthropic as string,\n        )\n      ) {\n        return NextResponse.json(\n          {\n            error: true,\n            message: `you are not allowed to use ${jsonBody?.model} model`,\n          },\n          {\n            status: 403,\n          },\n        );\n      }\n    } catch (e) {\n      console.error(`[Anthropic] filter`, e);\n    }\n  }\n  // console.log(\"[Anthropic request]\", fetchOptions.headers, req.method);\n  try {\n    const res = await fetch(fetchUrl, fetchOptions);\n\n    // console.log(\n    //   \"[Anthropic response]\",\n    //   res.status,\n    //   \"   \",\n    //   res.headers,\n    //   res.url,\n    // );\n    // to prevent browser prompt for credentials\n    const newHeaders = new Headers(res.headers);\n    newHeaders.delete(\"www-authenticate\");\n    // to disable nginx buffering\n    newHeaders.set(\"X-Accel-Buffering\", \"no\");\n\n    return new Response(res.body, {\n      status: res.status,\n      statusText: res.statusText,\n      headers: newHeaders,\n    });\n  } finally {\n    clearTimeout(timeoutId);\n  }\n}\n","import { AppRouteRouteModule } from \"next/dist/server/future/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/Volumes/D/github/ChatGPT-Next-Web/app/api/anthropic/[...path]/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/anthropic/[...path]/route\",\n        pathname: \"/api/anthropic/[...path]\",\n        filename: \"route\",\n        bundlePath: \"app/api/anthropic/[...path]/route\"\n    },\n    resolvedPagePath: \"/Volumes/D/github/ChatGPT-Next-Web/app/api/anthropic/[...path]/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/anthropic/[...path]/route\";\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\nexport { routeModule, requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout, originalPathname, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","import { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Fanthropic%2F%5B...path%5D%2Froute&page=%2Fapi%2Fanthropic%2F%5B...path%5D%2Froute&pagePath=private-next-app-dir%2Fapi%2Fanthropic%2F%5B...path%5D%2Froute.ts&appDir=%2FVolumes%2FD%2Fgithub%2FChatGPT-Next-Web%2Fapp&appPaths=%2Fapi%2Fanthropic%2F%5B...path%5D%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=arn1&preferredRegion=bom1&preferredRegion=cdg1&preferredRegion=cle1&preferredRegion=cpt1&preferredRegion=dub1&preferredRegion=fra1&preferredRegion=gru1&preferredRegion=hnd1&preferredRegion=iad1&preferredRegion=icn1&preferredRegion=kix1&preferredRegion=lhr1&preferredRegion=pdx1&preferredRegion=sfo1&preferredRegion=sin1&preferredRegion=syd1&middlewareConfig=e30%3D!private-next-app-dir/api/anthropic/[...path]/route.ts?__next_edge_ssr_entry__\";\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule);\n\n//# sourceMappingURL=edge-app-route.js.map","export function cloudflareAIGatewayUrl(fetchUrl: string) {\n  // rebuild fetchUrl, if using cloudflare ai gateway\n  // document: https://developers.cloudflare.com/ai-gateway/providers/openai/\n\n  const paths = fetchUrl.split(\"/\");\n  if (\"gateway.ai.cloudflare.com\" == paths[2]) {\n    // is cloudflare.com ai gateway\n    // https://gateway.ai.cloudflare.com/v1/{account_id}/{gateway_id}/azure-openai/{resource_name}/{deployment_name}/chat/completions?api-version=2023-05-15'\n    if (\"azure-openai\" == paths[6]) {\n      // is azure gateway\n      return paths.slice(0, 8).concat(paths.slice(-3)).join(\"/\"); // rebuild ai gateway azure_url\n    }\n    // https://gateway.ai.cloudflare.com/v1/{account_id}/{gateway_id}/openai/chat/completions\n    if (\"openai\" == paths[6]) {\n      // is openai gateway\n      return paths.slice(0, 7).concat(paths.slice(-2)).join(\"/\"); // rebuild ai gateway openai_url\n    }\n    // https://gateway.ai.cloudflare.com/v1/{account_id}/{gateway_id}/anthropic/v1/messages \\\n    if (\"anthropic\" == paths[6]) {\n      // is anthropic gateway\n      return paths.slice(0, 7).concat(paths.slice(-2)).join(\"/\"); // rebuild ai gateway anthropic_url\n    }\n    // TODO: Amazon Bedrock, Groq, HuggingFace...\n  }\n  return fetchUrl;\n}\n"],"names":["module","exports","require","ALLOWD_PATH","Set","Anthropic","ChatPath","ChatPath1","handle","req","params","console","log","method","NextResponse","json","body","status","subpath","path","join","has","error","msg","authResult","auth","ModelProvider","Claude","request","e","prettyObject","GET","POST","runtime","preferredRegion","serverConfig","getServerSideConfig","controller","AbortController","authHeaderName","authValue","headers","get","replaceAll","trim","anthropicApiKey","nextUrl","pathname","ApiPath","baseUrl","anthropicUrl","ANTHROPIC_BASE_URL","startsWith","endsWith","slice","timeoutId","setTimeout","abort","fetchUrl","cloudflareAIGatewayUrl","fetchOptions","anthropicApiVersion","Vision","redirect","duplex","signal","customModels","clonedBody","text","jsonBody","JSON","parse","isModelAvailableInServer","model","ServiceProvider","message","res","fetch","newHeaders","Headers","delete","set","Response","statusText","clearTimeout","routeModule","module_compiled","AppRouteRouteModule","definition","kind","route_kind","x","APP_ROUTE","page","filename","bundlePath","resolvedPagePath","nextConfigOutput","userland","route_namespaceObject","requestAsyncStorage","staticGenerationAsyncStorage","serverHooks","headerHooks","staticGenerationBailout","originalPathname","patchFetch","patch_fetch","XH","ComponentMod","route_next_edge_ssr_entry_namespaceObject","next_edge_app_route_loaderabsolutePagePath_private_next_app_dir_2Fapi_2Fanthropic_2F_5B_path_5D_2Froute_ts_page_2Fapi_2Fanthropic_2F_5B_path_5D_2Froute_appDirLoader_bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGYW50aHJvcGljJTJGJTVCLi4ucGF0aCU1RCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGYW50aHJvcGljJTJGJTVCLi4ucGF0aCU1RCUyRnJvdXRlJnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYW50aHJvcGljJTJGJTVCLi4ucGF0aCU1RCUyRnJvdXRlLnRzJmFwcERpcj0lMkZWb2x1bWVzJTJGRCUyRmdpdGh1YiUyRkNoYXRHUFQtTmV4dC1XZWIlMkZhcHAmYXBwUGF0aHM9JTJGYXBpJTJGYW50aHJvcGljJTJGJTVCLi4ucGF0aCU1RCUyRnJvdXRlJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PXN0YW5kYWxvbmUmcHJlZmVycmVkUmVnaW9uPWFybjEmcHJlZmVycmVkUmVnaW9uPWJvbTEmcHJlZmVycmVkUmVnaW9uPWNkZzEmcHJlZmVycmVkUmVnaW9uPWNsZTEmcHJlZmVycmVkUmVnaW9uPWNwdDEmcHJlZmVycmVkUmVnaW9uPWR1YjEmcHJlZmVycmVkUmVnaW9uPWZyYTEmcHJlZmVycmVkUmVnaW9uPWdydTEmcHJlZmVycmVkUmVnaW9uPWhuZDEmcHJlZmVycmVkUmVnaW9uPWlhZDEmcHJlZmVycmVkUmVnaW9uPWljbjEmcHJlZmVycmVkUmVnaW9uPWtpeDEmcHJlZmVycmVkUmVnaW9uPWxocjEmcHJlZmVycmVkUmVnaW9uPXBkeDEmcHJlZmVycmVkUmVnaW9uPXNmbzEmcHJlZmVycmVkUmVnaW9uPXNpbjEmcHJlZmVycmVkUmVnaW9uPXN5ZDEmbWlkZGxld2FyZUNvbmZpZz1lMzAlM0Qh_nextConfigOutput_standalone_preferredRegion_arn1_preferredRegion_bom1_preferredRegion_cdg1_preferredRegion_cle1_preferredRegion_cpt1_preferredRegion_dub1_preferredRegion_fra1_preferredRegion_gru1_preferredRegion_hnd1_preferredRegion_iad1_preferredRegion_icn1_preferredRegion_kix1_preferredRegion_lhr1_preferredRegion_pdx1_preferredRegion_sfo1_preferredRegion_sin1_preferredRegion_syd1_middlewareConfig_e30_3D_","edge_route_module_wrapper","a","wrap","paths","split","concat"],"sourceRoot":""}