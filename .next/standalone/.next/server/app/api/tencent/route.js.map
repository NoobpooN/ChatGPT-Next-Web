{"version":3,"file":"app/api/tencent/route.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./app/utils/hmac.ts","webpack://_N_E/./app/utils/tencent.ts","webpack://_N_E/./app/api/tencent/route.ts","webpack://_N_E/./app/api/tencent/route.ts?d1ca","webpack://_N_E/?4037","webpack://_N_E/./app/api/auth.ts","webpack://_N_E/./app/utils/format.ts","webpack://_N_E/<anon>"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","// From https://gist.github.com/guillermodlpa/f6d955f838e9b10d1ef95b8e259b2c58\n// From https://gist.github.com/stevendesu/2d52f7b5e1f1184af3b667c0b5e054b8\n\n// To ensure cross-browser support even without a proper SubtleCrypto\n// impelmentation (or without access to the impelmentation, as is the case with\n// Chrome loaded over HTTP instead of HTTPS), this library can create SHA-256\n// HMAC signatures using nothing but raw JavaScript\n\n/* eslint-disable no-magic-numbers, id-length, no-param-reassign, new-cap */\n\n// By giving internal functions names that we can mangle, future calls to\n// them are reduced to a single byte (minor space savings in minified file)\nconst uint8Array = Uint8Array;\nconst uint32Array = Uint32Array;\nconst pow = Math.pow;\n\n// Will be initialized below\n// Using a Uint32Array instead of a simple array makes the minified code\n// a bit bigger (we lose our `unshift()` hack), but comes with huge\n// performance gains\nconst DEFAULT_STATE = new uint32Array(8);\nconst ROUND_CONSTANTS: number[] = [];\n\n// Reusable object for expanded message\n// Using a Uint32Array instead of a simple array makes the minified code\n// 7 bytes larger, but comes with huge performance gains\nconst M = new uint32Array(64);\n\n// After minification the code to compute the default state and round\n// constants is smaller than the output. More importantly, this serves as a\n// good educational aide for anyone wondering where the magic numbers come\n// from. No magic numbers FTW!\nfunction getFractionalBits(n: number) {\n  return ((n - (n | 0)) * pow(2, 32)) | 0;\n}\n\nlet n = 2;\nlet nPrime = 0;\nwhile (nPrime < 64) {\n  // isPrime() was in-lined from its original function form to save\n  // a few bytes\n  let isPrime = true;\n  // Math.sqrt() was replaced with pow(n, 1/2) to save a few bytes\n  // var sqrtN = pow(n, 1 / 2);\n  // So technically to determine if a number is prime you only need to\n  // check numbers up to the square root. However this function only runs\n  // once and we're only computing the first 64 primes (up to 311), so on\n  // any modern CPU this whole function runs in a couple milliseconds.\n  // By going to n / 2 instead of sqrt(n) we net 8 byte savings and no\n  // scaling performance cost\n  for (let factor = 2; factor <= n / 2; factor++) {\n    if (n % factor === 0) {\n      isPrime = false;\n    }\n  }\n  if (isPrime) {\n    if (nPrime < 8) {\n      DEFAULT_STATE[nPrime] = getFractionalBits(pow(n, 1 / 2));\n    }\n    ROUND_CONSTANTS[nPrime] = getFractionalBits(pow(n, 1 / 3));\n\n    nPrime++;\n  }\n\n  n++;\n}\n\n// For cross-platform support we need to ensure that all 32-bit words are\n// in the same endianness. A UTF-8 TextEncoder will return BigEndian data,\n// so upon reading or writing to our ArrayBuffer we'll only swap the bytes\n// if our system is LittleEndian (which is about 99% of CPUs)\nconst LittleEndian = !!new uint8Array(new uint32Array([1]).buffer)[0];\n\nfunction convertEndian(word: number) {\n  if (LittleEndian) {\n    return (\n      // byte 1 -> byte 4\n      (word >>> 24) |\n      // byte 2 -> byte 3\n      (((word >>> 16) & 0xff) << 8) |\n      // byte 3 -> byte 2\n      ((word & 0xff00) << 8) |\n      // byte 4 -> byte 1\n      (word << 24)\n    );\n  } else {\n    return word;\n  }\n}\n\nfunction rightRotate(word: number, bits: number) {\n  return (word >>> bits) | (word << (32 - bits));\n}\n\nfunction sha256(data: Uint8Array) {\n  // Copy default state\n  const STATE = DEFAULT_STATE.slice();\n\n  // Caching this reduces occurrences of \".length\" in minified JavaScript\n  // 3 more byte savings! :D\n  const legth = data.length;\n\n  // Pad data\n  const bitLength = legth * 8;\n  const newBitLength = 512 - ((bitLength + 64) % 512) - 1 + bitLength + 65;\n\n  // \"bytes\" and \"words\" are stored BigEndian\n  const bytes = new uint8Array(newBitLength / 8);\n  const words = new uint32Array(bytes.buffer);\n\n  bytes.set(data, 0);\n  // Append a 1\n  bytes[legth] = 0b10000000;\n  // Store length in BigEndian\n  words[words.length - 1] = convertEndian(bitLength);\n\n  // Loop iterator (avoid two instances of \"var\") -- saves 2 bytes\n  let round;\n\n  // Process blocks (512 bits / 64 bytes / 16 words at a time)\n  for (let block = 0; block < newBitLength / 32; block += 16) {\n    const workingState = STATE.slice();\n\n    // Rounds\n    for (round = 0; round < 64; round++) {\n      let MRound;\n      // Expand message\n      if (round < 16) {\n        // Convert to platform Endianness for later math\n        MRound = convertEndian(words[block + round]);\n      } else {\n        const gamma0x = M[round - 15];\n        const gamma1x = M[round - 2];\n        MRound =\n          M[round - 7] +\n          M[round - 16] +\n          (rightRotate(gamma0x, 7) ^\n            rightRotate(gamma0x, 18) ^\n            (gamma0x >>> 3)) +\n          (rightRotate(gamma1x, 17) ^\n            rightRotate(gamma1x, 19) ^\n            (gamma1x >>> 10));\n      }\n\n      // M array matches platform endianness\n      M[round] = MRound |= 0;\n\n      // Computation\n      const t1 =\n        (rightRotate(workingState[4], 6) ^\n          rightRotate(workingState[4], 11) ^\n          rightRotate(workingState[4], 25)) +\n        ((workingState[4] & workingState[5]) ^\n          (~workingState[4] & workingState[6])) +\n        workingState[7] +\n        MRound +\n        ROUND_CONSTANTS[round];\n      const t2 =\n        (rightRotate(workingState[0], 2) ^\n          rightRotate(workingState[0], 13) ^\n          rightRotate(workingState[0], 22)) +\n        ((workingState[0] & workingState[1]) ^\n          (workingState[2] & (workingState[0] ^ workingState[1])));\n      for (let i = 7; i > 0; i--) {\n        workingState[i] = workingState[i - 1];\n      }\n      workingState[0] = (t1 + t2) | 0;\n      workingState[4] = (workingState[4] + t1) | 0;\n    }\n\n    // Update state\n    for (round = 0; round < 8; round++) {\n      STATE[round] = (STATE[round] + workingState[round]) | 0;\n    }\n  }\n\n  // Finally the state needs to be converted to BigEndian for output\n  // And we want to return a Uint8Array, not a Uint32Array\n  return new uint8Array(\n    new uint32Array(\n      STATE.map(function (val) {\n        return convertEndian(val);\n      }),\n    ).buffer,\n  );\n}\n\nfunction hmac(key: Uint8Array, data: ArrayLike<number>) {\n  if (key.length > 64) key = sha256(key);\n\n  if (key.length < 64) {\n    const tmp = new Uint8Array(64);\n    tmp.set(key, 0);\n    key = tmp;\n  }\n\n  // Generate inner and outer keys\n  const innerKey = new Uint8Array(64);\n  const outerKey = new Uint8Array(64);\n  for (let i = 0; i < 64; i++) {\n    innerKey[i] = 0x36 ^ key[i];\n    outerKey[i] = 0x5c ^ key[i];\n  }\n\n  // Append the innerKey\n  const msg = new Uint8Array(data.length + 64);\n  msg.set(innerKey, 0);\n  msg.set(data, 64);\n\n  // Has the previous message and append the outerKey\n  const result = new Uint8Array(64 + 32);\n  result.set(outerKey, 0);\n  result.set(sha256(msg), 64);\n\n  // Hash the previous message\n  return sha256(result);\n}\n\n// Convert a string to a Uint8Array, SHA-256 it, and convert back to string\nconst encoder = new TextEncoder();\n\nexport function sign(\n  inputKey: string | Uint8Array,\n  inputData: string | Uint8Array,\n) {\n  const key =\n    typeof inputKey === \"string\" ? encoder.encode(inputKey) : inputKey;\n  const data =\n    typeof inputData === \"string\" ? encoder.encode(inputData) : inputData;\n  return hmac(key, data);\n}\n\nexport function hex(bin: Uint8Array) {\n  return bin.reduce((acc, val) => {\n    const hexVal = \"00\" + val.toString(16);\n    return acc + hexVal.substring(hexVal.length - 2);\n  }, \"\");\n}\n\nexport function hash(str: string) {\n  return hex(sha256(encoder.encode(str)));\n}\n\nexport function hashWithSecret(str: string, secret: string) {\n  return hex(sign(secret, str)).toString();\n}\n","import { sign, hash as getHash, hex } from \"./hmac\";\n\n// 使用 SHA-256 和 secret 进行 HMAC 加密\nfunction sha256(message: any, secret: any, encoding?: string) {\n  const result = sign(secret, message);\n  return encoding == \"hex\" ? hex(result).toString() : result;\n}\n\nfunction getDate(timestamp: number) {\n  const date = new Date(timestamp * 1000);\n  const year = date.getUTCFullYear();\n  const month = (\"0\" + (date.getUTCMonth() + 1)).slice(-2);\n  const day = (\"0\" + date.getUTCDate()).slice(-2);\n  return `${year}-${month}-${day}`;\n}\n\nexport async function getHeader(\n  payload: any,\n  SECRET_ID: string,\n  SECRET_KEY: string,\n) {\n  // https://cloud.tencent.com/document/api/1729/105701\n\n  const endpoint = \"hunyuan.tencentcloudapi.com\";\n  const service = \"hunyuan\";\n  const region = \"\"; // optional\n  const action = \"ChatCompletions\";\n  const version = \"2023-09-01\";\n  const timestamp = Math.floor(Date.now() / 1000);\n  //时间处理, 获取世界时间日期\n  const date = getDate(timestamp);\n\n  // ************* 步骤 1：拼接规范请求串 *************\n\n  const hashedRequestPayload = getHash(payload);\n  const httpRequestMethod = \"POST\";\n  const contentType = \"application/json\";\n  const canonicalUri = \"/\";\n  const canonicalQueryString = \"\";\n  const canonicalHeaders =\n    `content-type:${contentType}\\n` +\n    \"host:\" +\n    endpoint +\n    \"\\n\" +\n    \"x-tc-action:\" +\n    action.toLowerCase() +\n    \"\\n\";\n  const signedHeaders = \"content-type;host;x-tc-action\";\n\n  const canonicalRequest = [\n    httpRequestMethod,\n    canonicalUri,\n    canonicalQueryString,\n    canonicalHeaders,\n    signedHeaders,\n    hashedRequestPayload,\n  ].join(\"\\n\");\n\n  // ************* 步骤 2：拼接待签名字符串 *************\n  const algorithm = \"TC3-HMAC-SHA256\";\n  const hashedCanonicalRequest = getHash(canonicalRequest);\n  const credentialScope = date + \"/\" + service + \"/\" + \"tc3_request\";\n  const stringToSign =\n    algorithm +\n    \"\\n\" +\n    timestamp +\n    \"\\n\" +\n    credentialScope +\n    \"\\n\" +\n    hashedCanonicalRequest;\n\n  // ************* 步骤 3：计算签名 *************\n  const kDate = sha256(date, \"TC3\" + SECRET_KEY);\n  const kService = sha256(service, kDate);\n  const kSigning = sha256(\"tc3_request\", kService);\n  const signature = sha256(stringToSign, kSigning, \"hex\");\n\n  // ************* 步骤 4：拼接 Authorization *************\n  const authorization =\n    algorithm +\n    \" \" +\n    \"Credential=\" +\n    SECRET_ID +\n    \"/\" +\n    credentialScope +\n    \", \" +\n    \"SignedHeaders=\" +\n    signedHeaders +\n    \", \" +\n    \"Signature=\" +\n    signature;\n\n  return {\n    Authorization: authorization,\n    \"Content-Type\": contentType,\n    Host: endpoint,\n    \"X-TC-Action\": action,\n    \"X-TC-Timestamp\": timestamp.toString(),\n    \"X-TC-Version\": version,\n    \"X-TC-Region\": region,\n  };\n}\n","import { getServerSideConfig } from \"@/app/config/server\";\nimport { TENCENT_BASE_URL, ModelProvider } from \"@/app/constant\";\nimport { prettyObject } from \"@/app/utils/format\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { auth } from \"@/app/api/auth\";\nimport { getHeader } from \"@/app/utils/tencent\";\n\nconst serverConfig = getServerSideConfig();\n\nasync function handle(\n  req: NextRequest,\n  { params }: { params: { path: string[] } },\n) {\n  console.log(\"[Tencent Route] params \", params);\n\n  if (req.method === \"OPTIONS\") {\n    return NextResponse.json({ body: \"OK\" }, { status: 200 });\n  }\n\n  const authResult = auth(req, ModelProvider.Hunyuan);\n  if (authResult.error) {\n    return NextResponse.json(authResult, {\n      status: 401,\n    });\n  }\n\n  try {\n    const response = await request(req);\n    return response;\n  } catch (e) {\n    console.error(\"[Tencent] \", e);\n    return NextResponse.json(prettyObject(e));\n  }\n}\n\nexport const GET = handle;\nexport const POST = handle;\n\nexport const runtime = \"edge\";\nexport const preferredRegion = [\n  \"arn1\",\n  \"bom1\",\n  \"cdg1\",\n  \"cle1\",\n  \"cpt1\",\n  \"dub1\",\n  \"fra1\",\n  \"gru1\",\n  \"hnd1\",\n  \"iad1\",\n  \"icn1\",\n  \"kix1\",\n  \"lhr1\",\n  \"pdx1\",\n  \"sfo1\",\n  \"sin1\",\n  \"syd1\",\n];\n\nasync function request(req: NextRequest) {\n  const controller = new AbortController();\n\n  let baseUrl = serverConfig.tencentUrl || TENCENT_BASE_URL;\n\n  if (!baseUrl.startsWith(\"http\")) {\n    baseUrl = `https://${baseUrl}`;\n  }\n\n  if (baseUrl.endsWith(\"/\")) {\n    baseUrl = baseUrl.slice(0, -1);\n  }\n\n  console.log(\"[Base Url]\", baseUrl);\n\n  const timeoutId = setTimeout(\n    () => {\n      controller.abort();\n    },\n    10 * 60 * 1000,\n  );\n\n  const fetchUrl = baseUrl;\n\n  const body = await req.text();\n  const headers = await getHeader(\n    body,\n    serverConfig.tencentSecretId as string,\n    serverConfig.tencentSecretKey as string,\n  );\n  const fetchOptions: RequestInit = {\n    headers,\n    method: req.method,\n    body,\n    redirect: \"manual\",\n    // @ts-ignore\n    duplex: \"half\",\n    signal: controller.signal,\n  };\n\n  try {\n    const res = await fetch(fetchUrl, fetchOptions);\n\n    // to prevent browser prompt for credentials\n    const newHeaders = new Headers(res.headers);\n    newHeaders.delete(\"www-authenticate\");\n    // to disable nginx buffering\n    newHeaders.set(\"X-Accel-Buffering\", \"no\");\n\n    return new Response(res.body, {\n      status: res.status,\n      statusText: res.statusText,\n      headers: newHeaders,\n    });\n  } finally {\n    clearTimeout(timeoutId);\n  }\n}\n","import { AppRouteRouteModule } from \"next/dist/server/future/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/Volumes/D/github/ChatGPT-Next-Web/app/api/tencent/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/tencent/route\",\n        pathname: \"/api/tencent\",\n        filename: \"route\",\n        bundlePath: \"app/api/tencent/route\"\n    },\n    resolvedPagePath: \"/Volumes/D/github/ChatGPT-Next-Web/app/api/tencent/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/tencent/route\";\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\nexport { routeModule, requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout, originalPathname, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","import { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Ftencent%2Froute&page=%2Fapi%2Ftencent%2Froute&pagePath=private-next-app-dir%2Fapi%2Ftencent%2Froute.ts&appDir=%2FVolumes%2FD%2Fgithub%2FChatGPT-Next-Web%2Fapp&appPaths=%2Fapi%2Ftencent%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=arn1&preferredRegion=bom1&preferredRegion=cdg1&preferredRegion=cle1&preferredRegion=cpt1&preferredRegion=dub1&preferredRegion=fra1&preferredRegion=gru1&preferredRegion=hnd1&preferredRegion=iad1&preferredRegion=icn1&preferredRegion=kix1&preferredRegion=lhr1&preferredRegion=pdx1&preferredRegion=sfo1&preferredRegion=sin1&preferredRegion=syd1&middlewareConfig=e30%3D!private-next-app-dir/api/tencent/route.ts?__next_edge_ssr_entry__\";\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule);\n\n//# sourceMappingURL=edge-app-route.js.map","import { NextRequest } from \"next/server\";\nimport { getServerSideConfig } from \"../config/server\";\nimport md5 from \"spark-md5\";\nimport { ACCESS_CODE_PREFIX, ModelProvider } from \"../constant\";\n\nfunction getIP(req: NextRequest) {\n  let ip = req.ip ?? req.headers.get(\"x-real-ip\");\n  const forwardedFor = req.headers.get(\"x-forwarded-for\");\n\n  if (!ip && forwardedFor) {\n    ip = forwardedFor.split(\",\").at(0) ?? \"\";\n  }\n\n  return ip;\n}\n\nfunction parseApiKey(bearToken: string) {\n  const token = bearToken.trim().replaceAll(\"Bearer \", \"\").trim();\n  const isApiKey = !token.startsWith(ACCESS_CODE_PREFIX);\n\n  return {\n    accessCode: isApiKey ? \"\" : token.slice(ACCESS_CODE_PREFIX.length),\n    apiKey: isApiKey ? token : \"\",\n  };\n}\n\nexport function auth(req: NextRequest, modelProvider: ModelProvider) {\n  const authToken = req.headers.get(\"Authorization\") ?? \"\";\n\n  // check if it is openai api key or user token\n  const { accessCode, apiKey } = parseApiKey(authToken);\n\n  const hashedCode = md5.hash(accessCode ?? \"\").trim();\n\n  const serverConfig = getServerSideConfig();\n  console.log(\"[Auth] allowed hashed codes: \", [...serverConfig.codes]);\n  console.log(\"[Auth] got access code:\", accessCode);\n  console.log(\"[Auth] hashed access code:\", hashedCode);\n  console.log(\"[User IP] \", getIP(req));\n  console.log(\"[Time] \", new Date().toLocaleString());\n\n  if (serverConfig.needCode && !serverConfig.codes.has(hashedCode) && !apiKey) {\n    return {\n      error: true,\n      msg: !accessCode ? \"empty access code\" : \"wrong access code\",\n    };\n  }\n\n  if (serverConfig.hideUserApiKey && !!apiKey) {\n    return {\n      error: true,\n      msg: \"you are not allowed to access with your own api key\",\n    };\n  }\n\n  // if user does not provide an api key, inject system api key\n  if (!apiKey) {\n    const serverConfig = getServerSideConfig();\n\n    // const systemApiKey =\n    //   modelProvider === ModelProvider.GeminiPro\n    //     ? serverConfig.googleApiKey\n    //     : serverConfig.isAzure\n    //     ? serverConfig.azureApiKey\n    //     : serverConfig.apiKey;\n\n    let systemApiKey: string | undefined;\n\n    switch (modelProvider) {\n      case ModelProvider.Stability:\n        systemApiKey = serverConfig.stabilityApiKey;\n        break;\n      case ModelProvider.GeminiPro:\n        systemApiKey = serverConfig.googleApiKey;\n        break;\n      case ModelProvider.Claude:\n        systemApiKey = serverConfig.anthropicApiKey;\n        break;\n      case ModelProvider.Doubao:\n        systemApiKey = serverConfig.bytedanceApiKey;\n        break;\n      case ModelProvider.Ernie:\n        systemApiKey = serverConfig.baiduApiKey;\n        break;\n      case ModelProvider.Qwen:\n        systemApiKey = serverConfig.alibabaApiKey;\n        break;\n      case ModelProvider.Moonshot:\n        systemApiKey = serverConfig.moonshotApiKey;\n        break;\n      case ModelProvider.Iflytek:\n        systemApiKey =\n          serverConfig.iflytekApiKey + \":\" + serverConfig.iflytekApiSecret;\n        break;\n      case ModelProvider.DeepSeek:\n        systemApiKey = serverConfig.deepseekApiKey;\n        break;\n      case ModelProvider.XAI:\n        systemApiKey = serverConfig.xaiApiKey;\n        break;\n      case ModelProvider.ChatGLM:\n        systemApiKey = serverConfig.chatglmApiKey;\n        break;\n      case ModelProvider.SiliconFlow:\n        systemApiKey = serverConfig.siliconFlowApiKey;\n        break;\n      case ModelProvider.GPT:\n      default:\n        if (req.nextUrl.pathname.includes(\"azure/deployments\")) {\n          systemApiKey = serverConfig.azureApiKey;\n        } else {\n          systemApiKey = serverConfig.apiKey;\n        }\n    }\n\n    if (systemApiKey) {\n      console.log(\"[Auth] use system api key\");\n      req.headers.set(\"Authorization\", `Bearer ${systemApiKey}`);\n    } else {\n      console.log(\"[Auth] admin did not provide an api key\");\n    }\n  } else {\n    console.log(\"[Auth] use user api key\");\n  }\n\n  return {\n    error: false,\n  };\n}\n","export function prettyObject(msg: any) {\n  const obj = msg;\n  if (typeof msg !== \"string\") {\n    msg = JSON.stringify(msg, null, \"  \");\n  }\n  if (msg === \"{}\") {\n    return obj.toString();\n  }\n  if (msg.startsWith(\"```json\")) {\n    return msg;\n  }\n  return [\"```json\", msg, \"```\"].join(\"\\n\");\n}\n\nexport function* chunks(s: string, maxBytes = 1000 * 1000) {\n  const decoder = new TextDecoder(\"utf-8\");\n  let buf = new TextEncoder().encode(s);\n  while (buf.length) {\n    let i = buf.lastIndexOf(32, maxBytes + 1);\n    // If no space found, try forward search\n    if (i < 0) i = buf.indexOf(32, maxBytes);\n    // If there's no space at all, take all\n    if (i < 0) i = buf.length;\n    // This is a safe cut-off point; never half-way a multi-byte\n    yield decoder.decode(buf.slice(0, i));\n    buf = buf.slice(i + 1); // Skip space (if any)\n  }\n}\n"],"names":["module","exports","require","uint8Array","Uint8Array","uint32Array","Uint32Array","pow","Math","DEFAULT_STATE","ROUND_CONSTANTS","M","getFractionalBits","n","nPrime","isPrime","factor","LittleEndian","buffer","convertEndian","word","rightRotate","bits","sha256","data","round","STATE","slice","legth","length","bitLength","newBitLength","bytes","words","set","block","workingState","MRound","gamma0x","gamma1x","t1","t2","i","map","val","encoder","TextEncoder","hex","bin","reduce","acc","hexVal","toString","substring","hash","str","encode","message","secret","encoding","result","hmac","key","tmp","innerKey","outerKey","msg","getHeader","payload","SECRET_ID","SECRET_KEY","endpoint","service","action","timestamp","floor","Date","now","date","getDate","year","getUTCFullYear","month","getUTCMonth","day","getUTCDate","hashedRequestPayload","getHash","contentType","canonicalHeaders","toLowerCase","signedHeaders","canonicalRequest","join","algorithm","hashedCanonicalRequest","credentialScope","kDate","kService","kSigning","signature","Authorization","Host","serverConfig","getServerSideConfig","handle","req","params","console","log","method","NextResponse","json","body","status","authResult","auth","ModelProvider","Hunyuan","error","request","e","prettyObject","GET","POST","runtime","preferredRegion","controller","AbortController","baseUrl","tencentUrl","TENCENT_BASE_URL","startsWith","endsWith","timeoutId","setTimeout","abort","fetchUrl","text","fetchOptions","headers","tencentSecretId","tencentSecretKey","redirect","duplex","signal","res","fetch","newHeaders","Headers","delete","Response","statusText","clearTimeout","routeModule","module_compiled","AppRouteRouteModule","definition","kind","route_kind","x","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","userland","route_namespaceObject","requestAsyncStorage","staticGenerationAsyncStorage","serverHooks","headerHooks","staticGenerationBailout","originalPathname","patchFetch","patch_fetch","XH","ComponentMod","route_next_edge_ssr_entry_namespaceObject","next_edge_app_route_loaderabsolutePagePath_private_next_app_dir_2Fapi_2Ftencent_2Froute_ts_page_2Fapi_2Ftencent_2Froute_appDirLoader_bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGdGVuY2VudCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGdGVuY2VudCUyRnJvdXRlJnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGdGVuY2VudCUyRnJvdXRlLnRzJmFwcERpcj0lMkZWb2x1bWVzJTJGRCUyRmdpdGh1YiUyRkNoYXRHUFQtTmV4dC1XZWIlMkZhcHAmYXBwUGF0aHM9JTJGYXBpJTJGdGVuY2VudCUyRnJvdXRlJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PXN0YW5kYWxvbmUmcHJlZmVycmVkUmVnaW9uPWFybjEmcHJlZmVycmVkUmVnaW9uPWJvbTEmcHJlZmVycmVkUmVnaW9uPWNkZzEmcHJlZmVycmVkUmVnaW9uPWNsZTEmcHJlZmVycmVkUmVnaW9uPWNwdDEmcHJlZmVycmVkUmVnaW9uPWR1YjEmcHJlZmVycmVkUmVnaW9uPWZyYTEmcHJlZmVycmVkUmVnaW9uPWdydTEmcHJlZmVycmVkUmVnaW9uPWhuZDEmcHJlZmVycmVkUmVnaW9uPWlhZDEmcHJlZmVycmVkUmVnaW9uPWljbjEmcHJlZmVycmVkUmVnaW9uPWtpeDEmcHJlZmVycmVkUmVnaW9uPWxocjEmcHJlZmVycmVkUmVnaW9uPXBkeDEmcHJlZmVycmVkUmVnaW9uPXNmbzEmcHJlZmVycmVkUmVnaW9uPXNpbjEmcHJlZmVycmVkUmVnaW9uPXN5ZDEmbWlkZGxld2FyZUNvbmZpZz1lMzAlM0Qh_nextConfigOutput_standalone_preferredRegion_arn1_preferredRegion_bom1_preferredRegion_cdg1_preferredRegion_cle1_preferredRegion_cpt1_preferredRegion_dub1_preferredRegion_fra1_preferredRegion_gru1_preferredRegion_hnd1_preferredRegion_iad1_preferredRegion_icn1_preferredRegion_kix1_preferredRegion_lhr1_preferredRegion_pdx1_preferredRegion_sfo1_preferredRegion_sin1_preferredRegion_syd1_middlewareConfig_e30_3D_","edge_route_module_wrapper","a","wrap","modelProvider","accessCode","apiKey","parseApiKey","bearToken","token","trim","replaceAll","isApiKey","ACCESS_CODE_PREFIX","get","hashedCode","md5","codes","getIP","ip","forwardedFor","split","at","toLocaleString","needCode","has","hideUserApiKey","systemApiKey","Stability","stabilityApiKey","GeminiPro","googleApiKey","Claude","anthropicApiKey","Doubao","bytedanceApiKey","Ernie","baiduApiKey","Qwen","alibabaApiKey","Moonshot","moonshotApiKey","Iflytek","iflytekApiKey","iflytekApiSecret","DeepSeek","deepseekApiKey","XAI","xaiApiKey","ChatGLM","chatglmApiKey","SiliconFlow","siliconFlowApiKey","GPT","nextUrl","includes","azureApiKey","obj","JSON","stringify"],"sourceRoot":""}