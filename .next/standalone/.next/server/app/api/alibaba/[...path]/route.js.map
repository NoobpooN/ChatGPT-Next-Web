{"version":3,"file":"app/api/alibaba/[...path]/route.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./app/api/alibaba/[...path]/route.ts","webpack://_N_E/./app/api/alibaba/[...path]/route.ts?b7f8","webpack://_N_E/?e3e6","webpack://_N_E/<anon>"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { getServerSideConfig } from \"@/app/config/server\";\nimport {\n  Alibaba,\n  ALIBABA_BASE_URL,\n  ApiPath,\n  ModelProvider,\n  ServiceProvider,\n} from \"@/app/constant\";\nimport { prettyObject } from \"@/app/utils/format\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { auth } from \"@/app/api/auth\";\nimport { isModelAvailableInServer } from \"@/app/utils/model\";\nimport type { RequestPayload } from \"@/app/client/platforms/openai\";\n\nconst serverConfig = getServerSideConfig();\n\nasync function handle(\n  req: NextRequest,\n  { params }: { params: { path: string[] } },\n) {\n  console.log(\"[Alibaba Route] params \", params);\n\n  if (req.method === \"OPTIONS\") {\n    return NextResponse.json({ body: \"OK\" }, { status: 200 });\n  }\n\n  const authResult = auth(req, ModelProvider.Qwen);\n  if (authResult.error) {\n    return NextResponse.json(authResult, {\n      status: 401,\n    });\n  }\n\n  try {\n    const response = await request(req);\n    return response;\n  } catch (e) {\n    console.error(\"[Alibaba] \", e);\n    return NextResponse.json(prettyObject(e));\n  }\n}\n\nexport const GET = handle;\nexport const POST = handle;\n\nexport const runtime = \"edge\";\nexport const preferredRegion = [\n  \"arn1\",\n  \"bom1\",\n  \"cdg1\",\n  \"cle1\",\n  \"cpt1\",\n  \"dub1\",\n  \"fra1\",\n  \"gru1\",\n  \"hnd1\",\n  \"iad1\",\n  \"icn1\",\n  \"kix1\",\n  \"lhr1\",\n  \"pdx1\",\n  \"sfo1\",\n  \"sin1\",\n  \"syd1\",\n];\n\nasync function request(req: NextRequest) {\n  const controller = new AbortController();\n\n  // alibaba use base url or just remove the path\n  let path = `${req.nextUrl.pathname}`.replaceAll(ApiPath.Alibaba, \"\");\n\n  let baseUrl = serverConfig.alibabaUrl || ALIBABA_BASE_URL;\n\n  if (!baseUrl.startsWith(\"http\")) {\n    baseUrl = `https://${baseUrl}`;\n  }\n\n  if (baseUrl.endsWith(\"/\")) {\n    baseUrl = baseUrl.slice(0, -1);\n  }\n\n  console.log(\"[Proxy] \", path);\n  console.log(\"[Base Url]\", baseUrl);\n\n  const timeoutId = setTimeout(\n    () => {\n      controller.abort();\n    },\n    10 * 60 * 1000,\n  );\n\n  const fetchUrl = `${baseUrl}${path}`;\n  const fetchOptions: RequestInit = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: req.headers.get(\"Authorization\") ?? \"\",\n      \"X-DashScope-SSE\": req.headers.get(\"X-DashScope-SSE\") ?? \"disable\",\n    },\n    method: req.method,\n    body: req.body,\n    redirect: \"manual\",\n    // @ts-ignore\n    duplex: \"half\",\n    signal: controller.signal,\n  };\n\n  // #1815 try to refuse some request to some models\n  if (serverConfig.customModels && req.body) {\n    try {\n      const clonedBody = await req.text();\n      fetchOptions.body = clonedBody;\n\n      const jsonBody = JSON.parse(clonedBody) as { model?: string };\n\n      // not undefined and is false\n      if (\n        isModelAvailableInServer(\n          serverConfig.customModels,\n          jsonBody?.model as string,\n          ServiceProvider.Alibaba as string,\n        )\n      ) {\n        return NextResponse.json(\n          {\n            error: true,\n            message: `you are not allowed to use ${jsonBody?.model} model`,\n          },\n          {\n            status: 403,\n          },\n        );\n      }\n    } catch (e) {\n      console.error(`[Alibaba] filter`, e);\n    }\n  }\n  try {\n    const res = await fetch(fetchUrl, fetchOptions);\n\n    // to prevent browser prompt for credentials\n    const newHeaders = new Headers(res.headers);\n    newHeaders.delete(\"www-authenticate\");\n    // to disable nginx buffering\n    newHeaders.set(\"X-Accel-Buffering\", \"no\");\n\n    return new Response(res.body, {\n      status: res.status,\n      statusText: res.statusText,\n      headers: newHeaders,\n    });\n  } finally {\n    clearTimeout(timeoutId);\n  }\n}\n","import { AppRouteRouteModule } from \"next/dist/server/future/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/Volumes/D/github/ChatGPT-Next-Web/app/api/alibaba/[...path]/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/alibaba/[...path]/route\",\n        pathname: \"/api/alibaba/[...path]\",\n        filename: \"route\",\n        bundlePath: \"app/api/alibaba/[...path]/route\"\n    },\n    resolvedPagePath: \"/Volumes/D/github/ChatGPT-Next-Web/app/api/alibaba/[...path]/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/alibaba/[...path]/route\";\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\nexport { routeModule, requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout, originalPathname, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","import { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Falibaba%2F%5B...path%5D%2Froute&page=%2Fapi%2Falibaba%2F%5B...path%5D%2Froute&pagePath=private-next-app-dir%2Fapi%2Falibaba%2F%5B...path%5D%2Froute.ts&appDir=%2FVolumes%2FD%2Fgithub%2FChatGPT-Next-Web%2Fapp&appPaths=%2Fapi%2Falibaba%2F%5B...path%5D%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=arn1&preferredRegion=bom1&preferredRegion=cdg1&preferredRegion=cle1&preferredRegion=cpt1&preferredRegion=dub1&preferredRegion=fra1&preferredRegion=gru1&preferredRegion=hnd1&preferredRegion=iad1&preferredRegion=icn1&preferredRegion=kix1&preferredRegion=lhr1&preferredRegion=pdx1&preferredRegion=sfo1&preferredRegion=sin1&preferredRegion=syd1&middlewareConfig=e30%3D!private-next-app-dir/api/alibaba/[...path]/route.ts?__next_edge_ssr_entry__\";\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule);\n\n//# sourceMappingURL=edge-app-route.js.map"],"names":["module","exports","require","serverConfig","getServerSideConfig","handle","req","params","console","log","method","NextResponse","json","body","status","authResult","auth","ModelProvider","Qwen","error","request","e","prettyObject","GET","POST","runtime","preferredRegion","controller","AbortController","path","nextUrl","pathname","replaceAll","ApiPath","Alibaba","baseUrl","alibabaUrl","ALIBABA_BASE_URL","startsWith","endsWith","slice","timeoutId","setTimeout","abort","fetchUrl","fetchOptions","headers","Authorization","get","redirect","duplex","signal","customModels","clonedBody","text","jsonBody","JSON","parse","isModelAvailableInServer","model","ServiceProvider","message","res","fetch","newHeaders","Headers","delete","set","Response","statusText","clearTimeout","routeModule","module_compiled","AppRouteRouteModule","definition","kind","route_kind","x","APP_ROUTE","page","filename","bundlePath","resolvedPagePath","nextConfigOutput","userland","route_namespaceObject","requestAsyncStorage","staticGenerationAsyncStorage","serverHooks","headerHooks","staticGenerationBailout","originalPathname","patchFetch","patch_fetch","XH","ComponentMod","route_next_edge_ssr_entry_namespaceObject","next_edge_app_route_loaderabsolutePagePath_private_next_app_dir_2Fapi_2Falibaba_2F_5B_path_5D_2Froute_ts_page_2Fapi_2Falibaba_2F_5B_path_5D_2Froute_appDirLoader_bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGYWxpYmFiYSUyRiU1Qi4uLnBhdGglNUQlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmFsaWJhYmElMkYlNUIuLi5wYXRoJTVEJTJGcm91dGUmcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZhbGliYWJhJTJGJTVCLi4ucGF0aCU1RCUyRnJvdXRlLnRzJmFwcERpcj0lMkZWb2x1bWVzJTJGRCUyRmdpdGh1YiUyRkNoYXRHUFQtTmV4dC1XZWIlMkZhcHAmYXBwUGF0aHM9JTJGYXBpJTJGYWxpYmFiYSUyRiU1Qi4uLnBhdGglNUQlMkZyb3V0ZSZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD1zdGFuZGFsb25lJnByZWZlcnJlZFJlZ2lvbj1hcm4xJnByZWZlcnJlZFJlZ2lvbj1ib20xJnByZWZlcnJlZFJlZ2lvbj1jZGcxJnByZWZlcnJlZFJlZ2lvbj1jbGUxJnByZWZlcnJlZFJlZ2lvbj1jcHQxJnByZWZlcnJlZFJlZ2lvbj1kdWIxJnByZWZlcnJlZFJlZ2lvbj1mcmExJnByZWZlcnJlZFJlZ2lvbj1ncnUxJnByZWZlcnJlZFJlZ2lvbj1obmQxJnByZWZlcnJlZFJlZ2lvbj1pYWQxJnByZWZlcnJlZFJlZ2lvbj1pY24xJnByZWZlcnJlZFJlZ2lvbj1raXgxJnByZWZlcnJlZFJlZ2lvbj1saHIxJnByZWZlcnJlZFJlZ2lvbj1wZHgxJnByZWZlcnJlZFJlZ2lvbj1zZm8xJnByZWZlcnJlZFJlZ2lvbj1zaW4xJnByZWZlcnJlZFJlZ2lvbj1zeWQxJm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEIQ_3D_3D_nextConfigOutput_standalone_preferredRegion_arn1_preferredRegion_bom1_preferredRegion_cdg1_preferredRegion_cle1_preferredRegion_cpt1_preferredRegion_dub1_preferredRegion_fra1_preferredRegion_gru1_preferredRegion_hnd1_preferredRegion_iad1_preferredRegion_icn1_preferredRegion_kix1_preferredRegion_lhr1_preferredRegion_pdx1_preferredRegion_sfo1_preferredRegion_sin1_preferredRegion_syd1_middlewareConfig_e30_3D_","edge_route_module_wrapper","a","wrap"],"sourceRoot":""}