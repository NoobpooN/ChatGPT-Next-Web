{"version":3,"file":"app/api/openai/[...path]/route.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./app/api/openai/[...path]/route.ts","webpack://_N_E/./app/api/openai/[...path]/route.ts?c4a0","webpack://_N_E/?8d9a","webpack://_N_E/./app/api/common.ts","webpack://_N_E/./app/utils/cloudflare.ts","webpack://_N_E/<anon>"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { type OpenAIListModelResponse } from \"@/app/client/platforms/openai\";\nimport { getServerSideConfig } from \"@/app/config/server\";\nimport { ModelProvider, OpenaiPath } from \"@/app/constant\";\nimport { prettyObject } from \"@/app/utils/format\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { auth } from \"../../auth\";\nimport { requestOpenai } from \"../../common\";\n\nconst ALLOWD_PATH = new Set(Object.values(OpenaiPath));\n\nfunction getModels(remoteModelRes: OpenAIListModelResponse) {\n  const config = getServerSideConfig();\n\n  if (config.disableGPT4) {\n    remoteModelRes.data = remoteModelRes.data.filter(\n      (m) => !m.id.startsWith(\"gpt-4\"),\n    );\n  }\n\n  return remoteModelRes;\n}\n\nasync function handle(\n  req: NextRequest,\n  { params }: { params: { path: string[] } },\n) {\n  console.log(\"[OpenAI Route] params \", params);\n\n  if (req.method === \"OPTIONS\") {\n    return NextResponse.json({ body: \"OK\" }, { status: 200 });\n  }\n\n  const subpath = params.path.join(\"/\");\n\n  if (!ALLOWD_PATH.has(subpath)) {\n    console.log(\"[OpenAI Route] forbidden path \", subpath);\n    return NextResponse.json(\n      {\n        error: true,\n        msg: \"you are not allowed to request \" + subpath,\n      },\n      {\n        status: 403,\n      },\n    );\n  }\n\n  const authResult = auth(req, ModelProvider.GPT);\n  if (authResult.error) {\n    return NextResponse.json(authResult, {\n      status: 401,\n    });\n  }\n\n  try {\n    const response = await requestOpenai(req);\n\n    // list models\n    if (subpath === OpenaiPath.ListModelPath && response.status === 200) {\n      const resJson = (await response.json()) as OpenAIListModelResponse;\n      const availableModels = getModels(resJson);\n      return NextResponse.json(availableModels, {\n        status: response.status,\n      });\n    }\n\n    return response;\n  } catch (e) {\n    console.error(\"[OpenAI] \", e);\n    return NextResponse.json(prettyObject(e));\n  }\n}\n\nexport const GET = handle;\nexport const POST = handle;\n\nexport const runtime = \"edge\";\nexport const preferredRegion = [\n  \"arn1\",\n  \"bom1\",\n  \"cdg1\",\n  \"cle1\",\n  \"cpt1\",\n  \"dub1\",\n  \"fra1\",\n  \"gru1\",\n  \"hnd1\",\n  \"iad1\",\n  \"icn1\",\n  \"kix1\",\n  \"lhr1\",\n  \"pdx1\",\n  \"sfo1\",\n  \"sin1\",\n  \"syd1\",\n];\n","import { AppRouteRouteModule } from \"next/dist/server/future/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/Volumes/D/github/ChatGPT-Next-Web/app/api/openai/[...path]/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/openai/[...path]/route\",\n        pathname: \"/api/openai/[...path]\",\n        filename: \"route\",\n        bundlePath: \"app/api/openai/[...path]/route\"\n    },\n    resolvedPagePath: \"/Volumes/D/github/ChatGPT-Next-Web/app/api/openai/[...path]/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/openai/[...path]/route\";\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\nexport { routeModule, requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout, originalPathname, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","import { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Fopenai%2F%5B...path%5D%2Froute&page=%2Fapi%2Fopenai%2F%5B...path%5D%2Froute&pagePath=private-next-app-dir%2Fapi%2Fopenai%2F%5B...path%5D%2Froute.ts&appDir=%2FVolumes%2FD%2Fgithub%2FChatGPT-Next-Web%2Fapp&appPaths=%2Fapi%2Fopenai%2F%5B...path%5D%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=arn1&preferredRegion=bom1&preferredRegion=cdg1&preferredRegion=cle1&preferredRegion=cpt1&preferredRegion=dub1&preferredRegion=fra1&preferredRegion=gru1&preferredRegion=hnd1&preferredRegion=iad1&preferredRegion=icn1&preferredRegion=kix1&preferredRegion=lhr1&preferredRegion=pdx1&preferredRegion=sfo1&preferredRegion=sin1&preferredRegion=syd1&middlewareConfig=e30%3D!private-next-app-dir/api/openai/[...path]/route.ts?__next_edge_ssr_entry__\";\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule);\n\n//# sourceMappingURL=edge-app-route.js.map","import { NextRequest, NextResponse } from \"next/server\";\nimport { getServerSideConfig } from \"../config/server\";\nimport {\n  DEFAULT_MODELS,\n  OPENAI_BASE_URL,\n  GEMINI_BASE_URL,\n  ServiceProvider,\n} from \"../constant\";\nimport { isModelAvailableInServer } from \"../utils/model\";\nimport { cloudflareAIGatewayUrl } from \"../utils/cloudflare\";\n\nconst serverConfig = getServerSideConfig();\n\nexport async function requestOpenai(req: NextRequest) {\n  const controller = new AbortController();\n\n  const isAzure = req.nextUrl.pathname.includes(\"azure/deployments\");\n\n  var authValue,\n    authHeaderName = \"\";\n  if (isAzure) {\n    authValue =\n      req.headers\n        .get(\"Authorization\")\n        ?.trim()\n        .replaceAll(\"Bearer \", \"\")\n        .trim() ?? \"\";\n\n    authHeaderName = \"api-key\";\n  } else {\n    authValue = req.headers.get(\"Authorization\") ?? \"\";\n    authHeaderName = \"Authorization\";\n  }\n\n  let path = `${req.nextUrl.pathname}${req.nextUrl.search}`.replaceAll(\n    \"/api/openai/\",\n    \"\",\n  );\n\n  let baseUrl =\n    (isAzure ? serverConfig.azureUrl : serverConfig.baseUrl) || OPENAI_BASE_URL;\n\n  if (!baseUrl.startsWith(\"http\")) {\n    baseUrl = `https://${baseUrl}`;\n  }\n\n  if (baseUrl.endsWith(\"/\")) {\n    baseUrl = baseUrl.slice(0, -1);\n  }\n\n  console.log(\"[Proxy] \", path);\n  console.log(\"[Base Url]\", baseUrl);\n\n  const timeoutId = setTimeout(\n    () => {\n      controller.abort();\n    },\n    10 * 60 * 1000,\n  );\n\n  if (isAzure) {\n    const azureApiVersion =\n      req?.nextUrl?.searchParams?.get(\"api-version\") ||\n      serverConfig.azureApiVersion;\n    baseUrl = baseUrl.split(\"/deployments\").shift() as string;\n    path = `${req.nextUrl.pathname.replaceAll(\n      \"/api/azure/\",\n      \"\",\n    )}?api-version=${azureApiVersion}`;\n\n    // Forward compatibility:\n    // if display_name(deployment_name) not set, and '{deploy-id}' in AZURE_URL\n    // then using default '{deploy-id}'\n    if (serverConfig.customModels && serverConfig.azureUrl) {\n      const modelName = path.split(\"/\")[1];\n      let realDeployName = \"\";\n      serverConfig.customModels\n        .split(\",\")\n        .filter((v) => !!v && !v.startsWith(\"-\") && v.includes(modelName))\n        .forEach((m) => {\n          const [fullName, displayName] = m.split(\"=\");\n          const [_, providerName] = fullName.split(\"@\");\n          if (providerName === \"azure\" && !displayName) {\n            const [_, deployId] = (serverConfig?.azureUrl ?? \"\").split(\n              \"deployments/\",\n            );\n            if (deployId) {\n              realDeployName = deployId;\n            }\n          }\n        });\n      if (realDeployName) {\n        console.log(\"[Replace with DeployId\", realDeployName);\n        path = path.replaceAll(modelName, realDeployName);\n      }\n    }\n  }\n\n  const fetchUrl = cloudflareAIGatewayUrl(`${baseUrl}/${path}`);\n  console.log(\"fetchUrl\", fetchUrl);\n  const fetchOptions: RequestInit = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Cache-Control\": \"no-store\",\n      [authHeaderName]: authValue,\n      ...(serverConfig.openaiOrgId && {\n        \"OpenAI-Organization\": serverConfig.openaiOrgId,\n      }),\n    },\n    method: req.method,\n    body: req.body,\n    // to fix #2485: https://stackoverflow.com/questions/55920957/cloudflare-worker-typeerror-one-time-use-body\n    redirect: \"manual\",\n    // @ts-ignore\n    duplex: \"half\",\n    signal: controller.signal,\n  };\n\n  // #1815 try to refuse gpt4 request\n  if (serverConfig.customModels && req.body) {\n    try {\n      const clonedBody = await req.text();\n      fetchOptions.body = clonedBody;\n\n      const jsonBody = JSON.parse(clonedBody) as { model?: string };\n\n      // not undefined and is false\n      if (\n        isModelAvailableInServer(\n          serverConfig.customModels,\n          jsonBody?.model as string,\n          ServiceProvider.OpenAI as string,\n        ) ||\n        isModelAvailableInServer(\n          serverConfig.customModels,\n          jsonBody?.model as string,\n          ServiceProvider.Azure as string,\n        )\n      ) {\n        return NextResponse.json(\n          {\n            error: true,\n            message: `you are not allowed to use ${jsonBody?.model} model`,\n          },\n          {\n            status: 403,\n          },\n        );\n      }\n    } catch (e) {\n      console.error(\"[OpenAI] gpt4 filter\", e);\n    }\n  }\n\n  try {\n    const res = await fetch(fetchUrl, fetchOptions);\n\n    // Extract the OpenAI-Organization header from the response\n    const openaiOrganizationHeader = res.headers.get(\"OpenAI-Organization\");\n\n    // Check if serverConfig.openaiOrgId is defined and not an empty string\n    if (serverConfig.openaiOrgId && serverConfig.openaiOrgId.trim() !== \"\") {\n      // If openaiOrganizationHeader is present, log it; otherwise, log that the header is not present\n      console.log(\"[Org ID]\", openaiOrganizationHeader);\n    } else {\n      console.log(\"[Org ID] is not set up.\");\n    }\n\n    // to prevent browser prompt for credentials\n    const newHeaders = new Headers(res.headers);\n    newHeaders.delete(\"www-authenticate\");\n    // to disable nginx buffering\n    newHeaders.set(\"X-Accel-Buffering\", \"no\");\n\n    // Conditionally delete the OpenAI-Organization header from the response if [Org ID] is undefined or empty (not setup in ENV)\n    // Also, this is to prevent the header from being sent to the client\n    if (!serverConfig.openaiOrgId || serverConfig.openaiOrgId.trim() === \"\") {\n      newHeaders.delete(\"OpenAI-Organization\");\n    }\n\n    // The latest version of the OpenAI API forced the content-encoding to be \"br\" in json response\n    // So if the streaming is disabled, we need to remove the content-encoding header\n    // Because Vercel uses gzip to compress the response, if we don't remove the content-encoding header\n    // The browser will try to decode the response with brotli and fail\n    newHeaders.delete(\"content-encoding\");\n\n    return new Response(res.body, {\n      status: res.status,\n      statusText: res.statusText,\n      headers: newHeaders,\n    });\n  } finally {\n    clearTimeout(timeoutId);\n  }\n}\n","export function cloudflareAIGatewayUrl(fetchUrl: string) {\n  // rebuild fetchUrl, if using cloudflare ai gateway\n  // document: https://developers.cloudflare.com/ai-gateway/providers/openai/\n\n  const paths = fetchUrl.split(\"/\");\n  if (\"gateway.ai.cloudflare.com\" == paths[2]) {\n    // is cloudflare.com ai gateway\n    // https://gateway.ai.cloudflare.com/v1/{account_id}/{gateway_id}/azure-openai/{resource_name}/{deployment_name}/chat/completions?api-version=2023-05-15'\n    if (\"azure-openai\" == paths[6]) {\n      // is azure gateway\n      return paths.slice(0, 8).concat(paths.slice(-3)).join(\"/\"); // rebuild ai gateway azure_url\n    }\n    // https://gateway.ai.cloudflare.com/v1/{account_id}/{gateway_id}/openai/chat/completions\n    if (\"openai\" == paths[6]) {\n      // is openai gateway\n      return paths.slice(0, 7).concat(paths.slice(-2)).join(\"/\"); // rebuild ai gateway openai_url\n    }\n    // https://gateway.ai.cloudflare.com/v1/{account_id}/{gateway_id}/anthropic/v1/messages \\\n    if (\"anthropic\" == paths[6]) {\n      // is anthropic gateway\n      return paths.slice(0, 7).concat(paths.slice(-2)).join(\"/\"); // rebuild ai gateway anthropic_url\n    }\n    // TODO: Amazon Bedrock, Groq, HuggingFace...\n  }\n  return fetchUrl;\n}\n"],"names":["module","exports","require","ALLOWD_PATH","Set","Object","values","OpenaiPath","handle","req","params","console","log","method","NextResponse","json","body","status","subpath","path","join","has","error","msg","authResult","auth","ModelProvider","GPT","response","requestOpenai","ListModelPath","remoteModelRes","availableModels","config","getServerSideConfig","disableGPT4","data","filter","m","id","startsWith","e","prettyObject","GET","POST","runtime","preferredRegion","routeModule","module_compiled","AppRouteRouteModule","definition","kind","route_kind","x","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","userland","route_namespaceObject","requestAsyncStorage","staticGenerationAsyncStorage","serverHooks","headerHooks","staticGenerationBailout","originalPathname","patchFetch","patch_fetch","XH","ComponentMod","route_next_edge_ssr_entry_namespaceObject","next_edge_app_route_loaderabsolutePagePath_private_next_app_dir_2Fapi_2Fopenai_2F_5B_path_5D_2Froute_ts_page_2Fapi_2Fopenai_2F_5B_path_5D_2Froute_appDirLoader_bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGb3BlbmFpJTJGJTVCLi4ucGF0aCU1RCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGb3BlbmFpJTJGJTVCLi4ucGF0aCU1RCUyRnJvdXRlJnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGb3BlbmFpJTJGJTVCLi4ucGF0aCU1RCUyRnJvdXRlLnRzJmFwcERpcj0lMkZWb2x1bWVzJTJGRCUyRmdpdGh1YiUyRkNoYXRHUFQtTmV4dC1XZWIlMkZhcHAmYXBwUGF0aHM9JTJGYXBpJTJGb3BlbmFpJTJGJTVCLi4ucGF0aCU1RCUyRnJvdXRlJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PXN0YW5kYWxvbmUmcHJlZmVycmVkUmVnaW9uPWFybjEmcHJlZmVycmVkUmVnaW9uPWJvbTEmcHJlZmVycmVkUmVnaW9uPWNkZzEmcHJlZmVycmVkUmVnaW9uPWNsZTEmcHJlZmVycmVkUmVnaW9uPWNwdDEmcHJlZmVycmVkUmVnaW9uPWR1YjEmcHJlZmVycmVkUmVnaW9uPWZyYTEmcHJlZmVycmVkUmVnaW9uPWdydTEmcHJlZmVycmVkUmVnaW9uPWhuZDEmcHJlZmVycmVkUmVnaW9uPWlhZDEmcHJlZmVycmVkUmVnaW9uPWljbjEmcHJlZmVycmVkUmVnaW9uPWtpeDEmcHJlZmVycmVkUmVnaW9uPWxocjEmcHJlZmVycmVkUmVnaW9uPXBkeDEmcHJlZmVycmVkUmVnaW9uPXNmbzEmcHJlZmVycmVkUmVnaW9uPXNpbjEmcHJlZmVycmVkUmVnaW9uPXN5ZDEmbWlkZGxld2FyZUNvbmZpZz1lMzAlM0Qh_nextConfigOutput_standalone_preferredRegion_arn1_preferredRegion_bom1_preferredRegion_cdg1_preferredRegion_cle1_preferredRegion_cpt1_preferredRegion_dub1_preferredRegion_fra1_preferredRegion_gru1_preferredRegion_hnd1_preferredRegion_iad1_preferredRegion_icn1_preferredRegion_kix1_preferredRegion_lhr1_preferredRegion_pdx1_preferredRegion_sfo1_preferredRegion_sin1_preferredRegion_syd1_middlewareConfig_e30_3D_","edge_route_module_wrapper","a","wrap","serverConfig","controller","AbortController","isAzure","nextUrl","includes","authValue","authHeaderName","headers","get","trim","replaceAll","search","baseUrl","azureUrl","OPENAI_BASE_URL","endsWith","slice","timeoutId","setTimeout","abort","azureApiVersion","searchParams","split","shift","customModels","modelName","realDeployName","v","forEach","fullName","displayName","_","providerName","deployId","fetchUrl","cloudflareAIGatewayUrl","fetchOptions","openaiOrgId","redirect","duplex","signal","clonedBody","text","jsonBody","JSON","parse","isModelAvailableInServer","model","ServiceProvider","OpenAI","Azure","message","res","fetch","openaiOrganizationHeader","newHeaders","Headers","delete","set","Response","statusText","clearTimeout","paths","concat"],"sourceRoot":""}